// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_217_000)
{
    // ABAD 0062;	
    // (ꮭ) CHEROKEE SMALL LETTER TLA	[34D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAD, 0x0062 };
    uint32_t const ces[9] = { 0x34D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_001)
{
    // 13DD 0062;	
    // (Ꮭ) CHEROKEE LETTER TLA	[34D3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DD, 0x0062 };
    uint32_t const ces[9] = { 0x34D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_002)
{
    // ABAE 0021;	
    // (ꮮ) CHEROKEE SMALL LETTER TLE	[34D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAE, 0x0021 };
    uint32_t const ces[9] = { 0x34D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_003)
{
    // 13DE 0021;	
    // (Ꮮ) CHEROKEE LETTER TLE	[34D4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DE, 0x0021 };
    uint32_t const ces[9] = { 0x34D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_004)
{
    // ABAE 003F;	
    // (ꮮ) CHEROKEE SMALL LETTER TLE	[34D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAE, 0x003F };
    uint32_t const ces[9] = { 0x34D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_005)
{
    // 13DE 003F;	
    // (Ꮮ) CHEROKEE LETTER TLE	[34D4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DE, 0x003F };
    uint32_t const ces[9] = { 0x34D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_006)
{
    // ABAE 0061;	
    // (ꮮ) CHEROKEE SMALL LETTER TLE	[34D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAE, 0x0061 };
    uint32_t const ces[9] = { 0x34D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_007)
{
    // ABAE 0041;	
    // (ꮮ) CHEROKEE SMALL LETTER TLE	[34D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABAE, 0x0041 };
    uint32_t const ces[9] = { 0x34D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_008)
{
    // 13DE 0061;	
    // (Ꮮ) CHEROKEE LETTER TLE	[34D4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DE, 0x0061 };
    uint32_t const ces[9] = { 0x34D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_009)
{
    // 13DE 0041;	
    // (Ꮮ) CHEROKEE LETTER TLE	[34D4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13DE, 0x0041 };
    uint32_t const ces[9] = { 0x34D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_010)
{
    // ABAE 0062;	
    // (ꮮ) CHEROKEE SMALL LETTER TLE	[34D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAE, 0x0062 };
    uint32_t const ces[9] = { 0x34D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_011)
{
    // 13DE 0062;	
    // (Ꮮ) CHEROKEE LETTER TLE	[34D4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DE, 0x0062 };
    uint32_t const ces[9] = { 0x34D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_012)
{
    // ABAF 0021;	
    // (ꮯ) CHEROKEE SMALL LETTER TLI	[34D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAF, 0x0021 };
    uint32_t const ces[9] = { 0x34D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_013)
{
    // 13DF 0021;	
    // (Ꮯ) CHEROKEE LETTER TLI	[34D5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DF, 0x0021 };
    uint32_t const ces[9] = { 0x34D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_014)
{
    // ABAF 003F;	
    // (ꮯ) CHEROKEE SMALL LETTER TLI	[34D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAF, 0x003F };
    uint32_t const ces[9] = { 0x34D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_015)
{
    // 13DF 003F;	
    // (Ꮯ) CHEROKEE LETTER TLI	[34D5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DF, 0x003F };
    uint32_t const ces[9] = { 0x34D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_016)
{
    // ABAF 0061;	
    // (ꮯ) CHEROKEE SMALL LETTER TLI	[34D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAF, 0x0061 };
    uint32_t const ces[9] = { 0x34D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_017)
{
    // ABAF 0041;	
    // (ꮯ) CHEROKEE SMALL LETTER TLI	[34D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABAF, 0x0041 };
    uint32_t const ces[9] = { 0x34D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_018)
{
    // 13DF 0061;	
    // (Ꮯ) CHEROKEE LETTER TLI	[34D5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DF, 0x0061 };
    uint32_t const ces[9] = { 0x34D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_019)
{
    // 13DF 0041;	
    // (Ꮯ) CHEROKEE LETTER TLI	[34D5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13DF, 0x0041 };
    uint32_t const ces[9] = { 0x34D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_020)
{
    // ABAF 0062;	
    // (ꮯ) CHEROKEE SMALL LETTER TLI	[34D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABAF, 0x0062 };
    uint32_t const ces[9] = { 0x34D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_021)
{
    // 13DF 0062;	
    // (Ꮯ) CHEROKEE LETTER TLI	[34D5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13DF, 0x0062 };
    uint32_t const ces[9] = { 0x34D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_022)
{
    // ABB0 0021;	
    // (ꮰ) CHEROKEE SMALL LETTER TLO	[34D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB0, 0x0021 };
    uint32_t const ces[9] = { 0x34D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_023)
{
    // 13E0 0021;	
    // (Ꮰ) CHEROKEE LETTER TLO	[34D6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E0, 0x0021 };
    uint32_t const ces[9] = { 0x34D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_024)
{
    // ABB0 003F;	
    // (ꮰ) CHEROKEE SMALL LETTER TLO	[34D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB0, 0x003F };
    uint32_t const ces[9] = { 0x34D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_025)
{
    // 13E0 003F;	
    // (Ꮰ) CHEROKEE LETTER TLO	[34D6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E0, 0x003F };
    uint32_t const ces[9] = { 0x34D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_026)
{
    // ABB0 0061;	
    // (ꮰ) CHEROKEE SMALL LETTER TLO	[34D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB0, 0x0061 };
    uint32_t const ces[9] = { 0x34D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_027)
{
    // ABB0 0041;	
    // (ꮰ) CHEROKEE SMALL LETTER TLO	[34D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB0, 0x0041 };
    uint32_t const ces[9] = { 0x34D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_028)
{
    // 13E0 0061;	
    // (Ꮰ) CHEROKEE LETTER TLO	[34D6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E0, 0x0061 };
    uint32_t const ces[9] = { 0x34D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_029)
{
    // 13E0 0041;	
    // (Ꮰ) CHEROKEE LETTER TLO	[34D6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E0, 0x0041 };
    uint32_t const ces[9] = { 0x34D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_030)
{
    // ABB0 0062;	
    // (ꮰ) CHEROKEE SMALL LETTER TLO	[34D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB0, 0x0062 };
    uint32_t const ces[9] = { 0x34D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_031)
{
    // 13E0 0062;	
    // (Ꮰ) CHEROKEE LETTER TLO	[34D6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E0, 0x0062 };
    uint32_t const ces[9] = { 0x34D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_032)
{
    // ABB1 0021;	
    // (ꮱ) CHEROKEE SMALL LETTER TLU	[34D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB1, 0x0021 };
    uint32_t const ces[9] = { 0x34D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_033)
{
    // 13E1 0021;	
    // (Ꮱ) CHEROKEE LETTER TLU	[34D7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E1, 0x0021 };
    uint32_t const ces[9] = { 0x34D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_034)
{
    // ABB1 003F;	
    // (ꮱ) CHEROKEE SMALL LETTER TLU	[34D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB1, 0x003F };
    uint32_t const ces[9] = { 0x34D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_035)
{
    // 13E1 003F;	
    // (Ꮱ) CHEROKEE LETTER TLU	[34D7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E1, 0x003F };
    uint32_t const ces[9] = { 0x34D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_036)
{
    // ABB1 0061;	
    // (ꮱ) CHEROKEE SMALL LETTER TLU	[34D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB1, 0x0061 };
    uint32_t const ces[9] = { 0x34D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_037)
{
    // ABB1 0041;	
    // (ꮱ) CHEROKEE SMALL LETTER TLU	[34D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB1, 0x0041 };
    uint32_t const ces[9] = { 0x34D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_038)
{
    // 13E1 0061;	
    // (Ꮱ) CHEROKEE LETTER TLU	[34D7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E1, 0x0061 };
    uint32_t const ces[9] = { 0x34D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_039)
{
    // 13E1 0041;	
    // (Ꮱ) CHEROKEE LETTER TLU	[34D7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E1, 0x0041 };
    uint32_t const ces[9] = { 0x34D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_040)
{
    // ABB1 0062;	
    // (ꮱ) CHEROKEE SMALL LETTER TLU	[34D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB1, 0x0062 };
    uint32_t const ces[9] = { 0x34D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_041)
{
    // 13E1 0062;	
    // (Ꮱ) CHEROKEE LETTER TLU	[34D7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E1, 0x0062 };
    uint32_t const ces[9] = { 0x34D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_042)
{
    // ABB2 0021;	
    // (ꮲ) CHEROKEE SMALL LETTER TLV	[34D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB2, 0x0021 };
    uint32_t const ces[9] = { 0x34D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_043)
{
    // 13E2 0021;	
    // (Ꮲ) CHEROKEE LETTER TLV	[34D8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E2, 0x0021 };
    uint32_t const ces[9] = { 0x34D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_044)
{
    // ABB2 003F;	
    // (ꮲ) CHEROKEE SMALL LETTER TLV	[34D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB2, 0x003F };
    uint32_t const ces[9] = { 0x34D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_045)
{
    // 13E2 003F;	
    // (Ꮲ) CHEROKEE LETTER TLV	[34D8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E2, 0x003F };
    uint32_t const ces[9] = { 0x34D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_046)
{
    // ABB2 0061;	
    // (ꮲ) CHEROKEE SMALL LETTER TLV	[34D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB2, 0x0061 };
    uint32_t const ces[9] = { 0x34D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_047)
{
    // ABB2 0041;	
    // (ꮲ) CHEROKEE SMALL LETTER TLV	[34D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB2, 0x0041 };
    uint32_t const ces[9] = { 0x34D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_048)
{
    // 13E2 0061;	
    // (Ꮲ) CHEROKEE LETTER TLV	[34D8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E2, 0x0061 };
    uint32_t const ces[9] = { 0x34D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_049)
{
    // 13E2 0041;	
    // (Ꮲ) CHEROKEE LETTER TLV	[34D8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E2, 0x0041 };
    uint32_t const ces[9] = { 0x34D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_050)
{
    // ABB2 0062;	
    // (ꮲ) CHEROKEE SMALL LETTER TLV	[34D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB2, 0x0062 };
    uint32_t const ces[9] = { 0x34D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_051)
{
    // 13E2 0062;	
    // (Ꮲ) CHEROKEE LETTER TLV	[34D8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E2, 0x0062 };
    uint32_t const ces[9] = { 0x34D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_052)
{
    // ABB3 0021;	
    // (ꮳ) CHEROKEE SMALL LETTER TSA	[34D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB3, 0x0021 };
    uint32_t const ces[9] = { 0x34D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_053)
{
    // 13E3 0021;	
    // (Ꮳ) CHEROKEE LETTER TSA	[34D9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E3, 0x0021 };
    uint32_t const ces[9] = { 0x34D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_054)
{
    // ABB3 003F;	
    // (ꮳ) CHEROKEE SMALL LETTER TSA	[34D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB3, 0x003F };
    uint32_t const ces[9] = { 0x34D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_055)
{
    // 13E3 003F;	
    // (Ꮳ) CHEROKEE LETTER TSA	[34D9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E3, 0x003F };
    uint32_t const ces[9] = { 0x34D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_056)
{
    // ABB3 0061;	
    // (ꮳ) CHEROKEE SMALL LETTER TSA	[34D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB3, 0x0061 };
    uint32_t const ces[9] = { 0x34D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_057)
{
    // ABB3 0041;	
    // (ꮳ) CHEROKEE SMALL LETTER TSA	[34D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB3, 0x0041 };
    uint32_t const ces[9] = { 0x34D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_058)
{
    // 13E3 0061;	
    // (Ꮳ) CHEROKEE LETTER TSA	[34D9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E3, 0x0061 };
    uint32_t const ces[9] = { 0x34D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_059)
{
    // 13E3 0041;	
    // (Ꮳ) CHEROKEE LETTER TSA	[34D9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E3, 0x0041 };
    uint32_t const ces[9] = { 0x34D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_060)
{
    // ABB3 0062;	
    // (ꮳ) CHEROKEE SMALL LETTER TSA	[34D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB3, 0x0062 };
    uint32_t const ces[9] = { 0x34D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_061)
{
    // 13E3 0062;	
    // (Ꮳ) CHEROKEE LETTER TSA	[34D9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E3, 0x0062 };
    uint32_t const ces[9] = { 0x34D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_062)
{
    // ABB4 0021;	
    // (ꮴ) CHEROKEE SMALL LETTER TSE	[34DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB4, 0x0021 };
    uint32_t const ces[9] = { 0x34DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_063)
{
    // 13E4 0021;	
    // (Ꮴ) CHEROKEE LETTER TSE	[34DA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E4, 0x0021 };
    uint32_t const ces[9] = { 0x34DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_064)
{
    // ABB4 003F;	
    // (ꮴ) CHEROKEE SMALL LETTER TSE	[34DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB4, 0x003F };
    uint32_t const ces[9] = { 0x34DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_065)
{
    // 13E4 003F;	
    // (Ꮴ) CHEROKEE LETTER TSE	[34DA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E4, 0x003F };
    uint32_t const ces[9] = { 0x34DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_066)
{
    // ABB4 0061;	
    // (ꮴ) CHEROKEE SMALL LETTER TSE	[34DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB4, 0x0061 };
    uint32_t const ces[9] = { 0x34DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_067)
{
    // ABB4 0041;	
    // (ꮴ) CHEROKEE SMALL LETTER TSE	[34DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB4, 0x0041 };
    uint32_t const ces[9] = { 0x34DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_068)
{
    // 13E4 0061;	
    // (Ꮴ) CHEROKEE LETTER TSE	[34DA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E4, 0x0061 };
    uint32_t const ces[9] = { 0x34DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_069)
{
    // 13E4 0041;	
    // (Ꮴ) CHEROKEE LETTER TSE	[34DA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E4, 0x0041 };
    uint32_t const ces[9] = { 0x34DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_070)
{
    // ABB4 0062;	
    // (ꮴ) CHEROKEE SMALL LETTER TSE	[34DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB4, 0x0062 };
    uint32_t const ces[9] = { 0x34DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_071)
{
    // 13E4 0062;	
    // (Ꮴ) CHEROKEE LETTER TSE	[34DA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E4, 0x0062 };
    uint32_t const ces[9] = { 0x34DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_072)
{
    // ABB5 0021;	
    // (ꮵ) CHEROKEE SMALL LETTER TSI	[34DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB5, 0x0021 };
    uint32_t const ces[9] = { 0x34DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_073)
{
    // 13E5 0021;	
    // (Ꮵ) CHEROKEE LETTER TSI	[34DB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E5, 0x0021 };
    uint32_t const ces[9] = { 0x34DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_074)
{
    // ABB5 003F;	
    // (ꮵ) CHEROKEE SMALL LETTER TSI	[34DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB5, 0x003F };
    uint32_t const ces[9] = { 0x34DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_075)
{
    // 13E5 003F;	
    // (Ꮵ) CHEROKEE LETTER TSI	[34DB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E5, 0x003F };
    uint32_t const ces[9] = { 0x34DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_076)
{
    // ABB5 0061;	
    // (ꮵ) CHEROKEE SMALL LETTER TSI	[34DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB5, 0x0061 };
    uint32_t const ces[9] = { 0x34DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_077)
{
    // ABB5 0041;	
    // (ꮵ) CHEROKEE SMALL LETTER TSI	[34DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB5, 0x0041 };
    uint32_t const ces[9] = { 0x34DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_078)
{
    // 13E5 0061;	
    // (Ꮵ) CHEROKEE LETTER TSI	[34DB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E5, 0x0061 };
    uint32_t const ces[9] = { 0x34DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_079)
{
    // 13E5 0041;	
    // (Ꮵ) CHEROKEE LETTER TSI	[34DB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E5, 0x0041 };
    uint32_t const ces[9] = { 0x34DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_080)
{
    // ABB5 0062;	
    // (ꮵ) CHEROKEE SMALL LETTER TSI	[34DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB5, 0x0062 };
    uint32_t const ces[9] = { 0x34DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_081)
{
    // 13E5 0062;	
    // (Ꮵ) CHEROKEE LETTER TSI	[34DB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E5, 0x0062 };
    uint32_t const ces[9] = { 0x34DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_082)
{
    // ABB6 0021;	
    // (ꮶ) CHEROKEE SMALL LETTER TSO	[34DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB6, 0x0021 };
    uint32_t const ces[9] = { 0x34DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_083)
{
    // 13E6 0021;	
    // (Ꮶ) CHEROKEE LETTER TSO	[34DC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E6, 0x0021 };
    uint32_t const ces[9] = { 0x34DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_084)
{
    // ABB6 003F;	
    // (ꮶ) CHEROKEE SMALL LETTER TSO	[34DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB6, 0x003F };
    uint32_t const ces[9] = { 0x34DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_085)
{
    // 13E6 003F;	
    // (Ꮶ) CHEROKEE LETTER TSO	[34DC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E6, 0x003F };
    uint32_t const ces[9] = { 0x34DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_086)
{
    // ABB6 0061;	
    // (ꮶ) CHEROKEE SMALL LETTER TSO	[34DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB6, 0x0061 };
    uint32_t const ces[9] = { 0x34DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_087)
{
    // ABB6 0041;	
    // (ꮶ) CHEROKEE SMALL LETTER TSO	[34DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB6, 0x0041 };
    uint32_t const ces[9] = { 0x34DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_088)
{
    // 13E6 0061;	
    // (Ꮶ) CHEROKEE LETTER TSO	[34DC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E6, 0x0061 };
    uint32_t const ces[9] = { 0x34DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_089)
{
    // 13E6 0041;	
    // (Ꮶ) CHEROKEE LETTER TSO	[34DC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E6, 0x0041 };
    uint32_t const ces[9] = { 0x34DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_090)
{
    // ABB6 0062;	
    // (ꮶ) CHEROKEE SMALL LETTER TSO	[34DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB6, 0x0062 };
    uint32_t const ces[9] = { 0x34DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_091)
{
    // 13E6 0062;	
    // (Ꮶ) CHEROKEE LETTER TSO	[34DC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E6, 0x0062 };
    uint32_t const ces[9] = { 0x34DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_092)
{
    // ABB7 0021;	
    // (ꮷ) CHEROKEE SMALL LETTER TSU	[34DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB7, 0x0021 };
    uint32_t const ces[9] = { 0x34DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_093)
{
    // 13E7 0021;	
    // (Ꮷ) CHEROKEE LETTER TSU	[34DD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E7, 0x0021 };
    uint32_t const ces[9] = { 0x34DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_094)
{
    // ABB7 003F;	
    // (ꮷ) CHEROKEE SMALL LETTER TSU	[34DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB7, 0x003F };
    uint32_t const ces[9] = { 0x34DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_095)
{
    // 13E7 003F;	
    // (Ꮷ) CHEROKEE LETTER TSU	[34DD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E7, 0x003F };
    uint32_t const ces[9] = { 0x34DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_096)
{
    // ABB7 0061;	
    // (ꮷ) CHEROKEE SMALL LETTER TSU	[34DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB7, 0x0061 };
    uint32_t const ces[9] = { 0x34DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_097)
{
    // ABB7 0041;	
    // (ꮷ) CHEROKEE SMALL LETTER TSU	[34DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB7, 0x0041 };
    uint32_t const ces[9] = { 0x34DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_098)
{
    // 13E7 0061;	
    // (Ꮷ) CHEROKEE LETTER TSU	[34DD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E7, 0x0061 };
    uint32_t const ces[9] = { 0x34DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_099)
{
    // 13E7 0041;	
    // (Ꮷ) CHEROKEE LETTER TSU	[34DD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E7, 0x0041 };
    uint32_t const ces[9] = { 0x34DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_100)
{
    // ABB7 0062;	
    // (ꮷ) CHEROKEE SMALL LETTER TSU	[34DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB7, 0x0062 };
    uint32_t const ces[9] = { 0x34DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_101)
{
    // 13E7 0062;	
    // (Ꮷ) CHEROKEE LETTER TSU	[34DD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E7, 0x0062 };
    uint32_t const ces[9] = { 0x34DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_102)
{
    // ABB8 0021;	
    // (ꮸ) CHEROKEE SMALL LETTER TSV	[34DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB8, 0x0021 };
    uint32_t const ces[9] = { 0x34DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_103)
{
    // 13E8 0021;	
    // (Ꮸ) CHEROKEE LETTER TSV	[34DE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E8, 0x0021 };
    uint32_t const ces[9] = { 0x34DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_104)
{
    // ABB8 003F;	
    // (ꮸ) CHEROKEE SMALL LETTER TSV	[34DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB8, 0x003F };
    uint32_t const ces[9] = { 0x34DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_105)
{
    // 13E8 003F;	
    // (Ꮸ) CHEROKEE LETTER TSV	[34DE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E8, 0x003F };
    uint32_t const ces[9] = { 0x34DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_106)
{
    // ABB8 0061;	
    // (ꮸ) CHEROKEE SMALL LETTER TSV	[34DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB8, 0x0061 };
    uint32_t const ces[9] = { 0x34DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_107)
{
    // ABB8 0041;	
    // (ꮸ) CHEROKEE SMALL LETTER TSV	[34DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB8, 0x0041 };
    uint32_t const ces[9] = { 0x34DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_108)
{
    // 13E8 0061;	
    // (Ꮸ) CHEROKEE LETTER TSV	[34DE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E8, 0x0061 };
    uint32_t const ces[9] = { 0x34DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_109)
{
    // 13E8 0041;	
    // (Ꮸ) CHEROKEE LETTER TSV	[34DE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E8, 0x0041 };
    uint32_t const ces[9] = { 0x34DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_110)
{
    // ABB8 0062;	
    // (ꮸ) CHEROKEE SMALL LETTER TSV	[34DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB8, 0x0062 };
    uint32_t const ces[9] = { 0x34DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_111)
{
    // 13E8 0062;	
    // (Ꮸ) CHEROKEE LETTER TSV	[34DE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E8, 0x0062 };
    uint32_t const ces[9] = { 0x34DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_112)
{
    // ABB9 0021;	
    // (ꮹ) CHEROKEE SMALL LETTER WA	[34DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB9, 0x0021 };
    uint32_t const ces[9] = { 0x34DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_113)
{
    // 13E9 0021;	
    // (Ꮹ) CHEROKEE LETTER WA	[34DF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E9, 0x0021 };
    uint32_t const ces[9] = { 0x34DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_114)
{
    // ABB9 003F;	
    // (ꮹ) CHEROKEE SMALL LETTER WA	[34DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB9, 0x003F };
    uint32_t const ces[9] = { 0x34DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_115)
{
    // 13E9 003F;	
    // (Ꮹ) CHEROKEE LETTER WA	[34DF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E9, 0x003F };
    uint32_t const ces[9] = { 0x34DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_116)
{
    // ABB9 0061;	
    // (ꮹ) CHEROKEE SMALL LETTER WA	[34DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB9, 0x0061 };
    uint32_t const ces[9] = { 0x34DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_117)
{
    // ABB9 0041;	
    // (ꮹ) CHEROKEE SMALL LETTER WA	[34DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABB9, 0x0041 };
    uint32_t const ces[9] = { 0x34DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_118)
{
    // 13E9 0061;	
    // (Ꮹ) CHEROKEE LETTER WA	[34DF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E9, 0x0061 };
    uint32_t const ces[9] = { 0x34DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_119)
{
    // 13E9 0041;	
    // (Ꮹ) CHEROKEE LETTER WA	[34DF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13E9, 0x0041 };
    uint32_t const ces[9] = { 0x34DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_120)
{
    // ABB9 0062;	
    // (ꮹ) CHEROKEE SMALL LETTER WA	[34DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABB9, 0x0062 };
    uint32_t const ces[9] = { 0x34DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_121)
{
    // 13E9 0062;	
    // (Ꮹ) CHEROKEE LETTER WA	[34DF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13E9, 0x0062 };
    uint32_t const ces[9] = { 0x34DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_122)
{
    // ABBA 0021;	
    // (ꮺ) CHEROKEE SMALL LETTER WE	[34E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBA, 0x0021 };
    uint32_t const ces[9] = { 0x34E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_123)
{
    // 13EA 0021;	
    // (Ꮺ) CHEROKEE LETTER WE	[34E0 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EA, 0x0021 };
    uint32_t const ces[9] = { 0x34E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_124)
{
    // ABBA 003F;	
    // (ꮺ) CHEROKEE SMALL LETTER WE	[34E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBA, 0x003F };
    uint32_t const ces[9] = { 0x34E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_125)
{
    // 13EA 003F;	
    // (Ꮺ) CHEROKEE LETTER WE	[34E0 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EA, 0x003F };
    uint32_t const ces[9] = { 0x34E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_126)
{
    // ABBA 0061;	
    // (ꮺ) CHEROKEE SMALL LETTER WE	[34E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBA, 0x0061 };
    uint32_t const ces[9] = { 0x34E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_127)
{
    // ABBA 0041;	
    // (ꮺ) CHEROKEE SMALL LETTER WE	[34E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABBA, 0x0041 };
    uint32_t const ces[9] = { 0x34E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_128)
{
    // 13EA 0061;	
    // (Ꮺ) CHEROKEE LETTER WE	[34E0 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EA, 0x0061 };
    uint32_t const ces[9] = { 0x34E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_129)
{
    // 13EA 0041;	
    // (Ꮺ) CHEROKEE LETTER WE	[34E0 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13EA, 0x0041 };
    uint32_t const ces[9] = { 0x34E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_130)
{
    // ABBA 0062;	
    // (ꮺ) CHEROKEE SMALL LETTER WE	[34E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBA, 0x0062 };
    uint32_t const ces[9] = { 0x34E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_131)
{
    // 13EA 0062;	
    // (Ꮺ) CHEROKEE LETTER WE	[34E0 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EA, 0x0062 };
    uint32_t const ces[9] = { 0x34E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_132)
{
    // ABBB 0021;	
    // (ꮻ) CHEROKEE SMALL LETTER WI	[34E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBB, 0x0021 };
    uint32_t const ces[9] = { 0x34E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_133)
{
    // 13EB 0021;	
    // (Ꮻ) CHEROKEE LETTER WI	[34E1 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EB, 0x0021 };
    uint32_t const ces[9] = { 0x34E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_134)
{
    // ABBB 003F;	
    // (ꮻ) CHEROKEE SMALL LETTER WI	[34E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBB, 0x003F };
    uint32_t const ces[9] = { 0x34E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_135)
{
    // 13EB 003F;	
    // (Ꮻ) CHEROKEE LETTER WI	[34E1 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EB, 0x003F };
    uint32_t const ces[9] = { 0x34E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_136)
{
    // ABBB 0061;	
    // (ꮻ) CHEROKEE SMALL LETTER WI	[34E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBB, 0x0061 };
    uint32_t const ces[9] = { 0x34E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_137)
{
    // ABBB 0041;	
    // (ꮻ) CHEROKEE SMALL LETTER WI	[34E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABBB, 0x0041 };
    uint32_t const ces[9] = { 0x34E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_138)
{
    // 13EB 0061;	
    // (Ꮻ) CHEROKEE LETTER WI	[34E1 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EB, 0x0061 };
    uint32_t const ces[9] = { 0x34E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_139)
{
    // 13EB 0041;	
    // (Ꮻ) CHEROKEE LETTER WI	[34E1 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13EB, 0x0041 };
    uint32_t const ces[9] = { 0x34E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_140)
{
    // ABBB 0062;	
    // (ꮻ) CHEROKEE SMALL LETTER WI	[34E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBB, 0x0062 };
    uint32_t const ces[9] = { 0x34E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_141)
{
    // 13EB 0062;	
    // (Ꮻ) CHEROKEE LETTER WI	[34E1 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EB, 0x0062 };
    uint32_t const ces[9] = { 0x34E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_142)
{
    // ABBC 0021;	
    // (ꮼ) CHEROKEE SMALL LETTER WO	[34E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBC, 0x0021 };
    uint32_t const ces[9] = { 0x34E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_143)
{
    // 13EC 0021;	
    // (Ꮼ) CHEROKEE LETTER WO	[34E2 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EC, 0x0021 };
    uint32_t const ces[9] = { 0x34E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_144)
{
    // ABBC 003F;	
    // (ꮼ) CHEROKEE SMALL LETTER WO	[34E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBC, 0x003F };
    uint32_t const ces[9] = { 0x34E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_145)
{
    // 13EC 003F;	
    // (Ꮼ) CHEROKEE LETTER WO	[34E2 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EC, 0x003F };
    uint32_t const ces[9] = { 0x34E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_146)
{
    // ABBC 0061;	
    // (ꮼ) CHEROKEE SMALL LETTER WO	[34E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBC, 0x0061 };
    uint32_t const ces[9] = { 0x34E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_147)
{
    // ABBC 0041;	
    // (ꮼ) CHEROKEE SMALL LETTER WO	[34E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABBC, 0x0041 };
    uint32_t const ces[9] = { 0x34E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_148)
{
    // 13EC 0061;	
    // (Ꮼ) CHEROKEE LETTER WO	[34E2 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EC, 0x0061 };
    uint32_t const ces[9] = { 0x34E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_149)
{
    // 13EC 0041;	
    // (Ꮼ) CHEROKEE LETTER WO	[34E2 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13EC, 0x0041 };
    uint32_t const ces[9] = { 0x34E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_150)
{
    // ABBC 0062;	
    // (ꮼ) CHEROKEE SMALL LETTER WO	[34E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBC, 0x0062 };
    uint32_t const ces[9] = { 0x34E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_151)
{
    // 13EC 0062;	
    // (Ꮼ) CHEROKEE LETTER WO	[34E2 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EC, 0x0062 };
    uint32_t const ces[9] = { 0x34E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_152)
{
    // ABBD 0021;	
    // (ꮽ) CHEROKEE SMALL LETTER WU	[34E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBD, 0x0021 };
    uint32_t const ces[9] = { 0x34E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_153)
{
    // 13ED 0021;	
    // (Ꮽ) CHEROKEE LETTER WU	[34E3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13ED, 0x0021 };
    uint32_t const ces[9] = { 0x34E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_154)
{
    // ABBD 003F;	
    // (ꮽ) CHEROKEE SMALL LETTER WU	[34E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBD, 0x003F };
    uint32_t const ces[9] = { 0x34E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_155)
{
    // 13ED 003F;	
    // (Ꮽ) CHEROKEE LETTER WU	[34E3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13ED, 0x003F };
    uint32_t const ces[9] = { 0x34E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_156)
{
    // ABBD 0061;	
    // (ꮽ) CHEROKEE SMALL LETTER WU	[34E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBD, 0x0061 };
    uint32_t const ces[9] = { 0x34E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_157)
{
    // ABBD 0041;	
    // (ꮽ) CHEROKEE SMALL LETTER WU	[34E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABBD, 0x0041 };
    uint32_t const ces[9] = { 0x34E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_158)
{
    // 13ED 0061;	
    // (Ꮽ) CHEROKEE LETTER WU	[34E3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13ED, 0x0061 };
    uint32_t const ces[9] = { 0x34E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_159)
{
    // 13ED 0041;	
    // (Ꮽ) CHEROKEE LETTER WU	[34E3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13ED, 0x0041 };
    uint32_t const ces[9] = { 0x34E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_160)
{
    // ABBD 0062;	
    // (ꮽ) CHEROKEE SMALL LETTER WU	[34E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBD, 0x0062 };
    uint32_t const ces[9] = { 0x34E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_161)
{
    // 13ED 0062;	
    // (Ꮽ) CHEROKEE LETTER WU	[34E3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13ED, 0x0062 };
    uint32_t const ces[9] = { 0x34E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_162)
{
    // ABBE 0021;	
    // (ꮾ) CHEROKEE SMALL LETTER WV	[34E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBE, 0x0021 };
    uint32_t const ces[9] = { 0x34E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_163)
{
    // 13EE 0021;	
    // (Ꮾ) CHEROKEE LETTER WV	[34E4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EE, 0x0021 };
    uint32_t const ces[9] = { 0x34E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_164)
{
    // ABBE 003F;	
    // (ꮾ) CHEROKEE SMALL LETTER WV	[34E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBE, 0x003F };
    uint32_t const ces[9] = { 0x34E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_165)
{
    // 13EE 003F;	
    // (Ꮾ) CHEROKEE LETTER WV	[34E4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EE, 0x003F };
    uint32_t const ces[9] = { 0x34E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_166)
{
    // ABBE 0061;	
    // (ꮾ) CHEROKEE SMALL LETTER WV	[34E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBE, 0x0061 };
    uint32_t const ces[9] = { 0x34E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_167)
{
    // ABBE 0041;	
    // (ꮾ) CHEROKEE SMALL LETTER WV	[34E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABBE, 0x0041 };
    uint32_t const ces[9] = { 0x34E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_168)
{
    // 13EE 0061;	
    // (Ꮾ) CHEROKEE LETTER WV	[34E4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EE, 0x0061 };
    uint32_t const ces[9] = { 0x34E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_169)
{
    // 13EE 0041;	
    // (Ꮾ) CHEROKEE LETTER WV	[34E4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13EE, 0x0041 };
    uint32_t const ces[9] = { 0x34E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_170)
{
    // ABBE 0062;	
    // (ꮾ) CHEROKEE SMALL LETTER WV	[34E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBE, 0x0062 };
    uint32_t const ces[9] = { 0x34E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_171)
{
    // 13EE 0062;	
    // (Ꮾ) CHEROKEE LETTER WV	[34E4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EE, 0x0062 };
    uint32_t const ces[9] = { 0x34E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_172)
{
    // ABBF 0021;	
    // (ꮿ) CHEROKEE SMALL LETTER YA	[34E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBF, 0x0021 };
    uint32_t const ces[9] = { 0x34E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_173)
{
    // 13EF 0021;	
    // (Ꮿ) CHEROKEE LETTER YA	[34E5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EF, 0x0021 };
    uint32_t const ces[9] = { 0x34E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_174)
{
    // ABBF 003F;	
    // (ꮿ) CHEROKEE SMALL LETTER YA	[34E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBF, 0x003F };
    uint32_t const ces[9] = { 0x34E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_175)
{
    // 13EF 003F;	
    // (Ꮿ) CHEROKEE LETTER YA	[34E5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EF, 0x003F };
    uint32_t const ces[9] = { 0x34E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_176)
{
    // ABBF 0061;	
    // (ꮿ) CHEROKEE SMALL LETTER YA	[34E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBF, 0x0061 };
    uint32_t const ces[9] = { 0x34E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_177)
{
    // ABBF 0041;	
    // (ꮿ) CHEROKEE SMALL LETTER YA	[34E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABBF, 0x0041 };
    uint32_t const ces[9] = { 0x34E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_178)
{
    // 13EF 0061;	
    // (Ꮿ) CHEROKEE LETTER YA	[34E5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EF, 0x0061 };
    uint32_t const ces[9] = { 0x34E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_179)
{
    // 13EF 0041;	
    // (Ꮿ) CHEROKEE LETTER YA	[34E5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13EF, 0x0041 };
    uint32_t const ces[9] = { 0x34E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_180)
{
    // ABBF 0062;	
    // (ꮿ) CHEROKEE SMALL LETTER YA	[34E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABBF, 0x0062 };
    uint32_t const ces[9] = { 0x34E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_181)
{
    // 13EF 0062;	
    // (Ꮿ) CHEROKEE LETTER YA	[34E5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13EF, 0x0062 };
    uint32_t const ces[9] = { 0x34E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_182)
{
    // 13F8 0021;	
    // (ᏸ) CHEROKEE SMALL LETTER YE	[34E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13F8, 0x0021 };
    uint32_t const ces[9] = { 0x34E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_183)
{
    // 13F0 0021;	
    // (Ᏸ) CHEROKEE LETTER YE	[34E6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F0, 0x0021 };
    uint32_t const ces[9] = { 0x34E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_184)
{
    // 13F8 003F;	
    // (ᏸ) CHEROKEE SMALL LETTER YE	[34E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13F8, 0x003F };
    uint32_t const ces[9] = { 0x34E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_185)
{
    // 13F0 003F;	
    // (Ᏸ) CHEROKEE LETTER YE	[34E6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F0, 0x003F };
    uint32_t const ces[9] = { 0x34E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_186)
{
    // 13F8 0061;	
    // (ᏸ) CHEROKEE SMALL LETTER YE	[34E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13F8, 0x0061 };
    uint32_t const ces[9] = { 0x34E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_187)
{
    // 13F8 0041;	
    // (ᏸ) CHEROKEE SMALL LETTER YE	[34E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13F8, 0x0041 };
    uint32_t const ces[9] = { 0x34E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_188)
{
    // 13F0 0061;	
    // (Ᏸ) CHEROKEE LETTER YE	[34E6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F0, 0x0061 };
    uint32_t const ces[9] = { 0x34E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_189)
{
    // 13F0 0041;	
    // (Ᏸ) CHEROKEE LETTER YE	[34E6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13F0, 0x0041 };
    uint32_t const ces[9] = { 0x34E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_190)
{
    // 13F8 0062;	
    // (ᏸ) CHEROKEE SMALL LETTER YE	[34E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13F8, 0x0062 };
    uint32_t const ces[9] = { 0x34E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_191)
{
    // 13F0 0062;	
    // (Ᏸ) CHEROKEE LETTER YE	[34E6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F0, 0x0062 };
    uint32_t const ces[9] = { 0x34E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_192)
{
    // 13F9 0021;	
    // (ᏹ) CHEROKEE SMALL LETTER YI	[34E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13F9, 0x0021 };
    uint32_t const ces[9] = { 0x34E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_193)
{
    // 13F1 0021;	
    // (Ᏹ) CHEROKEE LETTER YI	[34E7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F1, 0x0021 };
    uint32_t const ces[9] = { 0x34E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_194)
{
    // 13F9 003F;	
    // (ᏹ) CHEROKEE SMALL LETTER YI	[34E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13F9, 0x003F };
    uint32_t const ces[9] = { 0x34E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_195)
{
    // 13F1 003F;	
    // (Ᏹ) CHEROKEE LETTER YI	[34E7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F1, 0x003F };
    uint32_t const ces[9] = { 0x34E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_196)
{
    // 13F9 0061;	
    // (ᏹ) CHEROKEE SMALL LETTER YI	[34E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13F9, 0x0061 };
    uint32_t const ces[9] = { 0x34E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_197)
{
    // 13F9 0041;	
    // (ᏹ) CHEROKEE SMALL LETTER YI	[34E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13F9, 0x0041 };
    uint32_t const ces[9] = { 0x34E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_198)
{
    // 13F1 0061;	
    // (Ᏹ) CHEROKEE LETTER YI	[34E7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F1, 0x0061 };
    uint32_t const ces[9] = { 0x34E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_199)
{
    // 13F1 0041;	
    // (Ᏹ) CHEROKEE LETTER YI	[34E7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13F1, 0x0041 };
    uint32_t const ces[9] = { 0x34E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_200)
{
    // 13F9 0062;	
    // (ᏹ) CHEROKEE SMALL LETTER YI	[34E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13F9, 0x0062 };
    uint32_t const ces[9] = { 0x34E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_201)
{
    // 13F1 0062;	
    // (Ᏹ) CHEROKEE LETTER YI	[34E7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F1, 0x0062 };
    uint32_t const ces[9] = { 0x34E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_202)
{
    // 13FA 0021;	
    // (ᏺ) CHEROKEE SMALL LETTER YO	[34E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FA, 0x0021 };
    uint32_t const ces[9] = { 0x34E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_203)
{
    // 13F2 0021;	
    // (Ᏺ) CHEROKEE LETTER YO	[34E8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F2, 0x0021 };
    uint32_t const ces[9] = { 0x34E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_204)
{
    // 13FA 003F;	
    // (ᏺ) CHEROKEE SMALL LETTER YO	[34E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FA, 0x003F };
    uint32_t const ces[9] = { 0x34E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_205)
{
    // 13F2 003F;	
    // (Ᏺ) CHEROKEE LETTER YO	[34E8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F2, 0x003F };
    uint32_t const ces[9] = { 0x34E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_206)
{
    // 13FA 0061;	
    // (ᏺ) CHEROKEE SMALL LETTER YO	[34E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FA, 0x0061 };
    uint32_t const ces[9] = { 0x34E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_207)
{
    // 13FA 0041;	
    // (ᏺ) CHEROKEE SMALL LETTER YO	[34E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13FA, 0x0041 };
    uint32_t const ces[9] = { 0x34E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_208)
{
    // 13F2 0061;	
    // (Ᏺ) CHEROKEE LETTER YO	[34E8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F2, 0x0061 };
    uint32_t const ces[9] = { 0x34E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_209)
{
    // 13F2 0041;	
    // (Ᏺ) CHEROKEE LETTER YO	[34E8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13F2, 0x0041 };
    uint32_t const ces[9] = { 0x34E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_210)
{
    // 13FA 0062;	
    // (ᏺ) CHEROKEE SMALL LETTER YO	[34E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FA, 0x0062 };
    uint32_t const ces[9] = { 0x34E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_211)
{
    // 13F2 0062;	
    // (Ᏺ) CHEROKEE LETTER YO	[34E8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F2, 0x0062 };
    uint32_t const ces[9] = { 0x34E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_212)
{
    // 13FB 0021;	
    // (ᏻ) CHEROKEE SMALL LETTER YU	[34E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FB, 0x0021 };
    uint32_t const ces[9] = { 0x34E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_213)
{
    // 13F3 0021;	
    // (Ᏻ) CHEROKEE LETTER YU	[34E9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F3, 0x0021 };
    uint32_t const ces[9] = { 0x34E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_214)
{
    // 13FB 003F;	
    // (ᏻ) CHEROKEE SMALL LETTER YU	[34E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FB, 0x003F };
    uint32_t const ces[9] = { 0x34E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_215)
{
    // 13F3 003F;	
    // (Ᏻ) CHEROKEE LETTER YU	[34E9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F3, 0x003F };
    uint32_t const ces[9] = { 0x34E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_216)
{
    // 13FB 0061;	
    // (ᏻ) CHEROKEE SMALL LETTER YU	[34E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FB, 0x0061 };
    uint32_t const ces[9] = { 0x34E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_217)
{
    // 13FB 0041;	
    // (ᏻ) CHEROKEE SMALL LETTER YU	[34E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13FB, 0x0041 };
    uint32_t const ces[9] = { 0x34E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_218)
{
    // 13F3 0061;	
    // (Ᏻ) CHEROKEE LETTER YU	[34E9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F3, 0x0061 };
    uint32_t const ces[9] = { 0x34E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_219)
{
    // 13F3 0041;	
    // (Ᏻ) CHEROKEE LETTER YU	[34E9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13F3, 0x0041 };
    uint32_t const ces[9] = { 0x34E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_220)
{
    // 13FB 0062;	
    // (ᏻ) CHEROKEE SMALL LETTER YU	[34E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FB, 0x0062 };
    uint32_t const ces[9] = { 0x34E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_221)
{
    // 13F3 0062;	
    // (Ᏻ) CHEROKEE LETTER YU	[34E9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F3, 0x0062 };
    uint32_t const ces[9] = { 0x34E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_222)
{
    // 13FC 0021;	
    // (ᏼ) CHEROKEE SMALL LETTER YV	[34EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FC, 0x0021 };
    uint32_t const ces[9] = { 0x34EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_223)
{
    // 13F4 0021;	
    // (Ᏼ) CHEROKEE LETTER YV	[34EA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F4, 0x0021 };
    uint32_t const ces[9] = { 0x34EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_224)
{
    // 13FC 003F;	
    // (ᏼ) CHEROKEE SMALL LETTER YV	[34EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FC, 0x003F };
    uint32_t const ces[9] = { 0x34EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_225)
{
    // 13F4 003F;	
    // (Ᏼ) CHEROKEE LETTER YV	[34EA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F4, 0x003F };
    uint32_t const ces[9] = { 0x34EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_226)
{
    // 13FC 0061;	
    // (ᏼ) CHEROKEE SMALL LETTER YV	[34EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FC, 0x0061 };
    uint32_t const ces[9] = { 0x34EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_227)
{
    // 13FC 0041;	
    // (ᏼ) CHEROKEE SMALL LETTER YV	[34EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13FC, 0x0041 };
    uint32_t const ces[9] = { 0x34EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_228)
{
    // 13F4 0061;	
    // (Ᏼ) CHEROKEE LETTER YV	[34EA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F4, 0x0061 };
    uint32_t const ces[9] = { 0x34EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_229)
{
    // 13F4 0041;	
    // (Ᏼ) CHEROKEE LETTER YV	[34EA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13F4, 0x0041 };
    uint32_t const ces[9] = { 0x34EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_230)
{
    // 13FC 0062;	
    // (ᏼ) CHEROKEE SMALL LETTER YV	[34EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FC, 0x0062 };
    uint32_t const ces[9] = { 0x34EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_231)
{
    // 13F4 0062;	
    // (Ᏼ) CHEROKEE LETTER YV	[34EA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F4, 0x0062 };
    uint32_t const ces[9] = { 0x34EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_232)
{
    // 13FD 0021;	
    // (ᏽ) CHEROKEE SMALL LETTER MV	[34EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FD, 0x0021 };
    uint32_t const ces[9] = { 0x34EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_233)
{
    // 13F5 0021;	
    // (Ᏽ) CHEROKEE LETTER MV	[34EB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F5, 0x0021 };
    uint32_t const ces[9] = { 0x34EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_234)
{
    // 13FD 003F;	
    // (ᏽ) CHEROKEE SMALL LETTER MV	[34EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FD, 0x003F };
    uint32_t const ces[9] = { 0x34EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_235)
{
    // 13F5 003F;	
    // (Ᏽ) CHEROKEE LETTER MV	[34EB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F5, 0x003F };
    uint32_t const ces[9] = { 0x34EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_236)
{
    // 13FD 0061;	
    // (ᏽ) CHEROKEE SMALL LETTER MV	[34EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FD, 0x0061 };
    uint32_t const ces[9] = { 0x34EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_237)
{
    // 13FD 0041;	
    // (ᏽ) CHEROKEE SMALL LETTER MV	[34EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13FD, 0x0041 };
    uint32_t const ces[9] = { 0x34EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_238)
{
    // 13F5 0061;	
    // (Ᏽ) CHEROKEE LETTER MV	[34EB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F5, 0x0061 };
    uint32_t const ces[9] = { 0x34EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_239)
{
    // 13F5 0041;	
    // (Ᏽ) CHEROKEE LETTER MV	[34EB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x13F5, 0x0041 };
    uint32_t const ces[9] = { 0x34EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_240)
{
    // 13FD 0062;	
    // (ᏽ) CHEROKEE SMALL LETTER MV	[34EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13FD, 0x0062 };
    uint32_t const ces[9] = { 0x34EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_241)
{
    // 13F5 0062;	
    // (Ᏽ) CHEROKEE LETTER MV	[34EB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x13F5, 0x0062 };
    uint32_t const ces[9] = { 0x34EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_242)
{
    // 104D8 0021;	
    // (𐓘) OSAGE SMALL LETTER A	[34EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104D8, 0x0021 };
    uint32_t const ces[9] = { 0x34EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_243)
{
    // 104B0 0021;	
    // (𐒰) OSAGE CAPITAL LETTER A	[34EC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B0, 0x0021 };
    uint32_t const ces[9] = { 0x34EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_244)
{
    // 104D8 003F;	
    // (𐓘) OSAGE SMALL LETTER A	[34EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104D8, 0x003F };
    uint32_t const ces[9] = { 0x34EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_245)
{
    // 104B0 003F;	
    // (𐒰) OSAGE CAPITAL LETTER A	[34EC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B0, 0x003F };
    uint32_t const ces[9] = { 0x34EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_246)
{
    // 104D8 0061;	
    // (𐓘) OSAGE SMALL LETTER A	[34EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104D8, 0x0061 };
    uint32_t const ces[9] = { 0x34EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_247)
{
    // 104D8 0041;	
    // (𐓘) OSAGE SMALL LETTER A	[34EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104D8, 0x0041 };
    uint32_t const ces[9] = { 0x34EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_248)
{
    // 104B0 0061;	
    // (𐒰) OSAGE CAPITAL LETTER A	[34EC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B0, 0x0061 };
    uint32_t const ces[9] = { 0x34EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_249)
{
    // 104B0 0041;	
    // (𐒰) OSAGE CAPITAL LETTER A	[34EC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B0, 0x0041 };
    uint32_t const ces[9] = { 0x34EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_250)
{
    // 104D8 0062;	
    // (𐓘) OSAGE SMALL LETTER A	[34EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104D8, 0x0062 };
    uint32_t const ces[9] = { 0x34EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_251)
{
    // 104B0 0062;	
    // (𐒰) OSAGE CAPITAL LETTER A	[34EC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B0, 0x0062 };
    uint32_t const ces[9] = { 0x34EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_252)
{
    // 104D9 0021;	
    // (𐓙) OSAGE SMALL LETTER AI	[34ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104D9, 0x0021 };
    uint32_t const ces[9] = { 0x34ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_253)
{
    // 104B1 0021;	
    // (𐒱) OSAGE CAPITAL LETTER AI	[34ED 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B1, 0x0021 };
    uint32_t const ces[9] = { 0x34ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_254)
{
    // 104D9 003F;	
    // (𐓙) OSAGE SMALL LETTER AI	[34ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104D9, 0x003F };
    uint32_t const ces[9] = { 0x34ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_255)
{
    // 104B1 003F;	
    // (𐒱) OSAGE CAPITAL LETTER AI	[34ED 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B1, 0x003F };
    uint32_t const ces[9] = { 0x34ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_256)
{
    // 104D9 0061;	
    // (𐓙) OSAGE SMALL LETTER AI	[34ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104D9, 0x0061 };
    uint32_t const ces[9] = { 0x34ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_257)
{
    // 104D9 0041;	
    // (𐓙) OSAGE SMALL LETTER AI	[34ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104D9, 0x0041 };
    uint32_t const ces[9] = { 0x34ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_258)
{
    // 104B1 0061;	
    // (𐒱) OSAGE CAPITAL LETTER AI	[34ED 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B1, 0x0061 };
    uint32_t const ces[9] = { 0x34ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_259)
{
    // 104B1 0041;	
    // (𐒱) OSAGE CAPITAL LETTER AI	[34ED 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B1, 0x0041 };
    uint32_t const ces[9] = { 0x34ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_260)
{
    // 104D9 0062;	
    // (𐓙) OSAGE SMALL LETTER AI	[34ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104D9, 0x0062 };
    uint32_t const ces[9] = { 0x34ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_261)
{
    // 104B1 0062;	
    // (𐒱) OSAGE CAPITAL LETTER AI	[34ED 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B1, 0x0062 };
    uint32_t const ces[9] = { 0x34ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_262)
{
    // 104DA 0021;	
    // (𐓚) OSAGE SMALL LETTER AIN	[34EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DA, 0x0021 };
    uint32_t const ces[9] = { 0x34EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_263)
{
    // 104B2 0021;	
    // (𐒲) OSAGE CAPITAL LETTER AIN	[34EE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B2, 0x0021 };
    uint32_t const ces[9] = { 0x34EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_264)
{
    // 104DA 003F;	
    // (𐓚) OSAGE SMALL LETTER AIN	[34EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DA, 0x003F };
    uint32_t const ces[9] = { 0x34EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_265)
{
    // 104B2 003F;	
    // (𐒲) OSAGE CAPITAL LETTER AIN	[34EE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B2, 0x003F };
    uint32_t const ces[9] = { 0x34EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_266)
{
    // 104DA 0061;	
    // (𐓚) OSAGE SMALL LETTER AIN	[34EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DA, 0x0061 };
    uint32_t const ces[9] = { 0x34EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_267)
{
    // 104DA 0041;	
    // (𐓚) OSAGE SMALL LETTER AIN	[34EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104DA, 0x0041 };
    uint32_t const ces[9] = { 0x34EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_268)
{
    // 104B2 0061;	
    // (𐒲) OSAGE CAPITAL LETTER AIN	[34EE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B2, 0x0061 };
    uint32_t const ces[9] = { 0x34EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_269)
{
    // 104B2 0041;	
    // (𐒲) OSAGE CAPITAL LETTER AIN	[34EE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B2, 0x0041 };
    uint32_t const ces[9] = { 0x34EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_270)
{
    // 104DA 0062;	
    // (𐓚) OSAGE SMALL LETTER AIN	[34EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DA, 0x0062 };
    uint32_t const ces[9] = { 0x34EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_271)
{
    // 104B2 0062;	
    // (𐒲) OSAGE CAPITAL LETTER AIN	[34EE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B2, 0x0062 };
    uint32_t const ces[9] = { 0x34EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_272)
{
    // 104DB 0021;	
    // (𐓛) OSAGE SMALL LETTER AH	[34EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DB, 0x0021 };
    uint32_t const ces[9] = { 0x34EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_273)
{
    // 104B3 0021;	
    // (𐒳) OSAGE CAPITAL LETTER AH	[34EF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B3, 0x0021 };
    uint32_t const ces[9] = { 0x34EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_274)
{
    // 104DB 003F;	
    // (𐓛) OSAGE SMALL LETTER AH	[34EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DB, 0x003F };
    uint32_t const ces[9] = { 0x34EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_275)
{
    // 104B3 003F;	
    // (𐒳) OSAGE CAPITAL LETTER AH	[34EF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B3, 0x003F };
    uint32_t const ces[9] = { 0x34EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_276)
{
    // 104DB 0061;	
    // (𐓛) OSAGE SMALL LETTER AH	[34EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DB, 0x0061 };
    uint32_t const ces[9] = { 0x34EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_277)
{
    // 104DB 0041;	
    // (𐓛) OSAGE SMALL LETTER AH	[34EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104DB, 0x0041 };
    uint32_t const ces[9] = { 0x34EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_278)
{
    // 104B3 0061;	
    // (𐒳) OSAGE CAPITAL LETTER AH	[34EF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B3, 0x0061 };
    uint32_t const ces[9] = { 0x34EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_279)
{
    // 104B3 0041;	
    // (𐒳) OSAGE CAPITAL LETTER AH	[34EF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B3, 0x0041 };
    uint32_t const ces[9] = { 0x34EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_280)
{
    // 104DB 0062;	
    // (𐓛) OSAGE SMALL LETTER AH	[34EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DB, 0x0062 };
    uint32_t const ces[9] = { 0x34EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_281)
{
    // 104B3 0062;	
    // (𐒳) OSAGE CAPITAL LETTER AH	[34EF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B3, 0x0062 };
    uint32_t const ces[9] = { 0x34EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_282)
{
    // 104DC 0021;	
    // (𐓜) OSAGE SMALL LETTER BRA	[34F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DC, 0x0021 };
    uint32_t const ces[9] = { 0x34F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_283)
{
    // 104B4 0021;	
    // (𐒴) OSAGE CAPITAL LETTER BRA	[34F0 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B4, 0x0021 };
    uint32_t const ces[9] = { 0x34F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_284)
{
    // 104DC 003F;	
    // (𐓜) OSAGE SMALL LETTER BRA	[34F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DC, 0x003F };
    uint32_t const ces[9] = { 0x34F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_285)
{
    // 104B4 003F;	
    // (𐒴) OSAGE CAPITAL LETTER BRA	[34F0 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B4, 0x003F };
    uint32_t const ces[9] = { 0x34F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_286)
{
    // 104DC 0061;	
    // (𐓜) OSAGE SMALL LETTER BRA	[34F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DC, 0x0061 };
    uint32_t const ces[9] = { 0x34F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_287)
{
    // 104DC 0041;	
    // (𐓜) OSAGE SMALL LETTER BRA	[34F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104DC, 0x0041 };
    uint32_t const ces[9] = { 0x34F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_288)
{
    // 104B4 0061;	
    // (𐒴) OSAGE CAPITAL LETTER BRA	[34F0 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B4, 0x0061 };
    uint32_t const ces[9] = { 0x34F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_289)
{
    // 104B4 0041;	
    // (𐒴) OSAGE CAPITAL LETTER BRA	[34F0 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B4, 0x0041 };
    uint32_t const ces[9] = { 0x34F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_290)
{
    // 104DC 0062;	
    // (𐓜) OSAGE SMALL LETTER BRA	[34F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DC, 0x0062 };
    uint32_t const ces[9] = { 0x34F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_291)
{
    // 104B4 0062;	
    // (𐒴) OSAGE CAPITAL LETTER BRA	[34F0 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B4, 0x0062 };
    uint32_t const ces[9] = { 0x34F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_292)
{
    // 104DD 0021;	
    // (𐓝) OSAGE SMALL LETTER CHA	[34F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DD, 0x0021 };
    uint32_t const ces[9] = { 0x34F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_293)
{
    // 104B5 0021;	
    // (𐒵) OSAGE CAPITAL LETTER CHA	[34F1 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B5, 0x0021 };
    uint32_t const ces[9] = { 0x34F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_294)
{
    // 104DD 003F;	
    // (𐓝) OSAGE SMALL LETTER CHA	[34F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DD, 0x003F };
    uint32_t const ces[9] = { 0x34F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_295)
{
    // 104B5 003F;	
    // (𐒵) OSAGE CAPITAL LETTER CHA	[34F1 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B5, 0x003F };
    uint32_t const ces[9] = { 0x34F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_296)
{
    // 104DD 0061;	
    // (𐓝) OSAGE SMALL LETTER CHA	[34F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DD, 0x0061 };
    uint32_t const ces[9] = { 0x34F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_297)
{
    // 104DD 0041;	
    // (𐓝) OSAGE SMALL LETTER CHA	[34F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104DD, 0x0041 };
    uint32_t const ces[9] = { 0x34F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_298)
{
    // 104B5 0061;	
    // (𐒵) OSAGE CAPITAL LETTER CHA	[34F1 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B5, 0x0061 };
    uint32_t const ces[9] = { 0x34F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_299)
{
    // 104B5 0041;	
    // (𐒵) OSAGE CAPITAL LETTER CHA	[34F1 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B5, 0x0041 };
    uint32_t const ces[9] = { 0x34F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_300)
{
    // 104DD 0062;	
    // (𐓝) OSAGE SMALL LETTER CHA	[34F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DD, 0x0062 };
    uint32_t const ces[9] = { 0x34F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_301)
{
    // 104B5 0062;	
    // (𐒵) OSAGE CAPITAL LETTER CHA	[34F1 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B5, 0x0062 };
    uint32_t const ces[9] = { 0x34F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_302)
{
    // 104DE 0021;	
    // (𐓞) OSAGE SMALL LETTER EHCHA	[34F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DE, 0x0021 };
    uint32_t const ces[9] = { 0x34F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_303)
{
    // 104B6 0021;	
    // (𐒶) OSAGE CAPITAL LETTER EHCHA	[34F2 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B6, 0x0021 };
    uint32_t const ces[9] = { 0x34F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_304)
{
    // 104DE 003F;	
    // (𐓞) OSAGE SMALL LETTER EHCHA	[34F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DE, 0x003F };
    uint32_t const ces[9] = { 0x34F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_305)
{
    // 104B6 003F;	
    // (𐒶) OSAGE CAPITAL LETTER EHCHA	[34F2 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B6, 0x003F };
    uint32_t const ces[9] = { 0x34F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_306)
{
    // 104DE 0061;	
    // (𐓞) OSAGE SMALL LETTER EHCHA	[34F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DE, 0x0061 };
    uint32_t const ces[9] = { 0x34F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_307)
{
    // 104DE 0041;	
    // (𐓞) OSAGE SMALL LETTER EHCHA	[34F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104DE, 0x0041 };
    uint32_t const ces[9] = { 0x34F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_308)
{
    // 104B6 0061;	
    // (𐒶) OSAGE CAPITAL LETTER EHCHA	[34F2 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B6, 0x0061 };
    uint32_t const ces[9] = { 0x34F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_309)
{
    // 104B6 0041;	
    // (𐒶) OSAGE CAPITAL LETTER EHCHA	[34F2 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B6, 0x0041 };
    uint32_t const ces[9] = { 0x34F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_310)
{
    // 104DE 0062;	
    // (𐓞) OSAGE SMALL LETTER EHCHA	[34F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DE, 0x0062 };
    uint32_t const ces[9] = { 0x34F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_311)
{
    // 104B6 0062;	
    // (𐒶) OSAGE CAPITAL LETTER EHCHA	[34F2 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B6, 0x0062 };
    uint32_t const ces[9] = { 0x34F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_312)
{
    // 104DF 0021;	
    // (𐓟) OSAGE SMALL LETTER E	[34F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DF, 0x0021 };
    uint32_t const ces[9] = { 0x34F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_313)
{
    // 104B7 0021;	
    // (𐒷) OSAGE CAPITAL LETTER E	[34F3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B7, 0x0021 };
    uint32_t const ces[9] = { 0x34F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_314)
{
    // 104DF 003F;	
    // (𐓟) OSAGE SMALL LETTER E	[34F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DF, 0x003F };
    uint32_t const ces[9] = { 0x34F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_315)
{
    // 104B7 003F;	
    // (𐒷) OSAGE CAPITAL LETTER E	[34F3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B7, 0x003F };
    uint32_t const ces[9] = { 0x34F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_316)
{
    // 104DF 0061;	
    // (𐓟) OSAGE SMALL LETTER E	[34F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DF, 0x0061 };
    uint32_t const ces[9] = { 0x34F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_317)
{
    // 104DF 0041;	
    // (𐓟) OSAGE SMALL LETTER E	[34F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104DF, 0x0041 };
    uint32_t const ces[9] = { 0x34F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_318)
{
    // 104B7 0061;	
    // (𐒷) OSAGE CAPITAL LETTER E	[34F3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B7, 0x0061 };
    uint32_t const ces[9] = { 0x34F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_319)
{
    // 104B7 0041;	
    // (𐒷) OSAGE CAPITAL LETTER E	[34F3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B7, 0x0041 };
    uint32_t const ces[9] = { 0x34F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_320)
{
    // 104DF 0062;	
    // (𐓟) OSAGE SMALL LETTER E	[34F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104DF, 0x0062 };
    uint32_t const ces[9] = { 0x34F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_321)
{
    // 104B7 0062;	
    // (𐒷) OSAGE CAPITAL LETTER E	[34F3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B7, 0x0062 };
    uint32_t const ces[9] = { 0x34F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_322)
{
    // 104E0 0021;	
    // (𐓠) OSAGE SMALL LETTER EIN	[34F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E0, 0x0021 };
    uint32_t const ces[9] = { 0x34F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_323)
{
    // 104B8 0021;	
    // (𐒸) OSAGE CAPITAL LETTER EIN	[34F4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B8, 0x0021 };
    uint32_t const ces[9] = { 0x34F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_324)
{
    // 104E0 003F;	
    // (𐓠) OSAGE SMALL LETTER EIN	[34F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E0, 0x003F };
    uint32_t const ces[9] = { 0x34F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_325)
{
    // 104B8 003F;	
    // (𐒸) OSAGE CAPITAL LETTER EIN	[34F4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B8, 0x003F };
    uint32_t const ces[9] = { 0x34F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_326)
{
    // 104E0 0061;	
    // (𐓠) OSAGE SMALL LETTER EIN	[34F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E0, 0x0061 };
    uint32_t const ces[9] = { 0x34F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_327)
{
    // 104E0 0041;	
    // (𐓠) OSAGE SMALL LETTER EIN	[34F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E0, 0x0041 };
    uint32_t const ces[9] = { 0x34F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_328)
{
    // 104B8 0061;	
    // (𐒸) OSAGE CAPITAL LETTER EIN	[34F4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B8, 0x0061 };
    uint32_t const ces[9] = { 0x34F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_329)
{
    // 104B8 0041;	
    // (𐒸) OSAGE CAPITAL LETTER EIN	[34F4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B8, 0x0041 };
    uint32_t const ces[9] = { 0x34F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_330)
{
    // 104E0 0062;	
    // (𐓠) OSAGE SMALL LETTER EIN	[34F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E0, 0x0062 };
    uint32_t const ces[9] = { 0x34F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_331)
{
    // 104B8 0062;	
    // (𐒸) OSAGE CAPITAL LETTER EIN	[34F4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B8, 0x0062 };
    uint32_t const ces[9] = { 0x34F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_332)
{
    // 104E1 0021;	
    // (𐓡) OSAGE SMALL LETTER HA	[34F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E1, 0x0021 };
    uint32_t const ces[9] = { 0x34F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_333)
{
    // 104B9 0021;	
    // (𐒹) OSAGE CAPITAL LETTER HA	[34F5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B9, 0x0021 };
    uint32_t const ces[9] = { 0x34F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_334)
{
    // 104E1 003F;	
    // (𐓡) OSAGE SMALL LETTER HA	[34F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E1, 0x003F };
    uint32_t const ces[9] = { 0x34F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_335)
{
    // 104B9 003F;	
    // (𐒹) OSAGE CAPITAL LETTER HA	[34F5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B9, 0x003F };
    uint32_t const ces[9] = { 0x34F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_336)
{
    // 104E1 0061;	
    // (𐓡) OSAGE SMALL LETTER HA	[34F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E1, 0x0061 };
    uint32_t const ces[9] = { 0x34F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_337)
{
    // 104E1 0041;	
    // (𐓡) OSAGE SMALL LETTER HA	[34F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E1, 0x0041 };
    uint32_t const ces[9] = { 0x34F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_338)
{
    // 104B9 0061;	
    // (𐒹) OSAGE CAPITAL LETTER HA	[34F5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B9, 0x0061 };
    uint32_t const ces[9] = { 0x34F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_339)
{
    // 104B9 0041;	
    // (𐒹) OSAGE CAPITAL LETTER HA	[34F5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104B9, 0x0041 };
    uint32_t const ces[9] = { 0x34F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_340)
{
    // 104E1 0062;	
    // (𐓡) OSAGE SMALL LETTER HA	[34F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E1, 0x0062 };
    uint32_t const ces[9] = { 0x34F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_341)
{
    // 104B9 0062;	
    // (𐒹) OSAGE CAPITAL LETTER HA	[34F5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104B9, 0x0062 };
    uint32_t const ces[9] = { 0x34F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_342)
{
    // 104E2 0021;	
    // (𐓢) OSAGE SMALL LETTER HYA	[34F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E2, 0x0021 };
    uint32_t const ces[9] = { 0x34F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_343)
{
    // 104BA 0021;	
    // (𐒺) OSAGE CAPITAL LETTER HYA	[34F6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BA, 0x0021 };
    uint32_t const ces[9] = { 0x34F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_344)
{
    // 104E2 003F;	
    // (𐓢) OSAGE SMALL LETTER HYA	[34F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E2, 0x003F };
    uint32_t const ces[9] = { 0x34F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_345)
{
    // 104BA 003F;	
    // (𐒺) OSAGE CAPITAL LETTER HYA	[34F6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BA, 0x003F };
    uint32_t const ces[9] = { 0x34F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_346)
{
    // 104E2 0061;	
    // (𐓢) OSAGE SMALL LETTER HYA	[34F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E2, 0x0061 };
    uint32_t const ces[9] = { 0x34F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_347)
{
    // 104E2 0041;	
    // (𐓢) OSAGE SMALL LETTER HYA	[34F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E2, 0x0041 };
    uint32_t const ces[9] = { 0x34F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_348)
{
    // 104BA 0061;	
    // (𐒺) OSAGE CAPITAL LETTER HYA	[34F6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BA, 0x0061 };
    uint32_t const ces[9] = { 0x34F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_349)
{
    // 104BA 0041;	
    // (𐒺) OSAGE CAPITAL LETTER HYA	[34F6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104BA, 0x0041 };
    uint32_t const ces[9] = { 0x34F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_350)
{
    // 104E2 0062;	
    // (𐓢) OSAGE SMALL LETTER HYA	[34F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E2, 0x0062 };
    uint32_t const ces[9] = { 0x34F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_351)
{
    // 104BA 0062;	
    // (𐒺) OSAGE CAPITAL LETTER HYA	[34F6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BA, 0x0062 };
    uint32_t const ces[9] = { 0x34F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_352)
{
    // 104E3 0021;	
    // (𐓣) OSAGE SMALL LETTER I	[34F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E3, 0x0021 };
    uint32_t const ces[9] = { 0x34F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_353)
{
    // 104BB 0021;	
    // (𐒻) OSAGE CAPITAL LETTER I	[34F7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BB, 0x0021 };
    uint32_t const ces[9] = { 0x34F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_354)
{
    // 104E3 003F;	
    // (𐓣) OSAGE SMALL LETTER I	[34F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E3, 0x003F };
    uint32_t const ces[9] = { 0x34F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_355)
{
    // 104BB 003F;	
    // (𐒻) OSAGE CAPITAL LETTER I	[34F7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BB, 0x003F };
    uint32_t const ces[9] = { 0x34F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_356)
{
    // 104E3 0061;	
    // (𐓣) OSAGE SMALL LETTER I	[34F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E3, 0x0061 };
    uint32_t const ces[9] = { 0x34F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_357)
{
    // 104E3 0041;	
    // (𐓣) OSAGE SMALL LETTER I	[34F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E3, 0x0041 };
    uint32_t const ces[9] = { 0x34F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_358)
{
    // 104BB 0061;	
    // (𐒻) OSAGE CAPITAL LETTER I	[34F7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BB, 0x0061 };
    uint32_t const ces[9] = { 0x34F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_359)
{
    // 104BB 0041;	
    // (𐒻) OSAGE CAPITAL LETTER I	[34F7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104BB, 0x0041 };
    uint32_t const ces[9] = { 0x34F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_360)
{
    // 104E3 0062;	
    // (𐓣) OSAGE SMALL LETTER I	[34F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E3, 0x0062 };
    uint32_t const ces[9] = { 0x34F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_361)
{
    // 104BB 0062;	
    // (𐒻) OSAGE CAPITAL LETTER I	[34F7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BB, 0x0062 };
    uint32_t const ces[9] = { 0x34F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_362)
{
    // 104E4 0021;	
    // (𐓤) OSAGE SMALL LETTER KA	[34F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E4, 0x0021 };
    uint32_t const ces[9] = { 0x34F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_363)
{
    // 104BC 0021;	
    // (𐒼) OSAGE CAPITAL LETTER KA	[34F8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BC, 0x0021 };
    uint32_t const ces[9] = { 0x34F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_364)
{
    // 104E4 003F;	
    // (𐓤) OSAGE SMALL LETTER KA	[34F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E4, 0x003F };
    uint32_t const ces[9] = { 0x34F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_365)
{
    // 104BC 003F;	
    // (𐒼) OSAGE CAPITAL LETTER KA	[34F8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BC, 0x003F };
    uint32_t const ces[9] = { 0x34F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_366)
{
    // 104E4 0061;	
    // (𐓤) OSAGE SMALL LETTER KA	[34F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E4, 0x0061 };
    uint32_t const ces[9] = { 0x34F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_367)
{
    // 104E4 0041;	
    // (𐓤) OSAGE SMALL LETTER KA	[34F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E4, 0x0041 };
    uint32_t const ces[9] = { 0x34F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_368)
{
    // 104BC 0061;	
    // (𐒼) OSAGE CAPITAL LETTER KA	[34F8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BC, 0x0061 };
    uint32_t const ces[9] = { 0x34F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_369)
{
    // 104BC 0041;	
    // (𐒼) OSAGE CAPITAL LETTER KA	[34F8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104BC, 0x0041 };
    uint32_t const ces[9] = { 0x34F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_370)
{
    // 104E4 0062;	
    // (𐓤) OSAGE SMALL LETTER KA	[34F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E4, 0x0062 };
    uint32_t const ces[9] = { 0x34F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_371)
{
    // 104BC 0062;	
    // (𐒼) OSAGE CAPITAL LETTER KA	[34F8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BC, 0x0062 };
    uint32_t const ces[9] = { 0x34F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_372)
{
    // 104E5 0021;	
    // (𐓥) OSAGE SMALL LETTER EHKA	[34F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E5, 0x0021 };
    uint32_t const ces[9] = { 0x34F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_373)
{
    // 104BD 0021;	
    // (𐒽) OSAGE CAPITAL LETTER EHKA	[34F9 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BD, 0x0021 };
    uint32_t const ces[9] = { 0x34F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_374)
{
    // 104E5 003F;	
    // (𐓥) OSAGE SMALL LETTER EHKA	[34F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E5, 0x003F };
    uint32_t const ces[9] = { 0x34F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_375)
{
    // 104BD 003F;	
    // (𐒽) OSAGE CAPITAL LETTER EHKA	[34F9 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BD, 0x003F };
    uint32_t const ces[9] = { 0x34F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_376)
{
    // 104E5 0061;	
    // (𐓥) OSAGE SMALL LETTER EHKA	[34F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E5, 0x0061 };
    uint32_t const ces[9] = { 0x34F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_377)
{
    // 104E5 0041;	
    // (𐓥) OSAGE SMALL LETTER EHKA	[34F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E5, 0x0041 };
    uint32_t const ces[9] = { 0x34F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_378)
{
    // 104BD 0061;	
    // (𐒽) OSAGE CAPITAL LETTER EHKA	[34F9 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BD, 0x0061 };
    uint32_t const ces[9] = { 0x34F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_379)
{
    // 104BD 0041;	
    // (𐒽) OSAGE CAPITAL LETTER EHKA	[34F9 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104BD, 0x0041 };
    uint32_t const ces[9] = { 0x34F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_380)
{
    // 104E5 0062;	
    // (𐓥) OSAGE SMALL LETTER EHKA	[34F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E5, 0x0062 };
    uint32_t const ces[9] = { 0x34F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_381)
{
    // 104BD 0062;	
    // (𐒽) OSAGE CAPITAL LETTER EHKA	[34F9 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BD, 0x0062 };
    uint32_t const ces[9] = { 0x34F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_382)
{
    // 104E6 0021;	
    // (𐓦) OSAGE SMALL LETTER KYA	[34FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E6, 0x0021 };
    uint32_t const ces[9] = { 0x34FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_383)
{
    // 104BE 0021;	
    // (𐒾) OSAGE CAPITAL LETTER KYA	[34FA 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BE, 0x0021 };
    uint32_t const ces[9] = { 0x34FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_384)
{
    // 104E6 003F;	
    // (𐓦) OSAGE SMALL LETTER KYA	[34FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E6, 0x003F };
    uint32_t const ces[9] = { 0x34FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_385)
{
    // 104BE 003F;	
    // (𐒾) OSAGE CAPITAL LETTER KYA	[34FA 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BE, 0x003F };
    uint32_t const ces[9] = { 0x34FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_386)
{
    // 104E6 0061;	
    // (𐓦) OSAGE SMALL LETTER KYA	[34FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E6, 0x0061 };
    uint32_t const ces[9] = { 0x34FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_387)
{
    // 104E6 0041;	
    // (𐓦) OSAGE SMALL LETTER KYA	[34FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E6, 0x0041 };
    uint32_t const ces[9] = { 0x34FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_388)
{
    // 104BE 0061;	
    // (𐒾) OSAGE CAPITAL LETTER KYA	[34FA 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BE, 0x0061 };
    uint32_t const ces[9] = { 0x34FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_389)
{
    // 104BE 0041;	
    // (𐒾) OSAGE CAPITAL LETTER KYA	[34FA 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104BE, 0x0041 };
    uint32_t const ces[9] = { 0x34FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_390)
{
    // 104E6 0062;	
    // (𐓦) OSAGE SMALL LETTER KYA	[34FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E6, 0x0062 };
    uint32_t const ces[9] = { 0x34FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_391)
{
    // 104BE 0062;	
    // (𐒾) OSAGE CAPITAL LETTER KYA	[34FA 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BE, 0x0062 };
    uint32_t const ces[9] = { 0x34FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_392)
{
    // 104E7 0021;	
    // (𐓧) OSAGE SMALL LETTER LA	[34FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E7, 0x0021 };
    uint32_t const ces[9] = { 0x34FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_393)
{
    // 104BF 0021;	
    // (𐒿) OSAGE CAPITAL LETTER LA	[34FB 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BF, 0x0021 };
    uint32_t const ces[9] = { 0x34FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_394)
{
    // 104E7 003F;	
    // (𐓧) OSAGE SMALL LETTER LA	[34FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E7, 0x003F };
    uint32_t const ces[9] = { 0x34FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_395)
{
    // 104BF 003F;	
    // (𐒿) OSAGE CAPITAL LETTER LA	[34FB 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BF, 0x003F };
    uint32_t const ces[9] = { 0x34FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_396)
{
    // 104E7 0061;	
    // (𐓧) OSAGE SMALL LETTER LA	[34FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E7, 0x0061 };
    uint32_t const ces[9] = { 0x34FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_397)
{
    // 104E7 0041;	
    // (𐓧) OSAGE SMALL LETTER LA	[34FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E7, 0x0041 };
    uint32_t const ces[9] = { 0x34FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_398)
{
    // 104BF 0061;	
    // (𐒿) OSAGE CAPITAL LETTER LA	[34FB 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BF, 0x0061 };
    uint32_t const ces[9] = { 0x34FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_399)
{
    // 104BF 0041;	
    // (𐒿) OSAGE CAPITAL LETTER LA	[34FB 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104BF, 0x0041 };
    uint32_t const ces[9] = { 0x34FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_400)
{
    // 104E7 0062;	
    // (𐓧) OSAGE SMALL LETTER LA	[34FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E7, 0x0062 };
    uint32_t const ces[9] = { 0x34FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_401)
{
    // 104BF 0062;	
    // (𐒿) OSAGE CAPITAL LETTER LA	[34FB 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104BF, 0x0062 };
    uint32_t const ces[9] = { 0x34FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_402)
{
    // 104E8 0021;	
    // (𐓨) OSAGE SMALL LETTER MA	[34FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E8, 0x0021 };
    uint32_t const ces[9] = { 0x34FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_403)
{
    // 104C0 0021;	
    // (𐓀) OSAGE CAPITAL LETTER MA	[34FC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C0, 0x0021 };
    uint32_t const ces[9] = { 0x34FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_404)
{
    // 104E8 003F;	
    // (𐓨) OSAGE SMALL LETTER MA	[34FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E8, 0x003F };
    uint32_t const ces[9] = { 0x34FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_405)
{
    // 104C0 003F;	
    // (𐓀) OSAGE CAPITAL LETTER MA	[34FC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C0, 0x003F };
    uint32_t const ces[9] = { 0x34FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_406)
{
    // 104E8 0061;	
    // (𐓨) OSAGE SMALL LETTER MA	[34FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E8, 0x0061 };
    uint32_t const ces[9] = { 0x34FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_407)
{
    // 104E8 0041;	
    // (𐓨) OSAGE SMALL LETTER MA	[34FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E8, 0x0041 };
    uint32_t const ces[9] = { 0x34FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_408)
{
    // 104C0 0061;	
    // (𐓀) OSAGE CAPITAL LETTER MA	[34FC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C0, 0x0061 };
    uint32_t const ces[9] = { 0x34FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_409)
{
    // 104C0 0041;	
    // (𐓀) OSAGE CAPITAL LETTER MA	[34FC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C0, 0x0041 };
    uint32_t const ces[9] = { 0x34FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_410)
{
    // 104E8 0062;	
    // (𐓨) OSAGE SMALL LETTER MA	[34FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E8, 0x0062 };
    uint32_t const ces[9] = { 0x34FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_411)
{
    // 104C0 0062;	
    // (𐓀) OSAGE CAPITAL LETTER MA	[34FC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C0, 0x0062 };
    uint32_t const ces[9] = { 0x34FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_412)
{
    // 104E9 0021;	
    // (𐓩) OSAGE SMALL LETTER NA	[34FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E9, 0x0021 };
    uint32_t const ces[9] = { 0x34FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_413)
{
    // 104C1 0021;	
    // (𐓁) OSAGE CAPITAL LETTER NA	[34FD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C1, 0x0021 };
    uint32_t const ces[9] = { 0x34FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_414)
{
    // 104E9 003F;	
    // (𐓩) OSAGE SMALL LETTER NA	[34FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E9, 0x003F };
    uint32_t const ces[9] = { 0x34FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_415)
{
    // 104C1 003F;	
    // (𐓁) OSAGE CAPITAL LETTER NA	[34FD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C1, 0x003F };
    uint32_t const ces[9] = { 0x34FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_416)
{
    // 104E9 0061;	
    // (𐓩) OSAGE SMALL LETTER NA	[34FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E9, 0x0061 };
    uint32_t const ces[9] = { 0x34FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_417)
{
    // 104E9 0041;	
    // (𐓩) OSAGE SMALL LETTER NA	[34FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104E9, 0x0041 };
    uint32_t const ces[9] = { 0x34FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_418)
{
    // 104C1 0061;	
    // (𐓁) OSAGE CAPITAL LETTER NA	[34FD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C1, 0x0061 };
    uint32_t const ces[9] = { 0x34FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_419)
{
    // 104C1 0041;	
    // (𐓁) OSAGE CAPITAL LETTER NA	[34FD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C1, 0x0041 };
    uint32_t const ces[9] = { 0x34FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_420)
{
    // 104E9 0062;	
    // (𐓩) OSAGE SMALL LETTER NA	[34FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104E9, 0x0062 };
    uint32_t const ces[9] = { 0x34FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_421)
{
    // 104C1 0062;	
    // (𐓁) OSAGE CAPITAL LETTER NA	[34FD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C1, 0x0062 };
    uint32_t const ces[9] = { 0x34FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_422)
{
    // 104EA 0021;	
    // (𐓪) OSAGE SMALL LETTER O	[34FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EA, 0x0021 };
    uint32_t const ces[9] = { 0x34FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_423)
{
    // 104C2 0021;	
    // (𐓂) OSAGE CAPITAL LETTER O	[34FE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C2, 0x0021 };
    uint32_t const ces[9] = { 0x34FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_424)
{
    // 104EA 003F;	
    // (𐓪) OSAGE SMALL LETTER O	[34FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EA, 0x003F };
    uint32_t const ces[9] = { 0x34FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_425)
{
    // 104C2 003F;	
    // (𐓂) OSAGE CAPITAL LETTER O	[34FE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C2, 0x003F };
    uint32_t const ces[9] = { 0x34FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_426)
{
    // 104EA 0061;	
    // (𐓪) OSAGE SMALL LETTER O	[34FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EA, 0x0061 };
    uint32_t const ces[9] = { 0x34FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_427)
{
    // 104EA 0041;	
    // (𐓪) OSAGE SMALL LETTER O	[34FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104EA, 0x0041 };
    uint32_t const ces[9] = { 0x34FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_428)
{
    // 104C2 0061;	
    // (𐓂) OSAGE CAPITAL LETTER O	[34FE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C2, 0x0061 };
    uint32_t const ces[9] = { 0x34FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_429)
{
    // 104C2 0041;	
    // (𐓂) OSAGE CAPITAL LETTER O	[34FE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C2, 0x0041 };
    uint32_t const ces[9] = { 0x34FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_430)
{
    // 104EA 0062;	
    // (𐓪) OSAGE SMALL LETTER O	[34FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EA, 0x0062 };
    uint32_t const ces[9] = { 0x34FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_431)
{
    // 104C2 0062;	
    // (𐓂) OSAGE CAPITAL LETTER O	[34FE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C2, 0x0062 };
    uint32_t const ces[9] = { 0x34FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_432)
{
    // 104EB 0021;	
    // (𐓫) OSAGE SMALL LETTER OIN	[34FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EB, 0x0021 };
    uint32_t const ces[9] = { 0x34FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_433)
{
    // 104C3 0021;	
    // (𐓃) OSAGE CAPITAL LETTER OIN	[34FF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C3, 0x0021 };
    uint32_t const ces[9] = { 0x34FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_434)
{
    // 104EB 003F;	
    // (𐓫) OSAGE SMALL LETTER OIN	[34FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EB, 0x003F };
    uint32_t const ces[9] = { 0x34FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_435)
{
    // 104C3 003F;	
    // (𐓃) OSAGE CAPITAL LETTER OIN	[34FF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C3, 0x003F };
    uint32_t const ces[9] = { 0x34FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_436)
{
    // 104EB 0061;	
    // (𐓫) OSAGE SMALL LETTER OIN	[34FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EB, 0x0061 };
    uint32_t const ces[9] = { 0x34FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_437)
{
    // 104EB 0041;	
    // (𐓫) OSAGE SMALL LETTER OIN	[34FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104EB, 0x0041 };
    uint32_t const ces[9] = { 0x34FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_438)
{
    // 104C3 0061;	
    // (𐓃) OSAGE CAPITAL LETTER OIN	[34FF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C3, 0x0061 };
    uint32_t const ces[9] = { 0x34FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_439)
{
    // 104C3 0041;	
    // (𐓃) OSAGE CAPITAL LETTER OIN	[34FF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C3, 0x0041 };
    uint32_t const ces[9] = { 0x34FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_440)
{
    // 104EB 0062;	
    // (𐓫) OSAGE SMALL LETTER OIN	[34FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EB, 0x0062 };
    uint32_t const ces[9] = { 0x34FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_441)
{
    // 104C3 0062;	
    // (𐓃) OSAGE CAPITAL LETTER OIN	[34FF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C3, 0x0062 };
    uint32_t const ces[9] = { 0x34FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_442)
{
    // 104EC 0021;	
    // (𐓬) OSAGE SMALL LETTER PA	[3500 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EC, 0x0021 };
    uint32_t const ces[9] = { 0x3500, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_443)
{
    // 104C4 0021;	
    // (𐓄) OSAGE CAPITAL LETTER PA	[3500 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C4, 0x0021 };
    uint32_t const ces[9] = { 0x3500, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_444)
{
    // 104EC 003F;	
    // (𐓬) OSAGE SMALL LETTER PA	[3500 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EC, 0x003F };
    uint32_t const ces[9] = { 0x3500, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_445)
{
    // 104C4 003F;	
    // (𐓄) OSAGE CAPITAL LETTER PA	[3500 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C4, 0x003F };
    uint32_t const ces[9] = { 0x3500, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_446)
{
    // 104EC 0061;	
    // (𐓬) OSAGE SMALL LETTER PA	[3500 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EC, 0x0061 };
    uint32_t const ces[9] = { 0x3500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_447)
{
    // 104EC 0041;	
    // (𐓬) OSAGE SMALL LETTER PA	[3500 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104EC, 0x0041 };
    uint32_t const ces[9] = { 0x3500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_448)
{
    // 104C4 0061;	
    // (𐓄) OSAGE CAPITAL LETTER PA	[3500 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C4, 0x0061 };
    uint32_t const ces[9] = { 0x3500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_449)
{
    // 104C4 0041;	
    // (𐓄) OSAGE CAPITAL LETTER PA	[3500 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C4, 0x0041 };
    uint32_t const ces[9] = { 0x3500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_450)
{
    // 104EC 0062;	
    // (𐓬) OSAGE SMALL LETTER PA	[3500 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EC, 0x0062 };
    uint32_t const ces[9] = { 0x3500, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_451)
{
    // 104C4 0062;	
    // (𐓄) OSAGE CAPITAL LETTER PA	[3500 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C4, 0x0062 };
    uint32_t const ces[9] = { 0x3500, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_452)
{
    // 104ED 0021;	
    // (𐓭) OSAGE SMALL LETTER EHPA	[3501 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104ED, 0x0021 };
    uint32_t const ces[9] = { 0x3501, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_453)
{
    // 104C5 0021;	
    // (𐓅) OSAGE CAPITAL LETTER EHPA	[3501 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C5, 0x0021 };
    uint32_t const ces[9] = { 0x3501, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_454)
{
    // 104ED 003F;	
    // (𐓭) OSAGE SMALL LETTER EHPA	[3501 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104ED, 0x003F };
    uint32_t const ces[9] = { 0x3501, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_455)
{
    // 104C5 003F;	
    // (𐓅) OSAGE CAPITAL LETTER EHPA	[3501 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C5, 0x003F };
    uint32_t const ces[9] = { 0x3501, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_456)
{
    // 104ED 0061;	
    // (𐓭) OSAGE SMALL LETTER EHPA	[3501 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104ED, 0x0061 };
    uint32_t const ces[9] = { 0x3501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_457)
{
    // 104ED 0041;	
    // (𐓭) OSAGE SMALL LETTER EHPA	[3501 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104ED, 0x0041 };
    uint32_t const ces[9] = { 0x3501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_458)
{
    // 104C5 0061;	
    // (𐓅) OSAGE CAPITAL LETTER EHPA	[3501 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C5, 0x0061 };
    uint32_t const ces[9] = { 0x3501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_459)
{
    // 104C5 0041;	
    // (𐓅) OSAGE CAPITAL LETTER EHPA	[3501 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C5, 0x0041 };
    uint32_t const ces[9] = { 0x3501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_460)
{
    // 104ED 0062;	
    // (𐓭) OSAGE SMALL LETTER EHPA	[3501 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104ED, 0x0062 };
    uint32_t const ces[9] = { 0x3501, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_461)
{
    // 104C5 0062;	
    // (𐓅) OSAGE CAPITAL LETTER EHPA	[3501 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C5, 0x0062 };
    uint32_t const ces[9] = { 0x3501, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_462)
{
    // 104EE 0021;	
    // (𐓮) OSAGE SMALL LETTER SA	[3502 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EE, 0x0021 };
    uint32_t const ces[9] = { 0x3502, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_463)
{
    // 104C6 0021;	
    // (𐓆) OSAGE CAPITAL LETTER SA	[3502 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C6, 0x0021 };
    uint32_t const ces[9] = { 0x3502, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_464)
{
    // 104EE 003F;	
    // (𐓮) OSAGE SMALL LETTER SA	[3502 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EE, 0x003F };
    uint32_t const ces[9] = { 0x3502, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_465)
{
    // 104C6 003F;	
    // (𐓆) OSAGE CAPITAL LETTER SA	[3502 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C6, 0x003F };
    uint32_t const ces[9] = { 0x3502, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_466)
{
    // 104EE 0061;	
    // (𐓮) OSAGE SMALL LETTER SA	[3502 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EE, 0x0061 };
    uint32_t const ces[9] = { 0x3502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_467)
{
    // 104EE 0041;	
    // (𐓮) OSAGE SMALL LETTER SA	[3502 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104EE, 0x0041 };
    uint32_t const ces[9] = { 0x3502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_468)
{
    // 104C6 0061;	
    // (𐓆) OSAGE CAPITAL LETTER SA	[3502 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C6, 0x0061 };
    uint32_t const ces[9] = { 0x3502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_469)
{
    // 104C6 0041;	
    // (𐓆) OSAGE CAPITAL LETTER SA	[3502 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C6, 0x0041 };
    uint32_t const ces[9] = { 0x3502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_470)
{
    // 104EE 0062;	
    // (𐓮) OSAGE SMALL LETTER SA	[3502 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EE, 0x0062 };
    uint32_t const ces[9] = { 0x3502, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_471)
{
    // 104C6 0062;	
    // (𐓆) OSAGE CAPITAL LETTER SA	[3502 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C6, 0x0062 };
    uint32_t const ces[9] = { 0x3502, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_472)
{
    // 104EF 0021;	
    // (𐓯) OSAGE SMALL LETTER SHA	[3503 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EF, 0x0021 };
    uint32_t const ces[9] = { 0x3503, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_473)
{
    // 104C7 0021;	
    // (𐓇) OSAGE CAPITAL LETTER SHA	[3503 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C7, 0x0021 };
    uint32_t const ces[9] = { 0x3503, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_474)
{
    // 104EF 003F;	
    // (𐓯) OSAGE SMALL LETTER SHA	[3503 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EF, 0x003F };
    uint32_t const ces[9] = { 0x3503, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_475)
{
    // 104C7 003F;	
    // (𐓇) OSAGE CAPITAL LETTER SHA	[3503 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C7, 0x003F };
    uint32_t const ces[9] = { 0x3503, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_476)
{
    // 104EF 0061;	
    // (𐓯) OSAGE SMALL LETTER SHA	[3503 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EF, 0x0061 };
    uint32_t const ces[9] = { 0x3503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_477)
{
    // 104EF 0041;	
    // (𐓯) OSAGE SMALL LETTER SHA	[3503 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104EF, 0x0041 };
    uint32_t const ces[9] = { 0x3503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_478)
{
    // 104C7 0061;	
    // (𐓇) OSAGE CAPITAL LETTER SHA	[3503 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C7, 0x0061 };
    uint32_t const ces[9] = { 0x3503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_479)
{
    // 104C7 0041;	
    // (𐓇) OSAGE CAPITAL LETTER SHA	[3503 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C7, 0x0041 };
    uint32_t const ces[9] = { 0x3503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_480)
{
    // 104EF 0062;	
    // (𐓯) OSAGE SMALL LETTER SHA	[3503 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104EF, 0x0062 };
    uint32_t const ces[9] = { 0x3503, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_481)
{
    // 104C7 0062;	
    // (𐓇) OSAGE CAPITAL LETTER SHA	[3503 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C7, 0x0062 };
    uint32_t const ces[9] = { 0x3503, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_482)
{
    // 104F0 0021;	
    // (𐓰) OSAGE SMALL LETTER TA	[3504 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104F0, 0x0021 };
    uint32_t const ces[9] = { 0x3504, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_483)
{
    // 104C8 0021;	
    // (𐓈) OSAGE CAPITAL LETTER TA	[3504 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C8, 0x0021 };
    uint32_t const ces[9] = { 0x3504, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_484)
{
    // 104F0 003F;	
    // (𐓰) OSAGE SMALL LETTER TA	[3504 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104F0, 0x003F };
    uint32_t const ces[9] = { 0x3504, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_485)
{
    // 104C8 003F;	
    // (𐓈) OSAGE CAPITAL LETTER TA	[3504 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C8, 0x003F };
    uint32_t const ces[9] = { 0x3504, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_486)
{
    // 104F0 0061;	
    // (𐓰) OSAGE SMALL LETTER TA	[3504 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104F0, 0x0061 };
    uint32_t const ces[9] = { 0x3504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_487)
{
    // 104F0 0041;	
    // (𐓰) OSAGE SMALL LETTER TA	[3504 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104F0, 0x0041 };
    uint32_t const ces[9] = { 0x3504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_488)
{
    // 104C8 0061;	
    // (𐓈) OSAGE CAPITAL LETTER TA	[3504 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C8, 0x0061 };
    uint32_t const ces[9] = { 0x3504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_489)
{
    // 104C8 0041;	
    // (𐓈) OSAGE CAPITAL LETTER TA	[3504 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C8, 0x0041 };
    uint32_t const ces[9] = { 0x3504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_490)
{
    // 104F0 0062;	
    // (𐓰) OSAGE SMALL LETTER TA	[3504 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104F0, 0x0062 };
    uint32_t const ces[9] = { 0x3504, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_491)
{
    // 104C8 0062;	
    // (𐓈) OSAGE CAPITAL LETTER TA	[3504 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C8, 0x0062 };
    uint32_t const ces[9] = { 0x3504, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_492)
{
    // 104F1 0021;	
    // (𐓱) OSAGE SMALL LETTER EHTA	[3505 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104F1, 0x0021 };
    uint32_t const ces[9] = { 0x3505, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_493)
{
    // 104C9 0021;	
    // (𐓉) OSAGE CAPITAL LETTER EHTA	[3505 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C9, 0x0021 };
    uint32_t const ces[9] = { 0x3505, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_494)
{
    // 104F1 003F;	
    // (𐓱) OSAGE SMALL LETTER EHTA	[3505 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104F1, 0x003F };
    uint32_t const ces[9] = { 0x3505, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_495)
{
    // 104C9 003F;	
    // (𐓉) OSAGE CAPITAL LETTER EHTA	[3505 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C9, 0x003F };
    uint32_t const ces[9] = { 0x3505, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_496)
{
    // 104F1 0061;	
    // (𐓱) OSAGE SMALL LETTER EHTA	[3505 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104F1, 0x0061 };
    uint32_t const ces[9] = { 0x3505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_497)
{
    // 104F1 0041;	
    // (𐓱) OSAGE SMALL LETTER EHTA	[3505 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x104F1, 0x0041 };
    uint32_t const ces[9] = { 0x3505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_498)
{
    // 104C9 0061;	
    // (𐓉) OSAGE CAPITAL LETTER EHTA	[3505 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x104C9, 0x0061 };
    uint32_t const ces[9] = { 0x3505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_217_499)
{
    // 104C9 0041;	
    // (𐓉) OSAGE CAPITAL LETTER EHTA	[3505 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x104C9, 0x0041 };
    uint32_t const ces[9] = { 0x3505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

