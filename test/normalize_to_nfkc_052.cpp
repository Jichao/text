// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkc_052_000)
{
    // CB30;CB30;110D 116D 11AB;CB30;110D 116D 11AB; 
    // (쬰; 쬰; 쬰; 쬰; 쬰; ) HANGUL SYLLABLE JJYON
    {
        std::array<uint32_t, 1> const source = {{ 0xCB30 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB30 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_001)
{
    // CB31;CB31;110D 116D 11AC;CB31;110D 116D 11AC; 
    // (쬱; 쬱; 쬱; 쬱; 쬱; ) HANGUL SYLLABLE JJYONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCB31 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB31 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_002)
{
    // CB32;CB32;110D 116D 11AD;CB32;110D 116D 11AD; 
    // (쬲; 쬲; 쬲; 쬲; 쬲; ) HANGUL SYLLABLE JJYONH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB32 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB32 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_003)
{
    // CB33;CB33;110D 116D 11AE;CB33;110D 116D 11AE; 
    // (쬳; 쬳; 쬳; 쬳; 쬳; ) HANGUL SYLLABLE JJYOD
    {
        std::array<uint32_t, 1> const source = {{ 0xCB33 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB33 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_004)
{
    // CB34;CB34;110D 116D 11AF;CB34;110D 116D 11AF; 
    // (쬴; 쬴; 쬴; 쬴; 쬴; ) HANGUL SYLLABLE JJYOL
    {
        std::array<uint32_t, 1> const source = {{ 0xCB34 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB34 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_005)
{
    // CB35;CB35;110D 116D 11B0;CB35;110D 116D 11B0; 
    // (쬵; 쬵; 쬵; 쬵; 쬵; ) HANGUL SYLLABLE JJYOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB35 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB35 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_006)
{
    // CB36;CB36;110D 116D 11B1;CB36;110D 116D 11B1; 
    // (쬶; 쬶; 쬶; 쬶; 쬶; ) HANGUL SYLLABLE JJYOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xCB36 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB36 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_007)
{
    // CB37;CB37;110D 116D 11B2;CB37;110D 116D 11B2; 
    // (쬷; 쬷; 쬷; 쬷; 쬷; ) HANGUL SYLLABLE JJYOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xCB37 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB37 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_008)
{
    // CB38;CB38;110D 116D 11B3;CB38;110D 116D 11B3; 
    // (쬸; 쬸; 쬸; 쬸; 쬸; ) HANGUL SYLLABLE JJYOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB38 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB38 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_009)
{
    // CB39;CB39;110D 116D 11B4;CB39;110D 116D 11B4; 
    // (쬹; 쬹; 쬹; 쬹; 쬹; ) HANGUL SYLLABLE JJYOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xCB39 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB39 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_010)
{
    // CB3A;CB3A;110D 116D 11B5;CB3A;110D 116D 11B5; 
    // (쬺; 쬺; 쬺; 쬺; 쬺; ) HANGUL SYLLABLE JJYOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xCB3A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB3A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_011)
{
    // CB3B;CB3B;110D 116D 11B6;CB3B;110D 116D 11B6; 
    // (쬻; 쬻; 쬻; 쬻; 쬻; ) HANGUL SYLLABLE JJYOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB3B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB3B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_012)
{
    // CB3C;CB3C;110D 116D 11B7;CB3C;110D 116D 11B7; 
    // (쬼; 쬼; 쬼; 쬼; 쬼; ) HANGUL SYLLABLE JJYOM
    {
        std::array<uint32_t, 1> const source = {{ 0xCB3C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB3C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_013)
{
    // CB3D;CB3D;110D 116D 11B8;CB3D;110D 116D 11B8; 
    // (쬽; 쬽; 쬽; 쬽; 쬽; ) HANGUL SYLLABLE JJYOB
    {
        std::array<uint32_t, 1> const source = {{ 0xCB3D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB3D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_014)
{
    // CB3E;CB3E;110D 116D 11B9;CB3E;110D 116D 11B9; 
    // (쬾; 쬾; 쬾; 쬾; 쬾; ) HANGUL SYLLABLE JJYOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB3E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB3E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_015)
{
    // CB3F;CB3F;110D 116D 11BA;CB3F;110D 116D 11BA; 
    // (쬿; 쬿; 쬿; 쬿; 쬿; ) HANGUL SYLLABLE JJYOS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB3F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB3F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_016)
{
    // CB40;CB40;110D 116D 11BB;CB40;110D 116D 11BB; 
    // (쭀; 쭀; 쭀; 쭀; 쭀; ) HANGUL SYLLABLE JJYOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB40 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB40 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_017)
{
    // CB41;CB41;110D 116D 11BC;CB41;110D 116D 11BC; 
    // (쭁; 쭁; 쭁; 쭁; 쭁; ) HANGUL SYLLABLE JJYONG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB41 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB41 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_018)
{
    // CB42;CB42;110D 116D 11BD;CB42;110D 116D 11BD; 
    // (쭂; 쭂; 쭂; 쭂; 쭂; ) HANGUL SYLLABLE JJYOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCB42 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB42 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_019)
{
    // CB43;CB43;110D 116D 11BE;CB43;110D 116D 11BE; 
    // (쭃; 쭃; 쭃; 쭃; 쭃; ) HANGUL SYLLABLE JJYOC
    {
        std::array<uint32_t, 1> const source = {{ 0xCB43 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB43 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_020)
{
    // CB44;CB44;110D 116D 11BF;CB44;110D 116D 11BF; 
    // (쭄; 쭄; 쭄; 쭄; 쭄; ) HANGUL SYLLABLE JJYOK
    {
        std::array<uint32_t, 1> const source = {{ 0xCB44 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB44 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_021)
{
    // CB45;CB45;110D 116D 11C0;CB45;110D 116D 11C0; 
    // (쭅; 쭅; 쭅; 쭅; 쭅; ) HANGUL SYLLABLE JJYOT
    {
        std::array<uint32_t, 1> const source = {{ 0xCB45 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB45 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_022)
{
    // CB46;CB46;110D 116D 11C1;CB46;110D 116D 11C1; 
    // (쭆; 쭆; 쭆; 쭆; 쭆; ) HANGUL SYLLABLE JJYOP
    {
        std::array<uint32_t, 1> const source = {{ 0xCB46 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB46 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_023)
{
    // CB47;CB47;110D 116D 11C2;CB47;110D 116D 11C2; 
    // (쭇; 쭇; 쭇; 쭇; 쭇; ) HANGUL SYLLABLE JJYOH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB47 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB47 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_024)
{
    // CB48;CB48;110D 116E;CB48;110D 116E; 
    // (쭈; 쭈; 쭈; 쭈; 쭈; ) HANGUL SYLLABLE JJU
    {
        std::array<uint32_t, 1> const source = {{ 0xCB48 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB48 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_025)
{
    // CB49;CB49;110D 116E 11A8;CB49;110D 116E 11A8; 
    // (쭉; 쭉; 쭉; 쭉; 쭉; ) HANGUL SYLLABLE JJUG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB49 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB49 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_026)
{
    // CB4A;CB4A;110D 116E 11A9;CB4A;110D 116E 11A9; 
    // (쭊; 쭊; 쭊; 쭊; 쭊; ) HANGUL SYLLABLE JJUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB4A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB4A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_027)
{
    // CB4B;CB4B;110D 116E 11AA;CB4B;110D 116E 11AA; 
    // (쭋; 쭋; 쭋; 쭋; 쭋; ) HANGUL SYLLABLE JJUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB4B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB4B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_028)
{
    // CB4C;CB4C;110D 116E 11AB;CB4C;110D 116E 11AB; 
    // (쭌; 쭌; 쭌; 쭌; 쭌; ) HANGUL SYLLABLE JJUN
    {
        std::array<uint32_t, 1> const source = {{ 0xCB4C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB4C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_029)
{
    // CB4D;CB4D;110D 116E 11AC;CB4D;110D 116E 11AC; 
    // (쭍; 쭍; 쭍; 쭍; 쭍; ) HANGUL SYLLABLE JJUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCB4D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB4D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_030)
{
    // CB4E;CB4E;110D 116E 11AD;CB4E;110D 116E 11AD; 
    // (쭎; 쭎; 쭎; 쭎; 쭎; ) HANGUL SYLLABLE JJUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB4E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB4E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_031)
{
    // CB4F;CB4F;110D 116E 11AE;CB4F;110D 116E 11AE; 
    // (쭏; 쭏; 쭏; 쭏; 쭏; ) HANGUL SYLLABLE JJUD
    {
        std::array<uint32_t, 1> const source = {{ 0xCB4F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB4F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_032)
{
    // CB50;CB50;110D 116E 11AF;CB50;110D 116E 11AF; 
    // (쭐; 쭐; 쭐; 쭐; 쭐; ) HANGUL SYLLABLE JJUL
    {
        std::array<uint32_t, 1> const source = {{ 0xCB50 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB50 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_033)
{
    // CB51;CB51;110D 116E 11B0;CB51;110D 116E 11B0; 
    // (쭑; 쭑; 쭑; 쭑; 쭑; ) HANGUL SYLLABLE JJULG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB51 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB51 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_034)
{
    // CB52;CB52;110D 116E 11B1;CB52;110D 116E 11B1; 
    // (쭒; 쭒; 쭒; 쭒; 쭒; ) HANGUL SYLLABLE JJULM
    {
        std::array<uint32_t, 1> const source = {{ 0xCB52 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB52 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_035)
{
    // CB53;CB53;110D 116E 11B2;CB53;110D 116E 11B2; 
    // (쭓; 쭓; 쭓; 쭓; 쭓; ) HANGUL SYLLABLE JJULB
    {
        std::array<uint32_t, 1> const source = {{ 0xCB53 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB53 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_036)
{
    // CB54;CB54;110D 116E 11B3;CB54;110D 116E 11B3; 
    // (쭔; 쭔; 쭔; 쭔; 쭔; ) HANGUL SYLLABLE JJULS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB54 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB54 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_037)
{
    // CB55;CB55;110D 116E 11B4;CB55;110D 116E 11B4; 
    // (쭕; 쭕; 쭕; 쭕; 쭕; ) HANGUL SYLLABLE JJULT
    {
        std::array<uint32_t, 1> const source = {{ 0xCB55 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB55 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_038)
{
    // CB56;CB56;110D 116E 11B5;CB56;110D 116E 11B5; 
    // (쭖; 쭖; 쭖; 쭖; 쭖; ) HANGUL SYLLABLE JJULP
    {
        std::array<uint32_t, 1> const source = {{ 0xCB56 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB56 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_039)
{
    // CB57;CB57;110D 116E 11B6;CB57;110D 116E 11B6; 
    // (쭗; 쭗; 쭗; 쭗; 쭗; ) HANGUL SYLLABLE JJULH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB57 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB57 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_040)
{
    // CB58;CB58;110D 116E 11B7;CB58;110D 116E 11B7; 
    // (쭘; 쭘; 쭘; 쭘; 쭘; ) HANGUL SYLLABLE JJUM
    {
        std::array<uint32_t, 1> const source = {{ 0xCB58 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB58 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_041)
{
    // CB59;CB59;110D 116E 11B8;CB59;110D 116E 11B8; 
    // (쭙; 쭙; 쭙; 쭙; 쭙; ) HANGUL SYLLABLE JJUB
    {
        std::array<uint32_t, 1> const source = {{ 0xCB59 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB59 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_042)
{
    // CB5A;CB5A;110D 116E 11B9;CB5A;110D 116E 11B9; 
    // (쭚; 쭚; 쭚; 쭚; 쭚; ) HANGUL SYLLABLE JJUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB5A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB5A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_043)
{
    // CB5B;CB5B;110D 116E 11BA;CB5B;110D 116E 11BA; 
    // (쭛; 쭛; 쭛; 쭛; 쭛; ) HANGUL SYLLABLE JJUS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB5B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB5B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_044)
{
    // CB5C;CB5C;110D 116E 11BB;CB5C;110D 116E 11BB; 
    // (쭜; 쭜; 쭜; 쭜; 쭜; ) HANGUL SYLLABLE JJUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB5C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB5C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_045)
{
    // CB5D;CB5D;110D 116E 11BC;CB5D;110D 116E 11BC; 
    // (쭝; 쭝; 쭝; 쭝; 쭝; ) HANGUL SYLLABLE JJUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB5D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB5D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_046)
{
    // CB5E;CB5E;110D 116E 11BD;CB5E;110D 116E 11BD; 
    // (쭞; 쭞; 쭞; 쭞; 쭞; ) HANGUL SYLLABLE JJUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCB5E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB5E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_047)
{
    // CB5F;CB5F;110D 116E 11BE;CB5F;110D 116E 11BE; 
    // (쭟; 쭟; 쭟; 쭟; 쭟; ) HANGUL SYLLABLE JJUC
    {
        std::array<uint32_t, 1> const source = {{ 0xCB5F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB5F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_048)
{
    // CB60;CB60;110D 116E 11BF;CB60;110D 116E 11BF; 
    // (쭠; 쭠; 쭠; 쭠; 쭠; ) HANGUL SYLLABLE JJUK
    {
        std::array<uint32_t, 1> const source = {{ 0xCB60 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB60 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_049)
{
    // CB61;CB61;110D 116E 11C0;CB61;110D 116E 11C0; 
    // (쭡; 쭡; 쭡; 쭡; 쭡; ) HANGUL SYLLABLE JJUT
    {
        std::array<uint32_t, 1> const source = {{ 0xCB61 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB61 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_050)
{
    // CB62;CB62;110D 116E 11C1;CB62;110D 116E 11C1; 
    // (쭢; 쭢; 쭢; 쭢; 쭢; ) HANGUL SYLLABLE JJUP
    {
        std::array<uint32_t, 1> const source = {{ 0xCB62 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB62 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_051)
{
    // CB63;CB63;110D 116E 11C2;CB63;110D 116E 11C2; 
    // (쭣; 쭣; 쭣; 쭣; 쭣; ) HANGUL SYLLABLE JJUH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB63 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB63 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_052)
{
    // CB64;CB64;110D 116F;CB64;110D 116F; 
    // (쭤; 쭤; 쭤; 쭤; 쭤; ) HANGUL SYLLABLE JJWEO
    {
        std::array<uint32_t, 1> const source = {{ 0xCB64 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB64 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_053)
{
    // CB65;CB65;110D 116F 11A8;CB65;110D 116F 11A8; 
    // (쭥; 쭥; 쭥; 쭥; 쭥; ) HANGUL SYLLABLE JJWEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB65 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB65 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_054)
{
    // CB66;CB66;110D 116F 11A9;CB66;110D 116F 11A9; 
    // (쭦; 쭦; 쭦; 쭦; 쭦; ) HANGUL SYLLABLE JJWEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB66 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB66 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_055)
{
    // CB67;CB67;110D 116F 11AA;CB67;110D 116F 11AA; 
    // (쭧; 쭧; 쭧; 쭧; 쭧; ) HANGUL SYLLABLE JJWEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB67 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB67 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_056)
{
    // CB68;CB68;110D 116F 11AB;CB68;110D 116F 11AB; 
    // (쭨; 쭨; 쭨; 쭨; 쭨; ) HANGUL SYLLABLE JJWEON
    {
        std::array<uint32_t, 1> const source = {{ 0xCB68 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB68 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_057)
{
    // CB69;CB69;110D 116F 11AC;CB69;110D 116F 11AC; 
    // (쭩; 쭩; 쭩; 쭩; 쭩; ) HANGUL SYLLABLE JJWEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCB69 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB69 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_058)
{
    // CB6A;CB6A;110D 116F 11AD;CB6A;110D 116F 11AD; 
    // (쭪; 쭪; 쭪; 쭪; 쭪; ) HANGUL SYLLABLE JJWEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB6A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB6A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_059)
{
    // CB6B;CB6B;110D 116F 11AE;CB6B;110D 116F 11AE; 
    // (쭫; 쭫; 쭫; 쭫; 쭫; ) HANGUL SYLLABLE JJWEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xCB6B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB6B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_060)
{
    // CB6C;CB6C;110D 116F 11AF;CB6C;110D 116F 11AF; 
    // (쭬; 쭬; 쭬; 쭬; 쭬; ) HANGUL SYLLABLE JJWEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xCB6C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB6C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_061)
{
    // CB6D;CB6D;110D 116F 11B0;CB6D;110D 116F 11B0; 
    // (쭭; 쭭; 쭭; 쭭; 쭭; ) HANGUL SYLLABLE JJWEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB6D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB6D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_062)
{
    // CB6E;CB6E;110D 116F 11B1;CB6E;110D 116F 11B1; 
    // (쭮; 쭮; 쭮; 쭮; 쭮; ) HANGUL SYLLABLE JJWEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xCB6E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB6E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_063)
{
    // CB6F;CB6F;110D 116F 11B2;CB6F;110D 116F 11B2; 
    // (쭯; 쭯; 쭯; 쭯; 쭯; ) HANGUL SYLLABLE JJWEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xCB6F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB6F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_064)
{
    // CB70;CB70;110D 116F 11B3;CB70;110D 116F 11B3; 
    // (쭰; 쭰; 쭰; 쭰; 쭰; ) HANGUL SYLLABLE JJWEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB70 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB70 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_065)
{
    // CB71;CB71;110D 116F 11B4;CB71;110D 116F 11B4; 
    // (쭱; 쭱; 쭱; 쭱; 쭱; ) HANGUL SYLLABLE JJWEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xCB71 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB71 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_066)
{
    // CB72;CB72;110D 116F 11B5;CB72;110D 116F 11B5; 
    // (쭲; 쭲; 쭲; 쭲; 쭲; ) HANGUL SYLLABLE JJWEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xCB72 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB72 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_067)
{
    // CB73;CB73;110D 116F 11B6;CB73;110D 116F 11B6; 
    // (쭳; 쭳; 쭳; 쭳; 쭳; ) HANGUL SYLLABLE JJWEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB73 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB73 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_068)
{
    // CB74;CB74;110D 116F 11B7;CB74;110D 116F 11B7; 
    // (쭴; 쭴; 쭴; 쭴; 쭴; ) HANGUL SYLLABLE JJWEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xCB74 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB74 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_069)
{
    // CB75;CB75;110D 116F 11B8;CB75;110D 116F 11B8; 
    // (쭵; 쭵; 쭵; 쭵; 쭵; ) HANGUL SYLLABLE JJWEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xCB75 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB75 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_070)
{
    // CB76;CB76;110D 116F 11B9;CB76;110D 116F 11B9; 
    // (쭶; 쭶; 쭶; 쭶; 쭶; ) HANGUL SYLLABLE JJWEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB76 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB76 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_071)
{
    // CB77;CB77;110D 116F 11BA;CB77;110D 116F 11BA; 
    // (쭷; 쭷; 쭷; 쭷; 쭷; ) HANGUL SYLLABLE JJWEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB77 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB77 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_072)
{
    // CB78;CB78;110D 116F 11BB;CB78;110D 116F 11BB; 
    // (쭸; 쭸; 쭸; 쭸; 쭸; ) HANGUL SYLLABLE JJWEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB78 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB78 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_073)
{
    // CB79;CB79;110D 116F 11BC;CB79;110D 116F 11BC; 
    // (쭹; 쭹; 쭹; 쭹; 쭹; ) HANGUL SYLLABLE JJWEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB79 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB79 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_074)
{
    // CB7A;CB7A;110D 116F 11BD;CB7A;110D 116F 11BD; 
    // (쭺; 쭺; 쭺; 쭺; 쭺; ) HANGUL SYLLABLE JJWEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCB7A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB7A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_075)
{
    // CB7B;CB7B;110D 116F 11BE;CB7B;110D 116F 11BE; 
    // (쭻; 쭻; 쭻; 쭻; 쭻; ) HANGUL SYLLABLE JJWEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xCB7B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB7B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_076)
{
    // CB7C;CB7C;110D 116F 11BF;CB7C;110D 116F 11BF; 
    // (쭼; 쭼; 쭼; 쭼; 쭼; ) HANGUL SYLLABLE JJWEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xCB7C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB7C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_077)
{
    // CB7D;CB7D;110D 116F 11C0;CB7D;110D 116F 11C0; 
    // (쭽; 쭽; 쭽; 쭽; 쭽; ) HANGUL SYLLABLE JJWEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xCB7D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB7D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_078)
{
    // CB7E;CB7E;110D 116F 11C1;CB7E;110D 116F 11C1; 
    // (쭾; 쭾; 쭾; 쭾; 쭾; ) HANGUL SYLLABLE JJWEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xCB7E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB7E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_079)
{
    // CB7F;CB7F;110D 116F 11C2;CB7F;110D 116F 11C2; 
    // (쭿; 쭿; 쭿; 쭿; 쭿; ) HANGUL SYLLABLE JJWEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB7F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB7F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_080)
{
    // CB80;CB80;110D 1170;CB80;110D 1170; 
    // (쮀; 쮀; 쮀; 쮀; 쮀; ) HANGUL SYLLABLE JJWE
    {
        std::array<uint32_t, 1> const source = {{ 0xCB80 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB80 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_081)
{
    // CB81;CB81;110D 1170 11A8;CB81;110D 1170 11A8; 
    // (쮁; 쮁; 쮁; 쮁; 쮁; ) HANGUL SYLLABLE JJWEG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB81 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB81 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_082)
{
    // CB82;CB82;110D 1170 11A9;CB82;110D 1170 11A9; 
    // (쮂; 쮂; 쮂; 쮂; 쮂; ) HANGUL SYLLABLE JJWEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB82 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB82 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_083)
{
    // CB83;CB83;110D 1170 11AA;CB83;110D 1170 11AA; 
    // (쮃; 쮃; 쮃; 쮃; 쮃; ) HANGUL SYLLABLE JJWEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB83 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB83 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_084)
{
    // CB84;CB84;110D 1170 11AB;CB84;110D 1170 11AB; 
    // (쮄; 쮄; 쮄; 쮄; 쮄; ) HANGUL SYLLABLE JJWEN
    {
        std::array<uint32_t, 1> const source = {{ 0xCB84 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB84 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_085)
{
    // CB85;CB85;110D 1170 11AC;CB85;110D 1170 11AC; 
    // (쮅; 쮅; 쮅; 쮅; 쮅; ) HANGUL SYLLABLE JJWENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCB85 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB85 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_086)
{
    // CB86;CB86;110D 1170 11AD;CB86;110D 1170 11AD; 
    // (쮆; 쮆; 쮆; 쮆; 쮆; ) HANGUL SYLLABLE JJWENH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB86 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB86 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_087)
{
    // CB87;CB87;110D 1170 11AE;CB87;110D 1170 11AE; 
    // (쮇; 쮇; 쮇; 쮇; 쮇; ) HANGUL SYLLABLE JJWED
    {
        std::array<uint32_t, 1> const source = {{ 0xCB87 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB87 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_088)
{
    // CB88;CB88;110D 1170 11AF;CB88;110D 1170 11AF; 
    // (쮈; 쮈; 쮈; 쮈; 쮈; ) HANGUL SYLLABLE JJWEL
    {
        std::array<uint32_t, 1> const source = {{ 0xCB88 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB88 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_089)
{
    // CB89;CB89;110D 1170 11B0;CB89;110D 1170 11B0; 
    // (쮉; 쮉; 쮉; 쮉; 쮉; ) HANGUL SYLLABLE JJWELG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB89 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB89 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_090)
{
    // CB8A;CB8A;110D 1170 11B1;CB8A;110D 1170 11B1; 
    // (쮊; 쮊; 쮊; 쮊; 쮊; ) HANGUL SYLLABLE JJWELM
    {
        std::array<uint32_t, 1> const source = {{ 0xCB8A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB8A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_091)
{
    // CB8B;CB8B;110D 1170 11B2;CB8B;110D 1170 11B2; 
    // (쮋; 쮋; 쮋; 쮋; 쮋; ) HANGUL SYLLABLE JJWELB
    {
        std::array<uint32_t, 1> const source = {{ 0xCB8B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB8B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_092)
{
    // CB8C;CB8C;110D 1170 11B3;CB8C;110D 1170 11B3; 
    // (쮌; 쮌; 쮌; 쮌; 쮌; ) HANGUL SYLLABLE JJWELS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB8C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB8C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_093)
{
    // CB8D;CB8D;110D 1170 11B4;CB8D;110D 1170 11B4; 
    // (쮍; 쮍; 쮍; 쮍; 쮍; ) HANGUL SYLLABLE JJWELT
    {
        std::array<uint32_t, 1> const source = {{ 0xCB8D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB8D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_094)
{
    // CB8E;CB8E;110D 1170 11B5;CB8E;110D 1170 11B5; 
    // (쮎; 쮎; 쮎; 쮎; 쮎; ) HANGUL SYLLABLE JJWELP
    {
        std::array<uint32_t, 1> const source = {{ 0xCB8E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB8E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_095)
{
    // CB8F;CB8F;110D 1170 11B6;CB8F;110D 1170 11B6; 
    // (쮏; 쮏; 쮏; 쮏; 쮏; ) HANGUL SYLLABLE JJWELH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB8F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB8F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_096)
{
    // CB90;CB90;110D 1170 11B7;CB90;110D 1170 11B7; 
    // (쮐; 쮐; 쮐; 쮐; 쮐; ) HANGUL SYLLABLE JJWEM
    {
        std::array<uint32_t, 1> const source = {{ 0xCB90 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB90 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_097)
{
    // CB91;CB91;110D 1170 11B8;CB91;110D 1170 11B8; 
    // (쮑; 쮑; 쮑; 쮑; 쮑; ) HANGUL SYLLABLE JJWEB
    {
        std::array<uint32_t, 1> const source = {{ 0xCB91 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB91 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_098)
{
    // CB92;CB92;110D 1170 11B9;CB92;110D 1170 11B9; 
    // (쮒; 쮒; 쮒; 쮒; 쮒; ) HANGUL SYLLABLE JJWEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB92 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB92 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_099)
{
    // CB93;CB93;110D 1170 11BA;CB93;110D 1170 11BA; 
    // (쮓; 쮓; 쮓; 쮓; 쮓; ) HANGUL SYLLABLE JJWES
    {
        std::array<uint32_t, 1> const source = {{ 0xCB93 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB93 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_100)
{
    // CB94;CB94;110D 1170 11BB;CB94;110D 1170 11BB; 
    // (쮔; 쮔; 쮔; 쮔; 쮔; ) HANGUL SYLLABLE JJWESS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB94 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB94 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_101)
{
    // CB95;CB95;110D 1170 11BC;CB95;110D 1170 11BC; 
    // (쮕; 쮕; 쮕; 쮕; 쮕; ) HANGUL SYLLABLE JJWENG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB95 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB95 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_102)
{
    // CB96;CB96;110D 1170 11BD;CB96;110D 1170 11BD; 
    // (쮖; 쮖; 쮖; 쮖; 쮖; ) HANGUL SYLLABLE JJWEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCB96 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB96 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_103)
{
    // CB97;CB97;110D 1170 11BE;CB97;110D 1170 11BE; 
    // (쮗; 쮗; 쮗; 쮗; 쮗; ) HANGUL SYLLABLE JJWEC
    {
        std::array<uint32_t, 1> const source = {{ 0xCB97 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB97 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_104)
{
    // CB98;CB98;110D 1170 11BF;CB98;110D 1170 11BF; 
    // (쮘; 쮘; 쮘; 쮘; 쮘; ) HANGUL SYLLABLE JJWEK
    {
        std::array<uint32_t, 1> const source = {{ 0xCB98 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB98 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_105)
{
    // CB99;CB99;110D 1170 11C0;CB99;110D 1170 11C0; 
    // (쮙; 쮙; 쮙; 쮙; 쮙; ) HANGUL SYLLABLE JJWET
    {
        std::array<uint32_t, 1> const source = {{ 0xCB99 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB99 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_106)
{
    // CB9A;CB9A;110D 1170 11C1;CB9A;110D 1170 11C1; 
    // (쮚; 쮚; 쮚; 쮚; 쮚; ) HANGUL SYLLABLE JJWEP
    {
        std::array<uint32_t, 1> const source = {{ 0xCB9A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB9A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_107)
{
    // CB9B;CB9B;110D 1170 11C2;CB9B;110D 1170 11C2; 
    // (쮛; 쮛; 쮛; 쮛; 쮛; ) HANGUL SYLLABLE JJWEH
    {
        std::array<uint32_t, 1> const source = {{ 0xCB9B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB9B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_108)
{
    // CB9C;CB9C;110D 1171;CB9C;110D 1171; 
    // (쮜; 쮜; 쮜; 쮜; 쮜; ) HANGUL SYLLABLE JJWI
    {
        std::array<uint32_t, 1> const source = {{ 0xCB9C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB9C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_109)
{
    // CB9D;CB9D;110D 1171 11A8;CB9D;110D 1171 11A8; 
    // (쮝; 쮝; 쮝; 쮝; 쮝; ) HANGUL SYLLABLE JJWIG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB9D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB9D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_110)
{
    // CB9E;CB9E;110D 1171 11A9;CB9E;110D 1171 11A9; 
    // (쮞; 쮞; 쮞; 쮞; 쮞; ) HANGUL SYLLABLE JJWIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCB9E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB9E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_111)
{
    // CB9F;CB9F;110D 1171 11AA;CB9F;110D 1171 11AA; 
    // (쮟; 쮟; 쮟; 쮟; 쮟; ) HANGUL SYLLABLE JJWIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCB9F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCB9F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_112)
{
    // CBA0;CBA0;110D 1171 11AB;CBA0;110D 1171 11AB; 
    // (쮠; 쮠; 쮠; 쮠; 쮠; ) HANGUL SYLLABLE JJWIN
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_113)
{
    // CBA1;CBA1;110D 1171 11AC;CBA1;110D 1171 11AC; 
    // (쮡; 쮡; 쮡; 쮡; 쮡; ) HANGUL SYLLABLE JJWINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_114)
{
    // CBA2;CBA2;110D 1171 11AD;CBA2;110D 1171 11AD; 
    // (쮢; 쮢; 쮢; 쮢; 쮢; ) HANGUL SYLLABLE JJWINH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_115)
{
    // CBA3;CBA3;110D 1171 11AE;CBA3;110D 1171 11AE; 
    // (쮣; 쮣; 쮣; 쮣; 쮣; ) HANGUL SYLLABLE JJWID
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_116)
{
    // CBA4;CBA4;110D 1171 11AF;CBA4;110D 1171 11AF; 
    // (쮤; 쮤; 쮤; 쮤; 쮤; ) HANGUL SYLLABLE JJWIL
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_117)
{
    // CBA5;CBA5;110D 1171 11B0;CBA5;110D 1171 11B0; 
    // (쮥; 쮥; 쮥; 쮥; 쮥; ) HANGUL SYLLABLE JJWILG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_118)
{
    // CBA6;CBA6;110D 1171 11B1;CBA6;110D 1171 11B1; 
    // (쮦; 쮦; 쮦; 쮦; 쮦; ) HANGUL SYLLABLE JJWILM
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_119)
{
    // CBA7;CBA7;110D 1171 11B2;CBA7;110D 1171 11B2; 
    // (쮧; 쮧; 쮧; 쮧; 쮧; ) HANGUL SYLLABLE JJWILB
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_120)
{
    // CBA8;CBA8;110D 1171 11B3;CBA8;110D 1171 11B3; 
    // (쮨; 쮨; 쮨; 쮨; 쮨; ) HANGUL SYLLABLE JJWILS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_121)
{
    // CBA9;CBA9;110D 1171 11B4;CBA9;110D 1171 11B4; 
    // (쮩; 쮩; 쮩; 쮩; 쮩; ) HANGUL SYLLABLE JJWILT
    {
        std::array<uint32_t, 1> const source = {{ 0xCBA9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBA9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_122)
{
    // CBAA;CBAA;110D 1171 11B5;CBAA;110D 1171 11B5; 
    // (쮪; 쮪; 쮪; 쮪; 쮪; ) HANGUL SYLLABLE JJWILP
    {
        std::array<uint32_t, 1> const source = {{ 0xCBAA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBAA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_123)
{
    // CBAB;CBAB;110D 1171 11B6;CBAB;110D 1171 11B6; 
    // (쮫; 쮫; 쮫; 쮫; 쮫; ) HANGUL SYLLABLE JJWILH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBAB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBAB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_124)
{
    // CBAC;CBAC;110D 1171 11B7;CBAC;110D 1171 11B7; 
    // (쮬; 쮬; 쮬; 쮬; 쮬; ) HANGUL SYLLABLE JJWIM
    {
        std::array<uint32_t, 1> const source = {{ 0xCBAC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBAC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_125)
{
    // CBAD;CBAD;110D 1171 11B8;CBAD;110D 1171 11B8; 
    // (쮭; 쮭; 쮭; 쮭; 쮭; ) HANGUL SYLLABLE JJWIB
    {
        std::array<uint32_t, 1> const source = {{ 0xCBAD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBAD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_126)
{
    // CBAE;CBAE;110D 1171 11B9;CBAE;110D 1171 11B9; 
    // (쮮; 쮮; 쮮; 쮮; 쮮; ) HANGUL SYLLABLE JJWIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBAE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBAE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_127)
{
    // CBAF;CBAF;110D 1171 11BA;CBAF;110D 1171 11BA; 
    // (쮯; 쮯; 쮯; 쮯; 쮯; ) HANGUL SYLLABLE JJWIS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBAF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBAF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_128)
{
    // CBB0;CBB0;110D 1171 11BB;CBB0;110D 1171 11BB; 
    // (쮰; 쮰; 쮰; 쮰; 쮰; ) HANGUL SYLLABLE JJWISS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_129)
{
    // CBB1;CBB1;110D 1171 11BC;CBB1;110D 1171 11BC; 
    // (쮱; 쮱; 쮱; 쮱; 쮱; ) HANGUL SYLLABLE JJWING
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_130)
{
    // CBB2;CBB2;110D 1171 11BD;CBB2;110D 1171 11BD; 
    // (쮲; 쮲; 쮲; 쮲; 쮲; ) HANGUL SYLLABLE JJWIJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_131)
{
    // CBB3;CBB3;110D 1171 11BE;CBB3;110D 1171 11BE; 
    // (쮳; 쮳; 쮳; 쮳; 쮳; ) HANGUL SYLLABLE JJWIC
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_132)
{
    // CBB4;CBB4;110D 1171 11BF;CBB4;110D 1171 11BF; 
    // (쮴; 쮴; 쮴; 쮴; 쮴; ) HANGUL SYLLABLE JJWIK
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_133)
{
    // CBB5;CBB5;110D 1171 11C0;CBB5;110D 1171 11C0; 
    // (쮵; 쮵; 쮵; 쮵; 쮵; ) HANGUL SYLLABLE JJWIT
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_134)
{
    // CBB6;CBB6;110D 1171 11C1;CBB6;110D 1171 11C1; 
    // (쮶; 쮶; 쮶; 쮶; 쮶; ) HANGUL SYLLABLE JJWIP
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_135)
{
    // CBB7;CBB7;110D 1171 11C2;CBB7;110D 1171 11C2; 
    // (쮷; 쮷; 쮷; 쮷; 쮷; ) HANGUL SYLLABLE JJWIH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_136)
{
    // CBB8;CBB8;110D 1172;CBB8;110D 1172; 
    // (쮸; 쮸; 쮸; 쮸; 쮸; ) HANGUL SYLLABLE JJYU
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_137)
{
    // CBB9;CBB9;110D 1172 11A8;CBB9;110D 1172 11A8; 
    // (쮹; 쮹; 쮹; 쮹; 쮹; ) HANGUL SYLLABLE JJYUG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBB9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBB9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_138)
{
    // CBBA;CBBA;110D 1172 11A9;CBBA;110D 1172 11A9; 
    // (쮺; 쮺; 쮺; 쮺; 쮺; ) HANGUL SYLLABLE JJYUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBBA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBBA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_139)
{
    // CBBB;CBBB;110D 1172 11AA;CBBB;110D 1172 11AA; 
    // (쮻; 쮻; 쮻; 쮻; 쮻; ) HANGUL SYLLABLE JJYUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBBB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBBB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_140)
{
    // CBBC;CBBC;110D 1172 11AB;CBBC;110D 1172 11AB; 
    // (쮼; 쮼; 쮼; 쮼; 쮼; ) HANGUL SYLLABLE JJYUN
    {
        std::array<uint32_t, 1> const source = {{ 0xCBBC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBBC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_141)
{
    // CBBD;CBBD;110D 1172 11AC;CBBD;110D 1172 11AC; 
    // (쮽; 쮽; 쮽; 쮽; 쮽; ) HANGUL SYLLABLE JJYUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCBBD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBBD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_142)
{
    // CBBE;CBBE;110D 1172 11AD;CBBE;110D 1172 11AD; 
    // (쮾; 쮾; 쮾; 쮾; 쮾; ) HANGUL SYLLABLE JJYUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBBE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBBE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_143)
{
    // CBBF;CBBF;110D 1172 11AE;CBBF;110D 1172 11AE; 
    // (쮿; 쮿; 쮿; 쮿; 쮿; ) HANGUL SYLLABLE JJYUD
    {
        std::array<uint32_t, 1> const source = {{ 0xCBBF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBBF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_144)
{
    // CBC0;CBC0;110D 1172 11AF;CBC0;110D 1172 11AF; 
    // (쯀; 쯀; 쯀; 쯀; 쯀; ) HANGUL SYLLABLE JJYUL
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_145)
{
    // CBC1;CBC1;110D 1172 11B0;CBC1;110D 1172 11B0; 
    // (쯁; 쯁; 쯁; 쯁; 쯁; ) HANGUL SYLLABLE JJYULG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_146)
{
    // CBC2;CBC2;110D 1172 11B1;CBC2;110D 1172 11B1; 
    // (쯂; 쯂; 쯂; 쯂; 쯂; ) HANGUL SYLLABLE JJYULM
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_147)
{
    // CBC3;CBC3;110D 1172 11B2;CBC3;110D 1172 11B2; 
    // (쯃; 쯃; 쯃; 쯃; 쯃; ) HANGUL SYLLABLE JJYULB
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_148)
{
    // CBC4;CBC4;110D 1172 11B3;CBC4;110D 1172 11B3; 
    // (쯄; 쯄; 쯄; 쯄; 쯄; ) HANGUL SYLLABLE JJYULS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_149)
{
    // CBC5;CBC5;110D 1172 11B4;CBC5;110D 1172 11B4; 
    // (쯅; 쯅; 쯅; 쯅; 쯅; ) HANGUL SYLLABLE JJYULT
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_150)
{
    // CBC6;CBC6;110D 1172 11B5;CBC6;110D 1172 11B5; 
    // (쯆; 쯆; 쯆; 쯆; 쯆; ) HANGUL SYLLABLE JJYULP
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_151)
{
    // CBC7;CBC7;110D 1172 11B6;CBC7;110D 1172 11B6; 
    // (쯇; 쯇; 쯇; 쯇; 쯇; ) HANGUL SYLLABLE JJYULH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_152)
{
    // CBC8;CBC8;110D 1172 11B7;CBC8;110D 1172 11B7; 
    // (쯈; 쯈; 쯈; 쯈; 쯈; ) HANGUL SYLLABLE JJYUM
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_153)
{
    // CBC9;CBC9;110D 1172 11B8;CBC9;110D 1172 11B8; 
    // (쯉; 쯉; 쯉; 쯉; 쯉; ) HANGUL SYLLABLE JJYUB
    {
        std::array<uint32_t, 1> const source = {{ 0xCBC9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBC9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_154)
{
    // CBCA;CBCA;110D 1172 11B9;CBCA;110D 1172 11B9; 
    // (쯊; 쯊; 쯊; 쯊; 쯊; ) HANGUL SYLLABLE JJYUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBCA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBCA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_155)
{
    // CBCB;CBCB;110D 1172 11BA;CBCB;110D 1172 11BA; 
    // (쯋; 쯋; 쯋; 쯋; 쯋; ) HANGUL SYLLABLE JJYUS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBCB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBCB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_156)
{
    // CBCC;CBCC;110D 1172 11BB;CBCC;110D 1172 11BB; 
    // (쯌; 쯌; 쯌; 쯌; 쯌; ) HANGUL SYLLABLE JJYUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBCC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBCC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_157)
{
    // CBCD;CBCD;110D 1172 11BC;CBCD;110D 1172 11BC; 
    // (쯍; 쯍; 쯍; 쯍; 쯍; ) HANGUL SYLLABLE JJYUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBCD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBCD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_158)
{
    // CBCE;CBCE;110D 1172 11BD;CBCE;110D 1172 11BD; 
    // (쯎; 쯎; 쯎; 쯎; 쯎; ) HANGUL SYLLABLE JJYUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCBCE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBCE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_159)
{
    // CBCF;CBCF;110D 1172 11BE;CBCF;110D 1172 11BE; 
    // (쯏; 쯏; 쯏; 쯏; 쯏; ) HANGUL SYLLABLE JJYUC
    {
        std::array<uint32_t, 1> const source = {{ 0xCBCF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBCF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_160)
{
    // CBD0;CBD0;110D 1172 11BF;CBD0;110D 1172 11BF; 
    // (쯐; 쯐; 쯐; 쯐; 쯐; ) HANGUL SYLLABLE JJYUK
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_161)
{
    // CBD1;CBD1;110D 1172 11C0;CBD1;110D 1172 11C0; 
    // (쯑; 쯑; 쯑; 쯑; 쯑; ) HANGUL SYLLABLE JJYUT
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_162)
{
    // CBD2;CBD2;110D 1172 11C1;CBD2;110D 1172 11C1; 
    // (쯒; 쯒; 쯒; 쯒; 쯒; ) HANGUL SYLLABLE JJYUP
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_163)
{
    // CBD3;CBD3;110D 1172 11C2;CBD3;110D 1172 11C2; 
    // (쯓; 쯓; 쯓; 쯓; 쯓; ) HANGUL SYLLABLE JJYUH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_164)
{
    // CBD4;CBD4;110D 1173;CBD4;110D 1173; 
    // (쯔; 쯔; 쯔; 쯔; 쯔; ) HANGUL SYLLABLE JJEU
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_165)
{
    // CBD5;CBD5;110D 1173 11A8;CBD5;110D 1173 11A8; 
    // (쯕; 쯕; 쯕; 쯕; 쯕; ) HANGUL SYLLABLE JJEUG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_166)
{
    // CBD6;CBD6;110D 1173 11A9;CBD6;110D 1173 11A9; 
    // (쯖; 쯖; 쯖; 쯖; 쯖; ) HANGUL SYLLABLE JJEUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_167)
{
    // CBD7;CBD7;110D 1173 11AA;CBD7;110D 1173 11AA; 
    // (쯗; 쯗; 쯗; 쯗; 쯗; ) HANGUL SYLLABLE JJEUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_168)
{
    // CBD8;CBD8;110D 1173 11AB;CBD8;110D 1173 11AB; 
    // (쯘; 쯘; 쯘; 쯘; 쯘; ) HANGUL SYLLABLE JJEUN
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_169)
{
    // CBD9;CBD9;110D 1173 11AC;CBD9;110D 1173 11AC; 
    // (쯙; 쯙; 쯙; 쯙; 쯙; ) HANGUL SYLLABLE JJEUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCBD9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBD9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_170)
{
    // CBDA;CBDA;110D 1173 11AD;CBDA;110D 1173 11AD; 
    // (쯚; 쯚; 쯚; 쯚; 쯚; ) HANGUL SYLLABLE JJEUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBDA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBDA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_171)
{
    // CBDB;CBDB;110D 1173 11AE;CBDB;110D 1173 11AE; 
    // (쯛; 쯛; 쯛; 쯛; 쯛; ) HANGUL SYLLABLE JJEUD
    {
        std::array<uint32_t, 1> const source = {{ 0xCBDB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBDB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_172)
{
    // CBDC;CBDC;110D 1173 11AF;CBDC;110D 1173 11AF; 
    // (쯜; 쯜; 쯜; 쯜; 쯜; ) HANGUL SYLLABLE JJEUL
    {
        std::array<uint32_t, 1> const source = {{ 0xCBDC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBDC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_173)
{
    // CBDD;CBDD;110D 1173 11B0;CBDD;110D 1173 11B0; 
    // (쯝; 쯝; 쯝; 쯝; 쯝; ) HANGUL SYLLABLE JJEULG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBDD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBDD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_174)
{
    // CBDE;CBDE;110D 1173 11B1;CBDE;110D 1173 11B1; 
    // (쯞; 쯞; 쯞; 쯞; 쯞; ) HANGUL SYLLABLE JJEULM
    {
        std::array<uint32_t, 1> const source = {{ 0xCBDE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBDE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_175)
{
    // CBDF;CBDF;110D 1173 11B2;CBDF;110D 1173 11B2; 
    // (쯟; 쯟; 쯟; 쯟; 쯟; ) HANGUL SYLLABLE JJEULB
    {
        std::array<uint32_t, 1> const source = {{ 0xCBDF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBDF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_176)
{
    // CBE0;CBE0;110D 1173 11B3;CBE0;110D 1173 11B3; 
    // (쯠; 쯠; 쯠; 쯠; 쯠; ) HANGUL SYLLABLE JJEULS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_177)
{
    // CBE1;CBE1;110D 1173 11B4;CBE1;110D 1173 11B4; 
    // (쯡; 쯡; 쯡; 쯡; 쯡; ) HANGUL SYLLABLE JJEULT
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_178)
{
    // CBE2;CBE2;110D 1173 11B5;CBE2;110D 1173 11B5; 
    // (쯢; 쯢; 쯢; 쯢; 쯢; ) HANGUL SYLLABLE JJEULP
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_179)
{
    // CBE3;CBE3;110D 1173 11B6;CBE3;110D 1173 11B6; 
    // (쯣; 쯣; 쯣; 쯣; 쯣; ) HANGUL SYLLABLE JJEULH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_180)
{
    // CBE4;CBE4;110D 1173 11B7;CBE4;110D 1173 11B7; 
    // (쯤; 쯤; 쯤; 쯤; 쯤; ) HANGUL SYLLABLE JJEUM
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_181)
{
    // CBE5;CBE5;110D 1173 11B8;CBE5;110D 1173 11B8; 
    // (쯥; 쯥; 쯥; 쯥; 쯥; ) HANGUL SYLLABLE JJEUB
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_182)
{
    // CBE6;CBE6;110D 1173 11B9;CBE6;110D 1173 11B9; 
    // (쯦; 쯦; 쯦; 쯦; 쯦; ) HANGUL SYLLABLE JJEUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_183)
{
    // CBE7;CBE7;110D 1173 11BA;CBE7;110D 1173 11BA; 
    // (쯧; 쯧; 쯧; 쯧; 쯧; ) HANGUL SYLLABLE JJEUS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_184)
{
    // CBE8;CBE8;110D 1173 11BB;CBE8;110D 1173 11BB; 
    // (쯨; 쯨; 쯨; 쯨; 쯨; ) HANGUL SYLLABLE JJEUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_185)
{
    // CBE9;CBE9;110D 1173 11BC;CBE9;110D 1173 11BC; 
    // (쯩; 쯩; 쯩; 쯩; 쯩; ) HANGUL SYLLABLE JJEUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBE9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBE9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_186)
{
    // CBEA;CBEA;110D 1173 11BD;CBEA;110D 1173 11BD; 
    // (쯪; 쯪; 쯪; 쯪; 쯪; ) HANGUL SYLLABLE JJEUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCBEA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBEA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_187)
{
    // CBEB;CBEB;110D 1173 11BE;CBEB;110D 1173 11BE; 
    // (쯫; 쯫; 쯫; 쯫; 쯫; ) HANGUL SYLLABLE JJEUC
    {
        std::array<uint32_t, 1> const source = {{ 0xCBEB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBEB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_188)
{
    // CBEC;CBEC;110D 1173 11BF;CBEC;110D 1173 11BF; 
    // (쯬; 쯬; 쯬; 쯬; 쯬; ) HANGUL SYLLABLE JJEUK
    {
        std::array<uint32_t, 1> const source = {{ 0xCBEC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBEC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_189)
{
    // CBED;CBED;110D 1173 11C0;CBED;110D 1173 11C0; 
    // (쯭; 쯭; 쯭; 쯭; 쯭; ) HANGUL SYLLABLE JJEUT
    {
        std::array<uint32_t, 1> const source = {{ 0xCBED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBED }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_190)
{
    // CBEE;CBEE;110D 1173 11C1;CBEE;110D 1173 11C1; 
    // (쯮; 쯮; 쯮; 쯮; 쯮; ) HANGUL SYLLABLE JJEUP
    {
        std::array<uint32_t, 1> const source = {{ 0xCBEE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBEE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_191)
{
    // CBEF;CBEF;110D 1173 11C2;CBEF;110D 1173 11C2; 
    // (쯯; 쯯; 쯯; 쯯; 쯯; ) HANGUL SYLLABLE JJEUH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBEF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBEF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_192)
{
    // CBF0;CBF0;110D 1174;CBF0;110D 1174; 
    // (쯰; 쯰; 쯰; 쯰; 쯰; ) HANGUL SYLLABLE JJYI
    {
        std::array<uint32_t, 1> const source = {{ 0xCBF0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBF0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_193)
{
    // CBF1;CBF1;110D 1174 11A8;CBF1;110D 1174 11A8; 
    // (쯱; 쯱; 쯱; 쯱; 쯱; ) HANGUL SYLLABLE JJYIG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBF1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBF1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_194)
{
    // CBF2;CBF2;110D 1174 11A9;CBF2;110D 1174 11A9; 
    // (쯲; 쯲; 쯲; 쯲; 쯲; ) HANGUL SYLLABLE JJYIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xCBF2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBF2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_195)
{
    // CBF3;CBF3;110D 1174 11AA;CBF3;110D 1174 11AA; 
    // (쯳; 쯳; 쯳; 쯳; 쯳; ) HANGUL SYLLABLE JJYIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xCBF3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBF3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_196)
{
    // CBF4;CBF4;110D 1174 11AB;CBF4;110D 1174 11AB; 
    // (쯴; 쯴; 쯴; 쯴; 쯴; ) HANGUL SYLLABLE JJYIN
    {
        std::array<uint32_t, 1> const source = {{ 0xCBF4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBF4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_197)
{
    // CBF5;CBF5;110D 1174 11AC;CBF5;110D 1174 11AC; 
    // (쯵; 쯵; 쯵; 쯵; 쯵; ) HANGUL SYLLABLE JJYINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xCBF5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBF5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_198)
{
    // CBF6;CBF6;110D 1174 11AD;CBF6;110D 1174 11AD; 
    // (쯶; 쯶; 쯶; 쯶; 쯶; ) HANGUL SYLLABLE JJYINH
    {
        std::array<uint32_t, 1> const source = {{ 0xCBF6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBF6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_052_199)
{
    // CBF7;CBF7;110D 1174 11AE;CBF7;110D 1174 11AE; 
    // (쯷; 쯷; 쯷; 쯷; 쯷; ) HANGUL SYLLABLE JJYID
    {
        std::array<uint32_t, 1> const source = {{ 0xCBF7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xCBF7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


