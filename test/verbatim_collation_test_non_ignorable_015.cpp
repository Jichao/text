// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_015_000)
{
    // 2036 0061;	
    // (‶) REVERSED DOUBLE PRIME	[03AC 03AC 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2036, 0x0061 };
    uint32_t const ces[12] = { 0x03AC, 0x03AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_001)
{
    // 2036 0041;	
    // (‶) REVERSED DOUBLE PRIME	[03AC 03AC 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2036, 0x0041 };
    uint32_t const ces[12] = { 0x03AC, 0x03AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_002)
{
    // 2036 0062;	
    // (‶) REVERSED DOUBLE PRIME	[03AC 03AC 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2036, 0x0062 };
    uint32_t const ces[12] = { 0x03AC, 0x03AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_003)
{
    // 2035 0061;	
    // (‵) REVERSED PRIME	[03AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2035, 0x0061 };
    uint32_t const ces[9] = { 0x03AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_004)
{
    // 2035 0041;	
    // (‵) REVERSED PRIME	[03AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2035, 0x0041 };
    uint32_t const ces[9] = { 0x03AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_005)
{
    // 2035 0062;	
    // (‵) REVERSED PRIME	[03AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2035, 0x0062 };
    uint32_t const ces[9] = { 0x03AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_006)
{
    // 3003 0021;	
    // (〃) DITTO MARK	[03AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3003, 0x0021 };
    uint32_t const ces[9] = { 0x03AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_007)
{
    // 3003 003F;	
    // (〃) DITTO MARK	[03AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3003, 0x003F };
    uint32_t const ces[9] = { 0x03AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_008)
{
    // 3003 0061;	
    // (〃) DITTO MARK	[03AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3003, 0x0061 };
    uint32_t const ces[9] = { 0x03AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_009)
{
    // 3003 0041;	
    // (〃) DITTO MARK	[03AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3003, 0x0041 };
    uint32_t const ces[9] = { 0x03AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_010)
{
    // 3003 0062;	
    // (〃) DITTO MARK	[03AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3003, 0x0062 };
    uint32_t const ces[9] = { 0x03AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_011)
{
    // 303D 0021;	
    // (〽) PART ALTERNATION MARK	[03AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303D, 0x0021 };
    uint32_t const ces[9] = { 0x03AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_012)
{
    // 303D 003F;	
    // (〽) PART ALTERNATION MARK	[03AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303D, 0x003F };
    uint32_t const ces[9] = { 0x03AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_013)
{
    // 303D 0061;	
    // (〽) PART ALTERNATION MARK	[03AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303D, 0x0061 };
    uint32_t const ces[9] = { 0x03AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_014)
{
    // 303D 0041;	
    // (〽) PART ALTERNATION MARK	[03AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x303D, 0x0041 };
    uint32_t const ces[9] = { 0x03AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_015)
{
    // 303D 0062;	
    // (〽) PART ALTERNATION MARK	[03AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x303D, 0x0062 };
    uint32_t const ces[9] = { 0x03AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_016)
{
    // 2038 0021;	
    // (‸) CARET	[03AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2038, 0x0021 };
    uint32_t const ces[9] = { 0x03AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_017)
{
    // 2038 003F;	
    // (‸) CARET	[03AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2038, 0x003F };
    uint32_t const ces[9] = { 0x03AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_018)
{
    // 2038 0061;	
    // (‸) CARET	[03AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2038, 0x0061 };
    uint32_t const ces[9] = { 0x03AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_019)
{
    // 2038 0041;	
    // (‸) CARET	[03AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2038, 0x0041 };
    uint32_t const ces[9] = { 0x03AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_020)
{
    // 2038 0062;	
    // (‸) CARET	[03AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2038, 0x0062 };
    uint32_t const ces[9] = { 0x03AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_021)
{
    // 203B 0021;	
    // (※) REFERENCE MARK	[03B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203B, 0x0021 };
    uint32_t const ces[9] = { 0x03B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_022)
{
    // 203B 003F;	
    // (※) REFERENCE MARK	[03B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203B, 0x003F };
    uint32_t const ces[9] = { 0x03B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_023)
{
    // 203B 0061;	
    // (※) REFERENCE MARK	[03B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203B, 0x0061 };
    uint32_t const ces[9] = { 0x03B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_024)
{
    // 203B 0041;	
    // (※) REFERENCE MARK	[03B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x203B, 0x0041 };
    uint32_t const ces[9] = { 0x03B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_025)
{
    // 203B 0062;	
    // (※) REFERENCE MARK	[03B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203B, 0x0062 };
    uint32_t const ces[9] = { 0x03B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_026)
{
    // 203F 0021;	
    // (‿) UNDERTIE	[03B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203F, 0x0021 };
    uint32_t const ces[9] = { 0x03B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_027)
{
    // 203F 003F;	
    // (‿) UNDERTIE	[03B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203F, 0x003F };
    uint32_t const ces[9] = { 0x03B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_028)
{
    // 203F 0061;	
    // (‿) UNDERTIE	[03B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203F, 0x0061 };
    uint32_t const ces[9] = { 0x03B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_029)
{
    // 203F 0041;	
    // (‿) UNDERTIE	[03B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x203F, 0x0041 };
    uint32_t const ces[9] = { 0x03B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_030)
{
    // 203F 0062;	
    // (‿) UNDERTIE	[03B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x203F, 0x0062 };
    uint32_t const ces[9] = { 0x03B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_031)
{
    // 2054 0021;	
    // (⁔) INVERTED UNDERTIE	[03B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2054, 0x0021 };
    uint32_t const ces[9] = { 0x03B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_032)
{
    // 2054 003F;	
    // (⁔) INVERTED UNDERTIE	[03B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2054, 0x003F };
    uint32_t const ces[9] = { 0x03B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_033)
{
    // 2054 0061;	
    // (⁔) INVERTED UNDERTIE	[03B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2054, 0x0061 };
    uint32_t const ces[9] = { 0x03B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_034)
{
    // 2054 0041;	
    // (⁔) INVERTED UNDERTIE	[03B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2054, 0x0041 };
    uint32_t const ces[9] = { 0x03B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_035)
{
    // 2054 0062;	
    // (⁔) INVERTED UNDERTIE	[03B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2054, 0x0062 };
    uint32_t const ces[9] = { 0x03B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_036)
{
    // 2040 0021;	
    // (⁀) CHARACTER TIE	[03B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2040, 0x0021 };
    uint32_t const ces[9] = { 0x03B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_037)
{
    // 2040 003F;	
    // (⁀) CHARACTER TIE	[03B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2040, 0x003F };
    uint32_t const ces[9] = { 0x03B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_038)
{
    // 2040 0061;	
    // (⁀) CHARACTER TIE	[03B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2040, 0x0061 };
    uint32_t const ces[9] = { 0x03B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_039)
{
    // 2040 0041;	
    // (⁀) CHARACTER TIE	[03B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2040, 0x0041 };
    uint32_t const ces[9] = { 0x03B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_040)
{
    // 2040 0062;	
    // (⁀) CHARACTER TIE	[03B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2040, 0x0062 };
    uint32_t const ces[9] = { 0x03B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_041)
{
    // 2050 0021;	
    // (⁐) CLOSE UP	[03B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2050, 0x0021 };
    uint32_t const ces[9] = { 0x03B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_042)
{
    // 2050 003F;	
    // (⁐) CLOSE UP	[03B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2050, 0x003F };
    uint32_t const ces[9] = { 0x03B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_043)
{
    // 2050 0061;	
    // (⁐) CLOSE UP	[03B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2050, 0x0061 };
    uint32_t const ces[9] = { 0x03B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_044)
{
    // 2050 0041;	
    // (⁐) CLOSE UP	[03B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2050, 0x0041 };
    uint32_t const ces[9] = { 0x03B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_045)
{
    // 2050 0062;	
    // (⁐) CLOSE UP	[03B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2050, 0x0062 };
    uint32_t const ces[9] = { 0x03B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_046)
{
    // 2041 0021;	
    // (⁁) CARET INSERTION POINT	[03B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2041, 0x0021 };
    uint32_t const ces[9] = { 0x03B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_047)
{
    // 2041 003F;	
    // (⁁) CARET INSERTION POINT	[03B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2041, 0x003F };
    uint32_t const ces[9] = { 0x03B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_048)
{
    // 2041 0061;	
    // (⁁) CARET INSERTION POINT	[03B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2041, 0x0061 };
    uint32_t const ces[9] = { 0x03B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_049)
{
    // 2041 0041;	
    // (⁁) CARET INSERTION POINT	[03B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2041, 0x0041 };
    uint32_t const ces[9] = { 0x03B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_050)
{
    // 2041 0062;	
    // (⁁) CARET INSERTION POINT	[03B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2041, 0x0062 };
    uint32_t const ces[9] = { 0x03B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_051)
{
    // 2042 0021;	
    // (⁂) ASTERISM	[03B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2042, 0x0021 };
    uint32_t const ces[9] = { 0x03B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_052)
{
    // 2042 003F;	
    // (⁂) ASTERISM	[03B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2042, 0x003F };
    uint32_t const ces[9] = { 0x03B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_053)
{
    // 2042 0061;	
    // (⁂) ASTERISM	[03B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2042, 0x0061 };
    uint32_t const ces[9] = { 0x03B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_054)
{
    // 2042 0041;	
    // (⁂) ASTERISM	[03B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2042, 0x0041 };
    uint32_t const ces[9] = { 0x03B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_055)
{
    // 2042 0062;	
    // (⁂) ASTERISM	[03B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2042, 0x0062 };
    uint32_t const ces[9] = { 0x03B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_056)
{
    // 2E00 0021;	
    // (⸀) RIGHT ANGLE SUBSTITUTION MARKER	[03B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E00, 0x0021 };
    uint32_t const ces[9] = { 0x03B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_057)
{
    // 2E00 003F;	
    // (⸀) RIGHT ANGLE SUBSTITUTION MARKER	[03B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E00, 0x003F };
    uint32_t const ces[9] = { 0x03B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_058)
{
    // 2E00 0061;	
    // (⸀) RIGHT ANGLE SUBSTITUTION MARKER	[03B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E00, 0x0061 };
    uint32_t const ces[9] = { 0x03B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_059)
{
    // 2E00 0041;	
    // (⸀) RIGHT ANGLE SUBSTITUTION MARKER	[03B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E00, 0x0041 };
    uint32_t const ces[9] = { 0x03B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_060)
{
    // 2E00 0062;	
    // (⸀) RIGHT ANGLE SUBSTITUTION MARKER	[03B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E00, 0x0062 };
    uint32_t const ces[9] = { 0x03B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_061)
{
    // 2E01 0021;	
    // (⸁) RIGHT ANGLE DOTTED SUBSTITUTION MARKER	[03B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E01, 0x0021 };
    uint32_t const ces[9] = { 0x03B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_062)
{
    // 2E01 003F;	
    // (⸁) RIGHT ANGLE DOTTED SUBSTITUTION MARKER	[03B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E01, 0x003F };
    uint32_t const ces[9] = { 0x03B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_063)
{
    // 2E01 0061;	
    // (⸁) RIGHT ANGLE DOTTED SUBSTITUTION MARKER	[03B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E01, 0x0061 };
    uint32_t const ces[9] = { 0x03B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_064)
{
    // 2E01 0041;	
    // (⸁) RIGHT ANGLE DOTTED SUBSTITUTION MARKER	[03B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E01, 0x0041 };
    uint32_t const ces[9] = { 0x03B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_065)
{
    // 2E01 0062;	
    // (⸁) RIGHT ANGLE DOTTED SUBSTITUTION MARKER	[03B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E01, 0x0062 };
    uint32_t const ces[9] = { 0x03B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_066)
{
    // 2E06 0021;	
    // (⸆) RAISED INTERPOLATION MARKER	[03B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E06, 0x0021 };
    uint32_t const ces[9] = { 0x03B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_067)
{
    // 2E06 003F;	
    // (⸆) RAISED INTERPOLATION MARKER	[03B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E06, 0x003F };
    uint32_t const ces[9] = { 0x03B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_068)
{
    // 2E06 0061;	
    // (⸆) RAISED INTERPOLATION MARKER	[03B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E06, 0x0061 };
    uint32_t const ces[9] = { 0x03B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_069)
{
    // 2E06 0041;	
    // (⸆) RAISED INTERPOLATION MARKER	[03B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E06, 0x0041 };
    uint32_t const ces[9] = { 0x03B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_070)
{
    // 2E06 0062;	
    // (⸆) RAISED INTERPOLATION MARKER	[03B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E06, 0x0062 };
    uint32_t const ces[9] = { 0x03B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_071)
{
    // 2E07 0021;	
    // (⸇) RAISED DOTTED INTERPOLATION MARKER	[03BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E07, 0x0021 };
    uint32_t const ces[9] = { 0x03BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_072)
{
    // 2E07 003F;	
    // (⸇) RAISED DOTTED INTERPOLATION MARKER	[03BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E07, 0x003F };
    uint32_t const ces[9] = { 0x03BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_073)
{
    // 2E07 0061;	
    // (⸇) RAISED DOTTED INTERPOLATION MARKER	[03BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E07, 0x0061 };
    uint32_t const ces[9] = { 0x03BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_074)
{
    // 2E07 0041;	
    // (⸇) RAISED DOTTED INTERPOLATION MARKER	[03BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E07, 0x0041 };
    uint32_t const ces[9] = { 0x03BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_075)
{
    // 2E07 0062;	
    // (⸇) RAISED DOTTED INTERPOLATION MARKER	[03BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E07, 0x0062 };
    uint32_t const ces[9] = { 0x03BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_076)
{
    // 2E08 0021;	
    // (⸈) DOTTED TRANSPOSITION MARKER	[03BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E08, 0x0021 };
    uint32_t const ces[9] = { 0x03BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_077)
{
    // 2E08 003F;	
    // (⸈) DOTTED TRANSPOSITION MARKER	[03BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E08, 0x003F };
    uint32_t const ces[9] = { 0x03BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_078)
{
    // 2E08 0061;	
    // (⸈) DOTTED TRANSPOSITION MARKER	[03BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E08, 0x0061 };
    uint32_t const ces[9] = { 0x03BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_079)
{
    // 2E08 0041;	
    // (⸈) DOTTED TRANSPOSITION MARKER	[03BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E08, 0x0041 };
    uint32_t const ces[9] = { 0x03BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_080)
{
    // 2E08 0062;	
    // (⸈) DOTTED TRANSPOSITION MARKER	[03BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E08, 0x0062 };
    uint32_t const ces[9] = { 0x03BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_081)
{
    // 2E0B 0021;	
    // (⸋) RAISED SQUARE	[03BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0B, 0x0021 };
    uint32_t const ces[9] = { 0x03BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_082)
{
    // 2E0B 003F;	
    // (⸋) RAISED SQUARE	[03BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0B, 0x003F };
    uint32_t const ces[9] = { 0x03BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_083)
{
    // 2E0B 0061;	
    // (⸋) RAISED SQUARE	[03BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0B, 0x0061 };
    uint32_t const ces[9] = { 0x03BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_084)
{
    // 2E0B 0041;	
    // (⸋) RAISED SQUARE	[03BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E0B, 0x0041 };
    uint32_t const ces[9] = { 0x03BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_085)
{
    // 2E0B 0062;	
    // (⸋) RAISED SQUARE	[03BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0B, 0x0062 };
    uint32_t const ces[9] = { 0x03BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_086)
{
    // 2E0E 0021;	
    // (⸎) EDITORIAL CORONIS	[03BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0E, 0x0021 };
    uint32_t const ces[9] = { 0x03BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_087)
{
    // 2E0E 003F;	
    // (⸎) EDITORIAL CORONIS	[03BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0E, 0x003F };
    uint32_t const ces[9] = { 0x03BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_088)
{
    // 2E0E 0061;	
    // (⸎) EDITORIAL CORONIS	[03BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0E, 0x0061 };
    uint32_t const ces[9] = { 0x03BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_089)
{
    // 2E0E 0041;	
    // (⸎) EDITORIAL CORONIS	[03BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E0E, 0x0041 };
    uint32_t const ces[9] = { 0x03BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_090)
{
    // 2E0E 0062;	
    // (⸎) EDITORIAL CORONIS	[03BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0E, 0x0062 };
    uint32_t const ces[9] = { 0x03BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_091)
{
    // 2E0F 0021;	
    // (⸏) PARAGRAPHOS	[03BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0F, 0x0021 };
    uint32_t const ces[9] = { 0x03BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_092)
{
    // 2E0F 003F;	
    // (⸏) PARAGRAPHOS	[03BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0F, 0x003F };
    uint32_t const ces[9] = { 0x03BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_093)
{
    // 2E0F 0061;	
    // (⸏) PARAGRAPHOS	[03BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0F, 0x0061 };
    uint32_t const ces[9] = { 0x03BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_094)
{
    // 2E0F 0041;	
    // (⸏) PARAGRAPHOS	[03BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E0F, 0x0041 };
    uint32_t const ces[9] = { 0x03BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_095)
{
    // 2E0F 0062;	
    // (⸏) PARAGRAPHOS	[03BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0F, 0x0062 };
    uint32_t const ces[9] = { 0x03BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_096)
{
    // 2E10 0021;	
    // (⸐) FORKED PARAGRAPHOS	[03BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E10, 0x0021 };
    uint32_t const ces[9] = { 0x03BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_097)
{
    // 2E10 003F;	
    // (⸐) FORKED PARAGRAPHOS	[03BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E10, 0x003F };
    uint32_t const ces[9] = { 0x03BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_098)
{
    // 2E10 0061;	
    // (⸐) FORKED PARAGRAPHOS	[03BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E10, 0x0061 };
    uint32_t const ces[9] = { 0x03BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_099)
{
    // 2E10 0041;	
    // (⸐) FORKED PARAGRAPHOS	[03BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E10, 0x0041 };
    uint32_t const ces[9] = { 0x03BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_100)
{
    // 2E10 0062;	
    // (⸐) FORKED PARAGRAPHOS	[03BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E10, 0x0062 };
    uint32_t const ces[9] = { 0x03BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_101)
{
    // 2E11 0021;	
    // (⸑) REVERSED FORKED PARAGRAPHOS	[03C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E11, 0x0021 };
    uint32_t const ces[9] = { 0x03C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_102)
{
    // 2E11 003F;	
    // (⸑) REVERSED FORKED PARAGRAPHOS	[03C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E11, 0x003F };
    uint32_t const ces[9] = { 0x03C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_103)
{
    // 2E11 0061;	
    // (⸑) REVERSED FORKED PARAGRAPHOS	[03C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E11, 0x0061 };
    uint32_t const ces[9] = { 0x03C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_104)
{
    // 2E11 0041;	
    // (⸑) REVERSED FORKED PARAGRAPHOS	[03C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E11, 0x0041 };
    uint32_t const ces[9] = { 0x03C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_105)
{
    // 2E11 0062;	
    // (⸑) REVERSED FORKED PARAGRAPHOS	[03C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E11, 0x0062 };
    uint32_t const ces[9] = { 0x03C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_106)
{
    // 2E12 0021;	
    // (⸒) HYPODIASTOLE	[03C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E12, 0x0021 };
    uint32_t const ces[9] = { 0x03C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_107)
{
    // 2E12 003F;	
    // (⸒) HYPODIASTOLE	[03C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E12, 0x003F };
    uint32_t const ces[9] = { 0x03C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_108)
{
    // 2E12 0061;	
    // (⸒) HYPODIASTOLE	[03C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E12, 0x0061 };
    uint32_t const ces[9] = { 0x03C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_109)
{
    // 2E12 0041;	
    // (⸒) HYPODIASTOLE	[03C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E12, 0x0041 };
    uint32_t const ces[9] = { 0x03C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_110)
{
    // 2E12 0062;	
    // (⸒) HYPODIASTOLE	[03C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E12, 0x0062 };
    uint32_t const ces[9] = { 0x03C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_111)
{
    // 2E13 0021;	
    // (⸓) DOTTED OBELOS	[03C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E13, 0x0021 };
    uint32_t const ces[9] = { 0x03C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_112)
{
    // 2E13 003F;	
    // (⸓) DOTTED OBELOS	[03C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E13, 0x003F };
    uint32_t const ces[9] = { 0x03C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_113)
{
    // 2E13 0061;	
    // (⸓) DOTTED OBELOS	[03C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E13, 0x0061 };
    uint32_t const ces[9] = { 0x03C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_114)
{
    // 2E13 0041;	
    // (⸓) DOTTED OBELOS	[03C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E13, 0x0041 };
    uint32_t const ces[9] = { 0x03C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_115)
{
    // 2E13 0062;	
    // (⸓) DOTTED OBELOS	[03C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E13, 0x0062 };
    uint32_t const ces[9] = { 0x03C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_116)
{
    // 2E14 0021;	
    // (⸔) DOWNWARDS ANCORA	[03C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E14, 0x0021 };
    uint32_t const ces[9] = { 0x03C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_117)
{
    // 2E14 003F;	
    // (⸔) DOWNWARDS ANCORA	[03C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E14, 0x003F };
    uint32_t const ces[9] = { 0x03C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_118)
{
    // 2E14 0061;	
    // (⸔) DOWNWARDS ANCORA	[03C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E14, 0x0061 };
    uint32_t const ces[9] = { 0x03C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_119)
{
    // 2E14 0041;	
    // (⸔) DOWNWARDS ANCORA	[03C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E14, 0x0041 };
    uint32_t const ces[9] = { 0x03C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_120)
{
    // 2E14 0062;	
    // (⸔) DOWNWARDS ANCORA	[03C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E14, 0x0062 };
    uint32_t const ces[9] = { 0x03C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_121)
{
    // 2E15 0021;	
    // (⸕) UPWARDS ANCORA	[03C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E15, 0x0021 };
    uint32_t const ces[9] = { 0x03C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_122)
{
    // 2E15 003F;	
    // (⸕) UPWARDS ANCORA	[03C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E15, 0x003F };
    uint32_t const ces[9] = { 0x03C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_123)
{
    // 2E15 0061;	
    // (⸕) UPWARDS ANCORA	[03C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E15, 0x0061 };
    uint32_t const ces[9] = { 0x03C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_124)
{
    // 2E15 0041;	
    // (⸕) UPWARDS ANCORA	[03C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E15, 0x0041 };
    uint32_t const ces[9] = { 0x03C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_125)
{
    // 2E15 0062;	
    // (⸕) UPWARDS ANCORA	[03C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E15, 0x0062 };
    uint32_t const ces[9] = { 0x03C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_126)
{
    // 2E16 0021;	
    // (⸖) DOTTED RIGHT-POINTING ANGLE	[03C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E16, 0x0021 };
    uint32_t const ces[9] = { 0x03C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_127)
{
    // 2E16 003F;	
    // (⸖) DOTTED RIGHT-POINTING ANGLE	[03C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E16, 0x003F };
    uint32_t const ces[9] = { 0x03C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_128)
{
    // 2E16 0061;	
    // (⸖) DOTTED RIGHT-POINTING ANGLE	[03C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E16, 0x0061 };
    uint32_t const ces[9] = { 0x03C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_129)
{
    // 2E16 0041;	
    // (⸖) DOTTED RIGHT-POINTING ANGLE	[03C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E16, 0x0041 };
    uint32_t const ces[9] = { 0x03C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_130)
{
    // 2E16 0062;	
    // (⸖) DOTTED RIGHT-POINTING ANGLE	[03C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E16, 0x0062 };
    uint32_t const ces[9] = { 0x03C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_131)
{
    // 2E1A 0021;	
    // (⸚) HYPHEN WITH DIAERESIS	[03C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1A, 0x0021 };
    uint32_t const ces[9] = { 0x03C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_132)
{
    // 2E1A 003F;	
    // (⸚) HYPHEN WITH DIAERESIS	[03C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1A, 0x003F };
    uint32_t const ces[9] = { 0x03C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_133)
{
    // 2E1A 0061;	
    // (⸚) HYPHEN WITH DIAERESIS	[03C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1A, 0x0061 };
    uint32_t const ces[9] = { 0x03C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_134)
{
    // 2E1A 0041;	
    // (⸚) HYPHEN WITH DIAERESIS	[03C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E1A, 0x0041 };
    uint32_t const ces[9] = { 0x03C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_135)
{
    // 2E1A 0062;	
    // (⸚) HYPHEN WITH DIAERESIS	[03C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1A, 0x0062 };
    uint32_t const ces[9] = { 0x03C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_136)
{
    // 2E1B 0021;	
    // (⸛) TILDE WITH RING ABOVE	[03C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1B, 0x0021 };
    uint32_t const ces[9] = { 0x03C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_137)
{
    // 2E1B 003F;	
    // (⸛) TILDE WITH RING ABOVE	[03C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1B, 0x003F };
    uint32_t const ces[9] = { 0x03C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_138)
{
    // 2E1B 0061;	
    // (⸛) TILDE WITH RING ABOVE	[03C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1B, 0x0061 };
    uint32_t const ces[9] = { 0x03C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_139)
{
    // 2E1B 0041;	
    // (⸛) TILDE WITH RING ABOVE	[03C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E1B, 0x0041 };
    uint32_t const ces[9] = { 0x03C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_140)
{
    // 2E1B 0062;	
    // (⸛) TILDE WITH RING ABOVE	[03C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1B, 0x0062 };
    uint32_t const ces[9] = { 0x03C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_141)
{
    // 2E1E 0021;	
    // (⸞) TILDE WITH DOT ABOVE	[03C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1E, 0x0021 };
    uint32_t const ces[9] = { 0x03C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_142)
{
    // 2E1E 003F;	
    // (⸞) TILDE WITH DOT ABOVE	[03C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1E, 0x003F };
    uint32_t const ces[9] = { 0x03C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_143)
{
    // 2E1E 0061;	
    // (⸞) TILDE WITH DOT ABOVE	[03C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1E, 0x0061 };
    uint32_t const ces[9] = { 0x03C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_144)
{
    // 2E1E 0041;	
    // (⸞) TILDE WITH DOT ABOVE	[03C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E1E, 0x0041 };
    uint32_t const ces[9] = { 0x03C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_145)
{
    // 2E1E 0062;	
    // (⸞) TILDE WITH DOT ABOVE	[03C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1E, 0x0062 };
    uint32_t const ces[9] = { 0x03C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_146)
{
    // 2E1F 0021;	
    // (⸟) TILDE WITH DOT BELOW	[03C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1F, 0x0021 };
    uint32_t const ces[9] = { 0x03C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_147)
{
    // 2E1F 003F;	
    // (⸟) TILDE WITH DOT BELOW	[03C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1F, 0x003F };
    uint32_t const ces[9] = { 0x03C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_148)
{
    // 2E1F 0061;	
    // (⸟) TILDE WITH DOT BELOW	[03C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1F, 0x0061 };
    uint32_t const ces[9] = { 0x03C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_149)
{
    // 2E1F 0041;	
    // (⸟) TILDE WITH DOT BELOW	[03C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E1F, 0x0041 };
    uint32_t const ces[9] = { 0x03C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_150)
{
    // 2E1F 0062;	
    // (⸟) TILDE WITH DOT BELOW	[03C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1F, 0x0062 };
    uint32_t const ces[9] = { 0x03C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_151)
{
    // 2E44 0021;	
    // (⹄) DOUBLE SUSPENSION MARK	[03CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E44, 0x0021 };
    uint32_t const ces[9] = { 0x03CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_152)
{
    // 2E44 003F;	
    // (⹄) DOUBLE SUSPENSION MARK	[03CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E44, 0x003F };
    uint32_t const ces[9] = { 0x03CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_153)
{
    // 2E44 0061;	
    // (⹄) DOUBLE SUSPENSION MARK	[03CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E44, 0x0061 };
    uint32_t const ces[9] = { 0x03CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_154)
{
    // 2E44 0041;	
    // (⹄) DOUBLE SUSPENSION MARK	[03CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E44, 0x0041 };
    uint32_t const ces[9] = { 0x03CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_155)
{
    // 2E44 0062;	
    // (⹄) DOUBLE SUSPENSION MARK	[03CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E44, 0x0062 };
    uint32_t const ces[9] = { 0x03CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_156)
{
    // 2E45 0021;	
    // (⹅) INVERTED LOW KAVYKA	[03CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E45, 0x0021 };
    uint32_t const ces[9] = { 0x03CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_157)
{
    // 2E45 003F;	
    // (⹅) INVERTED LOW KAVYKA	[03CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E45, 0x003F };
    uint32_t const ces[9] = { 0x03CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_158)
{
    // 2E45 0061;	
    // (⹅) INVERTED LOW KAVYKA	[03CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E45, 0x0061 };
    uint32_t const ces[9] = { 0x03CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_159)
{
    // 2E45 0041;	
    // (⹅) INVERTED LOW KAVYKA	[03CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E45, 0x0041 };
    uint32_t const ces[9] = { 0x03CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_160)
{
    // 2E45 0062;	
    // (⹅) INVERTED LOW KAVYKA	[03CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E45, 0x0062 };
    uint32_t const ces[9] = { 0x03CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_161)
{
    // 2E46 0021;	
    // (⹆) INVERTED LOW KAVYKA WITH KAVYKA ABOVE	[03CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E46, 0x0021 };
    uint32_t const ces[9] = { 0x03CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_162)
{
    // 2E46 003F;	
    // (⹆) INVERTED LOW KAVYKA WITH KAVYKA ABOVE	[03CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E46, 0x003F };
    uint32_t const ces[9] = { 0x03CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_163)
{
    // 2E46 0061;	
    // (⹆) INVERTED LOW KAVYKA WITH KAVYKA ABOVE	[03CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E46, 0x0061 };
    uint32_t const ces[9] = { 0x03CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_164)
{
    // 2E46 0041;	
    // (⹆) INVERTED LOW KAVYKA WITH KAVYKA ABOVE	[03CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E46, 0x0041 };
    uint32_t const ces[9] = { 0x03CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_165)
{
    // 2E46 0062;	
    // (⹆) INVERTED LOW KAVYKA WITH KAVYKA ABOVE	[03CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E46, 0x0062 };
    uint32_t const ces[9] = { 0x03CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_166)
{
    // 2E47 0021;	
    // (⹇) LOW KAVYKA	[03CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E47, 0x0021 };
    uint32_t const ces[9] = { 0x03CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_167)
{
    // 2E47 003F;	
    // (⹇) LOW KAVYKA	[03CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E47, 0x003F };
    uint32_t const ces[9] = { 0x03CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_168)
{
    // 2E47 0061;	
    // (⹇) LOW KAVYKA	[03CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E47, 0x0061 };
    uint32_t const ces[9] = { 0x03CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_169)
{
    // 2E47 0041;	
    // (⹇) LOW KAVYKA	[03CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E47, 0x0041 };
    uint32_t const ces[9] = { 0x03CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_170)
{
    // 2E47 0062;	
    // (⹇) LOW KAVYKA	[03CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E47, 0x0062 };
    uint32_t const ces[9] = { 0x03CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_171)
{
    // 2E48 0021;	
    // (⹈) LOW KAVYKA WITH DOT	[03CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E48, 0x0021 };
    uint32_t const ces[9] = { 0x03CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_172)
{
    // 2E48 003F;	
    // (⹈) LOW KAVYKA WITH DOT	[03CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E48, 0x003F };
    uint32_t const ces[9] = { 0x03CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_173)
{
    // 2E48 0061;	
    // (⹈) LOW KAVYKA WITH DOT	[03CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E48, 0x0061 };
    uint32_t const ces[9] = { 0x03CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_174)
{
    // 2E48 0041;	
    // (⹈) LOW KAVYKA WITH DOT	[03CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E48, 0x0041 };
    uint32_t const ces[9] = { 0x03CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_175)
{
    // 2E48 0062;	
    // (⹈) LOW KAVYKA WITH DOT	[03CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E48, 0x0062 };
    uint32_t const ces[9] = { 0x03CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_176)
{
    // A67E 0021;	
    // (꙾) CYRILLIC KAVYKA	[03CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67E, 0x0021 };
    uint32_t const ces[9] = { 0x03CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_177)
{
    // A67E 003F;	
    // (꙾) CYRILLIC KAVYKA	[03CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67E, 0x003F };
    uint32_t const ces[9] = { 0x03CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_178)
{
    // A67E 0061;	
    // (꙾) CYRILLIC KAVYKA	[03CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67E, 0x0061 };
    uint32_t const ces[9] = { 0x03CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_179)
{
    // A67E 0041;	
    // (꙾) CYRILLIC KAVYKA	[03CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA67E, 0x0041 };
    uint32_t const ces[9] = { 0x03CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_180)
{
    // A67E 0062;	
    // (꙾) CYRILLIC KAVYKA	[03CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67E, 0x0062 };
    uint32_t const ces[9] = { 0x03CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_181)
{
    // 055A 0021;	
    // (՚) ARMENIAN APOSTROPHE	[03D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055A, 0x0021 };
    uint32_t const ces[9] = { 0x03D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_182)
{
    // 055A 003F;	
    // (՚) ARMENIAN APOSTROPHE	[03D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055A, 0x003F };
    uint32_t const ces[9] = { 0x03D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_183)
{
    // 055A 0061;	
    // (՚) ARMENIAN APOSTROPHE	[03D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055A, 0x0061 };
    uint32_t const ces[9] = { 0x03D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_184)
{
    // 055A 0041;	
    // (՚) ARMENIAN APOSTROPHE	[03D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x055A, 0x0041 };
    uint32_t const ces[9] = { 0x03D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_185)
{
    // 055A 0062;	
    // (՚) ARMENIAN APOSTROPHE	[03D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055A, 0x0062 };
    uint32_t const ces[9] = { 0x03D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_186)
{
    // 055B 0021;	
    // (՛) ARMENIAN EMPHASIS MARK	[03D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055B, 0x0021 };
    uint32_t const ces[9] = { 0x03D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_187)
{
    // 055B 003F;	
    // (՛) ARMENIAN EMPHASIS MARK	[03D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055B, 0x003F };
    uint32_t const ces[9] = { 0x03D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_188)
{
    // 055B 0061;	
    // (՛) ARMENIAN EMPHASIS MARK	[03D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055B, 0x0061 };
    uint32_t const ces[9] = { 0x03D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_189)
{
    // 055B 0041;	
    // (՛) ARMENIAN EMPHASIS MARK	[03D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x055B, 0x0041 };
    uint32_t const ces[9] = { 0x03D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_190)
{
    // 055B 0062;	
    // (՛) ARMENIAN EMPHASIS MARK	[03D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055B, 0x0062 };
    uint32_t const ces[9] = { 0x03D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_191)
{
    // 055F 0021;	
    // (՟) ARMENIAN ABBREVIATION MARK	[03D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055F, 0x0021 };
    uint32_t const ces[9] = { 0x03D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_192)
{
    // 055F 003F;	
    // (՟) ARMENIAN ABBREVIATION MARK	[03D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055F, 0x003F };
    uint32_t const ces[9] = { 0x03D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_193)
{
    // 055F 0061;	
    // (՟) ARMENIAN ABBREVIATION MARK	[03D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055F, 0x0061 };
    uint32_t const ces[9] = { 0x03D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_194)
{
    // 055F 0041;	
    // (՟) ARMENIAN ABBREVIATION MARK	[03D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x055F, 0x0041 };
    uint32_t const ces[9] = { 0x03D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_195)
{
    // 055F 0062;	
    // (՟) ARMENIAN ABBREVIATION MARK	[03D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055F, 0x0062 };
    uint32_t const ces[9] = { 0x03D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_196)
{
    // 05BE 0021;	
    // (‎‎־‎‎) HEBREW PUNCTUATION MAQAF	[03D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BE, 0x0021 };
    uint32_t const ces[9] = { 0x03D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_197)
{
    // 05BE 003F;	
    // (‎‎־‎‎) HEBREW PUNCTUATION MAQAF	[03D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BE, 0x003F };
    uint32_t const ces[9] = { 0x03D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_198)
{
    // 05BE 0061;	
    // (‎‎־‎‎) HEBREW PUNCTUATION MAQAF	[03D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BE, 0x0061 };
    uint32_t const ces[9] = { 0x03D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_199)
{
    // 05BE 0041;	
    // (‎‎־‎‎) HEBREW PUNCTUATION MAQAF	[03D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05BE, 0x0041 };
    uint32_t const ces[9] = { 0x03D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_200)
{
    // 05BE 0062;	
    // (‎‎־‎‎) HEBREW PUNCTUATION MAQAF	[03D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BE, 0x0062 };
    uint32_t const ces[9] = { 0x03D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_201)
{
    // 05C0 0021;	
    // (‎‎׀‎‎) HEBREW PUNCTUATION PASEQ	[03D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C0, 0x0021 };
    uint32_t const ces[9] = { 0x03D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_202)
{
    // 05C0 003F;	
    // (‎‎׀‎‎) HEBREW PUNCTUATION PASEQ	[03D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C0, 0x003F };
    uint32_t const ces[9] = { 0x03D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_203)
{
    // 05C0 0061;	
    // (‎‎׀‎‎) HEBREW PUNCTUATION PASEQ	[03D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C0, 0x0061 };
    uint32_t const ces[9] = { 0x03D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_204)
{
    // 05C0 0041;	
    // (‎‎׀‎‎) HEBREW PUNCTUATION PASEQ	[03D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05C0, 0x0041 };
    uint32_t const ces[9] = { 0x03D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_205)
{
    // 05C0 0062;	
    // (‎‎׀‎‎) HEBREW PUNCTUATION PASEQ	[03D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C0, 0x0062 };
    uint32_t const ces[9] = { 0x03D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_206)
{
    // 05C3 0021;	
    // (‎‎׃‎‎) HEBREW PUNCTUATION SOF PASUQ	[03D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C3, 0x0021 };
    uint32_t const ces[9] = { 0x03D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_207)
{
    // 05C3 003F;	
    // (‎‎׃‎‎) HEBREW PUNCTUATION SOF PASUQ	[03D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C3, 0x003F };
    uint32_t const ces[9] = { 0x03D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_208)
{
    // 05C3 0061;	
    // (‎‎׃‎‎) HEBREW PUNCTUATION SOF PASUQ	[03D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C3, 0x0061 };
    uint32_t const ces[9] = { 0x03D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_209)
{
    // 05C3 0041;	
    // (‎‎׃‎‎) HEBREW PUNCTUATION SOF PASUQ	[03D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05C3, 0x0041 };
    uint32_t const ces[9] = { 0x03D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_210)
{
    // 05C3 0062;	
    // (‎‎׃‎‎) HEBREW PUNCTUATION SOF PASUQ	[03D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C3, 0x0062 };
    uint32_t const ces[9] = { 0x03D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_211)
{
    // 05C6 0021;	
    // (‎‎׆‎‎) HEBREW PUNCTUATION NUN HAFUKHA	[03D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C6, 0x0021 };
    uint32_t const ces[9] = { 0x03D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_212)
{
    // 05C6 003F;	
    // (‎‎׆‎‎) HEBREW PUNCTUATION NUN HAFUKHA	[03D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C6, 0x003F };
    uint32_t const ces[9] = { 0x03D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_213)
{
    // 05C6 0061;	
    // (‎‎׆‎‎) HEBREW PUNCTUATION NUN HAFUKHA	[03D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C6, 0x0061 };
    uint32_t const ces[9] = { 0x03D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_214)
{
    // 05C6 0041;	
    // (‎‎׆‎‎) HEBREW PUNCTUATION NUN HAFUKHA	[03D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05C6, 0x0041 };
    uint32_t const ces[9] = { 0x03D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_215)
{
    // 05C6 0062;	
    // (‎‎׆‎‎) HEBREW PUNCTUATION NUN HAFUKHA	[03D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C6, 0x0062 };
    uint32_t const ces[9] = { 0x03D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_216)
{
    // 05F3 0021;	
    // (‎‎׳‎‎) HEBREW PUNCTUATION GERESH	[03D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05F3, 0x0021 };
    uint32_t const ces[9] = { 0x03D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_217)
{
    // 05F3 003F;	
    // (‎‎׳‎‎) HEBREW PUNCTUATION GERESH	[03D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05F3, 0x003F };
    uint32_t const ces[9] = { 0x03D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_218)
{
    // 05F3 0061;	
    // (‎‎׳‎‎) HEBREW PUNCTUATION GERESH	[03D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05F3, 0x0061 };
    uint32_t const ces[9] = { 0x03D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_219)
{
    // 05F3 0041;	
    // (‎‎׳‎‎) HEBREW PUNCTUATION GERESH	[03D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05F3, 0x0041 };
    uint32_t const ces[9] = { 0x03D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_220)
{
    // 05F3 0062;	
    // (‎‎׳‎‎) HEBREW PUNCTUATION GERESH	[03D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05F3, 0x0062 };
    uint32_t const ces[9] = { 0x03D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_221)
{
    // 05F4 0021;	
    // (‎‎״‎‎) HEBREW PUNCTUATION GERSHAYIM	[03D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05F4, 0x0021 };
    uint32_t const ces[9] = { 0x03D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_222)
{
    // 05F4 003F;	
    // (‎‎״‎‎) HEBREW PUNCTUATION GERSHAYIM	[03D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05F4, 0x003F };
    uint32_t const ces[9] = { 0x03D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_223)
{
    // 05F4 0061;	
    // (‎‎״‎‎) HEBREW PUNCTUATION GERSHAYIM	[03D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05F4, 0x0061 };
    uint32_t const ces[9] = { 0x03D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_224)
{
    // 05F4 0041;	
    // (‎‎״‎‎) HEBREW PUNCTUATION GERSHAYIM	[03D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x05F4, 0x0041 };
    uint32_t const ces[9] = { 0x03D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_225)
{
    // 05F4 0062;	
    // (‎‎״‎‎) HEBREW PUNCTUATION GERSHAYIM	[03D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05F4, 0x0062 };
    uint32_t const ces[9] = { 0x03D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_226)
{
    // 070A 0021;	
    // (‎‎܊‎‎) SYRIAC CONTRACTION	[03D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070A, 0x0021 };
    uint32_t const ces[9] = { 0x03D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_227)
{
    // 070A 003F;	
    // (‎‎܊‎‎) SYRIAC CONTRACTION	[03D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070A, 0x003F };
    uint32_t const ces[9] = { 0x03D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_228)
{
    // 070A 0061;	
    // (‎‎܊‎‎) SYRIAC CONTRACTION	[03D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070A, 0x0061 };
    uint32_t const ces[9] = { 0x03D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_229)
{
    // 070A 0041;	
    // (‎‎܊‎‎) SYRIAC CONTRACTION	[03D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x070A, 0x0041 };
    uint32_t const ces[9] = { 0x03D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_230)
{
    // 070A 0062;	
    // (‎‎܊‎‎) SYRIAC CONTRACTION	[03D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070A, 0x0062 };
    uint32_t const ces[9] = { 0x03D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_231)
{
    // 070B 0021;	
    // (‎‎܋‎‎) SYRIAC HARKLEAN OBELUS	[03DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070B, 0x0021 };
    uint32_t const ces[9] = { 0x03DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_232)
{
    // 070B 003F;	
    // (‎‎܋‎‎) SYRIAC HARKLEAN OBELUS	[03DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070B, 0x003F };
    uint32_t const ces[9] = { 0x03DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_233)
{
    // 070B 0061;	
    // (‎‎܋‎‎) SYRIAC HARKLEAN OBELUS	[03DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070B, 0x0061 };
    uint32_t const ces[9] = { 0x03DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_234)
{
    // 070B 0041;	
    // (‎‎܋‎‎) SYRIAC HARKLEAN OBELUS	[03DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x070B, 0x0041 };
    uint32_t const ces[9] = { 0x03DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_235)
{
    // 070B 0062;	
    // (‎‎܋‎‎) SYRIAC HARKLEAN OBELUS	[03DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070B, 0x0062 };
    uint32_t const ces[9] = { 0x03DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_236)
{
    // 070C 0021;	
    // (‎‎܌‎‎) SYRIAC HARKLEAN METOBELUS	[03DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070C, 0x0021 };
    uint32_t const ces[9] = { 0x03DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_237)
{
    // 070C 003F;	
    // (‎‎܌‎‎) SYRIAC HARKLEAN METOBELUS	[03DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070C, 0x003F };
    uint32_t const ces[9] = { 0x03DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_238)
{
    // 070C 0061;	
    // (‎‎܌‎‎) SYRIAC HARKLEAN METOBELUS	[03DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070C, 0x0061 };
    uint32_t const ces[9] = { 0x03DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_239)
{
    // 070C 0041;	
    // (‎‎܌‎‎) SYRIAC HARKLEAN METOBELUS	[03DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x070C, 0x0041 };
    uint32_t const ces[9] = { 0x03DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_240)
{
    // 070C 0062;	
    // (‎‎܌‎‎) SYRIAC HARKLEAN METOBELUS	[03DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070C, 0x0062 };
    uint32_t const ces[9] = { 0x03DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_241)
{
    // 070D 0021;	
    // (‎‎܍‎‎) SYRIAC HARKLEAN ASTERISCUS	[03DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070D, 0x0021 };
    uint32_t const ces[9] = { 0x03DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_242)
{
    // 070D 003F;	
    // (‎‎܍‎‎) SYRIAC HARKLEAN ASTERISCUS	[03DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070D, 0x003F };
    uint32_t const ces[9] = { 0x03DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_243)
{
    // 070D 0061;	
    // (‎‎܍‎‎) SYRIAC HARKLEAN ASTERISCUS	[03DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070D, 0x0061 };
    uint32_t const ces[9] = { 0x03DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_244)
{
    // 070D 0041;	
    // (‎‎܍‎‎) SYRIAC HARKLEAN ASTERISCUS	[03DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x070D, 0x0041 };
    uint32_t const ces[9] = { 0x03DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_245)
{
    // 070D 0062;	
    // (‎‎܍‎‎) SYRIAC HARKLEAN ASTERISCUS	[03DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x070D, 0x0062 };
    uint32_t const ces[9] = { 0x03DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_246)
{
    // 085E 0021;	
    // (‎‎࡞‎‎) MANDAIC PUNCTUATION	[03DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085E, 0x0021 };
    uint32_t const ces[9] = { 0x03DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_247)
{
    // 085E 003F;	
    // (‎‎࡞‎‎) MANDAIC PUNCTUATION	[03DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085E, 0x003F };
    uint32_t const ces[9] = { 0x03DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_248)
{
    // 085E 0061;	
    // (‎‎࡞‎‎) MANDAIC PUNCTUATION	[03DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085E, 0x0061 };
    uint32_t const ces[9] = { 0x03DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_249)
{
    // 085E 0041;	
    // (‎‎࡞‎‎) MANDAIC PUNCTUATION	[03DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x085E, 0x0041 };
    uint32_t const ces[9] = { 0x03DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_250)
{
    // 085E 0062;	
    // (‎‎࡞‎‎) MANDAIC PUNCTUATION	[03DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085E, 0x0062 };
    uint32_t const ces[9] = { 0x03DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_251)
{
    // 1800 0021;	
    // (᠀) MONGOLIAN BIRGA	[03DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1800, 0x0021 };
    uint32_t const ces[9] = { 0x03DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_252)
{
    // 1800 003F;	
    // (᠀) MONGOLIAN BIRGA	[03DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1800, 0x003F };
    uint32_t const ces[9] = { 0x03DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_253)
{
    // 1800 0061;	
    // (᠀) MONGOLIAN BIRGA	[03DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1800, 0x0061 };
    uint32_t const ces[9] = { 0x03DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_254)
{
    // 1800 0041;	
    // (᠀) MONGOLIAN BIRGA	[03DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1800, 0x0041 };
    uint32_t const ces[9] = { 0x03DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_255)
{
    // 1800 0062;	
    // (᠀) MONGOLIAN BIRGA	[03DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1800, 0x0062 };
    uint32_t const ces[9] = { 0x03DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_256)
{
    // 11660 0021;	
    // (𑙠) MONGOLIAN BIRGA WITH ORNAMENT	[03DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11660, 0x0021 };
    uint32_t const ces[9] = { 0x03DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_257)
{
    // 11660 003F;	
    // (𑙠) MONGOLIAN BIRGA WITH ORNAMENT	[03DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11660, 0x003F };
    uint32_t const ces[9] = { 0x03DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_258)
{
    // 11660 0061;	
    // (𑙠) MONGOLIAN BIRGA WITH ORNAMENT	[03DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11660, 0x0061 };
    uint32_t const ces[9] = { 0x03DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_259)
{
    // 11660 0041;	
    // (𑙠) MONGOLIAN BIRGA WITH ORNAMENT	[03DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11660, 0x0041 };
    uint32_t const ces[9] = { 0x03DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_260)
{
    // 11660 0062;	
    // (𑙠) MONGOLIAN BIRGA WITH ORNAMENT	[03DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11660, 0x0062 };
    uint32_t const ces[9] = { 0x03DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_261)
{
    // 11661 0021;	
    // (𑙡) MONGOLIAN ROTATED BIRGA	[03E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11661, 0x0021 };
    uint32_t const ces[9] = { 0x03E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_262)
{
    // 11661 003F;	
    // (𑙡) MONGOLIAN ROTATED BIRGA	[03E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11661, 0x003F };
    uint32_t const ces[9] = { 0x03E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_263)
{
    // 11661 0061;	
    // (𑙡) MONGOLIAN ROTATED BIRGA	[03E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11661, 0x0061 };
    uint32_t const ces[9] = { 0x03E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_264)
{
    // 11661 0041;	
    // (𑙡) MONGOLIAN ROTATED BIRGA	[03E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11661, 0x0041 };
    uint32_t const ces[9] = { 0x03E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_265)
{
    // 11661 0062;	
    // (𑙡) MONGOLIAN ROTATED BIRGA	[03E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11661, 0x0062 };
    uint32_t const ces[9] = { 0x03E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_266)
{
    // 11662 0021;	
    // (𑙢) MONGOLIAN DOUBLE BIRGA WITH ORNAMENT	[03E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11662, 0x0021 };
    uint32_t const ces[9] = { 0x03E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_267)
{
    // 11662 003F;	
    // (𑙢) MONGOLIAN DOUBLE BIRGA WITH ORNAMENT	[03E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11662, 0x003F };
    uint32_t const ces[9] = { 0x03E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_268)
{
    // 11662 0061;	
    // (𑙢) MONGOLIAN DOUBLE BIRGA WITH ORNAMENT	[03E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11662, 0x0061 };
    uint32_t const ces[9] = { 0x03E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_269)
{
    // 11662 0041;	
    // (𑙢) MONGOLIAN DOUBLE BIRGA WITH ORNAMENT	[03E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11662, 0x0041 };
    uint32_t const ces[9] = { 0x03E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_270)
{
    // 11662 0062;	
    // (𑙢) MONGOLIAN DOUBLE BIRGA WITH ORNAMENT	[03E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11662, 0x0062 };
    uint32_t const ces[9] = { 0x03E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_271)
{
    // 11663 0021;	
    // (𑙣) MONGOLIAN TRIPLE BIRGA WITH ORNAMENT	[03E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11663, 0x0021 };
    uint32_t const ces[9] = { 0x03E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_272)
{
    // 11663 003F;	
    // (𑙣) MONGOLIAN TRIPLE BIRGA WITH ORNAMENT	[03E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11663, 0x003F };
    uint32_t const ces[9] = { 0x03E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_273)
{
    // 11663 0061;	
    // (𑙣) MONGOLIAN TRIPLE BIRGA WITH ORNAMENT	[03E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11663, 0x0061 };
    uint32_t const ces[9] = { 0x03E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_274)
{
    // 11663 0041;	
    // (𑙣) MONGOLIAN TRIPLE BIRGA WITH ORNAMENT	[03E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11663, 0x0041 };
    uint32_t const ces[9] = { 0x03E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_275)
{
    // 11663 0062;	
    // (𑙣) MONGOLIAN TRIPLE BIRGA WITH ORNAMENT	[03E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11663, 0x0062 };
    uint32_t const ces[9] = { 0x03E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_276)
{
    // 11664 0021;	
    // (𑙤) MONGOLIAN BIRGA WITH DOUBLE ORNAMENT	[03E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11664, 0x0021 };
    uint32_t const ces[9] = { 0x03E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_277)
{
    // 11664 003F;	
    // (𑙤) MONGOLIAN BIRGA WITH DOUBLE ORNAMENT	[03E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11664, 0x003F };
    uint32_t const ces[9] = { 0x03E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_278)
{
    // 11664 0061;	
    // (𑙤) MONGOLIAN BIRGA WITH DOUBLE ORNAMENT	[03E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11664, 0x0061 };
    uint32_t const ces[9] = { 0x03E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_279)
{
    // 11664 0041;	
    // (𑙤) MONGOLIAN BIRGA WITH DOUBLE ORNAMENT	[03E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11664, 0x0041 };
    uint32_t const ces[9] = { 0x03E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_280)
{
    // 11664 0062;	
    // (𑙤) MONGOLIAN BIRGA WITH DOUBLE ORNAMENT	[03E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11664, 0x0062 };
    uint32_t const ces[9] = { 0x03E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_281)
{
    // 11665 0021;	
    // (𑙥) MONGOLIAN ROTATED BIRGA WITH ORNAMENT	[03E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11665, 0x0021 };
    uint32_t const ces[9] = { 0x03E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_282)
{
    // 11665 003F;	
    // (𑙥) MONGOLIAN ROTATED BIRGA WITH ORNAMENT	[03E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11665, 0x003F };
    uint32_t const ces[9] = { 0x03E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_283)
{
    // 11665 0061;	
    // (𑙥) MONGOLIAN ROTATED BIRGA WITH ORNAMENT	[03E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11665, 0x0061 };
    uint32_t const ces[9] = { 0x03E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_284)
{
    // 11665 0041;	
    // (𑙥) MONGOLIAN ROTATED BIRGA WITH ORNAMENT	[03E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11665, 0x0041 };
    uint32_t const ces[9] = { 0x03E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_285)
{
    // 11665 0062;	
    // (𑙥) MONGOLIAN ROTATED BIRGA WITH ORNAMENT	[03E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11665, 0x0062 };
    uint32_t const ces[9] = { 0x03E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_286)
{
    // 11666 0021;	
    // (𑙦) MONGOLIAN ROTATED BIRGA WITH DOUBLE ORNAMENT	[03E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11666, 0x0021 };
    uint32_t const ces[9] = { 0x03E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_287)
{
    // 11666 003F;	
    // (𑙦) MONGOLIAN ROTATED BIRGA WITH DOUBLE ORNAMENT	[03E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11666, 0x003F };
    uint32_t const ces[9] = { 0x03E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_288)
{
    // 11666 0061;	
    // (𑙦) MONGOLIAN ROTATED BIRGA WITH DOUBLE ORNAMENT	[03E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11666, 0x0061 };
    uint32_t const ces[9] = { 0x03E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_289)
{
    // 11666 0041;	
    // (𑙦) MONGOLIAN ROTATED BIRGA WITH DOUBLE ORNAMENT	[03E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11666, 0x0041 };
    uint32_t const ces[9] = { 0x03E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_290)
{
    // 11666 0062;	
    // (𑙦) MONGOLIAN ROTATED BIRGA WITH DOUBLE ORNAMENT	[03E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11666, 0x0062 };
    uint32_t const ces[9] = { 0x03E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_291)
{
    // 11667 0021;	
    // (𑙧) MONGOLIAN INVERTED BIRGA	[03E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11667, 0x0021 };
    uint32_t const ces[9] = { 0x03E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_292)
{
    // 11667 003F;	
    // (𑙧) MONGOLIAN INVERTED BIRGA	[03E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11667, 0x003F };
    uint32_t const ces[9] = { 0x03E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_293)
{
    // 11667 0061;	
    // (𑙧) MONGOLIAN INVERTED BIRGA	[03E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11667, 0x0061 };
    uint32_t const ces[9] = { 0x03E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_294)
{
    // 11667 0041;	
    // (𑙧) MONGOLIAN INVERTED BIRGA	[03E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11667, 0x0041 };
    uint32_t const ces[9] = { 0x03E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_295)
{
    // 11667 0062;	
    // (𑙧) MONGOLIAN INVERTED BIRGA	[03E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11667, 0x0062 };
    uint32_t const ces[9] = { 0x03E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_296)
{
    // 11668 0021;	
    // (𑙨) MONGOLIAN INVERTED BIRGA WITH DOUBLE ORNAMENT	[03E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11668, 0x0021 };
    uint32_t const ces[9] = { 0x03E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_297)
{
    // 11668 003F;	
    // (𑙨) MONGOLIAN INVERTED BIRGA WITH DOUBLE ORNAMENT	[03E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11668, 0x003F };
    uint32_t const ces[9] = { 0x03E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_298)
{
    // 11668 0061;	
    // (𑙨) MONGOLIAN INVERTED BIRGA WITH DOUBLE ORNAMENT	[03E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11668, 0x0061 };
    uint32_t const ces[9] = { 0x03E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_299)
{
    // 11668 0041;	
    // (𑙨) MONGOLIAN INVERTED BIRGA WITH DOUBLE ORNAMENT	[03E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11668, 0x0041 };
    uint32_t const ces[9] = { 0x03E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_300)
{
    // 11668 0062;	
    // (𑙨) MONGOLIAN INVERTED BIRGA WITH DOUBLE ORNAMENT	[03E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11668, 0x0062 };
    uint32_t const ces[9] = { 0x03E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_301)
{
    // 11669 0021;	
    // (𑙩) MONGOLIAN SWIRL BIRGA	[03E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11669, 0x0021 };
    uint32_t const ces[9] = { 0x03E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_302)
{
    // 11669 003F;	
    // (𑙩) MONGOLIAN SWIRL BIRGA	[03E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11669, 0x003F };
    uint32_t const ces[9] = { 0x03E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_303)
{
    // 11669 0061;	
    // (𑙩) MONGOLIAN SWIRL BIRGA	[03E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11669, 0x0061 };
    uint32_t const ces[9] = { 0x03E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_304)
{
    // 11669 0041;	
    // (𑙩) MONGOLIAN SWIRL BIRGA	[03E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11669, 0x0041 };
    uint32_t const ces[9] = { 0x03E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_305)
{
    // 11669 0062;	
    // (𑙩) MONGOLIAN SWIRL BIRGA	[03E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11669, 0x0062 };
    uint32_t const ces[9] = { 0x03E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_306)
{
    // 1166A 0021;	
    // (𑙪) MONGOLIAN SWIRL BIRGA WITH ORNAMENT	[03E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166A, 0x0021 };
    uint32_t const ces[9] = { 0x03E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_307)
{
    // 1166A 003F;	
    // (𑙪) MONGOLIAN SWIRL BIRGA WITH ORNAMENT	[03E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166A, 0x003F };
    uint32_t const ces[9] = { 0x03E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_308)
{
    // 1166A 0061;	
    // (𑙪) MONGOLIAN SWIRL BIRGA WITH ORNAMENT	[03E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166A, 0x0061 };
    uint32_t const ces[9] = { 0x03E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_309)
{
    // 1166A 0041;	
    // (𑙪) MONGOLIAN SWIRL BIRGA WITH ORNAMENT	[03E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1166A, 0x0041 };
    uint32_t const ces[9] = { 0x03E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_310)
{
    // 1166A 0062;	
    // (𑙪) MONGOLIAN SWIRL BIRGA WITH ORNAMENT	[03E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166A, 0x0062 };
    uint32_t const ces[9] = { 0x03E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_311)
{
    // 1166B 0021;	
    // (𑙫) MONGOLIAN SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166B, 0x0021 };
    uint32_t const ces[9] = { 0x03EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_312)
{
    // 1166B 003F;	
    // (𑙫) MONGOLIAN SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166B, 0x003F };
    uint32_t const ces[9] = { 0x03EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_313)
{
    // 1166B 0061;	
    // (𑙫) MONGOLIAN SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166B, 0x0061 };
    uint32_t const ces[9] = { 0x03EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_314)
{
    // 1166B 0041;	
    // (𑙫) MONGOLIAN SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1166B, 0x0041 };
    uint32_t const ces[9] = { 0x03EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_315)
{
    // 1166B 0062;	
    // (𑙫) MONGOLIAN SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166B, 0x0062 };
    uint32_t const ces[9] = { 0x03EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_316)
{
    // 1166C 0021;	
    // (𑙬) MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166C, 0x0021 };
    uint32_t const ces[9] = { 0x03EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_317)
{
    // 1166C 003F;	
    // (𑙬) MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166C, 0x003F };
    uint32_t const ces[9] = { 0x03EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_318)
{
    // 1166C 0061;	
    // (𑙬) MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166C, 0x0061 };
    uint32_t const ces[9] = { 0x03EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_319)
{
    // 1166C 0041;	
    // (𑙬) MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1166C, 0x0041 };
    uint32_t const ces[9] = { 0x03EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_320)
{
    // 1166C 0062;	
    // (𑙬) MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT	[03EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1166C, 0x0062 };
    uint32_t const ces[9] = { 0x03EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_321)
{
    // 0970 0021;	
    // (॰) DEVANAGARI ABBREVIATION SIGN	[03EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0970, 0x0021 };
    uint32_t const ces[9] = { 0x03EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_322)
{
    // 0970 003F;	
    // (॰) DEVANAGARI ABBREVIATION SIGN	[03EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0970, 0x003F };
    uint32_t const ces[9] = { 0x03EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_323)
{
    // 0970 0061;	
    // (॰) DEVANAGARI ABBREVIATION SIGN	[03EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0970, 0x0061 };
    uint32_t const ces[9] = { 0x03EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_324)
{
    // 0970 0041;	
    // (॰) DEVANAGARI ABBREVIATION SIGN	[03EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0970, 0x0041 };
    uint32_t const ces[9] = { 0x03EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_325)
{
    // 0970 0062;	
    // (॰) DEVANAGARI ABBREVIATION SIGN	[03EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0970, 0x0062 };
    uint32_t const ces[9] = { 0x03EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_326)
{
    // A8F8 0021;	
    // (꣸) DEVANAGARI SIGN PUSHPIKA	[03ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F8, 0x0021 };
    uint32_t const ces[9] = { 0x03ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_327)
{
    // A8F8 003F;	
    // (꣸) DEVANAGARI SIGN PUSHPIKA	[03ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F8, 0x003F };
    uint32_t const ces[9] = { 0x03ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_328)
{
    // A8F8 0061;	
    // (꣸) DEVANAGARI SIGN PUSHPIKA	[03ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F8, 0x0061 };
    uint32_t const ces[9] = { 0x03ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_329)
{
    // A8F8 0041;	
    // (꣸) DEVANAGARI SIGN PUSHPIKA	[03ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8F8, 0x0041 };
    uint32_t const ces[9] = { 0x03ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_330)
{
    // A8F8 0062;	
    // (꣸) DEVANAGARI SIGN PUSHPIKA	[03ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F8, 0x0062 };
    uint32_t const ces[9] = { 0x03ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_331)
{
    // A8F9 0021;	
    // (꣹) DEVANAGARI GAP FILLER	[03EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F9, 0x0021 };
    uint32_t const ces[9] = { 0x03EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_332)
{
    // A8F9 003F;	
    // (꣹) DEVANAGARI GAP FILLER	[03EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F9, 0x003F };
    uint32_t const ces[9] = { 0x03EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_333)
{
    // A8F9 0061;	
    // (꣹) DEVANAGARI GAP FILLER	[03EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F9, 0x0061 };
    uint32_t const ces[9] = { 0x03EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_334)
{
    // A8F9 0041;	
    // (꣹) DEVANAGARI GAP FILLER	[03EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8F9, 0x0041 };
    uint32_t const ces[9] = { 0x03EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_335)
{
    // A8F9 0062;	
    // (꣹) DEVANAGARI GAP FILLER	[03EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F9, 0x0062 };
    uint32_t const ces[9] = { 0x03EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_336)
{
    // A8FA 0021;	
    // (꣺) DEVANAGARI CARET	[03EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FA, 0x0021 };
    uint32_t const ces[9] = { 0x03EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_337)
{
    // A8FA 003F;	
    // (꣺) DEVANAGARI CARET	[03EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FA, 0x003F };
    uint32_t const ces[9] = { 0x03EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_338)
{
    // A8FA 0061;	
    // (꣺) DEVANAGARI CARET	[03EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FA, 0x0061 };
    uint32_t const ces[9] = { 0x03EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_339)
{
    // A8FA 0041;	
    // (꣺) DEVANAGARI CARET	[03EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8FA, 0x0041 };
    uint32_t const ces[9] = { 0x03EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_340)
{
    // A8FA 0062;	
    // (꣺) DEVANAGARI CARET	[03EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FA, 0x0062 };
    uint32_t const ces[9] = { 0x03EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_341)
{
    // A8FC 0021;	
    // (꣼) DEVANAGARI SIGN SIDDHAM	[03F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FC, 0x0021 };
    uint32_t const ces[9] = { 0x03F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_342)
{
    // A8FC 003F;	
    // (꣼) DEVANAGARI SIGN SIDDHAM	[03F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FC, 0x003F };
    uint32_t const ces[9] = { 0x03F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_343)
{
    // A8FC 0061;	
    // (꣼) DEVANAGARI SIGN SIDDHAM	[03F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FC, 0x0061 };
    uint32_t const ces[9] = { 0x03F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_344)
{
    // A8FC 0041;	
    // (꣼) DEVANAGARI SIGN SIDDHAM	[03F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8FC, 0x0041 };
    uint32_t const ces[9] = { 0x03F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_345)
{
    // A8FC 0062;	
    // (꣼) DEVANAGARI SIGN SIDDHAM	[03F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FC, 0x0062 };
    uint32_t const ces[9] = { 0x03F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_346)
{
    // 09FD 0021;	
    // (৽) BENGALI ABBREVIATION SIGN	[03F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FD, 0x0021 };
    uint32_t const ces[9] = { 0x03F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_347)
{
    // 09FD 003F;	
    // (৽) BENGALI ABBREVIATION SIGN	[03F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FD, 0x003F };
    uint32_t const ces[9] = { 0x03F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_348)
{
    // 09FD 0061;	
    // (৽) BENGALI ABBREVIATION SIGN	[03F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FD, 0x0061 };
    uint32_t const ces[9] = { 0x03F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_349)
{
    // 09FD 0041;	
    // (৽) BENGALI ABBREVIATION SIGN	[03F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09FD, 0x0041 };
    uint32_t const ces[9] = { 0x03F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_350)
{
    // 09FD 0062;	
    // (৽) BENGALI ABBREVIATION SIGN	[03F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FD, 0x0062 };
    uint32_t const ces[9] = { 0x03F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_351)
{
    // 0AF0 0021;	
    // (૰) GUJARATI ABBREVIATION SIGN	[03F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF0, 0x0021 };
    uint32_t const ces[9] = { 0x03F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_352)
{
    // 0AF0 003F;	
    // (૰) GUJARATI ABBREVIATION SIGN	[03F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF0, 0x003F };
    uint32_t const ces[9] = { 0x03F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_353)
{
    // 0AF0 0061;	
    // (૰) GUJARATI ABBREVIATION SIGN	[03F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF0, 0x0061 };
    uint32_t const ces[9] = { 0x03F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_354)
{
    // 0AF0 0041;	
    // (૰) GUJARATI ABBREVIATION SIGN	[03F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AF0, 0x0041 };
    uint32_t const ces[9] = { 0x03F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_355)
{
    // 0AF0 0062;	
    // (૰) GUJARATI ABBREVIATION SIGN	[03F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF0, 0x0062 };
    uint32_t const ces[9] = { 0x03F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_356)
{
    // 0DF4 0021;	
    // (෴) SINHALA PUNCTUATION KUNDDALIYA	[03F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF4, 0x0021 };
    uint32_t const ces[9] = { 0x03F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_357)
{
    // 0DF4 003F;	
    // (෴) SINHALA PUNCTUATION KUNDDALIYA	[03F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF4, 0x003F };
    uint32_t const ces[9] = { 0x03F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_358)
{
    // 0DF4 0061;	
    // (෴) SINHALA PUNCTUATION KUNDDALIYA	[03F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF4, 0x0061 };
    uint32_t const ces[9] = { 0x03F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_359)
{
    // 0DF4 0041;	
    // (෴) SINHALA PUNCTUATION KUNDDALIYA	[03F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0DF4, 0x0041 };
    uint32_t const ces[9] = { 0x03F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_360)
{
    // 0DF4 0062;	
    // (෴) SINHALA PUNCTUATION KUNDDALIYA	[03F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DF4, 0x0062 };
    uint32_t const ces[9] = { 0x03F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_361)
{
    // 0E4F 0021;	
    // (๏) THAI CHARACTER FONGMAN	[03F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4F, 0x0021 };
    uint32_t const ces[9] = { 0x03F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_362)
{
    // 0E4F 003F;	
    // (๏) THAI CHARACTER FONGMAN	[03F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4F, 0x003F };
    uint32_t const ces[9] = { 0x03F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_363)
{
    // 0E4F 0061;	
    // (๏) THAI CHARACTER FONGMAN	[03F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4F, 0x0061 };
    uint32_t const ces[9] = { 0x03F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_364)
{
    // 0E4F 0041;	
    // (๏) THAI CHARACTER FONGMAN	[03F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E4F, 0x0041 };
    uint32_t const ces[9] = { 0x03F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_365)
{
    // 0E4F 0062;	
    // (๏) THAI CHARACTER FONGMAN	[03F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4F, 0x0062 };
    uint32_t const ces[9] = { 0x03F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_366)
{
    // 0E5A 0021;	
    // (๚) THAI CHARACTER ANGKHANKHU	[03F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E5A, 0x0021 };
    uint32_t const ces[9] = { 0x03F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_367)
{
    // 0E5A 003F;	
    // (๚) THAI CHARACTER ANGKHANKHU	[03F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E5A, 0x003F };
    uint32_t const ces[9] = { 0x03F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_368)
{
    // 0E5A 0061;	
    // (๚) THAI CHARACTER ANGKHANKHU	[03F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E5A, 0x0061 };
    uint32_t const ces[9] = { 0x03F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_369)
{
    // 0E5A 0041;	
    // (๚) THAI CHARACTER ANGKHANKHU	[03F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E5A, 0x0041 };
    uint32_t const ces[9] = { 0x03F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_370)
{
    // 0E5A 0062;	
    // (๚) THAI CHARACTER ANGKHANKHU	[03F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E5A, 0x0062 };
    uint32_t const ces[9] = { 0x03F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_371)
{
    // 0E5B 0021;	
    // (๛) THAI CHARACTER KHOMUT	[03F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E5B, 0x0021 };
    uint32_t const ces[9] = { 0x03F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_372)
{
    // 0E5B 003F;	
    // (๛) THAI CHARACTER KHOMUT	[03F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E5B, 0x003F };
    uint32_t const ces[9] = { 0x03F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_373)
{
    // 0E5B 0061;	
    // (๛) THAI CHARACTER KHOMUT	[03F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E5B, 0x0061 };
    uint32_t const ces[9] = { 0x03F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_374)
{
    // 0E5B 0041;	
    // (๛) THAI CHARACTER KHOMUT	[03F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E5B, 0x0041 };
    uint32_t const ces[9] = { 0x03F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_375)
{
    // 0E5B 0062;	
    // (๛) THAI CHARACTER KHOMUT	[03F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E5B, 0x0062 };
    uint32_t const ces[9] = { 0x03F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_376)
{
    // AADE 0021;	
    // (꫞) TAI VIET SYMBOL HO HOI	[03F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADE, 0x0021 };
    uint32_t const ces[9] = { 0x03F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_377)
{
    // AADE 003F;	
    // (꫞) TAI VIET SYMBOL HO HOI	[03F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADE, 0x003F };
    uint32_t const ces[9] = { 0x03F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_378)
{
    // AADE 0061;	
    // (꫞) TAI VIET SYMBOL HO HOI	[03F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADE, 0x0061 };
    uint32_t const ces[9] = { 0x03F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_379)
{
    // AADE 0041;	
    // (꫞) TAI VIET SYMBOL HO HOI	[03F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAADE, 0x0041 };
    uint32_t const ces[9] = { 0x03F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_380)
{
    // AADE 0062;	
    // (꫞) TAI VIET SYMBOL HO HOI	[03F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADE, 0x0062 };
    uint32_t const ces[9] = { 0x03F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_381)
{
    // AADF 0021;	
    // (꫟) TAI VIET SYMBOL KOI KOI	[03F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADF, 0x0021 };
    uint32_t const ces[9] = { 0x03F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_382)
{
    // AADF 003F;	
    // (꫟) TAI VIET SYMBOL KOI KOI	[03F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADF, 0x003F };
    uint32_t const ces[9] = { 0x03F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_383)
{
    // AADF 0061;	
    // (꫟) TAI VIET SYMBOL KOI KOI	[03F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADF, 0x0061 };
    uint32_t const ces[9] = { 0x03F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_384)
{
    // AADF 0041;	
    // (꫟) TAI VIET SYMBOL KOI KOI	[03F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAADF, 0x0041 };
    uint32_t const ces[9] = { 0x03F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_385)
{
    // AADF 0062;	
    // (꫟) TAI VIET SYMBOL KOI KOI	[03F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAADF, 0x0062 };
    uint32_t const ces[9] = { 0x03F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_386)
{
    // 0F04 0021;	
    // (༄) TIBETAN MARK INITIAL YIG MGO MDUN MA	[03F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F04, 0x0021 };
    uint32_t const ces[9] = { 0x03F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_387)
{
    // 0F04 003F;	
    // (༄) TIBETAN MARK INITIAL YIG MGO MDUN MA	[03F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F04, 0x003F };
    uint32_t const ces[9] = { 0x03F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_388)
{
    // 0F04 0061;	
    // (༄) TIBETAN MARK INITIAL YIG MGO MDUN MA	[03F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F04, 0x0061 };
    uint32_t const ces[9] = { 0x03F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_389)
{
    // 0F04 0041;	
    // (༄) TIBETAN MARK INITIAL YIG MGO MDUN MA	[03F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F04, 0x0041 };
    uint32_t const ces[9] = { 0x03F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_390)
{
    // 0F04 0062;	
    // (༄) TIBETAN MARK INITIAL YIG MGO MDUN MA	[03F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F04, 0x0062 };
    uint32_t const ces[9] = { 0x03F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_391)
{
    // 0F05 0021;	
    // (༅) TIBETAN MARK CLOSING YIG MGO SGAB MA	[03FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F05, 0x0021 };
    uint32_t const ces[9] = { 0x03FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_392)
{
    // 0F05 003F;	
    // (༅) TIBETAN MARK CLOSING YIG MGO SGAB MA	[03FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F05, 0x003F };
    uint32_t const ces[9] = { 0x03FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_393)
{
    // 0F05 0061;	
    // (༅) TIBETAN MARK CLOSING YIG MGO SGAB MA	[03FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F05, 0x0061 };
    uint32_t const ces[9] = { 0x03FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_394)
{
    // 0F05 0041;	
    // (༅) TIBETAN MARK CLOSING YIG MGO SGAB MA	[03FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F05, 0x0041 };
    uint32_t const ces[9] = { 0x03FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_395)
{
    // 0F05 0062;	
    // (༅) TIBETAN MARK CLOSING YIG MGO SGAB MA	[03FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F05, 0x0062 };
    uint32_t const ces[9] = { 0x03FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_396)
{
    // 0F06 0021;	
    // (༆) TIBETAN MARK CARET YIG MGO PHUR SHAD MA	[03FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F06, 0x0021 };
    uint32_t const ces[9] = { 0x03FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_397)
{
    // 0F06 003F;	
    // (༆) TIBETAN MARK CARET YIG MGO PHUR SHAD MA	[03FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F06, 0x003F };
    uint32_t const ces[9] = { 0x03FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_398)
{
    // 0F06 0061;	
    // (༆) TIBETAN MARK CARET YIG MGO PHUR SHAD MA	[03FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F06, 0x0061 };
    uint32_t const ces[9] = { 0x03FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_399)
{
    // 0F06 0041;	
    // (༆) TIBETAN MARK CARET YIG MGO PHUR SHAD MA	[03FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F06, 0x0041 };
    uint32_t const ces[9] = { 0x03FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_400)
{
    // 0F06 0062;	
    // (༆) TIBETAN MARK CARET YIG MGO PHUR SHAD MA	[03FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F06, 0x0062 };
    uint32_t const ces[9] = { 0x03FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_401)
{
    // 0F07 0021;	
    // (༇) TIBETAN MARK YIG MGO TSHEG SHAD MA	[03FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F07, 0x0021 };
    uint32_t const ces[9] = { 0x03FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_402)
{
    // 0F07 003F;	
    // (༇) TIBETAN MARK YIG MGO TSHEG SHAD MA	[03FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F07, 0x003F };
    uint32_t const ces[9] = { 0x03FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_403)
{
    // 0F07 0061;	
    // (༇) TIBETAN MARK YIG MGO TSHEG SHAD MA	[03FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F07, 0x0061 };
    uint32_t const ces[9] = { 0x03FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_404)
{
    // 0F07 0041;	
    // (༇) TIBETAN MARK YIG MGO TSHEG SHAD MA	[03FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F07, 0x0041 };
    uint32_t const ces[9] = { 0x03FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_405)
{
    // 0F07 0062;	
    // (༇) TIBETAN MARK YIG MGO TSHEG SHAD MA	[03FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F07, 0x0062 };
    uint32_t const ces[9] = { 0x03FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_406)
{
    // 0F08 0021;	
    // (༈) TIBETAN MARK SBRUL SHAD	[03FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F08, 0x0021 };
    uint32_t const ces[9] = { 0x03FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_407)
{
    // 0F08 003F;	
    // (༈) TIBETAN MARK SBRUL SHAD	[03FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F08, 0x003F };
    uint32_t const ces[9] = { 0x03FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_408)
{
    // 0F08 0061;	
    // (༈) TIBETAN MARK SBRUL SHAD	[03FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F08, 0x0061 };
    uint32_t const ces[9] = { 0x03FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_409)
{
    // 0F08 0041;	
    // (༈) TIBETAN MARK SBRUL SHAD	[03FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F08, 0x0041 };
    uint32_t const ces[9] = { 0x03FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_410)
{
    // 0F08 0062;	
    // (༈) TIBETAN MARK SBRUL SHAD	[03FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F08, 0x0062 };
    uint32_t const ces[9] = { 0x03FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_411)
{
    // 0F09 0021;	
    // (༉) TIBETAN MARK BSKUR YIG MGO	[03FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F09, 0x0021 };
    uint32_t const ces[9] = { 0x03FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_412)
{
    // 0F09 003F;	
    // (༉) TIBETAN MARK BSKUR YIG MGO	[03FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F09, 0x003F };
    uint32_t const ces[9] = { 0x03FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_413)
{
    // 0F09 0061;	
    // (༉) TIBETAN MARK BSKUR YIG MGO	[03FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F09, 0x0061 };
    uint32_t const ces[9] = { 0x03FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_414)
{
    // 0F09 0041;	
    // (༉) TIBETAN MARK BSKUR YIG MGO	[03FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F09, 0x0041 };
    uint32_t const ces[9] = { 0x03FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_415)
{
    // 0F09 0062;	
    // (༉) TIBETAN MARK BSKUR YIG MGO	[03FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F09, 0x0062 };
    uint32_t const ces[9] = { 0x03FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_416)
{
    // 0F0A 0021;	
    // (༊) TIBETAN MARK BKA- SHOG YIG MGO	[03FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0A, 0x0021 };
    uint32_t const ces[9] = { 0x03FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_417)
{
    // 0F0A 003F;	
    // (༊) TIBETAN MARK BKA- SHOG YIG MGO	[03FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0A, 0x003F };
    uint32_t const ces[9] = { 0x03FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_418)
{
    // 0F0A 0061;	
    // (༊) TIBETAN MARK BKA- SHOG YIG MGO	[03FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0A, 0x0061 };
    uint32_t const ces[9] = { 0x03FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_419)
{
    // 0F0A 0041;	
    // (༊) TIBETAN MARK BKA- SHOG YIG MGO	[03FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F0A, 0x0041 };
    uint32_t const ces[9] = { 0x03FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_420)
{
    // 0F0A 0062;	
    // (༊) TIBETAN MARK BKA- SHOG YIG MGO	[03FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0A, 0x0062 };
    uint32_t const ces[9] = { 0x03FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_421)
{
    // 0FD0 0021;	
    // (࿐) TIBETAN MARK BSKA- SHOG GI MGO RGYAN	[0400 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD0, 0x0021 };
    uint32_t const ces[9] = { 0x0400, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_422)
{
    // 0FD0 003F;	
    // (࿐) TIBETAN MARK BSKA- SHOG GI MGO RGYAN	[0400 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD0, 0x003F };
    uint32_t const ces[9] = { 0x0400, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_423)
{
    // 0FD0 0061;	
    // (࿐) TIBETAN MARK BSKA- SHOG GI MGO RGYAN	[0400 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD0, 0x0061 };
    uint32_t const ces[9] = { 0x0400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_424)
{
    // 0FD0 0041;	
    // (࿐) TIBETAN MARK BSKA- SHOG GI MGO RGYAN	[0400 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD0, 0x0041 };
    uint32_t const ces[9] = { 0x0400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_425)
{
    // 0FD0 0062;	
    // (࿐) TIBETAN MARK BSKA- SHOG GI MGO RGYAN	[0400 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD0, 0x0062 };
    uint32_t const ces[9] = { 0x0400, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_426)
{
    // 0FD1 0021;	
    // (࿑) TIBETAN MARK MNYAM YIG GI MGO RGYAN	[0401 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD1, 0x0021 };
    uint32_t const ces[9] = { 0x0401, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_427)
{
    // 0FD1 003F;	
    // (࿑) TIBETAN MARK MNYAM YIG GI MGO RGYAN	[0401 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD1, 0x003F };
    uint32_t const ces[9] = { 0x0401, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_428)
{
    // 0FD1 0061;	
    // (࿑) TIBETAN MARK MNYAM YIG GI MGO RGYAN	[0401 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD1, 0x0061 };
    uint32_t const ces[9] = { 0x0401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_429)
{
    // 0FD1 0041;	
    // (࿑) TIBETAN MARK MNYAM YIG GI MGO RGYAN	[0401 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD1, 0x0041 };
    uint32_t const ces[9] = { 0x0401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_430)
{
    // 0FD1 0062;	
    // (࿑) TIBETAN MARK MNYAM YIG GI MGO RGYAN	[0401 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD1, 0x0062 };
    uint32_t const ces[9] = { 0x0401, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_431)
{
    // 0F0B 0021;	
    // (་) TIBETAN MARK INTERSYLLABIC TSHEG	[0402 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0B, 0x0021 };
    uint32_t const ces[9] = { 0x0402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_432)
{
    // 0F0C 0021;	
    // (༌) TIBETAN MARK DELIMITER TSHEG BSTAR	[0402 0261 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x0F0C, 0x0021 };
    uint32_t const ces[9] = { 0x0402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_433)
{
    // 0F0B 003F;	
    // (་) TIBETAN MARK INTERSYLLABIC TSHEG	[0402 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0B, 0x003F };
    uint32_t const ces[9] = { 0x0402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_434)
{
    // 0F0C 003F;	
    // (༌) TIBETAN MARK DELIMITER TSHEG BSTAR	[0402 0267 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x0F0C, 0x003F };
    uint32_t const ces[9] = { 0x0402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_435)
{
    // 0F0B 0061;	
    // (་) TIBETAN MARK INTERSYLLABIC TSHEG	[0402 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0B, 0x0061 };
    uint32_t const ces[9] = { 0x0402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_436)
{
    // 0F0B 0041;	
    // (་) TIBETAN MARK INTERSYLLABIC TSHEG	[0402 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F0B, 0x0041 };
    uint32_t const ces[9] = { 0x0402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_437)
{
    // 0F0C 0061;	
    // (༌) TIBETAN MARK DELIMITER TSHEG BSTAR	[0402 1CAD | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x0F0C, 0x0061 };
    uint32_t const ces[9] = { 0x0402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_438)
{
    // 0F0C 0041;	
    // (༌) TIBETAN MARK DELIMITER TSHEG BSTAR	[0402 1CAD | 0020 0020 | 001B 0008 |]

    uint32_t cps[2] = { 0x0F0C, 0x0041 };
    uint32_t const ces[9] = { 0x0402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_439)
{
    // 0F0B 0062;	
    // (་) TIBETAN MARK INTERSYLLABIC TSHEG	[0402 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0B, 0x0062 };
    uint32_t const ces[9] = { 0x0402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_440)
{
    // 0F0C 0062;	
    // (༌) TIBETAN MARK DELIMITER TSHEG BSTAR	[0402 1CC6 | 0020 0020 | 001B 0002 |]

    uint32_t cps[2] = { 0x0F0C, 0x0062 };
    uint32_t const ces[9] = { 0x0402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_441)
{
    // 0F0D 0021;	
    // (།) TIBETAN MARK SHAD	[0403 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0D, 0x0021 };
    uint32_t const ces[9] = { 0x0403, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_442)
{
    // 0F0D 003F;	
    // (།) TIBETAN MARK SHAD	[0403 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0D, 0x003F };
    uint32_t const ces[9] = { 0x0403, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_443)
{
    // 0F0D 0061;	
    // (།) TIBETAN MARK SHAD	[0403 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0D, 0x0061 };
    uint32_t const ces[9] = { 0x0403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_444)
{
    // 0F0D 0041;	
    // (།) TIBETAN MARK SHAD	[0403 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F0D, 0x0041 };
    uint32_t const ces[9] = { 0x0403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_445)
{
    // 0F0D 0062;	
    // (།) TIBETAN MARK SHAD	[0403 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0D, 0x0062 };
    uint32_t const ces[9] = { 0x0403, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_446)
{
    // 0F0E 0021;	
    // (༎) TIBETAN MARK NYIS SHAD	[0404 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0E, 0x0021 };
    uint32_t const ces[9] = { 0x0404, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_447)
{
    // 0F0E 003F;	
    // (༎) TIBETAN MARK NYIS SHAD	[0404 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0E, 0x003F };
    uint32_t const ces[9] = { 0x0404, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_448)
{
    // 0F0E 0061;	
    // (༎) TIBETAN MARK NYIS SHAD	[0404 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0E, 0x0061 };
    uint32_t const ces[9] = { 0x0404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_449)
{
    // 0F0E 0041;	
    // (༎) TIBETAN MARK NYIS SHAD	[0404 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F0E, 0x0041 };
    uint32_t const ces[9] = { 0x0404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_450)
{
    // 0F0E 0062;	
    // (༎) TIBETAN MARK NYIS SHAD	[0404 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0E, 0x0062 };
    uint32_t const ces[9] = { 0x0404, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_451)
{
    // 0F0F 0021;	
    // (༏) TIBETAN MARK TSHEG SHAD	[0405 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0F, 0x0021 };
    uint32_t const ces[9] = { 0x0405, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_452)
{
    // 0F0F 003F;	
    // (༏) TIBETAN MARK TSHEG SHAD	[0405 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0F, 0x003F };
    uint32_t const ces[9] = { 0x0405, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_453)
{
    // 0F0F 0061;	
    // (༏) TIBETAN MARK TSHEG SHAD	[0405 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0F, 0x0061 };
    uint32_t const ces[9] = { 0x0405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_454)
{
    // 0F0F 0041;	
    // (༏) TIBETAN MARK TSHEG SHAD	[0405 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F0F, 0x0041 };
    uint32_t const ces[9] = { 0x0405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_455)
{
    // 0F0F 0062;	
    // (༏) TIBETAN MARK TSHEG SHAD	[0405 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F0F, 0x0062 };
    uint32_t const ces[9] = { 0x0405, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_456)
{
    // 0F10 0021;	
    // (༐) TIBETAN MARK NYIS TSHEG SHAD	[0406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F10, 0x0021 };
    uint32_t const ces[9] = { 0x0406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_457)
{
    // 0F10 003F;	
    // (༐) TIBETAN MARK NYIS TSHEG SHAD	[0406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F10, 0x003F };
    uint32_t const ces[9] = { 0x0406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_458)
{
    // 0F10 0061;	
    // (༐) TIBETAN MARK NYIS TSHEG SHAD	[0406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F10, 0x0061 };
    uint32_t const ces[9] = { 0x0406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_459)
{
    // 0F10 0041;	
    // (༐) TIBETAN MARK NYIS TSHEG SHAD	[0406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F10, 0x0041 };
    uint32_t const ces[9] = { 0x0406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_460)
{
    // 0F10 0062;	
    // (༐) TIBETAN MARK NYIS TSHEG SHAD	[0406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F10, 0x0062 };
    uint32_t const ces[9] = { 0x0406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_461)
{
    // 0F11 0021;	
    // (༑) TIBETAN MARK RIN CHEN SPUNGS SHAD	[0407 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F11, 0x0021 };
    uint32_t const ces[9] = { 0x0407, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_462)
{
    // 0F11 003F;	
    // (༑) TIBETAN MARK RIN CHEN SPUNGS SHAD	[0407 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F11, 0x003F };
    uint32_t const ces[9] = { 0x0407, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_463)
{
    // 0F11 0061;	
    // (༑) TIBETAN MARK RIN CHEN SPUNGS SHAD	[0407 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F11, 0x0061 };
    uint32_t const ces[9] = { 0x0407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_464)
{
    // 0F11 0041;	
    // (༑) TIBETAN MARK RIN CHEN SPUNGS SHAD	[0407 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F11, 0x0041 };
    uint32_t const ces[9] = { 0x0407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_465)
{
    // 0F11 0062;	
    // (༑) TIBETAN MARK RIN CHEN SPUNGS SHAD	[0407 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F11, 0x0062 };
    uint32_t const ces[9] = { 0x0407, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_466)
{
    // 0F12 0021;	
    // (༒) TIBETAN MARK RGYA GRAM SHAD	[0408 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F12, 0x0021 };
    uint32_t const ces[9] = { 0x0408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_467)
{
    // 0F12 003F;	
    // (༒) TIBETAN MARK RGYA GRAM SHAD	[0408 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F12, 0x003F };
    uint32_t const ces[9] = { 0x0408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_468)
{
    // 0F12 0061;	
    // (༒) TIBETAN MARK RGYA GRAM SHAD	[0408 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F12, 0x0061 };
    uint32_t const ces[9] = { 0x0408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_469)
{
    // 0F12 0041;	
    // (༒) TIBETAN MARK RGYA GRAM SHAD	[0408 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F12, 0x0041 };
    uint32_t const ces[9] = { 0x0408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_470)
{
    // 0F12 0062;	
    // (༒) TIBETAN MARK RGYA GRAM SHAD	[0408 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F12, 0x0062 };
    uint32_t const ces[9] = { 0x0408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_471)
{
    // 0F85 0021;	
    // (྅) TIBETAN MARK PALUTA	[0409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F85, 0x0021 };
    uint32_t const ces[9] = { 0x0409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_472)
{
    // 0F85 003F;	
    // (྅) TIBETAN MARK PALUTA	[0409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F85, 0x003F };
    uint32_t const ces[9] = { 0x0409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_473)
{
    // 0F85 0061;	
    // (྅) TIBETAN MARK PALUTA	[0409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F85, 0x0061 };
    uint32_t const ces[9] = { 0x0409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_474)
{
    // 0F85 0041;	
    // (྅) TIBETAN MARK PALUTA	[0409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F85, 0x0041 };
    uint32_t const ces[9] = { 0x0409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_475)
{
    // 0F85 0062;	
    // (྅) TIBETAN MARK PALUTA	[0409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F85, 0x0062 };
    uint32_t const ces[9] = { 0x0409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_476)
{
    // 0FD2 0021;	
    // (࿒) TIBETAN MARK NYIS TSHEG	[040A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD2, 0x0021 };
    uint32_t const ces[9] = { 0x040A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_477)
{
    // 0FD2 003F;	
    // (࿒) TIBETAN MARK NYIS TSHEG	[040A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD2, 0x003F };
    uint32_t const ces[9] = { 0x040A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_478)
{
    // 0FD2 0061;	
    // (࿒) TIBETAN MARK NYIS TSHEG	[040A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD2, 0x0061 };
    uint32_t const ces[9] = { 0x040A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_479)
{
    // 0FD2 0041;	
    // (࿒) TIBETAN MARK NYIS TSHEG	[040A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD2, 0x0041 };
    uint32_t const ces[9] = { 0x040A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_480)
{
    // 0FD2 0062;	
    // (࿒) TIBETAN MARK NYIS TSHEG	[040A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD2, 0x0062 };
    uint32_t const ces[9] = { 0x040A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_481)
{
    // 0FD3 0021;	
    // (࿓) TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA	[040B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD3, 0x0021 };
    uint32_t const ces[9] = { 0x040B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_482)
{
    // 0FD3 003F;	
    // (࿓) TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA	[040B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD3, 0x003F };
    uint32_t const ces[9] = { 0x040B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_483)
{
    // 0FD3 0061;	
    // (࿓) TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA	[040B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD3, 0x0061 };
    uint32_t const ces[9] = { 0x040B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_484)
{
    // 0FD3 0041;	
    // (࿓) TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA	[040B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD3, 0x0041 };
    uint32_t const ces[9] = { 0x040B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_485)
{
    // 0FD3 0062;	
    // (࿓) TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA	[040B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD3, 0x0062 };
    uint32_t const ces[9] = { 0x040B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_486)
{
    // 0FD4 0021;	
    // (࿔) TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA	[040C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD4, 0x0021 };
    uint32_t const ces[9] = { 0x040C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_487)
{
    // 0FD4 003F;	
    // (࿔) TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA	[040C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD4, 0x003F };
    uint32_t const ces[9] = { 0x040C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_488)
{
    // 0FD4 0061;	
    // (࿔) TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA	[040C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD4, 0x0061 };
    uint32_t const ces[9] = { 0x040C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_489)
{
    // 0FD4 0041;	
    // (࿔) TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA	[040C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD4, 0x0041 };
    uint32_t const ces[9] = { 0x040C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_490)
{
    // 0FD4 0062;	
    // (࿔) TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA	[040C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD4, 0x0062 };
    uint32_t const ces[9] = { 0x040C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_491)
{
    // 0FD9 0021;	
    // (࿙) TIBETAN MARK LEADING MCHAN RTAGS	[040D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD9, 0x0021 };
    uint32_t const ces[9] = { 0x040D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_492)
{
    // 0FD9 003F;	
    // (࿙) TIBETAN MARK LEADING MCHAN RTAGS	[040D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD9, 0x003F };
    uint32_t const ces[9] = { 0x040D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_493)
{
    // 0FD9 0061;	
    // (࿙) TIBETAN MARK LEADING MCHAN RTAGS	[040D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD9, 0x0061 };
    uint32_t const ces[9] = { 0x040D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_494)
{
    // 0FD9 0041;	
    // (࿙) TIBETAN MARK LEADING MCHAN RTAGS	[040D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FD9, 0x0041 };
    uint32_t const ces[9] = { 0x040D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_495)
{
    // 0FD9 0062;	
    // (࿙) TIBETAN MARK LEADING MCHAN RTAGS	[040D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FD9, 0x0062 };
    uint32_t const ces[9] = { 0x040D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_496)
{
    // 0FDA 0021;	
    // (࿚) TIBETAN MARK TRAILING MCHAN RTAGS	[040E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FDA, 0x0021 };
    uint32_t const ces[9] = { 0x040E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_497)
{
    // 0FDA 003F;	
    // (࿚) TIBETAN MARK TRAILING MCHAN RTAGS	[040E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FDA, 0x003F };
    uint32_t const ces[9] = { 0x040E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_498)
{
    // 0FDA 0061;	
    // (࿚) TIBETAN MARK TRAILING MCHAN RTAGS	[040E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0FDA, 0x0061 };
    uint32_t const ces[9] = { 0x040E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_015_499)
{
    // 0FDA 0041;	
    // (࿚) TIBETAN MARK TRAILING MCHAN RTAGS	[040E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0FDA, 0x0041 };
    uint32_t const ces[9] = { 0x040E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

