// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_285_000)
{
    // 103A7 003F;	
    // (êéß) OLD PERSIAN SIGN XA	[4BC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A7, 0x003F };
    uint32_t const ces[9] = { 0x4BC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_001)
{
    // 103A7 0061;	
    // (êéß) OLD PERSIAN SIGN XA	[4BC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A7, 0x0061 };
    uint32_t const ces[9] = { 0x4BC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_002)
{
    // 103A7 0041;	
    // (êéß) OLD PERSIAN SIGN XA	[4BC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A7, 0x0041 };
    uint32_t const ces[9] = { 0x4BC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_003)
{
    // 103A7 0062;	
    // (êéß) OLD PERSIAN SIGN XA	[4BC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A7, 0x0062 };
    uint32_t const ces[9] = { 0x4BC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_004)
{
    // 103A8 0021;	
    // (êé®) OLD PERSIAN SIGN CA	[4BC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A8, 0x0021 };
    uint32_t const ces[9] = { 0x4BC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_005)
{
    // 103A8 003F;	
    // (êé®) OLD PERSIAN SIGN CA	[4BC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A8, 0x003F };
    uint32_t const ces[9] = { 0x4BC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_006)
{
    // 103A8 0061;	
    // (êé®) OLD PERSIAN SIGN CA	[4BC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A8, 0x0061 };
    uint32_t const ces[9] = { 0x4BC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_007)
{
    // 103A8 0041;	
    // (êé®) OLD PERSIAN SIGN CA	[4BC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A8, 0x0041 };
    uint32_t const ces[9] = { 0x4BC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_008)
{
    // 103A8 0062;	
    // (êé®) OLD PERSIAN SIGN CA	[4BC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A8, 0x0062 };
    uint32_t const ces[9] = { 0x4BC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_009)
{
    // 103A9 0021;	
    // (êé©) OLD PERSIAN SIGN JA	[4BC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A9, 0x0021 };
    uint32_t const ces[9] = { 0x4BC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_010)
{
    // 103A9 003F;	
    // (êé©) OLD PERSIAN SIGN JA	[4BC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A9, 0x003F };
    uint32_t const ces[9] = { 0x4BC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_011)
{
    // 103A9 0061;	
    // (êé©) OLD PERSIAN SIGN JA	[4BC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A9, 0x0061 };
    uint32_t const ces[9] = { 0x4BC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_012)
{
    // 103A9 0041;	
    // (êé©) OLD PERSIAN SIGN JA	[4BC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A9, 0x0041 };
    uint32_t const ces[9] = { 0x4BC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_013)
{
    // 103A9 0062;	
    // (êé©) OLD PERSIAN SIGN JA	[4BC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A9, 0x0062 };
    uint32_t const ces[9] = { 0x4BC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_014)
{
    // 103AA 0021;	
    // (êé™) OLD PERSIAN SIGN JI	[4BCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AA, 0x0021 };
    uint32_t const ces[9] = { 0x4BCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_015)
{
    // 103AA 003F;	
    // (êé™) OLD PERSIAN SIGN JI	[4BCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AA, 0x003F };
    uint32_t const ces[9] = { 0x4BCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_016)
{
    // 103AA 0061;	
    // (êé™) OLD PERSIAN SIGN JI	[4BCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AA, 0x0061 };
    uint32_t const ces[9] = { 0x4BCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_017)
{
    // 103AA 0041;	
    // (êé™) OLD PERSIAN SIGN JI	[4BCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103AA, 0x0041 };
    uint32_t const ces[9] = { 0x4BCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_018)
{
    // 103AA 0062;	
    // (êé™) OLD PERSIAN SIGN JI	[4BCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AA, 0x0062 };
    uint32_t const ces[9] = { 0x4BCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_019)
{
    // 103AB 0021;	
    // (êé´) OLD PERSIAN SIGN TA	[4BCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AB, 0x0021 };
    uint32_t const ces[9] = { 0x4BCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_020)
{
    // 103AB 003F;	
    // (êé´) OLD PERSIAN SIGN TA	[4BCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AB, 0x003F };
    uint32_t const ces[9] = { 0x4BCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_021)
{
    // 103AB 0061;	
    // (êé´) OLD PERSIAN SIGN TA	[4BCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AB, 0x0061 };
    uint32_t const ces[9] = { 0x4BCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_022)
{
    // 103AB 0041;	
    // (êé´) OLD PERSIAN SIGN TA	[4BCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103AB, 0x0041 };
    uint32_t const ces[9] = { 0x4BCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_023)
{
    // 103AB 0062;	
    // (êé´) OLD PERSIAN SIGN TA	[4BCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AB, 0x0062 };
    uint32_t const ces[9] = { 0x4BCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_024)
{
    // 103AC 0021;	
    // (êé¨) OLD PERSIAN SIGN TU	[4BCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AC, 0x0021 };
    uint32_t const ces[9] = { 0x4BCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_025)
{
    // 103AC 003F;	
    // (êé¨) OLD PERSIAN SIGN TU	[4BCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AC, 0x003F };
    uint32_t const ces[9] = { 0x4BCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_026)
{
    // 103AC 0061;	
    // (êé¨) OLD PERSIAN SIGN TU	[4BCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AC, 0x0061 };
    uint32_t const ces[9] = { 0x4BCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_027)
{
    // 103AC 0041;	
    // (êé¨) OLD PERSIAN SIGN TU	[4BCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103AC, 0x0041 };
    uint32_t const ces[9] = { 0x4BCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_028)
{
    // 103AC 0062;	
    // (êé¨) OLD PERSIAN SIGN TU	[4BCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AC, 0x0062 };
    uint32_t const ces[9] = { 0x4BCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_029)
{
    // 103AD 0021;	
    // (êé≠) OLD PERSIAN SIGN DA	[4BCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AD, 0x0021 };
    uint32_t const ces[9] = { 0x4BCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_030)
{
    // 103AD 003F;	
    // (êé≠) OLD PERSIAN SIGN DA	[4BCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AD, 0x003F };
    uint32_t const ces[9] = { 0x4BCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_031)
{
    // 103AD 0061;	
    // (êé≠) OLD PERSIAN SIGN DA	[4BCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AD, 0x0061 };
    uint32_t const ces[9] = { 0x4BCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_032)
{
    // 103AD 0041;	
    // (êé≠) OLD PERSIAN SIGN DA	[4BCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103AD, 0x0041 };
    uint32_t const ces[9] = { 0x4BCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_033)
{
    // 103AD 0062;	
    // (êé≠) OLD PERSIAN SIGN DA	[4BCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AD, 0x0062 };
    uint32_t const ces[9] = { 0x4BCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_034)
{
    // 103AE 0021;	
    // (êéÆ) OLD PERSIAN SIGN DI	[4BCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AE, 0x0021 };
    uint32_t const ces[9] = { 0x4BCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_035)
{
    // 103AE 003F;	
    // (êéÆ) OLD PERSIAN SIGN DI	[4BCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AE, 0x003F };
    uint32_t const ces[9] = { 0x4BCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_036)
{
    // 103AE 0061;	
    // (êéÆ) OLD PERSIAN SIGN DI	[4BCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AE, 0x0061 };
    uint32_t const ces[9] = { 0x4BCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_037)
{
    // 103AE 0041;	
    // (êéÆ) OLD PERSIAN SIGN DI	[4BCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103AE, 0x0041 };
    uint32_t const ces[9] = { 0x4BCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_038)
{
    // 103AE 0062;	
    // (êéÆ) OLD PERSIAN SIGN DI	[4BCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AE, 0x0062 };
    uint32_t const ces[9] = { 0x4BCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_039)
{
    // 103AF 0021;	
    // (êéØ) OLD PERSIAN SIGN DU	[4BCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AF, 0x0021 };
    uint32_t const ces[9] = { 0x4BCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_040)
{
    // 103AF 003F;	
    // (êéØ) OLD PERSIAN SIGN DU	[4BCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AF, 0x003F };
    uint32_t const ces[9] = { 0x4BCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_041)
{
    // 103AF 0061;	
    // (êéØ) OLD PERSIAN SIGN DU	[4BCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AF, 0x0061 };
    uint32_t const ces[9] = { 0x4BCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_042)
{
    // 103AF 0041;	
    // (êéØ) OLD PERSIAN SIGN DU	[4BCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103AF, 0x0041 };
    uint32_t const ces[9] = { 0x4BCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_043)
{
    // 103AF 0062;	
    // (êéØ) OLD PERSIAN SIGN DU	[4BCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103AF, 0x0062 };
    uint32_t const ces[9] = { 0x4BCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_044)
{
    // 103B0 0021;	
    // (êé∞) OLD PERSIAN SIGN THA	[4BD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B0, 0x0021 };
    uint32_t const ces[9] = { 0x4BD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_045)
{
    // 103B0 003F;	
    // (êé∞) OLD PERSIAN SIGN THA	[4BD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B0, 0x003F };
    uint32_t const ces[9] = { 0x4BD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_046)
{
    // 103B0 0061;	
    // (êé∞) OLD PERSIAN SIGN THA	[4BD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B0, 0x0061 };
    uint32_t const ces[9] = { 0x4BD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_047)
{
    // 103B0 0041;	
    // (êé∞) OLD PERSIAN SIGN THA	[4BD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B0, 0x0041 };
    uint32_t const ces[9] = { 0x4BD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_048)
{
    // 103B0 0062;	
    // (êé∞) OLD PERSIAN SIGN THA	[4BD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B0, 0x0062 };
    uint32_t const ces[9] = { 0x4BD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_049)
{
    // 103B1 0021;	
    // (êé±) OLD PERSIAN SIGN PA	[4BD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B1, 0x0021 };
    uint32_t const ces[9] = { 0x4BD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_050)
{
    // 103B1 003F;	
    // (êé±) OLD PERSIAN SIGN PA	[4BD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B1, 0x003F };
    uint32_t const ces[9] = { 0x4BD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_051)
{
    // 103B1 0061;	
    // (êé±) OLD PERSIAN SIGN PA	[4BD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B1, 0x0061 };
    uint32_t const ces[9] = { 0x4BD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_052)
{
    // 103B1 0041;	
    // (êé±) OLD PERSIAN SIGN PA	[4BD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B1, 0x0041 };
    uint32_t const ces[9] = { 0x4BD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_053)
{
    // 103B1 0062;	
    // (êé±) OLD PERSIAN SIGN PA	[4BD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B1, 0x0062 };
    uint32_t const ces[9] = { 0x4BD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_054)
{
    // 103B2 0021;	
    // (êé≤) OLD PERSIAN SIGN BA	[4BD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B2, 0x0021 };
    uint32_t const ces[9] = { 0x4BD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_055)
{
    // 103B2 003F;	
    // (êé≤) OLD PERSIAN SIGN BA	[4BD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B2, 0x003F };
    uint32_t const ces[9] = { 0x4BD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_056)
{
    // 103B2 0061;	
    // (êé≤) OLD PERSIAN SIGN BA	[4BD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B2, 0x0061 };
    uint32_t const ces[9] = { 0x4BD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_057)
{
    // 103B2 0041;	
    // (êé≤) OLD PERSIAN SIGN BA	[4BD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B2, 0x0041 };
    uint32_t const ces[9] = { 0x4BD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_058)
{
    // 103B2 0062;	
    // (êé≤) OLD PERSIAN SIGN BA	[4BD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B2, 0x0062 };
    uint32_t const ces[9] = { 0x4BD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_059)
{
    // 103B3 0021;	
    // (êé≥) OLD PERSIAN SIGN FA	[4BD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B3, 0x0021 };
    uint32_t const ces[9] = { 0x4BD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_060)
{
    // 103B3 003F;	
    // (êé≥) OLD PERSIAN SIGN FA	[4BD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B3, 0x003F };
    uint32_t const ces[9] = { 0x4BD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_061)
{
    // 103B3 0061;	
    // (êé≥) OLD PERSIAN SIGN FA	[4BD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B3, 0x0061 };
    uint32_t const ces[9] = { 0x4BD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_062)
{
    // 103B3 0041;	
    // (êé≥) OLD PERSIAN SIGN FA	[4BD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B3, 0x0041 };
    uint32_t const ces[9] = { 0x4BD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_063)
{
    // 103B3 0062;	
    // (êé≥) OLD PERSIAN SIGN FA	[4BD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B3, 0x0062 };
    uint32_t const ces[9] = { 0x4BD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_064)
{
    // 103B4 0021;	
    // (êé¥) OLD PERSIAN SIGN NA	[4BD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B4, 0x0021 };
    uint32_t const ces[9] = { 0x4BD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_065)
{
    // 103B4 003F;	
    // (êé¥) OLD PERSIAN SIGN NA	[4BD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B4, 0x003F };
    uint32_t const ces[9] = { 0x4BD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_066)
{
    // 103B4 0061;	
    // (êé¥) OLD PERSIAN SIGN NA	[4BD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B4, 0x0061 };
    uint32_t const ces[9] = { 0x4BD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_067)
{
    // 103B4 0041;	
    // (êé¥) OLD PERSIAN SIGN NA	[4BD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B4, 0x0041 };
    uint32_t const ces[9] = { 0x4BD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_068)
{
    // 103B4 0062;	
    // (êé¥) OLD PERSIAN SIGN NA	[4BD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B4, 0x0062 };
    uint32_t const ces[9] = { 0x4BD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_069)
{
    // 103B5 0021;	
    // (êéµ) OLD PERSIAN SIGN NU	[4BD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B5, 0x0021 };
    uint32_t const ces[9] = { 0x4BD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_070)
{
    // 103B5 003F;	
    // (êéµ) OLD PERSIAN SIGN NU	[4BD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B5, 0x003F };
    uint32_t const ces[9] = { 0x4BD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_071)
{
    // 103B5 0061;	
    // (êéµ) OLD PERSIAN SIGN NU	[4BD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B5, 0x0061 };
    uint32_t const ces[9] = { 0x4BD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_072)
{
    // 103B5 0041;	
    // (êéµ) OLD PERSIAN SIGN NU	[4BD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B5, 0x0041 };
    uint32_t const ces[9] = { 0x4BD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_073)
{
    // 103B5 0062;	
    // (êéµ) OLD PERSIAN SIGN NU	[4BD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B5, 0x0062 };
    uint32_t const ces[9] = { 0x4BD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_074)
{
    // 103B6 0021;	
    // (êé∂) OLD PERSIAN SIGN MA	[4BD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B6, 0x0021 };
    uint32_t const ces[9] = { 0x4BD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_075)
{
    // 103B6 003F;	
    // (êé∂) OLD PERSIAN SIGN MA	[4BD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B6, 0x003F };
    uint32_t const ces[9] = { 0x4BD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_076)
{
    // 103B6 0061;	
    // (êé∂) OLD PERSIAN SIGN MA	[4BD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B6, 0x0061 };
    uint32_t const ces[9] = { 0x4BD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_077)
{
    // 103B6 0041;	
    // (êé∂) OLD PERSIAN SIGN MA	[4BD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B6, 0x0041 };
    uint32_t const ces[9] = { 0x4BD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_078)
{
    // 103B6 0062;	
    // (êé∂) OLD PERSIAN SIGN MA	[4BD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B6, 0x0062 };
    uint32_t const ces[9] = { 0x4BD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_079)
{
    // 103B7 0021;	
    // (êé∑) OLD PERSIAN SIGN MI	[4BD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B7, 0x0021 };
    uint32_t const ces[9] = { 0x4BD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_080)
{
    // 103B7 003F;	
    // (êé∑) OLD PERSIAN SIGN MI	[4BD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B7, 0x003F };
    uint32_t const ces[9] = { 0x4BD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_081)
{
    // 103B7 0061;	
    // (êé∑) OLD PERSIAN SIGN MI	[4BD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B7, 0x0061 };
    uint32_t const ces[9] = { 0x4BD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_082)
{
    // 103B7 0041;	
    // (êé∑) OLD PERSIAN SIGN MI	[4BD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B7, 0x0041 };
    uint32_t const ces[9] = { 0x4BD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_083)
{
    // 103B7 0062;	
    // (êé∑) OLD PERSIAN SIGN MI	[4BD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B7, 0x0062 };
    uint32_t const ces[9] = { 0x4BD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_084)
{
    // 103B8 0021;	
    // (êé∏) OLD PERSIAN SIGN MU	[4BD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B8, 0x0021 };
    uint32_t const ces[9] = { 0x4BD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_085)
{
    // 103B8 003F;	
    // (êé∏) OLD PERSIAN SIGN MU	[4BD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B8, 0x003F };
    uint32_t const ces[9] = { 0x4BD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_086)
{
    // 103B8 0061;	
    // (êé∏) OLD PERSIAN SIGN MU	[4BD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B8, 0x0061 };
    uint32_t const ces[9] = { 0x4BD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_087)
{
    // 103B8 0041;	
    // (êé∏) OLD PERSIAN SIGN MU	[4BD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B8, 0x0041 };
    uint32_t const ces[9] = { 0x4BD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_088)
{
    // 103B8 0062;	
    // (êé∏) OLD PERSIAN SIGN MU	[4BD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B8, 0x0062 };
    uint32_t const ces[9] = { 0x4BD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_089)
{
    // 103B9 0021;	
    // (êéπ) OLD PERSIAN SIGN YA	[4BD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B9, 0x0021 };
    uint32_t const ces[9] = { 0x4BD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_090)
{
    // 103B9 003F;	
    // (êéπ) OLD PERSIAN SIGN YA	[4BD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B9, 0x003F };
    uint32_t const ces[9] = { 0x4BD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_091)
{
    // 103B9 0061;	
    // (êéπ) OLD PERSIAN SIGN YA	[4BD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B9, 0x0061 };
    uint32_t const ces[9] = { 0x4BD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_092)
{
    // 103B9 0041;	
    // (êéπ) OLD PERSIAN SIGN YA	[4BD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103B9, 0x0041 };
    uint32_t const ces[9] = { 0x4BD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_093)
{
    // 103B9 0062;	
    // (êéπ) OLD PERSIAN SIGN YA	[4BD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103B9, 0x0062 };
    uint32_t const ces[9] = { 0x4BD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_094)
{
    // 103BA 0021;	
    // (êé∫) OLD PERSIAN SIGN VA	[4BDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BA, 0x0021 };
    uint32_t const ces[9] = { 0x4BDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_095)
{
    // 103BA 003F;	
    // (êé∫) OLD PERSIAN SIGN VA	[4BDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BA, 0x003F };
    uint32_t const ces[9] = { 0x4BDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_096)
{
    // 103BA 0061;	
    // (êé∫) OLD PERSIAN SIGN VA	[4BDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BA, 0x0061 };
    uint32_t const ces[9] = { 0x4BDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_097)
{
    // 103BA 0041;	
    // (êé∫) OLD PERSIAN SIGN VA	[4BDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103BA, 0x0041 };
    uint32_t const ces[9] = { 0x4BDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_098)
{
    // 103BA 0062;	
    // (êé∫) OLD PERSIAN SIGN VA	[4BDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BA, 0x0062 };
    uint32_t const ces[9] = { 0x4BDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_099)
{
    // 103BB 0021;	
    // (êéª) OLD PERSIAN SIGN VI	[4BDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BB, 0x0021 };
    uint32_t const ces[9] = { 0x4BDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_100)
{
    // 103BB 003F;	
    // (êéª) OLD PERSIAN SIGN VI	[4BDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BB, 0x003F };
    uint32_t const ces[9] = { 0x4BDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_101)
{
    // 103BB 0061;	
    // (êéª) OLD PERSIAN SIGN VI	[4BDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BB, 0x0061 };
    uint32_t const ces[9] = { 0x4BDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_102)
{
    // 103BB 0041;	
    // (êéª) OLD PERSIAN SIGN VI	[4BDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103BB, 0x0041 };
    uint32_t const ces[9] = { 0x4BDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_103)
{
    // 103BB 0062;	
    // (êéª) OLD PERSIAN SIGN VI	[4BDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BB, 0x0062 };
    uint32_t const ces[9] = { 0x4BDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_104)
{
    // 103BC 0021;	
    // (êéº) OLD PERSIAN SIGN RA	[4BDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BC, 0x0021 };
    uint32_t const ces[9] = { 0x4BDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_105)
{
    // 103BC 003F;	
    // (êéº) OLD PERSIAN SIGN RA	[4BDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BC, 0x003F };
    uint32_t const ces[9] = { 0x4BDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_106)
{
    // 103BC 0061;	
    // (êéº) OLD PERSIAN SIGN RA	[4BDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BC, 0x0061 };
    uint32_t const ces[9] = { 0x4BDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_107)
{
    // 103BC 0041;	
    // (êéº) OLD PERSIAN SIGN RA	[4BDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103BC, 0x0041 };
    uint32_t const ces[9] = { 0x4BDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_108)
{
    // 103BC 0062;	
    // (êéº) OLD PERSIAN SIGN RA	[4BDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BC, 0x0062 };
    uint32_t const ces[9] = { 0x4BDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_109)
{
    // 103BD 0021;	
    // (êéΩ) OLD PERSIAN SIGN RU	[4BDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BD, 0x0021 };
    uint32_t const ces[9] = { 0x4BDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_110)
{
    // 103BD 003F;	
    // (êéΩ) OLD PERSIAN SIGN RU	[4BDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BD, 0x003F };
    uint32_t const ces[9] = { 0x4BDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_111)
{
    // 103BD 0061;	
    // (êéΩ) OLD PERSIAN SIGN RU	[4BDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BD, 0x0061 };
    uint32_t const ces[9] = { 0x4BDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_112)
{
    // 103BD 0041;	
    // (êéΩ) OLD PERSIAN SIGN RU	[4BDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103BD, 0x0041 };
    uint32_t const ces[9] = { 0x4BDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_113)
{
    // 103BD 0062;	
    // (êéΩ) OLD PERSIAN SIGN RU	[4BDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BD, 0x0062 };
    uint32_t const ces[9] = { 0x4BDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_114)
{
    // 103BE 0021;	
    // (êéæ) OLD PERSIAN SIGN LA	[4BDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BE, 0x0021 };
    uint32_t const ces[9] = { 0x4BDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_115)
{
    // 103BE 003F;	
    // (êéæ) OLD PERSIAN SIGN LA	[4BDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BE, 0x003F };
    uint32_t const ces[9] = { 0x4BDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_116)
{
    // 103BE 0061;	
    // (êéæ) OLD PERSIAN SIGN LA	[4BDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BE, 0x0061 };
    uint32_t const ces[9] = { 0x4BDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_117)
{
    // 103BE 0041;	
    // (êéæ) OLD PERSIAN SIGN LA	[4BDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103BE, 0x0041 };
    uint32_t const ces[9] = { 0x4BDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_118)
{
    // 103BE 0062;	
    // (êéæ) OLD PERSIAN SIGN LA	[4BDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BE, 0x0062 };
    uint32_t const ces[9] = { 0x4BDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_119)
{
    // 103BF 0021;	
    // (êéø) OLD PERSIAN SIGN SA	[4BDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BF, 0x0021 };
    uint32_t const ces[9] = { 0x4BDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_120)
{
    // 103BF 003F;	
    // (êéø) OLD PERSIAN SIGN SA	[4BDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BF, 0x003F };
    uint32_t const ces[9] = { 0x4BDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_121)
{
    // 103BF 0061;	
    // (êéø) OLD PERSIAN SIGN SA	[4BDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BF, 0x0061 };
    uint32_t const ces[9] = { 0x4BDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_122)
{
    // 103BF 0041;	
    // (êéø) OLD PERSIAN SIGN SA	[4BDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103BF, 0x0041 };
    uint32_t const ces[9] = { 0x4BDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_123)
{
    // 103BF 0062;	
    // (êéø) OLD PERSIAN SIGN SA	[4BDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103BF, 0x0062 };
    uint32_t const ces[9] = { 0x4BDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_124)
{
    // 103C0 0021;	
    // (êèÄ) OLD PERSIAN SIGN ZA	[4BE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C0, 0x0021 };
    uint32_t const ces[9] = { 0x4BE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_125)
{
    // 103C0 003F;	
    // (êèÄ) OLD PERSIAN SIGN ZA	[4BE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C0, 0x003F };
    uint32_t const ces[9] = { 0x4BE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_126)
{
    // 103C0 0061;	
    // (êèÄ) OLD PERSIAN SIGN ZA	[4BE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C0, 0x0061 };
    uint32_t const ces[9] = { 0x4BE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_127)
{
    // 103C0 0041;	
    // (êèÄ) OLD PERSIAN SIGN ZA	[4BE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103C0, 0x0041 };
    uint32_t const ces[9] = { 0x4BE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_128)
{
    // 103C0 0062;	
    // (êèÄ) OLD PERSIAN SIGN ZA	[4BE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C0, 0x0062 };
    uint32_t const ces[9] = { 0x4BE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_129)
{
    // 103C1 0021;	
    // (êèÅ) OLD PERSIAN SIGN SHA	[4BE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C1, 0x0021 };
    uint32_t const ces[9] = { 0x4BE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_130)
{
    // 103C1 003F;	
    // (êèÅ) OLD PERSIAN SIGN SHA	[4BE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C1, 0x003F };
    uint32_t const ces[9] = { 0x4BE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_131)
{
    // 103C1 0061;	
    // (êèÅ) OLD PERSIAN SIGN SHA	[4BE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C1, 0x0061 };
    uint32_t const ces[9] = { 0x4BE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_132)
{
    // 103C1 0041;	
    // (êèÅ) OLD PERSIAN SIGN SHA	[4BE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103C1, 0x0041 };
    uint32_t const ces[9] = { 0x4BE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_133)
{
    // 103C1 0062;	
    // (êèÅ) OLD PERSIAN SIGN SHA	[4BE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C1, 0x0062 };
    uint32_t const ces[9] = { 0x4BE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_134)
{
    // 103C2 0021;	
    // (êèÇ) OLD PERSIAN SIGN SSA	[4BE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C2, 0x0021 };
    uint32_t const ces[9] = { 0x4BE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_135)
{
    // 103C2 003F;	
    // (êèÇ) OLD PERSIAN SIGN SSA	[4BE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C2, 0x003F };
    uint32_t const ces[9] = { 0x4BE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_136)
{
    // 103C2 0061;	
    // (êèÇ) OLD PERSIAN SIGN SSA	[4BE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C2, 0x0061 };
    uint32_t const ces[9] = { 0x4BE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_137)
{
    // 103C2 0041;	
    // (êèÇ) OLD PERSIAN SIGN SSA	[4BE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103C2, 0x0041 };
    uint32_t const ces[9] = { 0x4BE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_138)
{
    // 103C2 0062;	
    // (êèÇ) OLD PERSIAN SIGN SSA	[4BE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C2, 0x0062 };
    uint32_t const ces[9] = { 0x4BE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_139)
{
    // 103C3 0021;	
    // (êèÉ) OLD PERSIAN SIGN HA	[4BE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C3, 0x0021 };
    uint32_t const ces[9] = { 0x4BE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_140)
{
    // 103C3 003F;	
    // (êèÉ) OLD PERSIAN SIGN HA	[4BE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C3, 0x003F };
    uint32_t const ces[9] = { 0x4BE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_141)
{
    // 103C3 0061;	
    // (êèÉ) OLD PERSIAN SIGN HA	[4BE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C3, 0x0061 };
    uint32_t const ces[9] = { 0x4BE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_142)
{
    // 103C3 0041;	
    // (êèÉ) OLD PERSIAN SIGN HA	[4BE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103C3, 0x0041 };
    uint32_t const ces[9] = { 0x4BE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_143)
{
    // 103C3 0062;	
    // (êèÉ) OLD PERSIAN SIGN HA	[4BE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C3, 0x0062 };
    uint32_t const ces[9] = { 0x4BE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_144)
{
    // 103C8 0021;	
    // (êèà) OLD PERSIAN SIGN AURAMAZDAA	[4BE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C8, 0x0021 };
    uint32_t const ces[9] = { 0x4BE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_145)
{
    // 103C8 003F;	
    // (êèà) OLD PERSIAN SIGN AURAMAZDAA	[4BE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C8, 0x003F };
    uint32_t const ces[9] = { 0x4BE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_146)
{
    // 103C8 0061;	
    // (êèà) OLD PERSIAN SIGN AURAMAZDAA	[4BE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C8, 0x0061 };
    uint32_t const ces[9] = { 0x4BE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_147)
{
    // 103C8 0041;	
    // (êèà) OLD PERSIAN SIGN AURAMAZDAA	[4BE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103C8, 0x0041 };
    uint32_t const ces[9] = { 0x4BE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_148)
{
    // 103C8 0062;	
    // (êèà) OLD PERSIAN SIGN AURAMAZDAA	[4BE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C8, 0x0062 };
    uint32_t const ces[9] = { 0x4BE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_149)
{
    // 103C9 0021;	
    // (êèâ) OLD PERSIAN SIGN AURAMAZDAA-2	[4BE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C9, 0x0021 };
    uint32_t const ces[9] = { 0x4BE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_150)
{
    // 103C9 003F;	
    // (êèâ) OLD PERSIAN SIGN AURAMAZDAA-2	[4BE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C9, 0x003F };
    uint32_t const ces[9] = { 0x4BE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_151)
{
    // 103C9 0061;	
    // (êèâ) OLD PERSIAN SIGN AURAMAZDAA-2	[4BE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C9, 0x0061 };
    uint32_t const ces[9] = { 0x4BE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_152)
{
    // 103C9 0041;	
    // (êèâ) OLD PERSIAN SIGN AURAMAZDAA-2	[4BE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103C9, 0x0041 };
    uint32_t const ces[9] = { 0x4BE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_153)
{
    // 103C9 0062;	
    // (êèâ) OLD PERSIAN SIGN AURAMAZDAA-2	[4BE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103C9, 0x0062 };
    uint32_t const ces[9] = { 0x4BE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_154)
{
    // 103CA 0021;	
    // (êèä) OLD PERSIAN SIGN AURAMAZDAAHA	[4BE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CA, 0x0021 };
    uint32_t const ces[9] = { 0x4BE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_155)
{
    // 103CA 003F;	
    // (êèä) OLD PERSIAN SIGN AURAMAZDAAHA	[4BE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CA, 0x003F };
    uint32_t const ces[9] = { 0x4BE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_156)
{
    // 103CA 0061;	
    // (êèä) OLD PERSIAN SIGN AURAMAZDAAHA	[4BE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CA, 0x0061 };
    uint32_t const ces[9] = { 0x4BE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_157)
{
    // 103CA 0041;	
    // (êèä) OLD PERSIAN SIGN AURAMAZDAAHA	[4BE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103CA, 0x0041 };
    uint32_t const ces[9] = { 0x4BE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_158)
{
    // 103CA 0062;	
    // (êèä) OLD PERSIAN SIGN AURAMAZDAAHA	[4BE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CA, 0x0062 };
    uint32_t const ces[9] = { 0x4BE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_159)
{
    // 103CB 0021;	
    // (êèã) OLD PERSIAN SIGN XSHAAYATHIYA	[4BE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CB, 0x0021 };
    uint32_t const ces[9] = { 0x4BE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_160)
{
    // 103CB 003F;	
    // (êèã) OLD PERSIAN SIGN XSHAAYATHIYA	[4BE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CB, 0x003F };
    uint32_t const ces[9] = { 0x4BE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_161)
{
    // 103CB 0061;	
    // (êèã) OLD PERSIAN SIGN XSHAAYATHIYA	[4BE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CB, 0x0061 };
    uint32_t const ces[9] = { 0x4BE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_162)
{
    // 103CB 0041;	
    // (êèã) OLD PERSIAN SIGN XSHAAYATHIYA	[4BE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103CB, 0x0041 };
    uint32_t const ces[9] = { 0x4BE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_163)
{
    // 103CB 0062;	
    // (êèã) OLD PERSIAN SIGN XSHAAYATHIYA	[4BE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CB, 0x0062 };
    uint32_t const ces[9] = { 0x4BE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_164)
{
    // 103CC 0021;	
    // (êèå) OLD PERSIAN SIGN DAHYAAUSH	[4BE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CC, 0x0021 };
    uint32_t const ces[9] = { 0x4BE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_165)
{
    // 103CC 003F;	
    // (êèå) OLD PERSIAN SIGN DAHYAAUSH	[4BE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CC, 0x003F };
    uint32_t const ces[9] = { 0x4BE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_166)
{
    // 103CC 0061;	
    // (êèå) OLD PERSIAN SIGN DAHYAAUSH	[4BE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CC, 0x0061 };
    uint32_t const ces[9] = { 0x4BE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_167)
{
    // 103CC 0041;	
    // (êèå) OLD PERSIAN SIGN DAHYAAUSH	[4BE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103CC, 0x0041 };
    uint32_t const ces[9] = { 0x4BE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_168)
{
    // 103CC 0062;	
    // (êèå) OLD PERSIAN SIGN DAHYAAUSH	[4BE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CC, 0x0062 };
    uint32_t const ces[9] = { 0x4BE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_169)
{
    // 103CD 0021;	
    // (êèç) OLD PERSIAN SIGN DAHYAAUSH-2	[4BE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CD, 0x0021 };
    uint32_t const ces[9] = { 0x4BE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_170)
{
    // 103CD 003F;	
    // (êèç) OLD PERSIAN SIGN DAHYAAUSH-2	[4BE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CD, 0x003F };
    uint32_t const ces[9] = { 0x4BE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_171)
{
    // 103CD 0061;	
    // (êèç) OLD PERSIAN SIGN DAHYAAUSH-2	[4BE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CD, 0x0061 };
    uint32_t const ces[9] = { 0x4BE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_172)
{
    // 103CD 0041;	
    // (êèç) OLD PERSIAN SIGN DAHYAAUSH-2	[4BE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103CD, 0x0041 };
    uint32_t const ces[9] = { 0x4BE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_173)
{
    // 103CD 0062;	
    // (êèç) OLD PERSIAN SIGN DAHYAAUSH-2	[4BE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CD, 0x0062 };
    uint32_t const ces[9] = { 0x4BE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_174)
{
    // 103CE 0021;	
    // (êèé) OLD PERSIAN SIGN BAGA	[4BEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CE, 0x0021 };
    uint32_t const ces[9] = { 0x4BEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_175)
{
    // 103CE 003F;	
    // (êèé) OLD PERSIAN SIGN BAGA	[4BEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CE, 0x003F };
    uint32_t const ces[9] = { 0x4BEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_176)
{
    // 103CE 0061;	
    // (êèé) OLD PERSIAN SIGN BAGA	[4BEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CE, 0x0061 };
    uint32_t const ces[9] = { 0x4BEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_177)
{
    // 103CE 0041;	
    // (êèé) OLD PERSIAN SIGN BAGA	[4BEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103CE, 0x0041 };
    uint32_t const ces[9] = { 0x4BEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_178)
{
    // 103CE 0062;	
    // (êèé) OLD PERSIAN SIGN BAGA	[4BEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CE, 0x0062 };
    uint32_t const ces[9] = { 0x4BEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_179)
{
    // 103CF 0021;	
    // (êèè) OLD PERSIAN SIGN BUUMISH	[4BEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CF, 0x0021 };
    uint32_t const ces[9] = { 0x4BEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_180)
{
    // 103CF 003F;	
    // (êèè) OLD PERSIAN SIGN BUUMISH	[4BEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CF, 0x003F };
    uint32_t const ces[9] = { 0x4BEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_181)
{
    // 103CF 0061;	
    // (êèè) OLD PERSIAN SIGN BUUMISH	[4BEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CF, 0x0061 };
    uint32_t const ces[9] = { 0x4BEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_182)
{
    // 103CF 0041;	
    // (êèè) OLD PERSIAN SIGN BUUMISH	[4BEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103CF, 0x0041 };
    uint32_t const ces[9] = { 0x4BEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_183)
{
    // 103CF 0062;	
    // (êèè) OLD PERSIAN SIGN BUUMISH	[4BEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103CF, 0x0062 };
    uint32_t const ces[9] = { 0x4BEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_184)
{
    // 12000 0021;	
    // (íÄÄ) CUNEIFORM SIGN A	[4BEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12000, 0x0021 };
    uint32_t const ces[9] = { 0x4BEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_185)
{
    // 12000 003F;	
    // (íÄÄ) CUNEIFORM SIGN A	[4BEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12000, 0x003F };
    uint32_t const ces[9] = { 0x4BEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_186)
{
    // 12000 0061;	
    // (íÄÄ) CUNEIFORM SIGN A	[4BEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12000, 0x0061 };
    uint32_t const ces[9] = { 0x4BEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_187)
{
    // 12000 0041;	
    // (íÄÄ) CUNEIFORM SIGN A	[4BEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12000, 0x0041 };
    uint32_t const ces[9] = { 0x4BEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_188)
{
    // 12000 0062;	
    // (íÄÄ) CUNEIFORM SIGN A	[4BEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12000, 0x0062 };
    uint32_t const ces[9] = { 0x4BEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_189)
{
    // 12001 0021;	
    // (íÄÅ) CUNEIFORM SIGN A TIMES A	[4BED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12001, 0x0021 };
    uint32_t const ces[9] = { 0x4BED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_190)
{
    // 12001 003F;	
    // (íÄÅ) CUNEIFORM SIGN A TIMES A	[4BED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12001, 0x003F };
    uint32_t const ces[9] = { 0x4BED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_191)
{
    // 12001 0061;	
    // (íÄÅ) CUNEIFORM SIGN A TIMES A	[4BED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12001, 0x0061 };
    uint32_t const ces[9] = { 0x4BED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_192)
{
    // 12001 0041;	
    // (íÄÅ) CUNEIFORM SIGN A TIMES A	[4BED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12001, 0x0041 };
    uint32_t const ces[9] = { 0x4BED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_193)
{
    // 12001 0062;	
    // (íÄÅ) CUNEIFORM SIGN A TIMES A	[4BED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12001, 0x0062 };
    uint32_t const ces[9] = { 0x4BED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_194)
{
    // 12002 0021;	
    // (íÄÇ) CUNEIFORM SIGN A TIMES BAD	[4BEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12002, 0x0021 };
    uint32_t const ces[9] = { 0x4BEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_195)
{
    // 12002 003F;	
    // (íÄÇ) CUNEIFORM SIGN A TIMES BAD	[4BEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12002, 0x003F };
    uint32_t const ces[9] = { 0x4BEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_196)
{
    // 12002 0061;	
    // (íÄÇ) CUNEIFORM SIGN A TIMES BAD	[4BEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12002, 0x0061 };
    uint32_t const ces[9] = { 0x4BEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_197)
{
    // 12002 0041;	
    // (íÄÇ) CUNEIFORM SIGN A TIMES BAD	[4BEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12002, 0x0041 };
    uint32_t const ces[9] = { 0x4BEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_198)
{
    // 12002 0062;	
    // (íÄÇ) CUNEIFORM SIGN A TIMES BAD	[4BEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12002, 0x0062 };
    uint32_t const ces[9] = { 0x4BEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_199)
{
    // 12003 0021;	
    // (íÄÉ) CUNEIFORM SIGN A TIMES GAN2 TENU	[4BEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12003, 0x0021 };
    uint32_t const ces[9] = { 0x4BEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_200)
{
    // 12003 003F;	
    // (íÄÉ) CUNEIFORM SIGN A TIMES GAN2 TENU	[4BEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12003, 0x003F };
    uint32_t const ces[9] = { 0x4BEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_201)
{
    // 12003 0061;	
    // (íÄÉ) CUNEIFORM SIGN A TIMES GAN2 TENU	[4BEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12003, 0x0061 };
    uint32_t const ces[9] = { 0x4BEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_202)
{
    // 12003 0041;	
    // (íÄÉ) CUNEIFORM SIGN A TIMES GAN2 TENU	[4BEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12003, 0x0041 };
    uint32_t const ces[9] = { 0x4BEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_203)
{
    // 12003 0062;	
    // (íÄÉ) CUNEIFORM SIGN A TIMES GAN2 TENU	[4BEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12003, 0x0062 };
    uint32_t const ces[9] = { 0x4BEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_204)
{
    // 12004 0021;	
    // (íÄÑ) CUNEIFORM SIGN A TIMES HA	[4BF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12004, 0x0021 };
    uint32_t const ces[9] = { 0x4BF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_205)
{
    // 12004 003F;	
    // (íÄÑ) CUNEIFORM SIGN A TIMES HA	[4BF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12004, 0x003F };
    uint32_t const ces[9] = { 0x4BF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_206)
{
    // 12004 0061;	
    // (íÄÑ) CUNEIFORM SIGN A TIMES HA	[4BF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12004, 0x0061 };
    uint32_t const ces[9] = { 0x4BF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_207)
{
    // 12004 0041;	
    // (íÄÑ) CUNEIFORM SIGN A TIMES HA	[4BF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12004, 0x0041 };
    uint32_t const ces[9] = { 0x4BF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_208)
{
    // 12004 0062;	
    // (íÄÑ) CUNEIFORM SIGN A TIMES HA	[4BF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12004, 0x0062 };
    uint32_t const ces[9] = { 0x4BF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_209)
{
    // 12005 0021;	
    // (íÄÖ) CUNEIFORM SIGN A TIMES IGI	[4BF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12005, 0x0021 };
    uint32_t const ces[9] = { 0x4BF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_210)
{
    // 12005 003F;	
    // (íÄÖ) CUNEIFORM SIGN A TIMES IGI	[4BF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12005, 0x003F };
    uint32_t const ces[9] = { 0x4BF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_211)
{
    // 12005 0061;	
    // (íÄÖ) CUNEIFORM SIGN A TIMES IGI	[4BF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12005, 0x0061 };
    uint32_t const ces[9] = { 0x4BF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_212)
{
    // 12005 0041;	
    // (íÄÖ) CUNEIFORM SIGN A TIMES IGI	[4BF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12005, 0x0041 };
    uint32_t const ces[9] = { 0x4BF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_213)
{
    // 12005 0062;	
    // (íÄÖ) CUNEIFORM SIGN A TIMES IGI	[4BF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12005, 0x0062 };
    uint32_t const ces[9] = { 0x4BF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_214)
{
    // 12006 0021;	
    // (íÄÜ) CUNEIFORM SIGN A TIMES LAGAR GUNU	[4BF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12006, 0x0021 };
    uint32_t const ces[9] = { 0x4BF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_215)
{
    // 12006 003F;	
    // (íÄÜ) CUNEIFORM SIGN A TIMES LAGAR GUNU	[4BF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12006, 0x003F };
    uint32_t const ces[9] = { 0x4BF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_216)
{
    // 12006 0061;	
    // (íÄÜ) CUNEIFORM SIGN A TIMES LAGAR GUNU	[4BF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12006, 0x0061 };
    uint32_t const ces[9] = { 0x4BF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_217)
{
    // 12006 0041;	
    // (íÄÜ) CUNEIFORM SIGN A TIMES LAGAR GUNU	[4BF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12006, 0x0041 };
    uint32_t const ces[9] = { 0x4BF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_218)
{
    // 12006 0062;	
    // (íÄÜ) CUNEIFORM SIGN A TIMES LAGAR GUNU	[4BF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12006, 0x0062 };
    uint32_t const ces[9] = { 0x4BF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_219)
{
    // 12007 0021;	
    // (íÄá) CUNEIFORM SIGN A TIMES MUSH	[4BF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12007, 0x0021 };
    uint32_t const ces[9] = { 0x4BF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_220)
{
    // 12007 003F;	
    // (íÄá) CUNEIFORM SIGN A TIMES MUSH	[4BF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12007, 0x003F };
    uint32_t const ces[9] = { 0x4BF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_221)
{
    // 12007 0061;	
    // (íÄá) CUNEIFORM SIGN A TIMES MUSH	[4BF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12007, 0x0061 };
    uint32_t const ces[9] = { 0x4BF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_222)
{
    // 12007 0041;	
    // (íÄá) CUNEIFORM SIGN A TIMES MUSH	[4BF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12007, 0x0041 };
    uint32_t const ces[9] = { 0x4BF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_223)
{
    // 12007 0062;	
    // (íÄá) CUNEIFORM SIGN A TIMES MUSH	[4BF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12007, 0x0062 };
    uint32_t const ces[9] = { 0x4BF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_224)
{
    // 12008 0021;	
    // (íÄà) CUNEIFORM SIGN A TIMES SAG	[4BF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12008, 0x0021 };
    uint32_t const ces[9] = { 0x4BF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_225)
{
    // 12008 003F;	
    // (íÄà) CUNEIFORM SIGN A TIMES SAG	[4BF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12008, 0x003F };
    uint32_t const ces[9] = { 0x4BF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_226)
{
    // 12008 0061;	
    // (íÄà) CUNEIFORM SIGN A TIMES SAG	[4BF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12008, 0x0061 };
    uint32_t const ces[9] = { 0x4BF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_227)
{
    // 12008 0041;	
    // (íÄà) CUNEIFORM SIGN A TIMES SAG	[4BF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12008, 0x0041 };
    uint32_t const ces[9] = { 0x4BF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_228)
{
    // 12008 0062;	
    // (íÄà) CUNEIFORM SIGN A TIMES SAG	[4BF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12008, 0x0062 };
    uint32_t const ces[9] = { 0x4BF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_229)
{
    // 12009 0021;	
    // (íÄâ) CUNEIFORM SIGN A2	[4BF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12009, 0x0021 };
    uint32_t const ces[9] = { 0x4BF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_230)
{
    // 12009 003F;	
    // (íÄâ) CUNEIFORM SIGN A2	[4BF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12009, 0x003F };
    uint32_t const ces[9] = { 0x4BF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_231)
{
    // 12009 0061;	
    // (íÄâ) CUNEIFORM SIGN A2	[4BF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12009, 0x0061 };
    uint32_t const ces[9] = { 0x4BF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_232)
{
    // 12009 0041;	
    // (íÄâ) CUNEIFORM SIGN A2	[4BF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12009, 0x0041 };
    uint32_t const ces[9] = { 0x4BF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_233)
{
    // 12009 0062;	
    // (íÄâ) CUNEIFORM SIGN A2	[4BF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12009, 0x0062 };
    uint32_t const ces[9] = { 0x4BF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_234)
{
    // 1200A 0021;	
    // (íÄä) CUNEIFORM SIGN AB	[4BF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200A, 0x0021 };
    uint32_t const ces[9] = { 0x4BF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_235)
{
    // 1200A 003F;	
    // (íÄä) CUNEIFORM SIGN AB	[4BF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200A, 0x003F };
    uint32_t const ces[9] = { 0x4BF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_236)
{
    // 1200A 0061;	
    // (íÄä) CUNEIFORM SIGN AB	[4BF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200A, 0x0061 };
    uint32_t const ces[9] = { 0x4BF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_237)
{
    // 1200A 0041;	
    // (íÄä) CUNEIFORM SIGN AB	[4BF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1200A, 0x0041 };
    uint32_t const ces[9] = { 0x4BF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_238)
{
    // 1200A 0062;	
    // (íÄä) CUNEIFORM SIGN AB	[4BF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200A, 0x0062 };
    uint32_t const ces[9] = { 0x4BF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_239)
{
    // 1200B 0021;	
    // (íÄã) CUNEIFORM SIGN AB TIMES ASH2	[4BF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200B, 0x0021 };
    uint32_t const ces[9] = { 0x4BF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_240)
{
    // 1200B 003F;	
    // (íÄã) CUNEIFORM SIGN AB TIMES ASH2	[4BF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200B, 0x003F };
    uint32_t const ces[9] = { 0x4BF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_241)
{
    // 1200B 0061;	
    // (íÄã) CUNEIFORM SIGN AB TIMES ASH2	[4BF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200B, 0x0061 };
    uint32_t const ces[9] = { 0x4BF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_242)
{
    // 1200B 0041;	
    // (íÄã) CUNEIFORM SIGN AB TIMES ASH2	[4BF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1200B, 0x0041 };
    uint32_t const ces[9] = { 0x4BF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_243)
{
    // 1200B 0062;	
    // (íÄã) CUNEIFORM SIGN AB TIMES ASH2	[4BF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200B, 0x0062 };
    uint32_t const ces[9] = { 0x4BF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_244)
{
    // 1200C 0021;	
    // (íÄå) CUNEIFORM SIGN AB TIMES DUN3 GUNU	[4BF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200C, 0x0021 };
    uint32_t const ces[9] = { 0x4BF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_245)
{
    // 1200C 003F;	
    // (íÄå) CUNEIFORM SIGN AB TIMES DUN3 GUNU	[4BF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200C, 0x003F };
    uint32_t const ces[9] = { 0x4BF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_246)
{
    // 1200C 0061;	
    // (íÄå) CUNEIFORM SIGN AB TIMES DUN3 GUNU	[4BF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200C, 0x0061 };
    uint32_t const ces[9] = { 0x4BF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_247)
{
    // 1200C 0041;	
    // (íÄå) CUNEIFORM SIGN AB TIMES DUN3 GUNU	[4BF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1200C, 0x0041 };
    uint32_t const ces[9] = { 0x4BF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_248)
{
    // 1200C 0062;	
    // (íÄå) CUNEIFORM SIGN AB TIMES DUN3 GUNU	[4BF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200C, 0x0062 };
    uint32_t const ces[9] = { 0x4BF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_249)
{
    // 1200D 0021;	
    // (íÄç) CUNEIFORM SIGN AB TIMES GAL	[4BF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200D, 0x0021 };
    uint32_t const ces[9] = { 0x4BF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_250)
{
    // 1200D 003F;	
    // (íÄç) CUNEIFORM SIGN AB TIMES GAL	[4BF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200D, 0x003F };
    uint32_t const ces[9] = { 0x4BF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_251)
{
    // 1200D 0061;	
    // (íÄç) CUNEIFORM SIGN AB TIMES GAL	[4BF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200D, 0x0061 };
    uint32_t const ces[9] = { 0x4BF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_252)
{
    // 1200D 0041;	
    // (íÄç) CUNEIFORM SIGN AB TIMES GAL	[4BF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1200D, 0x0041 };
    uint32_t const ces[9] = { 0x4BF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_253)
{
    // 1200D 0062;	
    // (íÄç) CUNEIFORM SIGN AB TIMES GAL	[4BF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200D, 0x0062 };
    uint32_t const ces[9] = { 0x4BF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_254)
{
    // 1200E 0021;	
    // (íÄé) CUNEIFORM SIGN AB TIMES GAN2 TENU	[4BFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200E, 0x0021 };
    uint32_t const ces[9] = { 0x4BFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_255)
{
    // 1200E 003F;	
    // (íÄé) CUNEIFORM SIGN AB TIMES GAN2 TENU	[4BFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200E, 0x003F };
    uint32_t const ces[9] = { 0x4BFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_256)
{
    // 1200E 0061;	
    // (íÄé) CUNEIFORM SIGN AB TIMES GAN2 TENU	[4BFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200E, 0x0061 };
    uint32_t const ces[9] = { 0x4BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_257)
{
    // 1200E 0041;	
    // (íÄé) CUNEIFORM SIGN AB TIMES GAN2 TENU	[4BFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1200E, 0x0041 };
    uint32_t const ces[9] = { 0x4BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_258)
{
    // 1200E 0062;	
    // (íÄé) CUNEIFORM SIGN AB TIMES GAN2 TENU	[4BFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200E, 0x0062 };
    uint32_t const ces[9] = { 0x4BFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_259)
{
    // 1200F 0021;	
    // (íÄè) CUNEIFORM SIGN AB TIMES HA	[4BFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200F, 0x0021 };
    uint32_t const ces[9] = { 0x4BFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_260)
{
    // 1200F 003F;	
    // (íÄè) CUNEIFORM SIGN AB TIMES HA	[4BFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200F, 0x003F };
    uint32_t const ces[9] = { 0x4BFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_261)
{
    // 1200F 0061;	
    // (íÄè) CUNEIFORM SIGN AB TIMES HA	[4BFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200F, 0x0061 };
    uint32_t const ces[9] = { 0x4BFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_262)
{
    // 1200F 0041;	
    // (íÄè) CUNEIFORM SIGN AB TIMES HA	[4BFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1200F, 0x0041 };
    uint32_t const ces[9] = { 0x4BFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_263)
{
    // 1200F 0062;	
    // (íÄè) CUNEIFORM SIGN AB TIMES HA	[4BFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1200F, 0x0062 };
    uint32_t const ces[9] = { 0x4BFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_264)
{
    // 12010 0021;	
    // (íÄê) CUNEIFORM SIGN AB TIMES IGI GUNU	[4BFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12010, 0x0021 };
    uint32_t const ces[9] = { 0x4BFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_265)
{
    // 12010 003F;	
    // (íÄê) CUNEIFORM SIGN AB TIMES IGI GUNU	[4BFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12010, 0x003F };
    uint32_t const ces[9] = { 0x4BFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_266)
{
    // 12010 0061;	
    // (íÄê) CUNEIFORM SIGN AB TIMES IGI GUNU	[4BFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12010, 0x0061 };
    uint32_t const ces[9] = { 0x4BFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_267)
{
    // 12010 0041;	
    // (íÄê) CUNEIFORM SIGN AB TIMES IGI GUNU	[4BFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12010, 0x0041 };
    uint32_t const ces[9] = { 0x4BFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_268)
{
    // 12010 0062;	
    // (íÄê) CUNEIFORM SIGN AB TIMES IGI GUNU	[4BFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12010, 0x0062 };
    uint32_t const ces[9] = { 0x4BFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_269)
{
    // 12011 0021;	
    // (íÄë) CUNEIFORM SIGN AB TIMES IMIN	[4BFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12011, 0x0021 };
    uint32_t const ces[9] = { 0x4BFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_270)
{
    // 12011 003F;	
    // (íÄë) CUNEIFORM SIGN AB TIMES IMIN	[4BFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12011, 0x003F };
    uint32_t const ces[9] = { 0x4BFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_271)
{
    // 12011 0061;	
    // (íÄë) CUNEIFORM SIGN AB TIMES IMIN	[4BFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12011, 0x0061 };
    uint32_t const ces[9] = { 0x4BFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_272)
{
    // 12011 0041;	
    // (íÄë) CUNEIFORM SIGN AB TIMES IMIN	[4BFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12011, 0x0041 };
    uint32_t const ces[9] = { 0x4BFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_273)
{
    // 12011 0062;	
    // (íÄë) CUNEIFORM SIGN AB TIMES IMIN	[4BFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12011, 0x0062 };
    uint32_t const ces[9] = { 0x4BFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_274)
{
    // 12012 0021;	
    // (íÄí) CUNEIFORM SIGN AB TIMES LAGAB	[4BFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12012, 0x0021 };
    uint32_t const ces[9] = { 0x4BFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_275)
{
    // 12012 003F;	
    // (íÄí) CUNEIFORM SIGN AB TIMES LAGAB	[4BFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12012, 0x003F };
    uint32_t const ces[9] = { 0x4BFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_276)
{
    // 12012 0061;	
    // (íÄí) CUNEIFORM SIGN AB TIMES LAGAB	[4BFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12012, 0x0061 };
    uint32_t const ces[9] = { 0x4BFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_277)
{
    // 12012 0041;	
    // (íÄí) CUNEIFORM SIGN AB TIMES LAGAB	[4BFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12012, 0x0041 };
    uint32_t const ces[9] = { 0x4BFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_278)
{
    // 12012 0062;	
    // (íÄí) CUNEIFORM SIGN AB TIMES LAGAB	[4BFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12012, 0x0062 };
    uint32_t const ces[9] = { 0x4BFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_279)
{
    // 12013 0021;	
    // (íÄì) CUNEIFORM SIGN AB TIMES SHESH	[4BFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12013, 0x0021 };
    uint32_t const ces[9] = { 0x4BFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_280)
{
    // 12013 003F;	
    // (íÄì) CUNEIFORM SIGN AB TIMES SHESH	[4BFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12013, 0x003F };
    uint32_t const ces[9] = { 0x4BFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_281)
{
    // 12013 0061;	
    // (íÄì) CUNEIFORM SIGN AB TIMES SHESH	[4BFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12013, 0x0061 };
    uint32_t const ces[9] = { 0x4BFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_282)
{
    // 12013 0041;	
    // (íÄì) CUNEIFORM SIGN AB TIMES SHESH	[4BFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12013, 0x0041 };
    uint32_t const ces[9] = { 0x4BFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_283)
{
    // 12013 0062;	
    // (íÄì) CUNEIFORM SIGN AB TIMES SHESH	[4BFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12013, 0x0062 };
    uint32_t const ces[9] = { 0x4BFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_284)
{
    // 12014 0021;	
    // (íÄî) CUNEIFORM SIGN AB TIMES U PLUS U PLUS U	[4C00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12014, 0x0021 };
    uint32_t const ces[9] = { 0x4C00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_285)
{
    // 12014 003F;	
    // (íÄî) CUNEIFORM SIGN AB TIMES U PLUS U PLUS U	[4C00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12014, 0x003F };
    uint32_t const ces[9] = { 0x4C00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_286)
{
    // 12014 0061;	
    // (íÄî) CUNEIFORM SIGN AB TIMES U PLUS U PLUS U	[4C00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12014, 0x0061 };
    uint32_t const ces[9] = { 0x4C00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_287)
{
    // 12014 0041;	
    // (íÄî) CUNEIFORM SIGN AB TIMES U PLUS U PLUS U	[4C00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12014, 0x0041 };
    uint32_t const ces[9] = { 0x4C00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_288)
{
    // 12014 0062;	
    // (íÄî) CUNEIFORM SIGN AB TIMES U PLUS U PLUS U	[4C00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12014, 0x0062 };
    uint32_t const ces[9] = { 0x4C00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_289)
{
    // 12015 0021;	
    // (íÄï) CUNEIFORM SIGN AB GUNU	[4C01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12015, 0x0021 };
    uint32_t const ces[9] = { 0x4C01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_290)
{
    // 12015 003F;	
    // (íÄï) CUNEIFORM SIGN AB GUNU	[4C01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12015, 0x003F };
    uint32_t const ces[9] = { 0x4C01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_291)
{
    // 12015 0061;	
    // (íÄï) CUNEIFORM SIGN AB GUNU	[4C01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12015, 0x0061 };
    uint32_t const ces[9] = { 0x4C01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_292)
{
    // 12015 0041;	
    // (íÄï) CUNEIFORM SIGN AB GUNU	[4C01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12015, 0x0041 };
    uint32_t const ces[9] = { 0x4C01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_293)
{
    // 12015 0062;	
    // (íÄï) CUNEIFORM SIGN AB GUNU	[4C01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12015, 0x0062 };
    uint32_t const ces[9] = { 0x4C01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_294)
{
    // 12016 0021;	
    // (íÄñ) CUNEIFORM SIGN AB2	[4C02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12016, 0x0021 };
    uint32_t const ces[9] = { 0x4C02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_295)
{
    // 12016 003F;	
    // (íÄñ) CUNEIFORM SIGN AB2	[4C02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12016, 0x003F };
    uint32_t const ces[9] = { 0x4C02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_296)
{
    // 12016 0061;	
    // (íÄñ) CUNEIFORM SIGN AB2	[4C02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12016, 0x0061 };
    uint32_t const ces[9] = { 0x4C02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_297)
{
    // 12016 0041;	
    // (íÄñ) CUNEIFORM SIGN AB2	[4C02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12016, 0x0041 };
    uint32_t const ces[9] = { 0x4C02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_298)
{
    // 12016 0062;	
    // (íÄñ) CUNEIFORM SIGN AB2	[4C02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12016, 0x0062 };
    uint32_t const ces[9] = { 0x4C02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_299)
{
    // 12017 0021;	
    // (íÄó) CUNEIFORM SIGN AB2 TIMES BALAG	[4C03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12017, 0x0021 };
    uint32_t const ces[9] = { 0x4C03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_300)
{
    // 12017 003F;	
    // (íÄó) CUNEIFORM SIGN AB2 TIMES BALAG	[4C03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12017, 0x003F };
    uint32_t const ces[9] = { 0x4C03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_301)
{
    // 12017 0061;	
    // (íÄó) CUNEIFORM SIGN AB2 TIMES BALAG	[4C03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12017, 0x0061 };
    uint32_t const ces[9] = { 0x4C03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_302)
{
    // 12017 0041;	
    // (íÄó) CUNEIFORM SIGN AB2 TIMES BALAG	[4C03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12017, 0x0041 };
    uint32_t const ces[9] = { 0x4C03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_303)
{
    // 12017 0062;	
    // (íÄó) CUNEIFORM SIGN AB2 TIMES BALAG	[4C03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12017, 0x0062 };
    uint32_t const ces[9] = { 0x4C03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_304)
{
    // 12018 0021;	
    // (íÄò) CUNEIFORM SIGN AB2 TIMES GAN2 TENU	[4C04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12018, 0x0021 };
    uint32_t const ces[9] = { 0x4C04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_305)
{
    // 12018 003F;	
    // (íÄò) CUNEIFORM SIGN AB2 TIMES GAN2 TENU	[4C04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12018, 0x003F };
    uint32_t const ces[9] = { 0x4C04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_306)
{
    // 12018 0061;	
    // (íÄò) CUNEIFORM SIGN AB2 TIMES GAN2 TENU	[4C04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12018, 0x0061 };
    uint32_t const ces[9] = { 0x4C04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_307)
{
    // 12018 0041;	
    // (íÄò) CUNEIFORM SIGN AB2 TIMES GAN2 TENU	[4C04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12018, 0x0041 };
    uint32_t const ces[9] = { 0x4C04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_308)
{
    // 12018 0062;	
    // (íÄò) CUNEIFORM SIGN AB2 TIMES GAN2 TENU	[4C04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12018, 0x0062 };
    uint32_t const ces[9] = { 0x4C04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_309)
{
    // 12019 0021;	
    // (íÄô) CUNEIFORM SIGN AB2 TIMES ME PLUS EN	[4C05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12019, 0x0021 };
    uint32_t const ces[9] = { 0x4C05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_310)
{
    // 12019 003F;	
    // (íÄô) CUNEIFORM SIGN AB2 TIMES ME PLUS EN	[4C05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12019, 0x003F };
    uint32_t const ces[9] = { 0x4C05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_311)
{
    // 12019 0061;	
    // (íÄô) CUNEIFORM SIGN AB2 TIMES ME PLUS EN	[4C05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12019, 0x0061 };
    uint32_t const ces[9] = { 0x4C05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_312)
{
    // 12019 0041;	
    // (íÄô) CUNEIFORM SIGN AB2 TIMES ME PLUS EN	[4C05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12019, 0x0041 };
    uint32_t const ces[9] = { 0x4C05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_313)
{
    // 12019 0062;	
    // (íÄô) CUNEIFORM SIGN AB2 TIMES ME PLUS EN	[4C05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12019, 0x0062 };
    uint32_t const ces[9] = { 0x4C05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_314)
{
    // 1201A 0021;	
    // (íÄö) CUNEIFORM SIGN AB2 TIMES SHA3	[4C06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201A, 0x0021 };
    uint32_t const ces[9] = { 0x4C06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_315)
{
    // 1201A 003F;	
    // (íÄö) CUNEIFORM SIGN AB2 TIMES SHA3	[4C06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201A, 0x003F };
    uint32_t const ces[9] = { 0x4C06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_316)
{
    // 1201A 0061;	
    // (íÄö) CUNEIFORM SIGN AB2 TIMES SHA3	[4C06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201A, 0x0061 };
    uint32_t const ces[9] = { 0x4C06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_317)
{
    // 1201A 0041;	
    // (íÄö) CUNEIFORM SIGN AB2 TIMES SHA3	[4C06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1201A, 0x0041 };
    uint32_t const ces[9] = { 0x4C06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_318)
{
    // 1201A 0062;	
    // (íÄö) CUNEIFORM SIGN AB2 TIMES SHA3	[4C06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201A, 0x0062 };
    uint32_t const ces[9] = { 0x4C06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_319)
{
    // 1201B 0021;	
    // (íÄõ) CUNEIFORM SIGN AB2 TIMES TAK4	[4C07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201B, 0x0021 };
    uint32_t const ces[9] = { 0x4C07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_320)
{
    // 1201B 003F;	
    // (íÄõ) CUNEIFORM SIGN AB2 TIMES TAK4	[4C07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201B, 0x003F };
    uint32_t const ces[9] = { 0x4C07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_321)
{
    // 1201B 0061;	
    // (íÄõ) CUNEIFORM SIGN AB2 TIMES TAK4	[4C07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201B, 0x0061 };
    uint32_t const ces[9] = { 0x4C07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_322)
{
    // 1201B 0041;	
    // (íÄõ) CUNEIFORM SIGN AB2 TIMES TAK4	[4C07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1201B, 0x0041 };
    uint32_t const ces[9] = { 0x4C07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_323)
{
    // 1201B 0062;	
    // (íÄõ) CUNEIFORM SIGN AB2 TIMES TAK4	[4C07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201B, 0x0062 };
    uint32_t const ces[9] = { 0x4C07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_324)
{
    // 1201C 0021;	
    // (íÄú) CUNEIFORM SIGN AD	[4C08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201C, 0x0021 };
    uint32_t const ces[9] = { 0x4C08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_325)
{
    // 1201C 003F;	
    // (íÄú) CUNEIFORM SIGN AD	[4C08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201C, 0x003F };
    uint32_t const ces[9] = { 0x4C08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_326)
{
    // 1201C 0061;	
    // (íÄú) CUNEIFORM SIGN AD	[4C08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201C, 0x0061 };
    uint32_t const ces[9] = { 0x4C08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_327)
{
    // 1201C 0041;	
    // (íÄú) CUNEIFORM SIGN AD	[4C08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1201C, 0x0041 };
    uint32_t const ces[9] = { 0x4C08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_328)
{
    // 1201C 0062;	
    // (íÄú) CUNEIFORM SIGN AD	[4C08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201C, 0x0062 };
    uint32_t const ces[9] = { 0x4C08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_329)
{
    // 1201D 0021;	
    // (íÄù) CUNEIFORM SIGN AK	[4C09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201D, 0x0021 };
    uint32_t const ces[9] = { 0x4C09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_330)
{
    // 1201D 003F;	
    // (íÄù) CUNEIFORM SIGN AK	[4C09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201D, 0x003F };
    uint32_t const ces[9] = { 0x4C09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_331)
{
    // 1201D 0061;	
    // (íÄù) CUNEIFORM SIGN AK	[4C09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201D, 0x0061 };
    uint32_t const ces[9] = { 0x4C09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_332)
{
    // 1201D 0041;	
    // (íÄù) CUNEIFORM SIGN AK	[4C09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1201D, 0x0041 };
    uint32_t const ces[9] = { 0x4C09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_333)
{
    // 1201D 0062;	
    // (íÄù) CUNEIFORM SIGN AK	[4C09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201D, 0x0062 };
    uint32_t const ces[9] = { 0x4C09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_334)
{
    // 1201E 0021;	
    // (íÄû) CUNEIFORM SIGN AK TIMES ERIN2	[4C0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201E, 0x0021 };
    uint32_t const ces[9] = { 0x4C0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_335)
{
    // 1201E 003F;	
    // (íÄû) CUNEIFORM SIGN AK TIMES ERIN2	[4C0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201E, 0x003F };
    uint32_t const ces[9] = { 0x4C0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_336)
{
    // 1201E 0061;	
    // (íÄû) CUNEIFORM SIGN AK TIMES ERIN2	[4C0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201E, 0x0061 };
    uint32_t const ces[9] = { 0x4C0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_337)
{
    // 1201E 0041;	
    // (íÄû) CUNEIFORM SIGN AK TIMES ERIN2	[4C0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1201E, 0x0041 };
    uint32_t const ces[9] = { 0x4C0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_338)
{
    // 1201E 0062;	
    // (íÄû) CUNEIFORM SIGN AK TIMES ERIN2	[4C0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201E, 0x0062 };
    uint32_t const ces[9] = { 0x4C0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_339)
{
    // 1201F 0021;	
    // (íÄü) CUNEIFORM SIGN AK TIMES SHITA PLUS GISH	[4C0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201F, 0x0021 };
    uint32_t const ces[9] = { 0x4C0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_340)
{
    // 1201F 003F;	
    // (íÄü) CUNEIFORM SIGN AK TIMES SHITA PLUS GISH	[4C0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201F, 0x003F };
    uint32_t const ces[9] = { 0x4C0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_341)
{
    // 1201F 0061;	
    // (íÄü) CUNEIFORM SIGN AK TIMES SHITA PLUS GISH	[4C0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201F, 0x0061 };
    uint32_t const ces[9] = { 0x4C0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_342)
{
    // 1201F 0041;	
    // (íÄü) CUNEIFORM SIGN AK TIMES SHITA PLUS GISH	[4C0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1201F, 0x0041 };
    uint32_t const ces[9] = { 0x4C0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_343)
{
    // 1201F 0062;	
    // (íÄü) CUNEIFORM SIGN AK TIMES SHITA PLUS GISH	[4C0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1201F, 0x0062 };
    uint32_t const ces[9] = { 0x4C0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_344)
{
    // 12020 0021;	
    // (íÄ†) CUNEIFORM SIGN AL	[4C0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12020, 0x0021 };
    uint32_t const ces[9] = { 0x4C0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_345)
{
    // 12020 003F;	
    // (íÄ†) CUNEIFORM SIGN AL	[4C0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12020, 0x003F };
    uint32_t const ces[9] = { 0x4C0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_346)
{
    // 12020 0061;	
    // (íÄ†) CUNEIFORM SIGN AL	[4C0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12020, 0x0061 };
    uint32_t const ces[9] = { 0x4C0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_347)
{
    // 12020 0041;	
    // (íÄ†) CUNEIFORM SIGN AL	[4C0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12020, 0x0041 };
    uint32_t const ces[9] = { 0x4C0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_348)
{
    // 12020 0062;	
    // (íÄ†) CUNEIFORM SIGN AL	[4C0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12020, 0x0062 };
    uint32_t const ces[9] = { 0x4C0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_349)
{
    // 12021 0021;	
    // (íÄ°) CUNEIFORM SIGN AL TIMES AL	[4C0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12021, 0x0021 };
    uint32_t const ces[9] = { 0x4C0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_350)
{
    // 12021 003F;	
    // (íÄ°) CUNEIFORM SIGN AL TIMES AL	[4C0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12021, 0x003F };
    uint32_t const ces[9] = { 0x4C0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_351)
{
    // 12021 0061;	
    // (íÄ°) CUNEIFORM SIGN AL TIMES AL	[4C0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12021, 0x0061 };
    uint32_t const ces[9] = { 0x4C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_352)
{
    // 12021 0041;	
    // (íÄ°) CUNEIFORM SIGN AL TIMES AL	[4C0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12021, 0x0041 };
    uint32_t const ces[9] = { 0x4C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_353)
{
    // 12021 0062;	
    // (íÄ°) CUNEIFORM SIGN AL TIMES AL	[4C0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12021, 0x0062 };
    uint32_t const ces[9] = { 0x4C0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_354)
{
    // 12022 0021;	
    // (íÄ¢) CUNEIFORM SIGN AL TIMES DIM2	[4C0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12022, 0x0021 };
    uint32_t const ces[9] = { 0x4C0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_355)
{
    // 12022 003F;	
    // (íÄ¢) CUNEIFORM SIGN AL TIMES DIM2	[4C0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12022, 0x003F };
    uint32_t const ces[9] = { 0x4C0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_356)
{
    // 12022 0061;	
    // (íÄ¢) CUNEIFORM SIGN AL TIMES DIM2	[4C0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12022, 0x0061 };
    uint32_t const ces[9] = { 0x4C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_357)
{
    // 12022 0041;	
    // (íÄ¢) CUNEIFORM SIGN AL TIMES DIM2	[4C0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12022, 0x0041 };
    uint32_t const ces[9] = { 0x4C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_358)
{
    // 12022 0062;	
    // (íÄ¢) CUNEIFORM SIGN AL TIMES DIM2	[4C0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12022, 0x0062 };
    uint32_t const ces[9] = { 0x4C0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_359)
{
    // 12023 0021;	
    // (íÄ£) CUNEIFORM SIGN AL TIMES GISH	[4C0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12023, 0x0021 };
    uint32_t const ces[9] = { 0x4C0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_360)
{
    // 12023 003F;	
    // (íÄ£) CUNEIFORM SIGN AL TIMES GISH	[4C0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12023, 0x003F };
    uint32_t const ces[9] = { 0x4C0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_361)
{
    // 12023 0061;	
    // (íÄ£) CUNEIFORM SIGN AL TIMES GISH	[4C0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12023, 0x0061 };
    uint32_t const ces[9] = { 0x4C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_362)
{
    // 12023 0041;	
    // (íÄ£) CUNEIFORM SIGN AL TIMES GISH	[4C0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12023, 0x0041 };
    uint32_t const ces[9] = { 0x4C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_363)
{
    // 12023 0062;	
    // (íÄ£) CUNEIFORM SIGN AL TIMES GISH	[4C0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12023, 0x0062 };
    uint32_t const ces[9] = { 0x4C0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_364)
{
    // 12024 0021;	
    // (íÄ§) CUNEIFORM SIGN AL TIMES HA	[4C10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12024, 0x0021 };
    uint32_t const ces[9] = { 0x4C10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_365)
{
    // 12024 003F;	
    // (íÄ§) CUNEIFORM SIGN AL TIMES HA	[4C10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12024, 0x003F };
    uint32_t const ces[9] = { 0x4C10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_366)
{
    // 12024 0061;	
    // (íÄ§) CUNEIFORM SIGN AL TIMES HA	[4C10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12024, 0x0061 };
    uint32_t const ces[9] = { 0x4C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_367)
{
    // 12024 0041;	
    // (íÄ§) CUNEIFORM SIGN AL TIMES HA	[4C10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12024, 0x0041 };
    uint32_t const ces[9] = { 0x4C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_368)
{
    // 12024 0062;	
    // (íÄ§) CUNEIFORM SIGN AL TIMES HA	[4C10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12024, 0x0062 };
    uint32_t const ces[9] = { 0x4C10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_369)
{
    // 12025 0021;	
    // (íÄ•) CUNEIFORM SIGN AL TIMES KAD3	[4C11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12025, 0x0021 };
    uint32_t const ces[9] = { 0x4C11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_370)
{
    // 12025 003F;	
    // (íÄ•) CUNEIFORM SIGN AL TIMES KAD3	[4C11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12025, 0x003F };
    uint32_t const ces[9] = { 0x4C11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_371)
{
    // 12025 0061;	
    // (íÄ•) CUNEIFORM SIGN AL TIMES KAD3	[4C11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12025, 0x0061 };
    uint32_t const ces[9] = { 0x4C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_372)
{
    // 12025 0041;	
    // (íÄ•) CUNEIFORM SIGN AL TIMES KAD3	[4C11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12025, 0x0041 };
    uint32_t const ces[9] = { 0x4C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_373)
{
    // 12025 0062;	
    // (íÄ•) CUNEIFORM SIGN AL TIMES KAD3	[4C11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12025, 0x0062 };
    uint32_t const ces[9] = { 0x4C11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_374)
{
    // 12026 0021;	
    // (íÄ¶) CUNEIFORM SIGN AL TIMES KI	[4C12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12026, 0x0021 };
    uint32_t const ces[9] = { 0x4C12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_375)
{
    // 12026 003F;	
    // (íÄ¶) CUNEIFORM SIGN AL TIMES KI	[4C12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12026, 0x003F };
    uint32_t const ces[9] = { 0x4C12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_376)
{
    // 12026 0061;	
    // (íÄ¶) CUNEIFORM SIGN AL TIMES KI	[4C12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12026, 0x0061 };
    uint32_t const ces[9] = { 0x4C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_377)
{
    // 12026 0041;	
    // (íÄ¶) CUNEIFORM SIGN AL TIMES KI	[4C12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12026, 0x0041 };
    uint32_t const ces[9] = { 0x4C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_378)
{
    // 12026 0062;	
    // (íÄ¶) CUNEIFORM SIGN AL TIMES KI	[4C12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12026, 0x0062 };
    uint32_t const ces[9] = { 0x4C12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_379)
{
    // 12027 0021;	
    // (íÄß) CUNEIFORM SIGN AL TIMES SHE	[4C13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12027, 0x0021 };
    uint32_t const ces[9] = { 0x4C13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_380)
{
    // 12027 003F;	
    // (íÄß) CUNEIFORM SIGN AL TIMES SHE	[4C13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12027, 0x003F };
    uint32_t const ces[9] = { 0x4C13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_381)
{
    // 12027 0061;	
    // (íÄß) CUNEIFORM SIGN AL TIMES SHE	[4C13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12027, 0x0061 };
    uint32_t const ces[9] = { 0x4C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_382)
{
    // 12027 0041;	
    // (íÄß) CUNEIFORM SIGN AL TIMES SHE	[4C13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12027, 0x0041 };
    uint32_t const ces[9] = { 0x4C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_383)
{
    // 12027 0062;	
    // (íÄß) CUNEIFORM SIGN AL TIMES SHE	[4C13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12027, 0x0062 };
    uint32_t const ces[9] = { 0x4C13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_384)
{
    // 12028 0021;	
    // (íÄ®) CUNEIFORM SIGN AL TIMES USH	[4C14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12028, 0x0021 };
    uint32_t const ces[9] = { 0x4C14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_385)
{
    // 12028 003F;	
    // (íÄ®) CUNEIFORM SIGN AL TIMES USH	[4C14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12028, 0x003F };
    uint32_t const ces[9] = { 0x4C14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_386)
{
    // 12028 0061;	
    // (íÄ®) CUNEIFORM SIGN AL TIMES USH	[4C14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12028, 0x0061 };
    uint32_t const ces[9] = { 0x4C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_387)
{
    // 12028 0041;	
    // (íÄ®) CUNEIFORM SIGN AL TIMES USH	[4C14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12028, 0x0041 };
    uint32_t const ces[9] = { 0x4C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_388)
{
    // 12028 0062;	
    // (íÄ®) CUNEIFORM SIGN AL TIMES USH	[4C14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12028, 0x0062 };
    uint32_t const ces[9] = { 0x4C14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_389)
{
    // 12029 0021;	
    // (íÄ©) CUNEIFORM SIGN ALAN	[4C15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12029, 0x0021 };
    uint32_t const ces[9] = { 0x4C15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_390)
{
    // 12029 003F;	
    // (íÄ©) CUNEIFORM SIGN ALAN	[4C15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12029, 0x003F };
    uint32_t const ces[9] = { 0x4C15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_391)
{
    // 12029 0061;	
    // (íÄ©) CUNEIFORM SIGN ALAN	[4C15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12029, 0x0061 };
    uint32_t const ces[9] = { 0x4C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_392)
{
    // 12029 0041;	
    // (íÄ©) CUNEIFORM SIGN ALAN	[4C15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12029, 0x0041 };
    uint32_t const ces[9] = { 0x4C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_393)
{
    // 12029 0062;	
    // (íÄ©) CUNEIFORM SIGN ALAN	[4C15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12029, 0x0062 };
    uint32_t const ces[9] = { 0x4C15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_394)
{
    // 1202A 0021;	
    // (íÄ™) CUNEIFORM SIGN ALEPH	[4C16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202A, 0x0021 };
    uint32_t const ces[9] = { 0x4C16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_395)
{
    // 1202A 003F;	
    // (íÄ™) CUNEIFORM SIGN ALEPH	[4C16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202A, 0x003F };
    uint32_t const ces[9] = { 0x4C16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_396)
{
    // 1202A 0061;	
    // (íÄ™) CUNEIFORM SIGN ALEPH	[4C16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202A, 0x0061 };
    uint32_t const ces[9] = { 0x4C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_397)
{
    // 1202A 0041;	
    // (íÄ™) CUNEIFORM SIGN ALEPH	[4C16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1202A, 0x0041 };
    uint32_t const ces[9] = { 0x4C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_398)
{
    // 1202A 0062;	
    // (íÄ™) CUNEIFORM SIGN ALEPH	[4C16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202A, 0x0062 };
    uint32_t const ces[9] = { 0x4C16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_399)
{
    // 1202B 0021;	
    // (íÄ´) CUNEIFORM SIGN AMAR	[4C17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202B, 0x0021 };
    uint32_t const ces[9] = { 0x4C17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_400)
{
    // 1202B 003F;	
    // (íÄ´) CUNEIFORM SIGN AMAR	[4C17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202B, 0x003F };
    uint32_t const ces[9] = { 0x4C17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_401)
{
    // 1202B 0061;	
    // (íÄ´) CUNEIFORM SIGN AMAR	[4C17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202B, 0x0061 };
    uint32_t const ces[9] = { 0x4C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_402)
{
    // 1202B 0041;	
    // (íÄ´) CUNEIFORM SIGN AMAR	[4C17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1202B, 0x0041 };
    uint32_t const ces[9] = { 0x4C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_403)
{
    // 1202B 0062;	
    // (íÄ´) CUNEIFORM SIGN AMAR	[4C17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202B, 0x0062 };
    uint32_t const ces[9] = { 0x4C17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_404)
{
    // 1202C 0021;	
    // (íÄ¨) CUNEIFORM SIGN AMAR TIMES SHE	[4C18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202C, 0x0021 };
    uint32_t const ces[9] = { 0x4C18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_405)
{
    // 1202C 003F;	
    // (íÄ¨) CUNEIFORM SIGN AMAR TIMES SHE	[4C18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202C, 0x003F };
    uint32_t const ces[9] = { 0x4C18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_406)
{
    // 1202C 0061;	
    // (íÄ¨) CUNEIFORM SIGN AMAR TIMES SHE	[4C18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202C, 0x0061 };
    uint32_t const ces[9] = { 0x4C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_407)
{
    // 1202C 0041;	
    // (íÄ¨) CUNEIFORM SIGN AMAR TIMES SHE	[4C18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1202C, 0x0041 };
    uint32_t const ces[9] = { 0x4C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_408)
{
    // 1202C 0062;	
    // (íÄ¨) CUNEIFORM SIGN AMAR TIMES SHE	[4C18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202C, 0x0062 };
    uint32_t const ces[9] = { 0x4C18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_409)
{
    // 1202D 0021;	
    // (íÄ≠) CUNEIFORM SIGN AN	[4C19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202D, 0x0021 };
    uint32_t const ces[9] = { 0x4C19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_410)
{
    // 1202D 003F;	
    // (íÄ≠) CUNEIFORM SIGN AN	[4C19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202D, 0x003F };
    uint32_t const ces[9] = { 0x4C19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_411)
{
    // 1202D 0061;	
    // (íÄ≠) CUNEIFORM SIGN AN	[4C19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202D, 0x0061 };
    uint32_t const ces[9] = { 0x4C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_412)
{
    // 1202D 0041;	
    // (íÄ≠) CUNEIFORM SIGN AN	[4C19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1202D, 0x0041 };
    uint32_t const ces[9] = { 0x4C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_413)
{
    // 1202D 0062;	
    // (íÄ≠) CUNEIFORM SIGN AN	[4C19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202D, 0x0062 };
    uint32_t const ces[9] = { 0x4C19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_414)
{
    // 1202E 0021;	
    // (íÄÆ) CUNEIFORM SIGN AN OVER AN	[4C1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202E, 0x0021 };
    uint32_t const ces[9] = { 0x4C1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_415)
{
    // 1202E 003F;	
    // (íÄÆ) CUNEIFORM SIGN AN OVER AN	[4C1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202E, 0x003F };
    uint32_t const ces[9] = { 0x4C1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_416)
{
    // 1202E 0061;	
    // (íÄÆ) CUNEIFORM SIGN AN OVER AN	[4C1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202E, 0x0061 };
    uint32_t const ces[9] = { 0x4C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_417)
{
    // 1202E 0041;	
    // (íÄÆ) CUNEIFORM SIGN AN OVER AN	[4C1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1202E, 0x0041 };
    uint32_t const ces[9] = { 0x4C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_418)
{
    // 1202E 0062;	
    // (íÄÆ) CUNEIFORM SIGN AN OVER AN	[4C1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202E, 0x0062 };
    uint32_t const ces[9] = { 0x4C1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_419)
{
    // 1202F 0021;	
    // (íÄØ) CUNEIFORM SIGN AN THREE TIMES	[4C1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202F, 0x0021 };
    uint32_t const ces[9] = { 0x4C1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_420)
{
    // 1202F 003F;	
    // (íÄØ) CUNEIFORM SIGN AN THREE TIMES	[4C1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202F, 0x003F };
    uint32_t const ces[9] = { 0x4C1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_421)
{
    // 1202F 0061;	
    // (íÄØ) CUNEIFORM SIGN AN THREE TIMES	[4C1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202F, 0x0061 };
    uint32_t const ces[9] = { 0x4C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_422)
{
    // 1202F 0041;	
    // (íÄØ) CUNEIFORM SIGN AN THREE TIMES	[4C1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1202F, 0x0041 };
    uint32_t const ces[9] = { 0x4C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_423)
{
    // 1202F 0062;	
    // (íÄØ) CUNEIFORM SIGN AN THREE TIMES	[4C1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1202F, 0x0062 };
    uint32_t const ces[9] = { 0x4C1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_424)
{
    // 12030 0021;	
    // (íÄ∞) CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA	[4C1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12030, 0x0021 };
    uint32_t const ces[9] = { 0x4C1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_425)
{
    // 12030 003F;	
    // (íÄ∞) CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA	[4C1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12030, 0x003F };
    uint32_t const ces[9] = { 0x4C1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_426)
{
    // 12030 0061;	
    // (íÄ∞) CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA	[4C1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12030, 0x0061 };
    uint32_t const ces[9] = { 0x4C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_427)
{
    // 12030 0041;	
    // (íÄ∞) CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA	[4C1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12030, 0x0041 };
    uint32_t const ces[9] = { 0x4C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_428)
{
    // 12030 0062;	
    // (íÄ∞) CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA	[4C1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12030, 0x0062 };
    uint32_t const ces[9] = { 0x4C1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_429)
{
    // 12031 0021;	
    // (íÄ±) CUNEIFORM SIGN AN PLUS NAGA SQUARED	[4C1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12031, 0x0021 };
    uint32_t const ces[9] = { 0x4C1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_430)
{
    // 12031 003F;	
    // (íÄ±) CUNEIFORM SIGN AN PLUS NAGA SQUARED	[4C1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12031, 0x003F };
    uint32_t const ces[9] = { 0x4C1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_431)
{
    // 12031 0061;	
    // (íÄ±) CUNEIFORM SIGN AN PLUS NAGA SQUARED	[4C1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12031, 0x0061 };
    uint32_t const ces[9] = { 0x4C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_432)
{
    // 12031 0041;	
    // (íÄ±) CUNEIFORM SIGN AN PLUS NAGA SQUARED	[4C1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12031, 0x0041 };
    uint32_t const ces[9] = { 0x4C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_433)
{
    // 12031 0062;	
    // (íÄ±) CUNEIFORM SIGN AN PLUS NAGA SQUARED	[4C1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12031, 0x0062 };
    uint32_t const ces[9] = { 0x4C1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_434)
{
    // 12032 0021;	
    // (íÄ≤) CUNEIFORM SIGN ANSHE	[4C1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12032, 0x0021 };
    uint32_t const ces[9] = { 0x4C1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_435)
{
    // 12032 003F;	
    // (íÄ≤) CUNEIFORM SIGN ANSHE	[4C1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12032, 0x003F };
    uint32_t const ces[9] = { 0x4C1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_436)
{
    // 12032 0061;	
    // (íÄ≤) CUNEIFORM SIGN ANSHE	[4C1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12032, 0x0061 };
    uint32_t const ces[9] = { 0x4C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_437)
{
    // 12032 0041;	
    // (íÄ≤) CUNEIFORM SIGN ANSHE	[4C1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12032, 0x0041 };
    uint32_t const ces[9] = { 0x4C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_438)
{
    // 12032 0062;	
    // (íÄ≤) CUNEIFORM SIGN ANSHE	[4C1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12032, 0x0062 };
    uint32_t const ces[9] = { 0x4C1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_439)
{
    // 12033 0021;	
    // (íÄ≥) CUNEIFORM SIGN APIN	[4C1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12033, 0x0021 };
    uint32_t const ces[9] = { 0x4C1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_440)
{
    // 12033 003F;	
    // (íÄ≥) CUNEIFORM SIGN APIN	[4C1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12033, 0x003F };
    uint32_t const ces[9] = { 0x4C1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_441)
{
    // 12033 0061;	
    // (íÄ≥) CUNEIFORM SIGN APIN	[4C1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12033, 0x0061 };
    uint32_t const ces[9] = { 0x4C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_442)
{
    // 12033 0041;	
    // (íÄ≥) CUNEIFORM SIGN APIN	[4C1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12033, 0x0041 };
    uint32_t const ces[9] = { 0x4C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_443)
{
    // 12033 0062;	
    // (íÄ≥) CUNEIFORM SIGN APIN	[4C1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12033, 0x0062 };
    uint32_t const ces[9] = { 0x4C1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_444)
{
    // 12034 0021;	
    // (íÄ¥) CUNEIFORM SIGN ARAD	[4C20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12034, 0x0021 };
    uint32_t const ces[9] = { 0x4C20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_445)
{
    // 12034 003F;	
    // (íÄ¥) CUNEIFORM SIGN ARAD	[4C20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12034, 0x003F };
    uint32_t const ces[9] = { 0x4C20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_446)
{
    // 12034 0061;	
    // (íÄ¥) CUNEIFORM SIGN ARAD	[4C20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12034, 0x0061 };
    uint32_t const ces[9] = { 0x4C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_447)
{
    // 12034 0041;	
    // (íÄ¥) CUNEIFORM SIGN ARAD	[4C20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12034, 0x0041 };
    uint32_t const ces[9] = { 0x4C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_448)
{
    // 12034 0062;	
    // (íÄ¥) CUNEIFORM SIGN ARAD	[4C20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12034, 0x0062 };
    uint32_t const ces[9] = { 0x4C20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_449)
{
    // 12035 0021;	
    // (íÄµ) CUNEIFORM SIGN ARAD TIMES KUR	[4C21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12035, 0x0021 };
    uint32_t const ces[9] = { 0x4C21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_450)
{
    // 12035 003F;	
    // (íÄµ) CUNEIFORM SIGN ARAD TIMES KUR	[4C21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12035, 0x003F };
    uint32_t const ces[9] = { 0x4C21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_451)
{
    // 12035 0061;	
    // (íÄµ) CUNEIFORM SIGN ARAD TIMES KUR	[4C21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12035, 0x0061 };
    uint32_t const ces[9] = { 0x4C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_452)
{
    // 12035 0041;	
    // (íÄµ) CUNEIFORM SIGN ARAD TIMES KUR	[4C21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12035, 0x0041 };
    uint32_t const ces[9] = { 0x4C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_453)
{
    // 12035 0062;	
    // (íÄµ) CUNEIFORM SIGN ARAD TIMES KUR	[4C21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12035, 0x0062 };
    uint32_t const ces[9] = { 0x4C21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_454)
{
    // 12036 0021;	
    // (íÄ∂) CUNEIFORM SIGN ARKAB	[4C22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12036, 0x0021 };
    uint32_t const ces[9] = { 0x4C22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_455)
{
    // 12036 003F;	
    // (íÄ∂) CUNEIFORM SIGN ARKAB	[4C22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12036, 0x003F };
    uint32_t const ces[9] = { 0x4C22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_456)
{
    // 12036 0061;	
    // (íÄ∂) CUNEIFORM SIGN ARKAB	[4C22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12036, 0x0061 };
    uint32_t const ces[9] = { 0x4C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_457)
{
    // 12036 0041;	
    // (íÄ∂) CUNEIFORM SIGN ARKAB	[4C22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12036, 0x0041 };
    uint32_t const ces[9] = { 0x4C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_458)
{
    // 12036 0062;	
    // (íÄ∂) CUNEIFORM SIGN ARKAB	[4C22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12036, 0x0062 };
    uint32_t const ces[9] = { 0x4C22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_459)
{
    // 12037 0021;	
    // (íÄ∑) CUNEIFORM SIGN ASAL2	[4C23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12037, 0x0021 };
    uint32_t const ces[9] = { 0x4C23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_460)
{
    // 12037 003F;	
    // (íÄ∑) CUNEIFORM SIGN ASAL2	[4C23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12037, 0x003F };
    uint32_t const ces[9] = { 0x4C23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_461)
{
    // 12037 0061;	
    // (íÄ∑) CUNEIFORM SIGN ASAL2	[4C23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12037, 0x0061 };
    uint32_t const ces[9] = { 0x4C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_462)
{
    // 12037 0041;	
    // (íÄ∑) CUNEIFORM SIGN ASAL2	[4C23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12037, 0x0041 };
    uint32_t const ces[9] = { 0x4C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_463)
{
    // 12037 0062;	
    // (íÄ∑) CUNEIFORM SIGN ASAL2	[4C23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12037, 0x0062 };
    uint32_t const ces[9] = { 0x4C23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_464)
{
    // 12038 0021;	
    // (íÄ∏) CUNEIFORM SIGN ASH	[4C24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12038, 0x0021 };
    uint32_t const ces[9] = { 0x4C24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_465)
{
    // 12038 003F;	
    // (íÄ∏) CUNEIFORM SIGN ASH	[4C24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12038, 0x003F };
    uint32_t const ces[9] = { 0x4C24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_466)
{
    // 12038 0061;	
    // (íÄ∏) CUNEIFORM SIGN ASH	[4C24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12038, 0x0061 };
    uint32_t const ces[9] = { 0x4C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_467)
{
    // 12038 0041;	
    // (íÄ∏) CUNEIFORM SIGN ASH	[4C24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12038, 0x0041 };
    uint32_t const ces[9] = { 0x4C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_468)
{
    // 12038 0062;	
    // (íÄ∏) CUNEIFORM SIGN ASH	[4C24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12038, 0x0062 };
    uint32_t const ces[9] = { 0x4C24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_469)
{
    // 12039 0021;	
    // (íÄπ) CUNEIFORM SIGN ASH ZIDA TENU	[4C25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12039, 0x0021 };
    uint32_t const ces[9] = { 0x4C25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_470)
{
    // 12039 003F;	
    // (íÄπ) CUNEIFORM SIGN ASH ZIDA TENU	[4C25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12039, 0x003F };
    uint32_t const ces[9] = { 0x4C25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_471)
{
    // 12039 0061;	
    // (íÄπ) CUNEIFORM SIGN ASH ZIDA TENU	[4C25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12039, 0x0061 };
    uint32_t const ces[9] = { 0x4C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_472)
{
    // 12039 0041;	
    // (íÄπ) CUNEIFORM SIGN ASH ZIDA TENU	[4C25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12039, 0x0041 };
    uint32_t const ces[9] = { 0x4C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_473)
{
    // 12039 0062;	
    // (íÄπ) CUNEIFORM SIGN ASH ZIDA TENU	[4C25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12039, 0x0062 };
    uint32_t const ces[9] = { 0x4C25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_474)
{
    // 1203A 0021;	
    // (íÄ∫) CUNEIFORM SIGN ASH KABA TENU	[4C26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203A, 0x0021 };
    uint32_t const ces[9] = { 0x4C26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_475)
{
    // 1203A 003F;	
    // (íÄ∫) CUNEIFORM SIGN ASH KABA TENU	[4C26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203A, 0x003F };
    uint32_t const ces[9] = { 0x4C26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_476)
{
    // 1203A 0061;	
    // (íÄ∫) CUNEIFORM SIGN ASH KABA TENU	[4C26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203A, 0x0061 };
    uint32_t const ces[9] = { 0x4C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_477)
{
    // 1203A 0041;	
    // (íÄ∫) CUNEIFORM SIGN ASH KABA TENU	[4C26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1203A, 0x0041 };
    uint32_t const ces[9] = { 0x4C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_478)
{
    // 1203A 0062;	
    // (íÄ∫) CUNEIFORM SIGN ASH KABA TENU	[4C26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203A, 0x0062 };
    uint32_t const ces[9] = { 0x4C26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_479)
{
    // 1203B 0021;	
    // (íÄª) CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP	[4C27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203B, 0x0021 };
    uint32_t const ces[9] = { 0x4C27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_480)
{
    // 1203B 003F;	
    // (íÄª) CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP	[4C27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203B, 0x003F };
    uint32_t const ces[9] = { 0x4C27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_481)
{
    // 1203B 0061;	
    // (íÄª) CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP	[4C27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203B, 0x0061 };
    uint32_t const ces[9] = { 0x4C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_482)
{
    // 1203B 0041;	
    // (íÄª) CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP	[4C27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1203B, 0x0041 };
    uint32_t const ces[9] = { 0x4C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_483)
{
    // 1203B 0062;	
    // (íÄª) CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP	[4C27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203B, 0x0062 };
    uint32_t const ces[9] = { 0x4C27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_484)
{
    // 1203C 0021;	
    // (íÄº) CUNEIFORM SIGN ASH OVER ASH OVER ASH	[4C28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203C, 0x0021 };
    uint32_t const ces[9] = { 0x4C28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_485)
{
    // 1203C 003F;	
    // (íÄº) CUNEIFORM SIGN ASH OVER ASH OVER ASH	[4C28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203C, 0x003F };
    uint32_t const ces[9] = { 0x4C28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_486)
{
    // 1203C 0061;	
    // (íÄº) CUNEIFORM SIGN ASH OVER ASH OVER ASH	[4C28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203C, 0x0061 };
    uint32_t const ces[9] = { 0x4C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_487)
{
    // 1203C 0041;	
    // (íÄº) CUNEIFORM SIGN ASH OVER ASH OVER ASH	[4C28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1203C, 0x0041 };
    uint32_t const ces[9] = { 0x4C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_488)
{
    // 1203C 0062;	
    // (íÄº) CUNEIFORM SIGN ASH OVER ASH OVER ASH	[4C28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203C, 0x0062 };
    uint32_t const ces[9] = { 0x4C28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_489)
{
    // 1203D 0021;	
    // (íÄΩ) CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH	[4C29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203D, 0x0021 };
    uint32_t const ces[9] = { 0x4C29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_490)
{
    // 1203D 003F;	
    // (íÄΩ) CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH	[4C29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203D, 0x003F };
    uint32_t const ces[9] = { 0x4C29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_491)
{
    // 1203D 0061;	
    // (íÄΩ) CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH	[4C29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203D, 0x0061 };
    uint32_t const ces[9] = { 0x4C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_492)
{
    // 1203D 0041;	
    // (íÄΩ) CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH	[4C29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1203D, 0x0041 };
    uint32_t const ces[9] = { 0x4C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_493)
{
    // 1203D 0062;	
    // (íÄΩ) CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH	[4C29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203D, 0x0062 };
    uint32_t const ces[9] = { 0x4C29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_494)
{
    // 1203E 0021;	
    // (íÄæ) CUNEIFORM SIGN ASH2	[4C2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203E, 0x0021 };
    uint32_t const ces[9] = { 0x4C2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_495)
{
    // 1203E 003F;	
    // (íÄæ) CUNEIFORM SIGN ASH2	[4C2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203E, 0x003F };
    uint32_t const ces[9] = { 0x4C2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_496)
{
    // 1203E 0061;	
    // (íÄæ) CUNEIFORM SIGN ASH2	[4C2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203E, 0x0061 };
    uint32_t const ces[9] = { 0x4C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_497)
{
    // 1203E 0041;	
    // (íÄæ) CUNEIFORM SIGN ASH2	[4C2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1203E, 0x0041 };
    uint32_t const ces[9] = { 0x4C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_498)
{
    // 1203E 0062;	
    // (íÄæ) CUNEIFORM SIGN ASH2	[4C2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203E, 0x0062 };
    uint32_t const ces[9] = { 0x4C2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_285_499)
{
    // 1203F 0021;	
    // (íÄø) CUNEIFORM SIGN ASHGAB	[4C2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1203F, 0x0021 };
    uint32_t const ces[9] = { 0x4C2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

