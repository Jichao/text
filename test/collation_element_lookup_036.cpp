// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_036_000)
{
    // 1607  ; [.371E.0020.0002] 
    // CANADIAN SYLLABICS CARRIER NA

    uint32_t const cps[1] = { 0x1607 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x371e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_001)
{
    // 1608  ; [.371F.0020.0002] 
    // CANADIAN SYLLABICS CARRIER MU

    uint32_t const cps[1] = { 0x1608 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x371f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_002)
{
    // 1609  ; [.3720.0020.0002] 
    // CANADIAN SYLLABICS CARRIER MO

    uint32_t const cps[1] = { 0x1609 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3720), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_003)
{
    // 160A  ; [.3721.0020.0002] 
    // CANADIAN SYLLABICS CARRIER ME

    uint32_t const cps[1] = { 0x160a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3721), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_004)
{
    // 160B  ; [.3722.0020.0002] 
    // CANADIAN SYLLABICS CARRIER MEE

    uint32_t const cps[1] = { 0x160b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3722), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_005)
{
    // 160C  ; [.3723.0020.0002] 
    // CANADIAN SYLLABICS CARRIER MI

    uint32_t const cps[1] = { 0x160c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3723), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_006)
{
    // 160D  ; [.3724.0020.0002] 
    // CANADIAN SYLLABICS CARRIER MA

    uint32_t const cps[1] = { 0x160d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3724), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_007)
{
    // 160E  ; [.3725.0020.0002] 
    // CANADIAN SYLLABICS CARRIER YU

    uint32_t const cps[1] = { 0x160e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3725), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_008)
{
    // 160F  ; [.3726.0020.0002] 
    // CANADIAN SYLLABICS CARRIER YO

    uint32_t const cps[1] = { 0x160f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3726), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_009)
{
    // 1610  ; [.3727.0020.0002] 
    // CANADIAN SYLLABICS CARRIER YE

    uint32_t const cps[1] = { 0x1610 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3727), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_010)
{
    // 1611  ; [.3728.0020.0002] 
    // CANADIAN SYLLABICS CARRIER YEE

    uint32_t const cps[1] = { 0x1611 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3728), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_011)
{
    // 1612  ; [.3729.0020.0002] 
    // CANADIAN SYLLABICS CARRIER YI

    uint32_t const cps[1] = { 0x1612 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3729), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_012)
{
    // 1613  ; [.372A.0020.0002] 
    // CANADIAN SYLLABICS CARRIER YA

    uint32_t const cps[1] = { 0x1613 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x372a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_013)
{
    // 1614  ; [.372B.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JU

    uint32_t const cps[1] = { 0x1614 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x372b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_014)
{
    // 1615  ; [.372C.0020.0002] 
    // CANADIAN SYLLABICS SAYISI JU

    uint32_t const cps[1] = { 0x1615 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x372c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_015)
{
    // 1616  ; [.372D.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JO

    uint32_t const cps[1] = { 0x1616 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x372d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_016)
{
    // 1617  ; [.372E.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JE

    uint32_t const cps[1] = { 0x1617 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x372e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_017)
{
    // 1618  ; [.372F.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JEE

    uint32_t const cps[1] = { 0x1618 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x372f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_018)
{
    // 1619  ; [.3730.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JI

    uint32_t const cps[1] = { 0x1619 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3730), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_019)
{
    // 161A  ; [.3731.0020.0002] 
    // CANADIAN SYLLABICS SAYISI JI

    uint32_t const cps[1] = { 0x161a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3731), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_020)
{
    // 161B  ; [.3732.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JA

    uint32_t const cps[1] = { 0x161b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3732), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_021)
{
    // 161C  ; [.3733.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JJU

    uint32_t const cps[1] = { 0x161c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3733), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_022)
{
    // 161D  ; [.3734.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JJO

    uint32_t const cps[1] = { 0x161d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3734), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_023)
{
    // 161E  ; [.3735.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JJE

    uint32_t const cps[1] = { 0x161e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3735), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_024)
{
    // 161F  ; [.3736.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JJEE

    uint32_t const cps[1] = { 0x161f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3736), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_025)
{
    // 1620  ; [.3737.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JJI

    uint32_t const cps[1] = { 0x1620 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3737), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_026)
{
    // 1621  ; [.3738.0020.0002] 
    // CANADIAN SYLLABICS CARRIER JJA

    uint32_t const cps[1] = { 0x1621 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3738), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_027)
{
    // 1622  ; [.3739.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LU

    uint32_t const cps[1] = { 0x1622 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3739), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_028)
{
    // 1623  ; [.373A.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LO

    uint32_t const cps[1] = { 0x1623 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x373a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_029)
{
    // 1624  ; [.373B.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LE

    uint32_t const cps[1] = { 0x1624 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x373b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_030)
{
    // 1625  ; [.373C.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LEE

    uint32_t const cps[1] = { 0x1625 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x373c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_031)
{
    // 1626  ; [.373D.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LI

    uint32_t const cps[1] = { 0x1626 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x373d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_032)
{
    // 1627  ; [.373E.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LA

    uint32_t const cps[1] = { 0x1627 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x373e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_033)
{
    // 1628  ; [.373F.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DLU

    uint32_t const cps[1] = { 0x1628 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x373f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_034)
{
    // 1629  ; [.3740.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DLO

    uint32_t const cps[1] = { 0x1629 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3740), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_035)
{
    // 162A  ; [.3741.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DLE

    uint32_t const cps[1] = { 0x162a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3741), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_036)
{
    // 162B  ; [.3742.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DLEE

    uint32_t const cps[1] = { 0x162b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3742), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_037)
{
    // 162C  ; [.3743.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DLI

    uint32_t const cps[1] = { 0x162c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3743), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_038)
{
    // 162D  ; [.3744.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DLA

    uint32_t const cps[1] = { 0x162d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3744), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_039)
{
    // 162E  ; [.3745.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LHU

    uint32_t const cps[1] = { 0x162e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3745), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_040)
{
    // 162F  ; [.3746.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LHO

    uint32_t const cps[1] = { 0x162f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3746), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_041)
{
    // 1630  ; [.3747.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LHE

    uint32_t const cps[1] = { 0x1630 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3747), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_042)
{
    // 1631  ; [.3748.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LHEE

    uint32_t const cps[1] = { 0x1631 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3748), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_043)
{
    // 1632  ; [.3749.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LHI

    uint32_t const cps[1] = { 0x1632 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3749), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_044)
{
    // 1633  ; [.374A.0020.0002] 
    // CANADIAN SYLLABICS CARRIER LHA

    uint32_t const cps[1] = { 0x1633 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x374a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_045)
{
    // 1634  ; [.374B.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLHU

    uint32_t const cps[1] = { 0x1634 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x374b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_046)
{
    // 1635  ; [.374C.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLHO

    uint32_t const cps[1] = { 0x1635 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x374c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_047)
{
    // 1636  ; [.374D.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLHE

    uint32_t const cps[1] = { 0x1636 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x374d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_048)
{
    // 1637  ; [.374E.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLHEE

    uint32_t const cps[1] = { 0x1637 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x374e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_049)
{
    // 1638  ; [.374F.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLHI

    uint32_t const cps[1] = { 0x1638 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x374f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_050)
{
    // 1639  ; [.3750.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLHA

    uint32_t const cps[1] = { 0x1639 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3750), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_051)
{
    // 163A  ; [.3751.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLU

    uint32_t const cps[1] = { 0x163a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3751), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_052)
{
    // 163B  ; [.3752.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLO

    uint32_t const cps[1] = { 0x163b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3752), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_053)
{
    // 163C  ; [.3753.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLE

    uint32_t const cps[1] = { 0x163c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3753), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_054)
{
    // 163D  ; [.3754.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLEE

    uint32_t const cps[1] = { 0x163d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3754), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_055)
{
    // 163E  ; [.3755.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLI

    uint32_t const cps[1] = { 0x163e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3755), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_056)
{
    // 163F  ; [.3756.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TLA

    uint32_t const cps[1] = { 0x163f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3756), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_057)
{
    // 1640  ; [.3757.0020.0002] 
    // CANADIAN SYLLABICS CARRIER ZU

    uint32_t const cps[1] = { 0x1640 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3757), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_058)
{
    // 1641  ; [.3758.0020.0002] 
    // CANADIAN SYLLABICS CARRIER ZO

    uint32_t const cps[1] = { 0x1641 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3758), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_059)
{
    // 1642  ; [.3759.0020.0002] 
    // CANADIAN SYLLABICS CARRIER ZE

    uint32_t const cps[1] = { 0x1642 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3759), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_060)
{
    // 1643  ; [.375A.0020.0002] 
    // CANADIAN SYLLABICS CARRIER ZEE

    uint32_t const cps[1] = { 0x1643 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x375a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_061)
{
    // 1644  ; [.375B.0020.0002] 
    // CANADIAN SYLLABICS CARRIER ZI

    uint32_t const cps[1] = { 0x1644 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x375b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_062)
{
    // 1645  ; [.375C.0020.0002] 
    // CANADIAN SYLLABICS CARRIER ZA

    uint32_t const cps[1] = { 0x1645 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x375c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_063)
{
    // 1646  ; [.375D.0020.0002] 
    // CANADIAN SYLLABICS CARRIER Z

    uint32_t const cps[1] = { 0x1646 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x375d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_064)
{
    // 1647  ; [.375E.0020.0002] 
    // CANADIAN SYLLABICS CARRIER INITIAL Z

    uint32_t const cps[1] = { 0x1647 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x375e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_065)
{
    // 1648  ; [.375F.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DZU

    uint32_t const cps[1] = { 0x1648 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x375f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_066)
{
    // 1649  ; [.3760.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DZO

    uint32_t const cps[1] = { 0x1649 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3760), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_067)
{
    // 164A  ; [.3761.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DZE

    uint32_t const cps[1] = { 0x164a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3761), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_068)
{
    // 164B  ; [.3762.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DZEE

    uint32_t const cps[1] = { 0x164b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3762), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_069)
{
    // 164C  ; [.3763.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DZI

    uint32_t const cps[1] = { 0x164c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3763), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_070)
{
    // 164D  ; [.3764.0020.0002] 
    // CANADIAN SYLLABICS CARRIER DZA

    uint32_t const cps[1] = { 0x164d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3764), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_071)
{
    // 164E  ; [.3765.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SU

    uint32_t const cps[1] = { 0x164e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3765), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_072)
{
    // 164F  ; [.3766.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SO

    uint32_t const cps[1] = { 0x164f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3766), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_073)
{
    // 1650  ; [.3767.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SE

    uint32_t const cps[1] = { 0x1650 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3767), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_074)
{
    // 1651  ; [.3768.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SEE

    uint32_t const cps[1] = { 0x1651 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3768), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_075)
{
    // 1652  ; [.3769.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SI

    uint32_t const cps[1] = { 0x1652 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3769), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_076)
{
    // 1653  ; [.376A.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SA

    uint32_t const cps[1] = { 0x1653 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x376a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_077)
{
    // 1654  ; [.376B.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SHU

    uint32_t const cps[1] = { 0x1654 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x376b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_078)
{
    // 1655  ; [.376C.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SHO

    uint32_t const cps[1] = { 0x1655 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x376c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_079)
{
    // 1656  ; [.376D.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SHE

    uint32_t const cps[1] = { 0x1656 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x376d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_080)
{
    // 1657  ; [.376E.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SHEE

    uint32_t const cps[1] = { 0x1657 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x376e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_081)
{
    // 1658  ; [.376F.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SHI

    uint32_t const cps[1] = { 0x1658 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x376f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_082)
{
    // 1659  ; [.3770.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SHA

    uint32_t const cps[1] = { 0x1659 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3770), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_083)
{
    // 165A  ; [.3771.0020.0002] 
    // CANADIAN SYLLABICS CARRIER SH

    uint32_t const cps[1] = { 0x165a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3771), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_084)
{
    // 165B  ; [.3772.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TSU

    uint32_t const cps[1] = { 0x165b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3772), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_085)
{
    // 165C  ; [.3773.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TSO

    uint32_t const cps[1] = { 0x165c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3773), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_086)
{
    // 165D  ; [.3774.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TSE

    uint32_t const cps[1] = { 0x165d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3774), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_087)
{
    // 165E  ; [.3775.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TSEE

    uint32_t const cps[1] = { 0x165e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3775), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_088)
{
    // 165F  ; [.3776.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TSI

    uint32_t const cps[1] = { 0x165f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3776), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_089)
{
    // 1660  ; [.3777.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TSA

    uint32_t const cps[1] = { 0x1660 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3777), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_090)
{
    // 1661  ; [.3778.0020.0002] 
    // CANADIAN SYLLABICS CARRIER CHU

    uint32_t const cps[1] = { 0x1661 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3778), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_091)
{
    // 1662  ; [.3779.0020.0002] 
    // CANADIAN SYLLABICS CARRIER CHO

    uint32_t const cps[1] = { 0x1662 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3779), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_092)
{
    // 1663  ; [.377A.0020.0002] 
    // CANADIAN SYLLABICS CARRIER CHE

    uint32_t const cps[1] = { 0x1663 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x377a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_093)
{
    // 1664  ; [.377B.0020.0002] 
    // CANADIAN SYLLABICS CARRIER CHEE

    uint32_t const cps[1] = { 0x1664 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x377b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_094)
{
    // 1665  ; [.377C.0020.0002] 
    // CANADIAN SYLLABICS CARRIER CHI

    uint32_t const cps[1] = { 0x1665 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x377c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_095)
{
    // 1666  ; [.377D.0020.0002] 
    // CANADIAN SYLLABICS CARRIER CHA

    uint32_t const cps[1] = { 0x1666 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x377d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_096)
{
    // 1667  ; [.377E.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TTSU

    uint32_t const cps[1] = { 0x1667 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x377e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_097)
{
    // 1668  ; [.377F.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TTSO

    uint32_t const cps[1] = { 0x1668 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x377f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_098)
{
    // 1669  ; [.3780.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TTSE

    uint32_t const cps[1] = { 0x1669 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3780), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_099)
{
    // 166A  ; [.3781.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TTSEE

    uint32_t const cps[1] = { 0x166a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3781), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_100)
{
    // 166B  ; [.3782.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TTSI

    uint32_t const cps[1] = { 0x166b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3782), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_101)
{
    // 166C  ; [.3783.0020.0002] 
    // CANADIAN SYLLABICS CARRIER TTSA

    uint32_t const cps[1] = { 0x166c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3783), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_102)
{
    // 166D  ; [*0434.0020.0002] 
    // CANADIAN SYLLABICS CHI SIGN

    uint32_t const cps[1] = { 0x166d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x434), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_103)
{
    // 166E  ; [*0280.0020.0002] 
    // CANADIAN SYLLABICS FULL STOP

    uint32_t const cps[1] = { 0x166e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x280), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_104)
{
    // 166F  ; [.368C.0020.0002] 
    // CANADIAN SYLLABICS QAI

    uint32_t const cps[1] = { 0x166f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x368c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_105)
{
    // 1670  ; [.369D.0020.0002] 
    // CANADIAN SYLLABICS NGAI

    uint32_t const cps[1] = { 0x1670 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x369d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_106)
{
    // 1671  ; [.36A6.0020.0002] 
    // CANADIAN SYLLABICS NNGI

    uint32_t const cps[1] = { 0x1671 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x36a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_107)
{
    // 1672  ; [.36A7.0020.0002] 
    // CANADIAN SYLLABICS NNGII

    uint32_t const cps[1] = { 0x1672 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x36a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_108)
{
    // 1673  ; [.36A8.0020.0002] 
    // CANADIAN SYLLABICS NNGO

    uint32_t const cps[1] = { 0x1673 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x36a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_109)
{
    // 1674  ; [.36A9.0020.0002] 
    // CANADIAN SYLLABICS NNGOO

    uint32_t const cps[1] = { 0x1674 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x36a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_110)
{
    // 1675  ; [.36AA.0020.0002] 
    // CANADIAN SYLLABICS NNGA

    uint32_t const cps[1] = { 0x1675 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x36aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_111)
{
    // 1676  ; [.36AB.0020.0002] 
    // CANADIAN SYLLABICS NNGAA

    uint32_t const cps[1] = { 0x1676 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x36ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_112)
{
    // 1677  ; [.3784.0020.0002] 
    // CANADIAN SYLLABICS WOODS-CREE THWEE

    uint32_t const cps[1] = { 0x1677 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3784), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_113)
{
    // 1678  ; [.3785.0020.0002] 
    // CANADIAN SYLLABICS WOODS-CREE THWI

    uint32_t const cps[1] = { 0x1678 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3785), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_114)
{
    // 1679  ; [.3786.0020.0002] 
    // CANADIAN SYLLABICS WOODS-CREE THWII

    uint32_t const cps[1] = { 0x1679 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3786), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_115)
{
    // 167A  ; [.3787.0020.0002] 
    // CANADIAN SYLLABICS WOODS-CREE THWO

    uint32_t const cps[1] = { 0x167a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3787), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_116)
{
    // 167B  ; [.3788.0020.0002] 
    // CANADIAN SYLLABICS WOODS-CREE THWOO

    uint32_t const cps[1] = { 0x167b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3788), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_117)
{
    // 167C  ; [.3789.0020.0002] 
    // CANADIAN SYLLABICS WOODS-CREE THWA

    uint32_t const cps[1] = { 0x167c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3789), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_118)
{
    // 167D  ; [.378A.0020.0002] 
    // CANADIAN SYLLABICS WOODS-CREE THWAA

    uint32_t const cps[1] = { 0x167d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x378a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_119)
{
    // 167E  ; [.378B.0020.0002] 
    // CANADIAN SYLLABICS WOODS-CREE FINAL TH

    uint32_t const cps[1] = { 0x167e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x378b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_120)
{
    // 167F  ; [.378C.0020.0002] 
    // CANADIAN SYLLABICS BLACKFOOT W

    uint32_t const cps[1] = { 0x167f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x378c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_121)
{
    // 1680  ; [*0209.0020.0004] 
    // OGHAM SPACE MARK

    uint32_t const cps[1] = { 0x1680 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_122)
{
    // 1681  ; [.37D3.0020.0002] 
    // OGHAM LETTER BEITH

    uint32_t const cps[1] = { 0x1681 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_123)
{
    // 1682  ; [.37D4.0020.0002] 
    // OGHAM LETTER LUIS

    uint32_t const cps[1] = { 0x1682 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_124)
{
    // 1683  ; [.37D5.0020.0002] 
    // OGHAM LETTER FEARN

    uint32_t const cps[1] = { 0x1683 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_125)
{
    // 1684  ; [.37D6.0020.0002] 
    // OGHAM LETTER SAIL

    uint32_t const cps[1] = { 0x1684 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_126)
{
    // 1685  ; [.37D7.0020.0002] 
    // OGHAM LETTER NION

    uint32_t const cps[1] = { 0x1685 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_127)
{
    // 1686  ; [.37D8.0020.0002] 
    // OGHAM LETTER UATH

    uint32_t const cps[1] = { 0x1686 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_128)
{
    // 1687  ; [.37D9.0020.0002] 
    // OGHAM LETTER DAIR

    uint32_t const cps[1] = { 0x1687 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_129)
{
    // 1688  ; [.37DA.0020.0002] 
    // OGHAM LETTER TINNE

    uint32_t const cps[1] = { 0x1688 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_130)
{
    // 1689  ; [.37DB.0020.0002] 
    // OGHAM LETTER COLL

    uint32_t const cps[1] = { 0x1689 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_131)
{
    // 168A  ; [.37DC.0020.0002] 
    // OGHAM LETTER CEIRT

    uint32_t const cps[1] = { 0x168a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_132)
{
    // 168B  ; [.37DD.0020.0002] 
    // OGHAM LETTER MUIN

    uint32_t const cps[1] = { 0x168b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_133)
{
    // 168C  ; [.37DE.0020.0002] 
    // OGHAM LETTER GORT

    uint32_t const cps[1] = { 0x168c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_134)
{
    // 168D  ; [.37DF.0020.0002] 
    // OGHAM LETTER NGEADAL

    uint32_t const cps[1] = { 0x168d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_135)
{
    // 168E  ; [.37E0.0020.0002] 
    // OGHAM LETTER STRAIF

    uint32_t const cps[1] = { 0x168e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_136)
{
    // 168F  ; [.37E1.0020.0002] 
    // OGHAM LETTER RUIS

    uint32_t const cps[1] = { 0x168f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_137)
{
    // 1690  ; [.37E2.0020.0002] 
    // OGHAM LETTER AILM

    uint32_t const cps[1] = { 0x1690 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_138)
{
    // 1691  ; [.37E3.0020.0002] 
    // OGHAM LETTER ONN

    uint32_t const cps[1] = { 0x1691 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_139)
{
    // 1692  ; [.37E4.0020.0002] 
    // OGHAM LETTER UR

    uint32_t const cps[1] = { 0x1692 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_140)
{
    // 1693  ; [.37E5.0020.0002] 
    // OGHAM LETTER EADHADH

    uint32_t const cps[1] = { 0x1693 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_141)
{
    // 1694  ; [.37E6.0020.0002] 
    // OGHAM LETTER IODHADH

    uint32_t const cps[1] = { 0x1694 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_142)
{
    // 1695  ; [.37E7.0020.0002] 
    // OGHAM LETTER EABHADH

    uint32_t const cps[1] = { 0x1695 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_143)
{
    // 1696  ; [.37E8.0020.0002] 
    // OGHAM LETTER OR

    uint32_t const cps[1] = { 0x1696 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_144)
{
    // 1697  ; [.37E9.0020.0002] 
    // OGHAM LETTER UILLEANN

    uint32_t const cps[1] = { 0x1697 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_145)
{
    // 1698  ; [.37EA.0020.0002] 
    // OGHAM LETTER IFIN

    uint32_t const cps[1] = { 0x1698 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_146)
{
    // 1699  ; [.37EB.0020.0002] 
    // OGHAM LETTER EAMHANCHOLL

    uint32_t const cps[1] = { 0x1699 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_147)
{
    // 169A  ; [.37EC.0020.0002] 
    // OGHAM LETTER PEITH

    uint32_t const cps[1] = { 0x169a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_148)
{
    // 169B  ; [*0322.0020.0002] 
    // OGHAM FEATHER MARK

    uint32_t const cps[1] = { 0x169b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x322), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_036_149)
{
    // 169C  ; [*0323.0020.0002] 
    // OGHAM REVERSED FEATHER MARK

    uint32_t const cps[1] = { 0x169c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x323), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

