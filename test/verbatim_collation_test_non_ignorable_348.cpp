// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_348_000)
{
    // 3C37 003F;	
    // (㰷) CJK UNIFIED IDEOGRAPH-3C37	[FB80 BC37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C37, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_001)
{
    // 3C37 0061;	
    // (㰷) CJK UNIFIED IDEOGRAPH-3C37	[FB80 BC37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C37, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_002)
{
    // 3C37 0041;	
    // (㰷) CJK UNIFIED IDEOGRAPH-3C37	[FB80 BC37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C37, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_003)
{
    // 3C37 0062;	
    // (㰷) CJK UNIFIED IDEOGRAPH-3C37	[FB80 BC37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C37, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_004)
{
    // 3C38 0021;	
    // (㰸) CJK UNIFIED IDEOGRAPH-3C38	[FB80 BC38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C38, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_005)
{
    // 3C38 003F;	
    // (㰸) CJK UNIFIED IDEOGRAPH-3C38	[FB80 BC38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C38, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_006)
{
    // 3C38 0061;	
    // (㰸) CJK UNIFIED IDEOGRAPH-3C38	[FB80 BC38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C38, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_007)
{
    // 3C38 0041;	
    // (㰸) CJK UNIFIED IDEOGRAPH-3C38	[FB80 BC38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C38, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_008)
{
    // 3C38 0062;	
    // (㰸) CJK UNIFIED IDEOGRAPH-3C38	[FB80 BC38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C38, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_009)
{
    // 3C39 0021;	
    // (㰹) CJK UNIFIED IDEOGRAPH-3C39	[FB80 BC39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C39, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_010)
{
    // 3C39 003F;	
    // (㰹) CJK UNIFIED IDEOGRAPH-3C39	[FB80 BC39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C39, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_011)
{
    // 3C39 0061;	
    // (㰹) CJK UNIFIED IDEOGRAPH-3C39	[FB80 BC39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C39, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_012)
{
    // 3C39 0041;	
    // (㰹) CJK UNIFIED IDEOGRAPH-3C39	[FB80 BC39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C39, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_013)
{
    // 3C39 0062;	
    // (㰹) CJK UNIFIED IDEOGRAPH-3C39	[FB80 BC39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C39, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_014)
{
    // 3C3A 0021;	
    // (㰺) CJK UNIFIED IDEOGRAPH-3C3A	[FB80 BC3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_015)
{
    // 3C3A 003F;	
    // (㰺) CJK UNIFIED IDEOGRAPH-3C3A	[FB80 BC3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_016)
{
    // 3C3A 0061;	
    // (㰺) CJK UNIFIED IDEOGRAPH-3C3A	[FB80 BC3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_017)
{
    // 3C3A 0041;	
    // (㰺) CJK UNIFIED IDEOGRAPH-3C3A	[FB80 BC3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_018)
{
    // 3C3A 0062;	
    // (㰺) CJK UNIFIED IDEOGRAPH-3C3A	[FB80 BC3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_019)
{
    // 3C3B 0021;	
    // (㰻) CJK UNIFIED IDEOGRAPH-3C3B	[FB80 BC3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_020)
{
    // 3C3B 003F;	
    // (㰻) CJK UNIFIED IDEOGRAPH-3C3B	[FB80 BC3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_021)
{
    // 3C3B 0061;	
    // (㰻) CJK UNIFIED IDEOGRAPH-3C3B	[FB80 BC3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_022)
{
    // 3C3B 0041;	
    // (㰻) CJK UNIFIED IDEOGRAPH-3C3B	[FB80 BC3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_023)
{
    // 3C3B 0062;	
    // (㰻) CJK UNIFIED IDEOGRAPH-3C3B	[FB80 BC3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_024)
{
    // 3C3C 0021;	
    // (㰼) CJK UNIFIED IDEOGRAPH-3C3C	[FB80 BC3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_025)
{
    // 3C3C 003F;	
    // (㰼) CJK UNIFIED IDEOGRAPH-3C3C	[FB80 BC3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_026)
{
    // 3C3C 0061;	
    // (㰼) CJK UNIFIED IDEOGRAPH-3C3C	[FB80 BC3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_027)
{
    // 3C3C 0041;	
    // (㰼) CJK UNIFIED IDEOGRAPH-3C3C	[FB80 BC3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_028)
{
    // 3C3C 0062;	
    // (㰼) CJK UNIFIED IDEOGRAPH-3C3C	[FB80 BC3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_029)
{
    // 3C3D 0021;	
    // (㰽) CJK UNIFIED IDEOGRAPH-3C3D	[FB80 BC3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_030)
{
    // 3C3D 003F;	
    // (㰽) CJK UNIFIED IDEOGRAPH-3C3D	[FB80 BC3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_031)
{
    // 3C3D 0061;	
    // (㰽) CJK UNIFIED IDEOGRAPH-3C3D	[FB80 BC3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_032)
{
    // 3C3D 0041;	
    // (㰽) CJK UNIFIED IDEOGRAPH-3C3D	[FB80 BC3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_033)
{
    // 3C3D 0062;	
    // (㰽) CJK UNIFIED IDEOGRAPH-3C3D	[FB80 BC3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_034)
{
    // 3C3E 0021;	
    // (㰾) CJK UNIFIED IDEOGRAPH-3C3E	[FB80 BC3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_035)
{
    // 3C3E 003F;	
    // (㰾) CJK UNIFIED IDEOGRAPH-3C3E	[FB80 BC3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_036)
{
    // 3C3E 0061;	
    // (㰾) CJK UNIFIED IDEOGRAPH-3C3E	[FB80 BC3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_037)
{
    // 3C3E 0041;	
    // (㰾) CJK UNIFIED IDEOGRAPH-3C3E	[FB80 BC3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_038)
{
    // 3C3E 0062;	
    // (㰾) CJK UNIFIED IDEOGRAPH-3C3E	[FB80 BC3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_039)
{
    // 3C3F 0021;	
    // (㰿) CJK UNIFIED IDEOGRAPH-3C3F	[FB80 BC3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_040)
{
    // 3C3F 003F;	
    // (㰿) CJK UNIFIED IDEOGRAPH-3C3F	[FB80 BC3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_041)
{
    // 3C3F 0061;	
    // (㰿) CJK UNIFIED IDEOGRAPH-3C3F	[FB80 BC3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_042)
{
    // 3C3F 0041;	
    // (㰿) CJK UNIFIED IDEOGRAPH-3C3F	[FB80 BC3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_043)
{
    // 3C3F 0062;	
    // (㰿) CJK UNIFIED IDEOGRAPH-3C3F	[FB80 BC3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_044)
{
    // 3C40 0021;	
    // (㱀) CJK UNIFIED IDEOGRAPH-3C40	[FB80 BC40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_045)
{
    // 3C40 003F;	
    // (㱀) CJK UNIFIED IDEOGRAPH-3C40	[FB80 BC40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_046)
{
    // 3C40 0061;	
    // (㱀) CJK UNIFIED IDEOGRAPH-3C40	[FB80 BC40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_047)
{
    // 3C40 0041;	
    // (㱀) CJK UNIFIED IDEOGRAPH-3C40	[FB80 BC40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_048)
{
    // 3C40 0062;	
    // (㱀) CJK UNIFIED IDEOGRAPH-3C40	[FB80 BC40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_049)
{
    // 3C41 0021;	
    // (㱁) CJK UNIFIED IDEOGRAPH-3C41	[FB80 BC41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_050)
{
    // 3C41 003F;	
    // (㱁) CJK UNIFIED IDEOGRAPH-3C41	[FB80 BC41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_051)
{
    // 3C41 0061;	
    // (㱁) CJK UNIFIED IDEOGRAPH-3C41	[FB80 BC41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_052)
{
    // 3C41 0041;	
    // (㱁) CJK UNIFIED IDEOGRAPH-3C41	[FB80 BC41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_053)
{
    // 3C41 0062;	
    // (㱁) CJK UNIFIED IDEOGRAPH-3C41	[FB80 BC41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_054)
{
    // 3C42 0021;	
    // (㱂) CJK UNIFIED IDEOGRAPH-3C42	[FB80 BC42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_055)
{
    // 3C42 003F;	
    // (㱂) CJK UNIFIED IDEOGRAPH-3C42	[FB80 BC42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_056)
{
    // 3C42 0061;	
    // (㱂) CJK UNIFIED IDEOGRAPH-3C42	[FB80 BC42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_057)
{
    // 3C42 0041;	
    // (㱂) CJK UNIFIED IDEOGRAPH-3C42	[FB80 BC42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_058)
{
    // 3C42 0062;	
    // (㱂) CJK UNIFIED IDEOGRAPH-3C42	[FB80 BC42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_059)
{
    // 3C43 0021;	
    // (㱃) CJK UNIFIED IDEOGRAPH-3C43	[FB80 BC43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_060)
{
    // 3C43 003F;	
    // (㱃) CJK UNIFIED IDEOGRAPH-3C43	[FB80 BC43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_061)
{
    // 3C43 0061;	
    // (㱃) CJK UNIFIED IDEOGRAPH-3C43	[FB80 BC43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_062)
{
    // 3C43 0041;	
    // (㱃) CJK UNIFIED IDEOGRAPH-3C43	[FB80 BC43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_063)
{
    // 3C43 0062;	
    // (㱃) CJK UNIFIED IDEOGRAPH-3C43	[FB80 BC43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_064)
{
    // 3C44 0021;	
    // (㱄) CJK UNIFIED IDEOGRAPH-3C44	[FB80 BC44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_065)
{
    // 3C44 003F;	
    // (㱄) CJK UNIFIED IDEOGRAPH-3C44	[FB80 BC44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_066)
{
    // 3C44 0061;	
    // (㱄) CJK UNIFIED IDEOGRAPH-3C44	[FB80 BC44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_067)
{
    // 3C44 0041;	
    // (㱄) CJK UNIFIED IDEOGRAPH-3C44	[FB80 BC44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_068)
{
    // 3C44 0062;	
    // (㱄) CJK UNIFIED IDEOGRAPH-3C44	[FB80 BC44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_069)
{
    // 3C45 0021;	
    // (㱅) CJK UNIFIED IDEOGRAPH-3C45	[FB80 BC45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_070)
{
    // 3C45 003F;	
    // (㱅) CJK UNIFIED IDEOGRAPH-3C45	[FB80 BC45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_071)
{
    // 3C45 0061;	
    // (㱅) CJK UNIFIED IDEOGRAPH-3C45	[FB80 BC45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_072)
{
    // 3C45 0041;	
    // (㱅) CJK UNIFIED IDEOGRAPH-3C45	[FB80 BC45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_073)
{
    // 3C45 0062;	
    // (㱅) CJK UNIFIED IDEOGRAPH-3C45	[FB80 BC45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_074)
{
    // 3C46 0021;	
    // (㱆) CJK UNIFIED IDEOGRAPH-3C46	[FB80 BC46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_075)
{
    // 3C46 003F;	
    // (㱆) CJK UNIFIED IDEOGRAPH-3C46	[FB80 BC46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_076)
{
    // 3C46 0061;	
    // (㱆) CJK UNIFIED IDEOGRAPH-3C46	[FB80 BC46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_077)
{
    // 3C46 0041;	
    // (㱆) CJK UNIFIED IDEOGRAPH-3C46	[FB80 BC46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_078)
{
    // 3C46 0062;	
    // (㱆) CJK UNIFIED IDEOGRAPH-3C46	[FB80 BC46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_079)
{
    // 3C47 0021;	
    // (㱇) CJK UNIFIED IDEOGRAPH-3C47	[FB80 BC47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_080)
{
    // 3C47 003F;	
    // (㱇) CJK UNIFIED IDEOGRAPH-3C47	[FB80 BC47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_081)
{
    // 3C47 0061;	
    // (㱇) CJK UNIFIED IDEOGRAPH-3C47	[FB80 BC47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_082)
{
    // 3C47 0041;	
    // (㱇) CJK UNIFIED IDEOGRAPH-3C47	[FB80 BC47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_083)
{
    // 3C47 0062;	
    // (㱇) CJK UNIFIED IDEOGRAPH-3C47	[FB80 BC47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_084)
{
    // 3C48 0021;	
    // (㱈) CJK UNIFIED IDEOGRAPH-3C48	[FB80 BC48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_085)
{
    // 3C48 003F;	
    // (㱈) CJK UNIFIED IDEOGRAPH-3C48	[FB80 BC48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_086)
{
    // 3C48 0061;	
    // (㱈) CJK UNIFIED IDEOGRAPH-3C48	[FB80 BC48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_087)
{
    // 3C48 0041;	
    // (㱈) CJK UNIFIED IDEOGRAPH-3C48	[FB80 BC48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_088)
{
    // 3C48 0062;	
    // (㱈) CJK UNIFIED IDEOGRAPH-3C48	[FB80 BC48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_089)
{
    // 3C49 0021;	
    // (㱉) CJK UNIFIED IDEOGRAPH-3C49	[FB80 BC49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_090)
{
    // 3C49 003F;	
    // (㱉) CJK UNIFIED IDEOGRAPH-3C49	[FB80 BC49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_091)
{
    // 3C49 0061;	
    // (㱉) CJK UNIFIED IDEOGRAPH-3C49	[FB80 BC49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_092)
{
    // 3C49 0041;	
    // (㱉) CJK UNIFIED IDEOGRAPH-3C49	[FB80 BC49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_093)
{
    // 3C49 0062;	
    // (㱉) CJK UNIFIED IDEOGRAPH-3C49	[FB80 BC49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_094)
{
    // 3C4A 0021;	
    // (㱊) CJK UNIFIED IDEOGRAPH-3C4A	[FB80 BC4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_095)
{
    // 3C4A 003F;	
    // (㱊) CJK UNIFIED IDEOGRAPH-3C4A	[FB80 BC4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_096)
{
    // 3C4A 0061;	
    // (㱊) CJK UNIFIED IDEOGRAPH-3C4A	[FB80 BC4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_097)
{
    // 3C4A 0041;	
    // (㱊) CJK UNIFIED IDEOGRAPH-3C4A	[FB80 BC4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_098)
{
    // 3C4A 0062;	
    // (㱊) CJK UNIFIED IDEOGRAPH-3C4A	[FB80 BC4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_099)
{
    // 3C4B 0021;	
    // (㱋) CJK UNIFIED IDEOGRAPH-3C4B	[FB80 BC4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_100)
{
    // 3C4B 003F;	
    // (㱋) CJK UNIFIED IDEOGRAPH-3C4B	[FB80 BC4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_101)
{
    // 3C4B 0061;	
    // (㱋) CJK UNIFIED IDEOGRAPH-3C4B	[FB80 BC4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_102)
{
    // 3C4B 0041;	
    // (㱋) CJK UNIFIED IDEOGRAPH-3C4B	[FB80 BC4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_103)
{
    // 3C4B 0062;	
    // (㱋) CJK UNIFIED IDEOGRAPH-3C4B	[FB80 BC4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_104)
{
    // 3C4C 0021;	
    // (㱌) CJK UNIFIED IDEOGRAPH-3C4C	[FB80 BC4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_105)
{
    // 3C4C 003F;	
    // (㱌) CJK UNIFIED IDEOGRAPH-3C4C	[FB80 BC4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_106)
{
    // 3C4C 0061;	
    // (㱌) CJK UNIFIED IDEOGRAPH-3C4C	[FB80 BC4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_107)
{
    // 3C4C 0041;	
    // (㱌) CJK UNIFIED IDEOGRAPH-3C4C	[FB80 BC4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_108)
{
    // 3C4C 0062;	
    // (㱌) CJK UNIFIED IDEOGRAPH-3C4C	[FB80 BC4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_109)
{
    // 3C4D 0021;	
    // (㱍) CJK UNIFIED IDEOGRAPH-3C4D	[FB80 BC4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_110)
{
    // 3C4D 003F;	
    // (㱍) CJK UNIFIED IDEOGRAPH-3C4D	[FB80 BC4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_111)
{
    // 3C4D 0061;	
    // (㱍) CJK UNIFIED IDEOGRAPH-3C4D	[FB80 BC4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_112)
{
    // 3C4D 0041;	
    // (㱍) CJK UNIFIED IDEOGRAPH-3C4D	[FB80 BC4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_113)
{
    // 3C4D 0062;	
    // (㱍) CJK UNIFIED IDEOGRAPH-3C4D	[FB80 BC4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_114)
{
    // 3C4E 0021;	
    // (㱎) CJK UNIFIED IDEOGRAPH-3C4E	[FB80 BC4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_115)
{
    // 2F8F2 0021;	
    // (㱎) CJK COMPATIBILITY IDEOGRAPH-2F8F2	[FB80 BC4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_116)
{
    // 3C4E 003F;	
    // (㱎) CJK UNIFIED IDEOGRAPH-3C4E	[FB80 BC4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_117)
{
    // 2F8F2 003F;	
    // (㱎) CJK COMPATIBILITY IDEOGRAPH-2F8F2	[FB80 BC4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_118)
{
    // 3C4E 0061;	
    // (㱎) CJK UNIFIED IDEOGRAPH-3C4E	[FB80 BC4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_119)
{
    // 2F8F2 0061;	
    // (㱎) CJK COMPATIBILITY IDEOGRAPH-2F8F2	[FB80 BC4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_120)
{
    // 3C4E 0041;	
    // (㱎) CJK UNIFIED IDEOGRAPH-3C4E	[FB80 BC4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_121)
{
    // 2F8F2 0041;	
    // (㱎) CJK COMPATIBILITY IDEOGRAPH-2F8F2	[FB80 BC4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_122)
{
    // 3C4E 0062;	
    // (㱎) CJK UNIFIED IDEOGRAPH-3C4E	[FB80 BC4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_123)
{
    // 2F8F2 0062;	
    // (㱎) CJK COMPATIBILITY IDEOGRAPH-2F8F2	[FB80 BC4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_124)
{
    // 3C4F 0021;	
    // (㱏) CJK UNIFIED IDEOGRAPH-3C4F	[FB80 BC4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_125)
{
    // 3C4F 003F;	
    // (㱏) CJK UNIFIED IDEOGRAPH-3C4F	[FB80 BC4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_126)
{
    // 3C4F 0061;	
    // (㱏) CJK UNIFIED IDEOGRAPH-3C4F	[FB80 BC4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_127)
{
    // 3C4F 0041;	
    // (㱏) CJK UNIFIED IDEOGRAPH-3C4F	[FB80 BC4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_128)
{
    // 3C4F 0062;	
    // (㱏) CJK UNIFIED IDEOGRAPH-3C4F	[FB80 BC4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_129)
{
    // 3C50 0021;	
    // (㱐) CJK UNIFIED IDEOGRAPH-3C50	[FB80 BC50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C50, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_130)
{
    // 3C50 003F;	
    // (㱐) CJK UNIFIED IDEOGRAPH-3C50	[FB80 BC50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_131)
{
    // 3C50 0061;	
    // (㱐) CJK UNIFIED IDEOGRAPH-3C50	[FB80 BC50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_132)
{
    // 3C50 0041;	
    // (㱐) CJK UNIFIED IDEOGRAPH-3C50	[FB80 BC50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_133)
{
    // 3C50 0062;	
    // (㱐) CJK UNIFIED IDEOGRAPH-3C50	[FB80 BC50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_134)
{
    // 3C51 0021;	
    // (㱑) CJK UNIFIED IDEOGRAPH-3C51	[FB80 BC51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_135)
{
    // 3C51 003F;	
    // (㱑) CJK UNIFIED IDEOGRAPH-3C51	[FB80 BC51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_136)
{
    // 3C51 0061;	
    // (㱑) CJK UNIFIED IDEOGRAPH-3C51	[FB80 BC51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_137)
{
    // 3C51 0041;	
    // (㱑) CJK UNIFIED IDEOGRAPH-3C51	[FB80 BC51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_138)
{
    // 3C51 0062;	
    // (㱑) CJK UNIFIED IDEOGRAPH-3C51	[FB80 BC51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_139)
{
    // 3C52 0021;	
    // (㱒) CJK UNIFIED IDEOGRAPH-3C52	[FB80 BC52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_140)
{
    // 3C52 003F;	
    // (㱒) CJK UNIFIED IDEOGRAPH-3C52	[FB80 BC52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_141)
{
    // 3C52 0061;	
    // (㱒) CJK UNIFIED IDEOGRAPH-3C52	[FB80 BC52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_142)
{
    // 3C52 0041;	
    // (㱒) CJK UNIFIED IDEOGRAPH-3C52	[FB80 BC52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_143)
{
    // 3C52 0062;	
    // (㱒) CJK UNIFIED IDEOGRAPH-3C52	[FB80 BC52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_144)
{
    // 3C53 0021;	
    // (㱓) CJK UNIFIED IDEOGRAPH-3C53	[FB80 BC53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_145)
{
    // 3C53 003F;	
    // (㱓) CJK UNIFIED IDEOGRAPH-3C53	[FB80 BC53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_146)
{
    // 3C53 0061;	
    // (㱓) CJK UNIFIED IDEOGRAPH-3C53	[FB80 BC53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_147)
{
    // 3C53 0041;	
    // (㱓) CJK UNIFIED IDEOGRAPH-3C53	[FB80 BC53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_148)
{
    // 3C53 0062;	
    // (㱓) CJK UNIFIED IDEOGRAPH-3C53	[FB80 BC53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_149)
{
    // 3C54 0021;	
    // (㱔) CJK UNIFIED IDEOGRAPH-3C54	[FB80 BC54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_150)
{
    // 3C54 003F;	
    // (㱔) CJK UNIFIED IDEOGRAPH-3C54	[FB80 BC54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_151)
{
    // 3C54 0061;	
    // (㱔) CJK UNIFIED IDEOGRAPH-3C54	[FB80 BC54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_152)
{
    // 3C54 0041;	
    // (㱔) CJK UNIFIED IDEOGRAPH-3C54	[FB80 BC54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_153)
{
    // 3C54 0062;	
    // (㱔) CJK UNIFIED IDEOGRAPH-3C54	[FB80 BC54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_154)
{
    // 3C55 0021;	
    // (㱕) CJK UNIFIED IDEOGRAPH-3C55	[FB80 BC55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_155)
{
    // 3C55 003F;	
    // (㱕) CJK UNIFIED IDEOGRAPH-3C55	[FB80 BC55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_156)
{
    // 3C55 0061;	
    // (㱕) CJK UNIFIED IDEOGRAPH-3C55	[FB80 BC55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_157)
{
    // 3C55 0041;	
    // (㱕) CJK UNIFIED IDEOGRAPH-3C55	[FB80 BC55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_158)
{
    // 3C55 0062;	
    // (㱕) CJK UNIFIED IDEOGRAPH-3C55	[FB80 BC55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_159)
{
    // 3C56 0021;	
    // (㱖) CJK UNIFIED IDEOGRAPH-3C56	[FB80 BC56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_160)
{
    // 3C56 003F;	
    // (㱖) CJK UNIFIED IDEOGRAPH-3C56	[FB80 BC56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_161)
{
    // 3C56 0061;	
    // (㱖) CJK UNIFIED IDEOGRAPH-3C56	[FB80 BC56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_162)
{
    // 3C56 0041;	
    // (㱖) CJK UNIFIED IDEOGRAPH-3C56	[FB80 BC56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_163)
{
    // 3C56 0062;	
    // (㱖) CJK UNIFIED IDEOGRAPH-3C56	[FB80 BC56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_164)
{
    // 3C57 0021;	
    // (㱗) CJK UNIFIED IDEOGRAPH-3C57	[FB80 BC57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_165)
{
    // 3C57 003F;	
    // (㱗) CJK UNIFIED IDEOGRAPH-3C57	[FB80 BC57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_166)
{
    // 3C57 0061;	
    // (㱗) CJK UNIFIED IDEOGRAPH-3C57	[FB80 BC57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_167)
{
    // 3C57 0041;	
    // (㱗) CJK UNIFIED IDEOGRAPH-3C57	[FB80 BC57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_168)
{
    // 3C57 0062;	
    // (㱗) CJK UNIFIED IDEOGRAPH-3C57	[FB80 BC57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_169)
{
    // 3C58 0021;	
    // (㱘) CJK UNIFIED IDEOGRAPH-3C58	[FB80 BC58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_170)
{
    // 3C58 003F;	
    // (㱘) CJK UNIFIED IDEOGRAPH-3C58	[FB80 BC58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_171)
{
    // 3C58 0061;	
    // (㱘) CJK UNIFIED IDEOGRAPH-3C58	[FB80 BC58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_172)
{
    // 3C58 0041;	
    // (㱘) CJK UNIFIED IDEOGRAPH-3C58	[FB80 BC58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_173)
{
    // 3C58 0062;	
    // (㱘) CJK UNIFIED IDEOGRAPH-3C58	[FB80 BC58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_174)
{
    // 3C59 0021;	
    // (㱙) CJK UNIFIED IDEOGRAPH-3C59	[FB80 BC59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_175)
{
    // 3C59 003F;	
    // (㱙) CJK UNIFIED IDEOGRAPH-3C59	[FB80 BC59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_176)
{
    // 3C59 0061;	
    // (㱙) CJK UNIFIED IDEOGRAPH-3C59	[FB80 BC59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_177)
{
    // 3C59 0041;	
    // (㱙) CJK UNIFIED IDEOGRAPH-3C59	[FB80 BC59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_178)
{
    // 3C59 0062;	
    // (㱙) CJK UNIFIED IDEOGRAPH-3C59	[FB80 BC59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_179)
{
    // 3C5A 0021;	
    // (㱚) CJK UNIFIED IDEOGRAPH-3C5A	[FB80 BC5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_180)
{
    // 3C5A 003F;	
    // (㱚) CJK UNIFIED IDEOGRAPH-3C5A	[FB80 BC5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_181)
{
    // 3C5A 0061;	
    // (㱚) CJK UNIFIED IDEOGRAPH-3C5A	[FB80 BC5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_182)
{
    // 3C5A 0041;	
    // (㱚) CJK UNIFIED IDEOGRAPH-3C5A	[FB80 BC5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_183)
{
    // 3C5A 0062;	
    // (㱚) CJK UNIFIED IDEOGRAPH-3C5A	[FB80 BC5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_184)
{
    // 3C5B 0021;	
    // (㱛) CJK UNIFIED IDEOGRAPH-3C5B	[FB80 BC5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_185)
{
    // 3C5B 003F;	
    // (㱛) CJK UNIFIED IDEOGRAPH-3C5B	[FB80 BC5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_186)
{
    // 3C5B 0061;	
    // (㱛) CJK UNIFIED IDEOGRAPH-3C5B	[FB80 BC5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_187)
{
    // 3C5B 0041;	
    // (㱛) CJK UNIFIED IDEOGRAPH-3C5B	[FB80 BC5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_188)
{
    // 3C5B 0062;	
    // (㱛) CJK UNIFIED IDEOGRAPH-3C5B	[FB80 BC5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_189)
{
    // 3C5C 0021;	
    // (㱜) CJK UNIFIED IDEOGRAPH-3C5C	[FB80 BC5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_190)
{
    // 3C5C 003F;	
    // (㱜) CJK UNIFIED IDEOGRAPH-3C5C	[FB80 BC5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_191)
{
    // 3C5C 0061;	
    // (㱜) CJK UNIFIED IDEOGRAPH-3C5C	[FB80 BC5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_192)
{
    // 3C5C 0041;	
    // (㱜) CJK UNIFIED IDEOGRAPH-3C5C	[FB80 BC5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_193)
{
    // 3C5C 0062;	
    // (㱜) CJK UNIFIED IDEOGRAPH-3C5C	[FB80 BC5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_194)
{
    // 3C5D 0021;	
    // (㱝) CJK UNIFIED IDEOGRAPH-3C5D	[FB80 BC5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_195)
{
    // 3C5D 003F;	
    // (㱝) CJK UNIFIED IDEOGRAPH-3C5D	[FB80 BC5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_196)
{
    // 3C5D 0061;	
    // (㱝) CJK UNIFIED IDEOGRAPH-3C5D	[FB80 BC5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_197)
{
    // 3C5D 0041;	
    // (㱝) CJK UNIFIED IDEOGRAPH-3C5D	[FB80 BC5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_198)
{
    // 3C5D 0062;	
    // (㱝) CJK UNIFIED IDEOGRAPH-3C5D	[FB80 BC5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_199)
{
    // 3C5E 0021;	
    // (㱞) CJK UNIFIED IDEOGRAPH-3C5E	[FB80 BC5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_200)
{
    // 3C5E 003F;	
    // (㱞) CJK UNIFIED IDEOGRAPH-3C5E	[FB80 BC5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_201)
{
    // 3C5E 0061;	
    // (㱞) CJK UNIFIED IDEOGRAPH-3C5E	[FB80 BC5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_202)
{
    // 3C5E 0041;	
    // (㱞) CJK UNIFIED IDEOGRAPH-3C5E	[FB80 BC5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_203)
{
    // 3C5E 0062;	
    // (㱞) CJK UNIFIED IDEOGRAPH-3C5E	[FB80 BC5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_204)
{
    // 3C5F 0021;	
    // (㱟) CJK UNIFIED IDEOGRAPH-3C5F	[FB80 BC5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_205)
{
    // 3C5F 003F;	
    // (㱟) CJK UNIFIED IDEOGRAPH-3C5F	[FB80 BC5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_206)
{
    // 3C5F 0061;	
    // (㱟) CJK UNIFIED IDEOGRAPH-3C5F	[FB80 BC5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_207)
{
    // 3C5F 0041;	
    // (㱟) CJK UNIFIED IDEOGRAPH-3C5F	[FB80 BC5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_208)
{
    // 3C5F 0062;	
    // (㱟) CJK UNIFIED IDEOGRAPH-3C5F	[FB80 BC5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_209)
{
    // 3C60 0021;	
    // (㱠) CJK UNIFIED IDEOGRAPH-3C60	[FB80 BC60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_210)
{
    // 3C60 003F;	
    // (㱠) CJK UNIFIED IDEOGRAPH-3C60	[FB80 BC60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_211)
{
    // 3C60 0061;	
    // (㱠) CJK UNIFIED IDEOGRAPH-3C60	[FB80 BC60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_212)
{
    // 3C60 0041;	
    // (㱠) CJK UNIFIED IDEOGRAPH-3C60	[FB80 BC60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_213)
{
    // 3C60 0062;	
    // (㱠) CJK UNIFIED IDEOGRAPH-3C60	[FB80 BC60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_214)
{
    // 3C61 0021;	
    // (㱡) CJK UNIFIED IDEOGRAPH-3C61	[FB80 BC61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_215)
{
    // 3C61 003F;	
    // (㱡) CJK UNIFIED IDEOGRAPH-3C61	[FB80 BC61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_216)
{
    // 3C61 0061;	
    // (㱡) CJK UNIFIED IDEOGRAPH-3C61	[FB80 BC61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_217)
{
    // 3C61 0041;	
    // (㱡) CJK UNIFIED IDEOGRAPH-3C61	[FB80 BC61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_218)
{
    // 3C61 0062;	
    // (㱡) CJK UNIFIED IDEOGRAPH-3C61	[FB80 BC61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_219)
{
    // 3C62 0021;	
    // (㱢) CJK UNIFIED IDEOGRAPH-3C62	[FB80 BC62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_220)
{
    // 3C62 003F;	
    // (㱢) CJK UNIFIED IDEOGRAPH-3C62	[FB80 BC62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_221)
{
    // 3C62 0061;	
    // (㱢) CJK UNIFIED IDEOGRAPH-3C62	[FB80 BC62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_222)
{
    // 3C62 0041;	
    // (㱢) CJK UNIFIED IDEOGRAPH-3C62	[FB80 BC62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_223)
{
    // 3C62 0062;	
    // (㱢) CJK UNIFIED IDEOGRAPH-3C62	[FB80 BC62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_224)
{
    // 3C63 0021;	
    // (㱣) CJK UNIFIED IDEOGRAPH-3C63	[FB80 BC63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_225)
{
    // 3C63 003F;	
    // (㱣) CJK UNIFIED IDEOGRAPH-3C63	[FB80 BC63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_226)
{
    // 3C63 0061;	
    // (㱣) CJK UNIFIED IDEOGRAPH-3C63	[FB80 BC63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_227)
{
    // 3C63 0041;	
    // (㱣) CJK UNIFIED IDEOGRAPH-3C63	[FB80 BC63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_228)
{
    // 3C63 0062;	
    // (㱣) CJK UNIFIED IDEOGRAPH-3C63	[FB80 BC63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_229)
{
    // 3C64 0021;	
    // (㱤) CJK UNIFIED IDEOGRAPH-3C64	[FB80 BC64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_230)
{
    // 3C64 003F;	
    // (㱤) CJK UNIFIED IDEOGRAPH-3C64	[FB80 BC64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_231)
{
    // 3C64 0061;	
    // (㱤) CJK UNIFIED IDEOGRAPH-3C64	[FB80 BC64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_232)
{
    // 3C64 0041;	
    // (㱤) CJK UNIFIED IDEOGRAPH-3C64	[FB80 BC64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_233)
{
    // 3C64 0062;	
    // (㱤) CJK UNIFIED IDEOGRAPH-3C64	[FB80 BC64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_234)
{
    // 3C65 0021;	
    // (㱥) CJK UNIFIED IDEOGRAPH-3C65	[FB80 BC65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_235)
{
    // 3C65 003F;	
    // (㱥) CJK UNIFIED IDEOGRAPH-3C65	[FB80 BC65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_236)
{
    // 3C65 0061;	
    // (㱥) CJK UNIFIED IDEOGRAPH-3C65	[FB80 BC65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_237)
{
    // 3C65 0041;	
    // (㱥) CJK UNIFIED IDEOGRAPH-3C65	[FB80 BC65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_238)
{
    // 3C65 0062;	
    // (㱥) CJK UNIFIED IDEOGRAPH-3C65	[FB80 BC65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_239)
{
    // 3C66 0021;	
    // (㱦) CJK UNIFIED IDEOGRAPH-3C66	[FB80 BC66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_240)
{
    // 3C66 003F;	
    // (㱦) CJK UNIFIED IDEOGRAPH-3C66	[FB80 BC66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_241)
{
    // 3C66 0061;	
    // (㱦) CJK UNIFIED IDEOGRAPH-3C66	[FB80 BC66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_242)
{
    // 3C66 0041;	
    // (㱦) CJK UNIFIED IDEOGRAPH-3C66	[FB80 BC66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_243)
{
    // 3C66 0062;	
    // (㱦) CJK UNIFIED IDEOGRAPH-3C66	[FB80 BC66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_244)
{
    // 3C67 0021;	
    // (㱧) CJK UNIFIED IDEOGRAPH-3C67	[FB80 BC67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_245)
{
    // 3C67 003F;	
    // (㱧) CJK UNIFIED IDEOGRAPH-3C67	[FB80 BC67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_246)
{
    // 3C67 0061;	
    // (㱧) CJK UNIFIED IDEOGRAPH-3C67	[FB80 BC67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_247)
{
    // 3C67 0041;	
    // (㱧) CJK UNIFIED IDEOGRAPH-3C67	[FB80 BC67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_248)
{
    // 3C67 0062;	
    // (㱧) CJK UNIFIED IDEOGRAPH-3C67	[FB80 BC67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_249)
{
    // 3C68 0021;	
    // (㱨) CJK UNIFIED IDEOGRAPH-3C68	[FB80 BC68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_250)
{
    // 3C68 003F;	
    // (㱨) CJK UNIFIED IDEOGRAPH-3C68	[FB80 BC68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_251)
{
    // 3C68 0061;	
    // (㱨) CJK UNIFIED IDEOGRAPH-3C68	[FB80 BC68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_252)
{
    // 3C68 0041;	
    // (㱨) CJK UNIFIED IDEOGRAPH-3C68	[FB80 BC68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_253)
{
    // 3C68 0062;	
    // (㱨) CJK UNIFIED IDEOGRAPH-3C68	[FB80 BC68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_254)
{
    // 3C69 0021;	
    // (㱩) CJK UNIFIED IDEOGRAPH-3C69	[FB80 BC69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_255)
{
    // 3C69 003F;	
    // (㱩) CJK UNIFIED IDEOGRAPH-3C69	[FB80 BC69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_256)
{
    // 3C69 0061;	
    // (㱩) CJK UNIFIED IDEOGRAPH-3C69	[FB80 BC69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_257)
{
    // 3C69 0041;	
    // (㱩) CJK UNIFIED IDEOGRAPH-3C69	[FB80 BC69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_258)
{
    // 3C69 0062;	
    // (㱩) CJK UNIFIED IDEOGRAPH-3C69	[FB80 BC69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_259)
{
    // 3C6A 0021;	
    // (㱪) CJK UNIFIED IDEOGRAPH-3C6A	[FB80 BC6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_260)
{
    // 3C6A 003F;	
    // (㱪) CJK UNIFIED IDEOGRAPH-3C6A	[FB80 BC6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_261)
{
    // 3C6A 0061;	
    // (㱪) CJK UNIFIED IDEOGRAPH-3C6A	[FB80 BC6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_262)
{
    // 3C6A 0041;	
    // (㱪) CJK UNIFIED IDEOGRAPH-3C6A	[FB80 BC6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_263)
{
    // 3C6A 0062;	
    // (㱪) CJK UNIFIED IDEOGRAPH-3C6A	[FB80 BC6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_264)
{
    // 3C6B 0021;	
    // (㱫) CJK UNIFIED IDEOGRAPH-3C6B	[FB80 BC6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_265)
{
    // 3C6B 003F;	
    // (㱫) CJK UNIFIED IDEOGRAPH-3C6B	[FB80 BC6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_266)
{
    // 3C6B 0061;	
    // (㱫) CJK UNIFIED IDEOGRAPH-3C6B	[FB80 BC6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_267)
{
    // 3C6B 0041;	
    // (㱫) CJK UNIFIED IDEOGRAPH-3C6B	[FB80 BC6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_268)
{
    // 3C6B 0062;	
    // (㱫) CJK UNIFIED IDEOGRAPH-3C6B	[FB80 BC6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_269)
{
    // 3C6C 0021;	
    // (㱬) CJK UNIFIED IDEOGRAPH-3C6C	[FB80 BC6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_270)
{
    // 3C6C 003F;	
    // (㱬) CJK UNIFIED IDEOGRAPH-3C6C	[FB80 BC6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_271)
{
    // 3C6C 0061;	
    // (㱬) CJK UNIFIED IDEOGRAPH-3C6C	[FB80 BC6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_272)
{
    // 3C6C 0041;	
    // (㱬) CJK UNIFIED IDEOGRAPH-3C6C	[FB80 BC6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_273)
{
    // 3C6C 0062;	
    // (㱬) CJK UNIFIED IDEOGRAPH-3C6C	[FB80 BC6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_274)
{
    // 3C6D 0021;	
    // (㱭) CJK UNIFIED IDEOGRAPH-3C6D	[FB80 BC6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_275)
{
    // 3C6D 003F;	
    // (㱭) CJK UNIFIED IDEOGRAPH-3C6D	[FB80 BC6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_276)
{
    // 3C6D 0061;	
    // (㱭) CJK UNIFIED IDEOGRAPH-3C6D	[FB80 BC6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_277)
{
    // 3C6D 0041;	
    // (㱭) CJK UNIFIED IDEOGRAPH-3C6D	[FB80 BC6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_278)
{
    // 3C6D 0062;	
    // (㱭) CJK UNIFIED IDEOGRAPH-3C6D	[FB80 BC6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_279)
{
    // 3C6E 0021;	
    // (㱮) CJK UNIFIED IDEOGRAPH-3C6E	[FB80 BC6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_280)
{
    // 3C6E 003F;	
    // (㱮) CJK UNIFIED IDEOGRAPH-3C6E	[FB80 BC6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_281)
{
    // 3C6E 0061;	
    // (㱮) CJK UNIFIED IDEOGRAPH-3C6E	[FB80 BC6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_282)
{
    // 3C6E 0041;	
    // (㱮) CJK UNIFIED IDEOGRAPH-3C6E	[FB80 BC6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_283)
{
    // 3C6E 0062;	
    // (㱮) CJK UNIFIED IDEOGRAPH-3C6E	[FB80 BC6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_284)
{
    // 3C6F 0021;	
    // (㱯) CJK UNIFIED IDEOGRAPH-3C6F	[FB80 BC6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_285)
{
    // 3C6F 003F;	
    // (㱯) CJK UNIFIED IDEOGRAPH-3C6F	[FB80 BC6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_286)
{
    // 3C6F 0061;	
    // (㱯) CJK UNIFIED IDEOGRAPH-3C6F	[FB80 BC6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_287)
{
    // 3C6F 0041;	
    // (㱯) CJK UNIFIED IDEOGRAPH-3C6F	[FB80 BC6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_288)
{
    // 3C6F 0062;	
    // (㱯) CJK UNIFIED IDEOGRAPH-3C6F	[FB80 BC6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_289)
{
    // 3C70 0021;	
    // (㱰) CJK UNIFIED IDEOGRAPH-3C70	[FB80 BC70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_290)
{
    // 3C70 003F;	
    // (㱰) CJK UNIFIED IDEOGRAPH-3C70	[FB80 BC70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_291)
{
    // 3C70 0061;	
    // (㱰) CJK UNIFIED IDEOGRAPH-3C70	[FB80 BC70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_292)
{
    // 3C70 0041;	
    // (㱰) CJK UNIFIED IDEOGRAPH-3C70	[FB80 BC70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_293)
{
    // 3C70 0062;	
    // (㱰) CJK UNIFIED IDEOGRAPH-3C70	[FB80 BC70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_294)
{
    // 3C71 0021;	
    // (㱱) CJK UNIFIED IDEOGRAPH-3C71	[FB80 BC71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_295)
{
    // 3C71 003F;	
    // (㱱) CJK UNIFIED IDEOGRAPH-3C71	[FB80 BC71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_296)
{
    // 3C71 0061;	
    // (㱱) CJK UNIFIED IDEOGRAPH-3C71	[FB80 BC71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_297)
{
    // 3C71 0041;	
    // (㱱) CJK UNIFIED IDEOGRAPH-3C71	[FB80 BC71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_298)
{
    // 3C71 0062;	
    // (㱱) CJK UNIFIED IDEOGRAPH-3C71	[FB80 BC71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_299)
{
    // 3C72 0021;	
    // (㱲) CJK UNIFIED IDEOGRAPH-3C72	[FB80 BC72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_300)
{
    // 3C72 003F;	
    // (㱲) CJK UNIFIED IDEOGRAPH-3C72	[FB80 BC72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_301)
{
    // 3C72 0061;	
    // (㱲) CJK UNIFIED IDEOGRAPH-3C72	[FB80 BC72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_302)
{
    // 3C72 0041;	
    // (㱲) CJK UNIFIED IDEOGRAPH-3C72	[FB80 BC72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_303)
{
    // 3C72 0062;	
    // (㱲) CJK UNIFIED IDEOGRAPH-3C72	[FB80 BC72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_304)
{
    // 3C73 0021;	
    // (㱳) CJK UNIFIED IDEOGRAPH-3C73	[FB80 BC73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_305)
{
    // 3C73 003F;	
    // (㱳) CJK UNIFIED IDEOGRAPH-3C73	[FB80 BC73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_306)
{
    // 3C73 0061;	
    // (㱳) CJK UNIFIED IDEOGRAPH-3C73	[FB80 BC73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_307)
{
    // 3C73 0041;	
    // (㱳) CJK UNIFIED IDEOGRAPH-3C73	[FB80 BC73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_308)
{
    // 3C73 0062;	
    // (㱳) CJK UNIFIED IDEOGRAPH-3C73	[FB80 BC73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_309)
{
    // 3C74 0021;	
    // (㱴) CJK UNIFIED IDEOGRAPH-3C74	[FB80 BC74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_310)
{
    // 3C74 003F;	
    // (㱴) CJK UNIFIED IDEOGRAPH-3C74	[FB80 BC74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_311)
{
    // 3C74 0061;	
    // (㱴) CJK UNIFIED IDEOGRAPH-3C74	[FB80 BC74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_312)
{
    // 3C74 0041;	
    // (㱴) CJK UNIFIED IDEOGRAPH-3C74	[FB80 BC74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_313)
{
    // 3C74 0062;	
    // (㱴) CJK UNIFIED IDEOGRAPH-3C74	[FB80 BC74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_314)
{
    // 3C75 0021;	
    // (㱵) CJK UNIFIED IDEOGRAPH-3C75	[FB80 BC75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_315)
{
    // 3C75 003F;	
    // (㱵) CJK UNIFIED IDEOGRAPH-3C75	[FB80 BC75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_316)
{
    // 3C75 0061;	
    // (㱵) CJK UNIFIED IDEOGRAPH-3C75	[FB80 BC75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_317)
{
    // 3C75 0041;	
    // (㱵) CJK UNIFIED IDEOGRAPH-3C75	[FB80 BC75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_318)
{
    // 3C75 0062;	
    // (㱵) CJK UNIFIED IDEOGRAPH-3C75	[FB80 BC75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_319)
{
    // 3C76 0021;	
    // (㱶) CJK UNIFIED IDEOGRAPH-3C76	[FB80 BC76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_320)
{
    // 3C76 003F;	
    // (㱶) CJK UNIFIED IDEOGRAPH-3C76	[FB80 BC76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_321)
{
    // 3C76 0061;	
    // (㱶) CJK UNIFIED IDEOGRAPH-3C76	[FB80 BC76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_322)
{
    // 3C76 0041;	
    // (㱶) CJK UNIFIED IDEOGRAPH-3C76	[FB80 BC76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_323)
{
    // 3C76 0062;	
    // (㱶) CJK UNIFIED IDEOGRAPH-3C76	[FB80 BC76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_324)
{
    // 3C77 0021;	
    // (㱷) CJK UNIFIED IDEOGRAPH-3C77	[FB80 BC77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_325)
{
    // 3C77 003F;	
    // (㱷) CJK UNIFIED IDEOGRAPH-3C77	[FB80 BC77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_326)
{
    // 3C77 0061;	
    // (㱷) CJK UNIFIED IDEOGRAPH-3C77	[FB80 BC77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_327)
{
    // 3C77 0041;	
    // (㱷) CJK UNIFIED IDEOGRAPH-3C77	[FB80 BC77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_328)
{
    // 3C77 0062;	
    // (㱷) CJK UNIFIED IDEOGRAPH-3C77	[FB80 BC77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_329)
{
    // 3C78 0021;	
    // (㱸) CJK UNIFIED IDEOGRAPH-3C78	[FB80 BC78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_330)
{
    // 3C78 003F;	
    // (㱸) CJK UNIFIED IDEOGRAPH-3C78	[FB80 BC78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_331)
{
    // 3C78 0061;	
    // (㱸) CJK UNIFIED IDEOGRAPH-3C78	[FB80 BC78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_332)
{
    // 3C78 0041;	
    // (㱸) CJK UNIFIED IDEOGRAPH-3C78	[FB80 BC78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_333)
{
    // 3C78 0062;	
    // (㱸) CJK UNIFIED IDEOGRAPH-3C78	[FB80 BC78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_334)
{
    // 3C79 0021;	
    // (㱹) CJK UNIFIED IDEOGRAPH-3C79	[FB80 BC79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_335)
{
    // 3C79 003F;	
    // (㱹) CJK UNIFIED IDEOGRAPH-3C79	[FB80 BC79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_336)
{
    // 3C79 0061;	
    // (㱹) CJK UNIFIED IDEOGRAPH-3C79	[FB80 BC79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_337)
{
    // 3C79 0041;	
    // (㱹) CJK UNIFIED IDEOGRAPH-3C79	[FB80 BC79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_338)
{
    // 3C79 0062;	
    // (㱹) CJK UNIFIED IDEOGRAPH-3C79	[FB80 BC79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_339)
{
    // 3C7A 0021;	
    // (㱺) CJK UNIFIED IDEOGRAPH-3C7A	[FB80 BC7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_340)
{
    // 3C7A 003F;	
    // (㱺) CJK UNIFIED IDEOGRAPH-3C7A	[FB80 BC7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_341)
{
    // 3C7A 0061;	
    // (㱺) CJK UNIFIED IDEOGRAPH-3C7A	[FB80 BC7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_342)
{
    // 3C7A 0041;	
    // (㱺) CJK UNIFIED IDEOGRAPH-3C7A	[FB80 BC7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_343)
{
    // 3C7A 0062;	
    // (㱺) CJK UNIFIED IDEOGRAPH-3C7A	[FB80 BC7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_344)
{
    // 3C7B 0021;	
    // (㱻) CJK UNIFIED IDEOGRAPH-3C7B	[FB80 BC7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_345)
{
    // 3C7B 003F;	
    // (㱻) CJK UNIFIED IDEOGRAPH-3C7B	[FB80 BC7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_346)
{
    // 3C7B 0061;	
    // (㱻) CJK UNIFIED IDEOGRAPH-3C7B	[FB80 BC7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_347)
{
    // 3C7B 0041;	
    // (㱻) CJK UNIFIED IDEOGRAPH-3C7B	[FB80 BC7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_348)
{
    // 3C7B 0062;	
    // (㱻) CJK UNIFIED IDEOGRAPH-3C7B	[FB80 BC7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_349)
{
    // 3C7C 0021;	
    // (㱼) CJK UNIFIED IDEOGRAPH-3C7C	[FB80 BC7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_350)
{
    // 3C7C 003F;	
    // (㱼) CJK UNIFIED IDEOGRAPH-3C7C	[FB80 BC7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_351)
{
    // 3C7C 0061;	
    // (㱼) CJK UNIFIED IDEOGRAPH-3C7C	[FB80 BC7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_352)
{
    // 3C7C 0041;	
    // (㱼) CJK UNIFIED IDEOGRAPH-3C7C	[FB80 BC7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_353)
{
    // 3C7C 0062;	
    // (㱼) CJK UNIFIED IDEOGRAPH-3C7C	[FB80 BC7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_354)
{
    // 3C7D 0021;	
    // (㱽) CJK UNIFIED IDEOGRAPH-3C7D	[FB80 BC7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_355)
{
    // 3C7D 003F;	
    // (㱽) CJK UNIFIED IDEOGRAPH-3C7D	[FB80 BC7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_356)
{
    // 3C7D 0061;	
    // (㱽) CJK UNIFIED IDEOGRAPH-3C7D	[FB80 BC7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_357)
{
    // 3C7D 0041;	
    // (㱽) CJK UNIFIED IDEOGRAPH-3C7D	[FB80 BC7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_358)
{
    // 3C7D 0062;	
    // (㱽) CJK UNIFIED IDEOGRAPH-3C7D	[FB80 BC7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_359)
{
    // 3C7E 0021;	
    // (㱾) CJK UNIFIED IDEOGRAPH-3C7E	[FB80 BC7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_360)
{
    // 3C7E 003F;	
    // (㱾) CJK UNIFIED IDEOGRAPH-3C7E	[FB80 BC7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_361)
{
    // 3C7E 0061;	
    // (㱾) CJK UNIFIED IDEOGRAPH-3C7E	[FB80 BC7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_362)
{
    // 3C7E 0041;	
    // (㱾) CJK UNIFIED IDEOGRAPH-3C7E	[FB80 BC7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_363)
{
    // 3C7E 0062;	
    // (㱾) CJK UNIFIED IDEOGRAPH-3C7E	[FB80 BC7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_364)
{
    // 3C7F 0021;	
    // (㱿) CJK UNIFIED IDEOGRAPH-3C7F	[FB80 BC7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_365)
{
    // 3C7F 003F;	
    // (㱿) CJK UNIFIED IDEOGRAPH-3C7F	[FB80 BC7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_366)
{
    // 3C7F 0061;	
    // (㱿) CJK UNIFIED IDEOGRAPH-3C7F	[FB80 BC7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_367)
{
    // 3C7F 0041;	
    // (㱿) CJK UNIFIED IDEOGRAPH-3C7F	[FB80 BC7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_368)
{
    // 3C7F 0062;	
    // (㱿) CJK UNIFIED IDEOGRAPH-3C7F	[FB80 BC7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_369)
{
    // 3C80 0021;	
    // (㲀) CJK UNIFIED IDEOGRAPH-3C80	[FB80 BC80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_370)
{
    // 3C80 003F;	
    // (㲀) CJK UNIFIED IDEOGRAPH-3C80	[FB80 BC80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_371)
{
    // 3C80 0061;	
    // (㲀) CJK UNIFIED IDEOGRAPH-3C80	[FB80 BC80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_372)
{
    // 3C80 0041;	
    // (㲀) CJK UNIFIED IDEOGRAPH-3C80	[FB80 BC80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_373)
{
    // 3C80 0062;	
    // (㲀) CJK UNIFIED IDEOGRAPH-3C80	[FB80 BC80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_374)
{
    // 3C81 0021;	
    // (㲁) CJK UNIFIED IDEOGRAPH-3C81	[FB80 BC81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_375)
{
    // 3C81 003F;	
    // (㲁) CJK UNIFIED IDEOGRAPH-3C81	[FB80 BC81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_376)
{
    // 3C81 0061;	
    // (㲁) CJK UNIFIED IDEOGRAPH-3C81	[FB80 BC81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_377)
{
    // 3C81 0041;	
    // (㲁) CJK UNIFIED IDEOGRAPH-3C81	[FB80 BC81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_378)
{
    // 3C81 0062;	
    // (㲁) CJK UNIFIED IDEOGRAPH-3C81	[FB80 BC81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_379)
{
    // 3C82 0021;	
    // (㲂) CJK UNIFIED IDEOGRAPH-3C82	[FB80 BC82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_380)
{
    // 3C82 003F;	
    // (㲂) CJK UNIFIED IDEOGRAPH-3C82	[FB80 BC82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_381)
{
    // 3C82 0061;	
    // (㲂) CJK UNIFIED IDEOGRAPH-3C82	[FB80 BC82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_382)
{
    // 3C82 0041;	
    // (㲂) CJK UNIFIED IDEOGRAPH-3C82	[FB80 BC82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_383)
{
    // 3C82 0062;	
    // (㲂) CJK UNIFIED IDEOGRAPH-3C82	[FB80 BC82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_384)
{
    // 3C83 0021;	
    // (㲃) CJK UNIFIED IDEOGRAPH-3C83	[FB80 BC83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_385)
{
    // 3C83 003F;	
    // (㲃) CJK UNIFIED IDEOGRAPH-3C83	[FB80 BC83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_386)
{
    // 3C83 0061;	
    // (㲃) CJK UNIFIED IDEOGRAPH-3C83	[FB80 BC83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_387)
{
    // 3C83 0041;	
    // (㲃) CJK UNIFIED IDEOGRAPH-3C83	[FB80 BC83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_388)
{
    // 3C83 0062;	
    // (㲃) CJK UNIFIED IDEOGRAPH-3C83	[FB80 BC83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_389)
{
    // 3C84 0021;	
    // (㲄) CJK UNIFIED IDEOGRAPH-3C84	[FB80 BC84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_390)
{
    // 3C84 003F;	
    // (㲄) CJK UNIFIED IDEOGRAPH-3C84	[FB80 BC84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_391)
{
    // 3C84 0061;	
    // (㲄) CJK UNIFIED IDEOGRAPH-3C84	[FB80 BC84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_392)
{
    // 3C84 0041;	
    // (㲄) CJK UNIFIED IDEOGRAPH-3C84	[FB80 BC84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_393)
{
    // 3C84 0062;	
    // (㲄) CJK UNIFIED IDEOGRAPH-3C84	[FB80 BC84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_394)
{
    // 3C85 0021;	
    // (㲅) CJK UNIFIED IDEOGRAPH-3C85	[FB80 BC85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_395)
{
    // 3C85 003F;	
    // (㲅) CJK UNIFIED IDEOGRAPH-3C85	[FB80 BC85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_396)
{
    // 3C85 0061;	
    // (㲅) CJK UNIFIED IDEOGRAPH-3C85	[FB80 BC85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_397)
{
    // 3C85 0041;	
    // (㲅) CJK UNIFIED IDEOGRAPH-3C85	[FB80 BC85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_398)
{
    // 3C85 0062;	
    // (㲅) CJK UNIFIED IDEOGRAPH-3C85	[FB80 BC85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_399)
{
    // 3C86 0021;	
    // (㲆) CJK UNIFIED IDEOGRAPH-3C86	[FB80 BC86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_400)
{
    // 3C86 003F;	
    // (㲆) CJK UNIFIED IDEOGRAPH-3C86	[FB80 BC86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_401)
{
    // 3C86 0061;	
    // (㲆) CJK UNIFIED IDEOGRAPH-3C86	[FB80 BC86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_402)
{
    // 3C86 0041;	
    // (㲆) CJK UNIFIED IDEOGRAPH-3C86	[FB80 BC86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_403)
{
    // 3C86 0062;	
    // (㲆) CJK UNIFIED IDEOGRAPH-3C86	[FB80 BC86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_404)
{
    // 3C87 0021;	
    // (㲇) CJK UNIFIED IDEOGRAPH-3C87	[FB80 BC87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_405)
{
    // 3C87 003F;	
    // (㲇) CJK UNIFIED IDEOGRAPH-3C87	[FB80 BC87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_406)
{
    // 3C87 0061;	
    // (㲇) CJK UNIFIED IDEOGRAPH-3C87	[FB80 BC87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_407)
{
    // 3C87 0041;	
    // (㲇) CJK UNIFIED IDEOGRAPH-3C87	[FB80 BC87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_408)
{
    // 3C87 0062;	
    // (㲇) CJK UNIFIED IDEOGRAPH-3C87	[FB80 BC87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_409)
{
    // 3C88 0021;	
    // (㲈) CJK UNIFIED IDEOGRAPH-3C88	[FB80 BC88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_410)
{
    // 3C88 003F;	
    // (㲈) CJK UNIFIED IDEOGRAPH-3C88	[FB80 BC88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_411)
{
    // 3C88 0061;	
    // (㲈) CJK UNIFIED IDEOGRAPH-3C88	[FB80 BC88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_412)
{
    // 3C88 0041;	
    // (㲈) CJK UNIFIED IDEOGRAPH-3C88	[FB80 BC88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_413)
{
    // 3C88 0062;	
    // (㲈) CJK UNIFIED IDEOGRAPH-3C88	[FB80 BC88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_414)
{
    // 3C89 0021;	
    // (㲉) CJK UNIFIED IDEOGRAPH-3C89	[FB80 BC89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_415)
{
    // 3C89 003F;	
    // (㲉) CJK UNIFIED IDEOGRAPH-3C89	[FB80 BC89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_416)
{
    // 3C89 0061;	
    // (㲉) CJK UNIFIED IDEOGRAPH-3C89	[FB80 BC89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_417)
{
    // 3C89 0041;	
    // (㲉) CJK UNIFIED IDEOGRAPH-3C89	[FB80 BC89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_418)
{
    // 3C89 0062;	
    // (㲉) CJK UNIFIED IDEOGRAPH-3C89	[FB80 BC89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_419)
{
    // 3C8A 0021;	
    // (㲊) CJK UNIFIED IDEOGRAPH-3C8A	[FB80 BC8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_420)
{
    // 3C8A 003F;	
    // (㲊) CJK UNIFIED IDEOGRAPH-3C8A	[FB80 BC8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_421)
{
    // 3C8A 0061;	
    // (㲊) CJK UNIFIED IDEOGRAPH-3C8A	[FB80 BC8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_422)
{
    // 3C8A 0041;	
    // (㲊) CJK UNIFIED IDEOGRAPH-3C8A	[FB80 BC8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_423)
{
    // 3C8A 0062;	
    // (㲊) CJK UNIFIED IDEOGRAPH-3C8A	[FB80 BC8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_424)
{
    // 3C8B 0021;	
    // (㲋) CJK UNIFIED IDEOGRAPH-3C8B	[FB80 BC8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_425)
{
    // 3C8B 003F;	
    // (㲋) CJK UNIFIED IDEOGRAPH-3C8B	[FB80 BC8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_426)
{
    // 3C8B 0061;	
    // (㲋) CJK UNIFIED IDEOGRAPH-3C8B	[FB80 BC8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_427)
{
    // 3C8B 0041;	
    // (㲋) CJK UNIFIED IDEOGRAPH-3C8B	[FB80 BC8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_428)
{
    // 3C8B 0062;	
    // (㲋) CJK UNIFIED IDEOGRAPH-3C8B	[FB80 BC8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_429)
{
    // 3C8C 0021;	
    // (㲌) CJK UNIFIED IDEOGRAPH-3C8C	[FB80 BC8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_430)
{
    // 3C8C 003F;	
    // (㲌) CJK UNIFIED IDEOGRAPH-3C8C	[FB80 BC8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_431)
{
    // 3C8C 0061;	
    // (㲌) CJK UNIFIED IDEOGRAPH-3C8C	[FB80 BC8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_432)
{
    // 3C8C 0041;	
    // (㲌) CJK UNIFIED IDEOGRAPH-3C8C	[FB80 BC8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_433)
{
    // 3C8C 0062;	
    // (㲌) CJK UNIFIED IDEOGRAPH-3C8C	[FB80 BC8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_434)
{
    // 3C8D 0021;	
    // (㲍) CJK UNIFIED IDEOGRAPH-3C8D	[FB80 BC8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_435)
{
    // 3C8D 003F;	
    // (㲍) CJK UNIFIED IDEOGRAPH-3C8D	[FB80 BC8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_436)
{
    // 3C8D 0061;	
    // (㲍) CJK UNIFIED IDEOGRAPH-3C8D	[FB80 BC8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_437)
{
    // 3C8D 0041;	
    // (㲍) CJK UNIFIED IDEOGRAPH-3C8D	[FB80 BC8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_438)
{
    // 3C8D 0062;	
    // (㲍) CJK UNIFIED IDEOGRAPH-3C8D	[FB80 BC8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_439)
{
    // 3C8E 0021;	
    // (㲎) CJK UNIFIED IDEOGRAPH-3C8E	[FB80 BC8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_440)
{
    // 3C8E 003F;	
    // (㲎) CJK UNIFIED IDEOGRAPH-3C8E	[FB80 BC8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_441)
{
    // 3C8E 0061;	
    // (㲎) CJK UNIFIED IDEOGRAPH-3C8E	[FB80 BC8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_442)
{
    // 3C8E 0041;	
    // (㲎) CJK UNIFIED IDEOGRAPH-3C8E	[FB80 BC8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_443)
{
    // 3C8E 0062;	
    // (㲎) CJK UNIFIED IDEOGRAPH-3C8E	[FB80 BC8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_444)
{
    // 3C8F 0021;	
    // (㲏) CJK UNIFIED IDEOGRAPH-3C8F	[FB80 BC8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_445)
{
    // 3C8F 003F;	
    // (㲏) CJK UNIFIED IDEOGRAPH-3C8F	[FB80 BC8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_446)
{
    // 3C8F 0061;	
    // (㲏) CJK UNIFIED IDEOGRAPH-3C8F	[FB80 BC8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_447)
{
    // 3C8F 0041;	
    // (㲏) CJK UNIFIED IDEOGRAPH-3C8F	[FB80 BC8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_448)
{
    // 3C8F 0062;	
    // (㲏) CJK UNIFIED IDEOGRAPH-3C8F	[FB80 BC8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_449)
{
    // 3C90 0021;	
    // (㲐) CJK UNIFIED IDEOGRAPH-3C90	[FB80 BC90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_450)
{
    // 3C90 003F;	
    // (㲐) CJK UNIFIED IDEOGRAPH-3C90	[FB80 BC90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_451)
{
    // 3C90 0061;	
    // (㲐) CJK UNIFIED IDEOGRAPH-3C90	[FB80 BC90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_452)
{
    // 3C90 0041;	
    // (㲐) CJK UNIFIED IDEOGRAPH-3C90	[FB80 BC90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_453)
{
    // 3C90 0062;	
    // (㲐) CJK UNIFIED IDEOGRAPH-3C90	[FB80 BC90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_454)
{
    // 3C91 0021;	
    // (㲑) CJK UNIFIED IDEOGRAPH-3C91	[FB80 BC91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_455)
{
    // 3C91 003F;	
    // (㲑) CJK UNIFIED IDEOGRAPH-3C91	[FB80 BC91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_456)
{
    // 3C91 0061;	
    // (㲑) CJK UNIFIED IDEOGRAPH-3C91	[FB80 BC91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_457)
{
    // 3C91 0041;	
    // (㲑) CJK UNIFIED IDEOGRAPH-3C91	[FB80 BC91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_458)
{
    // 3C91 0062;	
    // (㲑) CJK UNIFIED IDEOGRAPH-3C91	[FB80 BC91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_459)
{
    // 3C92 0021;	
    // (㲒) CJK UNIFIED IDEOGRAPH-3C92	[FB80 BC92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_460)
{
    // 3C92 003F;	
    // (㲒) CJK UNIFIED IDEOGRAPH-3C92	[FB80 BC92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_461)
{
    // 3C92 0061;	
    // (㲒) CJK UNIFIED IDEOGRAPH-3C92	[FB80 BC92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_462)
{
    // 3C92 0041;	
    // (㲒) CJK UNIFIED IDEOGRAPH-3C92	[FB80 BC92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_463)
{
    // 3C92 0062;	
    // (㲒) CJK UNIFIED IDEOGRAPH-3C92	[FB80 BC92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_464)
{
    // 3C93 0021;	
    // (㲓) CJK UNIFIED IDEOGRAPH-3C93	[FB80 BC93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_465)
{
    // 3C93 003F;	
    // (㲓) CJK UNIFIED IDEOGRAPH-3C93	[FB80 BC93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_466)
{
    // 3C93 0061;	
    // (㲓) CJK UNIFIED IDEOGRAPH-3C93	[FB80 BC93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_467)
{
    // 3C93 0041;	
    // (㲓) CJK UNIFIED IDEOGRAPH-3C93	[FB80 BC93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_468)
{
    // 3C93 0062;	
    // (㲓) CJK UNIFIED IDEOGRAPH-3C93	[FB80 BC93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_469)
{
    // 3C94 0021;	
    // (㲔) CJK UNIFIED IDEOGRAPH-3C94	[FB80 BC94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_470)
{
    // 3C94 003F;	
    // (㲔) CJK UNIFIED IDEOGRAPH-3C94	[FB80 BC94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_471)
{
    // 3C94 0061;	
    // (㲔) CJK UNIFIED IDEOGRAPH-3C94	[FB80 BC94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_472)
{
    // 3C94 0041;	
    // (㲔) CJK UNIFIED IDEOGRAPH-3C94	[FB80 BC94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_473)
{
    // 3C94 0062;	
    // (㲔) CJK UNIFIED IDEOGRAPH-3C94	[FB80 BC94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_474)
{
    // 3C95 0021;	
    // (㲕) CJK UNIFIED IDEOGRAPH-3C95	[FB80 BC95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_475)
{
    // 3C95 003F;	
    // (㲕) CJK UNIFIED IDEOGRAPH-3C95	[FB80 BC95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_476)
{
    // 3C95 0061;	
    // (㲕) CJK UNIFIED IDEOGRAPH-3C95	[FB80 BC95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_477)
{
    // 3C95 0041;	
    // (㲕) CJK UNIFIED IDEOGRAPH-3C95	[FB80 BC95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_478)
{
    // 3C95 0062;	
    // (㲕) CJK UNIFIED IDEOGRAPH-3C95	[FB80 BC95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_479)
{
    // 3C96 0021;	
    // (㲖) CJK UNIFIED IDEOGRAPH-3C96	[FB80 BC96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_480)
{
    // 3C96 003F;	
    // (㲖) CJK UNIFIED IDEOGRAPH-3C96	[FB80 BC96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_481)
{
    // 3C96 0061;	
    // (㲖) CJK UNIFIED IDEOGRAPH-3C96	[FB80 BC96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_482)
{
    // 3C96 0041;	
    // (㲖) CJK UNIFIED IDEOGRAPH-3C96	[FB80 BC96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_483)
{
    // 3C96 0062;	
    // (㲖) CJK UNIFIED IDEOGRAPH-3C96	[FB80 BC96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_484)
{
    // 3C97 0021;	
    // (㲗) CJK UNIFIED IDEOGRAPH-3C97	[FB80 BC97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_485)
{
    // 3C97 003F;	
    // (㲗) CJK UNIFIED IDEOGRAPH-3C97	[FB80 BC97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_486)
{
    // 3C97 0061;	
    // (㲗) CJK UNIFIED IDEOGRAPH-3C97	[FB80 BC97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_487)
{
    // 3C97 0041;	
    // (㲗) CJK UNIFIED IDEOGRAPH-3C97	[FB80 BC97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_488)
{
    // 3C97 0062;	
    // (㲗) CJK UNIFIED IDEOGRAPH-3C97	[FB80 BC97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_489)
{
    // 3C98 0021;	
    // (㲘) CJK UNIFIED IDEOGRAPH-3C98	[FB80 BC98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_490)
{
    // 3C98 003F;	
    // (㲘) CJK UNIFIED IDEOGRAPH-3C98	[FB80 BC98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_491)
{
    // 3C98 0061;	
    // (㲘) CJK UNIFIED IDEOGRAPH-3C98	[FB80 BC98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_492)
{
    // 3C98 0041;	
    // (㲘) CJK UNIFIED IDEOGRAPH-3C98	[FB80 BC98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_493)
{
    // 3C98 0062;	
    // (㲘) CJK UNIFIED IDEOGRAPH-3C98	[FB80 BC98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_494)
{
    // 3C99 0021;	
    // (㲙) CJK UNIFIED IDEOGRAPH-3C99	[FB80 BC99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_495)
{
    // 3C99 003F;	
    // (㲙) CJK UNIFIED IDEOGRAPH-3C99	[FB80 BC99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBC99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_496)
{
    // 3C99 0061;	
    // (㲙) CJK UNIFIED IDEOGRAPH-3C99	[FB80 BC99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBC99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_497)
{
    // 3C99 0041;	
    // (㲙) CJK UNIFIED IDEOGRAPH-3C99	[FB80 BC99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3C99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBC99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_498)
{
    // 3C99 0062;	
    // (㲙) CJK UNIFIED IDEOGRAPH-3C99	[FB80 BC99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBC99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_348_499)
{
    // 3C9A 0021;	
    // (㲚) CJK UNIFIED IDEOGRAPH-3C9A	[FB80 BC9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3C9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBC9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

