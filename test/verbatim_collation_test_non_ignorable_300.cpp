// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_300_000)
{
    // 13159 003F;	
    // (𓅙) EGYPTIAN HIEROGLYPH G022	[51A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13159, 0x003F };
    uint32_t const ces[9] = { 0x51A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_001)
{
    // 13159 0061;	
    // (𓅙) EGYPTIAN HIEROGLYPH G022	[51A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13159, 0x0061 };
    uint32_t const ces[9] = { 0x51A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_002)
{
    // 13159 0041;	
    // (𓅙) EGYPTIAN HIEROGLYPH G022	[51A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13159, 0x0041 };
    uint32_t const ces[9] = { 0x51A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_003)
{
    // 13159 0062;	
    // (𓅙) EGYPTIAN HIEROGLYPH G022	[51A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13159, 0x0062 };
    uint32_t const ces[9] = { 0x51A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_004)
{
    // 1315A 0021;	
    // (𓅚) EGYPTIAN HIEROGLYPH G023	[51A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315A, 0x0021 };
    uint32_t const ces[9] = { 0x51A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_005)
{
    // 1315A 003F;	
    // (𓅚) EGYPTIAN HIEROGLYPH G023	[51A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315A, 0x003F };
    uint32_t const ces[9] = { 0x51A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_006)
{
    // 1315A 0061;	
    // (𓅚) EGYPTIAN HIEROGLYPH G023	[51A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315A, 0x0061 };
    uint32_t const ces[9] = { 0x51A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_007)
{
    // 1315A 0041;	
    // (𓅚) EGYPTIAN HIEROGLYPH G023	[51A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1315A, 0x0041 };
    uint32_t const ces[9] = { 0x51A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_008)
{
    // 1315A 0062;	
    // (𓅚) EGYPTIAN HIEROGLYPH G023	[51A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315A, 0x0062 };
    uint32_t const ces[9] = { 0x51A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_009)
{
    // 1315B 0021;	
    // (𓅛) EGYPTIAN HIEROGLYPH G024	[51A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315B, 0x0021 };
    uint32_t const ces[9] = { 0x51A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_010)
{
    // 1315B 003F;	
    // (𓅛) EGYPTIAN HIEROGLYPH G024	[51A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315B, 0x003F };
    uint32_t const ces[9] = { 0x51A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_011)
{
    // 1315B 0061;	
    // (𓅛) EGYPTIAN HIEROGLYPH G024	[51A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315B, 0x0061 };
    uint32_t const ces[9] = { 0x51A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_012)
{
    // 1315B 0041;	
    // (𓅛) EGYPTIAN HIEROGLYPH G024	[51A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1315B, 0x0041 };
    uint32_t const ces[9] = { 0x51A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_013)
{
    // 1315B 0062;	
    // (𓅛) EGYPTIAN HIEROGLYPH G024	[51A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315B, 0x0062 };
    uint32_t const ces[9] = { 0x51A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_014)
{
    // 1315C 0021;	
    // (𓅜) EGYPTIAN HIEROGLYPH G025	[51A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315C, 0x0021 };
    uint32_t const ces[9] = { 0x51A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_015)
{
    // 1315C 003F;	
    // (𓅜) EGYPTIAN HIEROGLYPH G025	[51A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315C, 0x003F };
    uint32_t const ces[9] = { 0x51A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_016)
{
    // 1315C 0061;	
    // (𓅜) EGYPTIAN HIEROGLYPH G025	[51A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315C, 0x0061 };
    uint32_t const ces[9] = { 0x51A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_017)
{
    // 1315C 0041;	
    // (𓅜) EGYPTIAN HIEROGLYPH G025	[51A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1315C, 0x0041 };
    uint32_t const ces[9] = { 0x51A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_018)
{
    // 1315C 0062;	
    // (𓅜) EGYPTIAN HIEROGLYPH G025	[51A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315C, 0x0062 };
    uint32_t const ces[9] = { 0x51A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_019)
{
    // 1315D 0021;	
    // (𓅝) EGYPTIAN HIEROGLYPH G026	[51A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315D, 0x0021 };
    uint32_t const ces[9] = { 0x51A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_020)
{
    // 1315D 003F;	
    // (𓅝) EGYPTIAN HIEROGLYPH G026	[51A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315D, 0x003F };
    uint32_t const ces[9] = { 0x51A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_021)
{
    // 1315D 0061;	
    // (𓅝) EGYPTIAN HIEROGLYPH G026	[51A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315D, 0x0061 };
    uint32_t const ces[9] = { 0x51A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_022)
{
    // 1315D 0041;	
    // (𓅝) EGYPTIAN HIEROGLYPH G026	[51A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1315D, 0x0041 };
    uint32_t const ces[9] = { 0x51A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_023)
{
    // 1315D 0062;	
    // (𓅝) EGYPTIAN HIEROGLYPH G026	[51A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315D, 0x0062 };
    uint32_t const ces[9] = { 0x51A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_024)
{
    // 1315E 0021;	
    // (𓅞) EGYPTIAN HIEROGLYPH G026A	[51A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315E, 0x0021 };
    uint32_t const ces[9] = { 0x51A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_025)
{
    // 1315E 003F;	
    // (𓅞) EGYPTIAN HIEROGLYPH G026A	[51A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315E, 0x003F };
    uint32_t const ces[9] = { 0x51A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_026)
{
    // 1315E 0061;	
    // (𓅞) EGYPTIAN HIEROGLYPH G026A	[51A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315E, 0x0061 };
    uint32_t const ces[9] = { 0x51A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_027)
{
    // 1315E 0041;	
    // (𓅞) EGYPTIAN HIEROGLYPH G026A	[51A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1315E, 0x0041 };
    uint32_t const ces[9] = { 0x51A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_028)
{
    // 1315E 0062;	
    // (𓅞) EGYPTIAN HIEROGLYPH G026A	[51A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315E, 0x0062 };
    uint32_t const ces[9] = { 0x51A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_029)
{
    // 1315F 0021;	
    // (𓅟) EGYPTIAN HIEROGLYPH G027	[51A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315F, 0x0021 };
    uint32_t const ces[9] = { 0x51A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_030)
{
    // 1315F 003F;	
    // (𓅟) EGYPTIAN HIEROGLYPH G027	[51A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315F, 0x003F };
    uint32_t const ces[9] = { 0x51A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_031)
{
    // 1315F 0061;	
    // (𓅟) EGYPTIAN HIEROGLYPH G027	[51A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315F, 0x0061 };
    uint32_t const ces[9] = { 0x51A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_032)
{
    // 1315F 0041;	
    // (𓅟) EGYPTIAN HIEROGLYPH G027	[51A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1315F, 0x0041 };
    uint32_t const ces[9] = { 0x51A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_033)
{
    // 1315F 0062;	
    // (𓅟) EGYPTIAN HIEROGLYPH G027	[51A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1315F, 0x0062 };
    uint32_t const ces[9] = { 0x51A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_034)
{
    // 13160 0021;	
    // (𓅠) EGYPTIAN HIEROGLYPH G028	[51AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13160, 0x0021 };
    uint32_t const ces[9] = { 0x51AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_035)
{
    // 13160 003F;	
    // (𓅠) EGYPTIAN HIEROGLYPH G028	[51AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13160, 0x003F };
    uint32_t const ces[9] = { 0x51AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_036)
{
    // 13160 0061;	
    // (𓅠) EGYPTIAN HIEROGLYPH G028	[51AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13160, 0x0061 };
    uint32_t const ces[9] = { 0x51AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_037)
{
    // 13160 0041;	
    // (𓅠) EGYPTIAN HIEROGLYPH G028	[51AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13160, 0x0041 };
    uint32_t const ces[9] = { 0x51AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_038)
{
    // 13160 0062;	
    // (𓅠) EGYPTIAN HIEROGLYPH G028	[51AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13160, 0x0062 };
    uint32_t const ces[9] = { 0x51AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_039)
{
    // 13161 0021;	
    // (𓅡) EGYPTIAN HIEROGLYPH G029	[51AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13161, 0x0021 };
    uint32_t const ces[9] = { 0x51AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_040)
{
    // 13161 003F;	
    // (𓅡) EGYPTIAN HIEROGLYPH G029	[51AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13161, 0x003F };
    uint32_t const ces[9] = { 0x51AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_041)
{
    // 13161 0061;	
    // (𓅡) EGYPTIAN HIEROGLYPH G029	[51AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13161, 0x0061 };
    uint32_t const ces[9] = { 0x51AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_042)
{
    // 13161 0041;	
    // (𓅡) EGYPTIAN HIEROGLYPH G029	[51AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13161, 0x0041 };
    uint32_t const ces[9] = { 0x51AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_043)
{
    // 13161 0062;	
    // (𓅡) EGYPTIAN HIEROGLYPH G029	[51AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13161, 0x0062 };
    uint32_t const ces[9] = { 0x51AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_044)
{
    // 13162 0021;	
    // (𓅢) EGYPTIAN HIEROGLYPH G030	[51AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13162, 0x0021 };
    uint32_t const ces[9] = { 0x51AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_045)
{
    // 13162 003F;	
    // (𓅢) EGYPTIAN HIEROGLYPH G030	[51AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13162, 0x003F };
    uint32_t const ces[9] = { 0x51AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_046)
{
    // 13162 0061;	
    // (𓅢) EGYPTIAN HIEROGLYPH G030	[51AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13162, 0x0061 };
    uint32_t const ces[9] = { 0x51AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_047)
{
    // 13162 0041;	
    // (𓅢) EGYPTIAN HIEROGLYPH G030	[51AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13162, 0x0041 };
    uint32_t const ces[9] = { 0x51AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_048)
{
    // 13162 0062;	
    // (𓅢) EGYPTIAN HIEROGLYPH G030	[51AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13162, 0x0062 };
    uint32_t const ces[9] = { 0x51AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_049)
{
    // 13163 0021;	
    // (𓅣) EGYPTIAN HIEROGLYPH G031	[51AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13163, 0x0021 };
    uint32_t const ces[9] = { 0x51AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_050)
{
    // 13163 003F;	
    // (𓅣) EGYPTIAN HIEROGLYPH G031	[51AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13163, 0x003F };
    uint32_t const ces[9] = { 0x51AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_051)
{
    // 13163 0061;	
    // (𓅣) EGYPTIAN HIEROGLYPH G031	[51AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13163, 0x0061 };
    uint32_t const ces[9] = { 0x51AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_052)
{
    // 13163 0041;	
    // (𓅣) EGYPTIAN HIEROGLYPH G031	[51AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13163, 0x0041 };
    uint32_t const ces[9] = { 0x51AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_053)
{
    // 13163 0062;	
    // (𓅣) EGYPTIAN HIEROGLYPH G031	[51AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13163, 0x0062 };
    uint32_t const ces[9] = { 0x51AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_054)
{
    // 13164 0021;	
    // (𓅤) EGYPTIAN HIEROGLYPH G032	[51AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13164, 0x0021 };
    uint32_t const ces[9] = { 0x51AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_055)
{
    // 13164 003F;	
    // (𓅤) EGYPTIAN HIEROGLYPH G032	[51AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13164, 0x003F };
    uint32_t const ces[9] = { 0x51AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_056)
{
    // 13164 0061;	
    // (𓅤) EGYPTIAN HIEROGLYPH G032	[51AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13164, 0x0061 };
    uint32_t const ces[9] = { 0x51AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_057)
{
    // 13164 0041;	
    // (𓅤) EGYPTIAN HIEROGLYPH G032	[51AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13164, 0x0041 };
    uint32_t const ces[9] = { 0x51AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_058)
{
    // 13164 0062;	
    // (𓅤) EGYPTIAN HIEROGLYPH G032	[51AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13164, 0x0062 };
    uint32_t const ces[9] = { 0x51AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_059)
{
    // 13165 0021;	
    // (𓅥) EGYPTIAN HIEROGLYPH G033	[51AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13165, 0x0021 };
    uint32_t const ces[9] = { 0x51AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_060)
{
    // 13165 003F;	
    // (𓅥) EGYPTIAN HIEROGLYPH G033	[51AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13165, 0x003F };
    uint32_t const ces[9] = { 0x51AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_061)
{
    // 13165 0061;	
    // (𓅥) EGYPTIAN HIEROGLYPH G033	[51AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13165, 0x0061 };
    uint32_t const ces[9] = { 0x51AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_062)
{
    // 13165 0041;	
    // (𓅥) EGYPTIAN HIEROGLYPH G033	[51AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13165, 0x0041 };
    uint32_t const ces[9] = { 0x51AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_063)
{
    // 13165 0062;	
    // (𓅥) EGYPTIAN HIEROGLYPH G033	[51AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13165, 0x0062 };
    uint32_t const ces[9] = { 0x51AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_064)
{
    // 13166 0021;	
    // (𓅦) EGYPTIAN HIEROGLYPH G034	[51B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13166, 0x0021 };
    uint32_t const ces[9] = { 0x51B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_065)
{
    // 13166 003F;	
    // (𓅦) EGYPTIAN HIEROGLYPH G034	[51B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13166, 0x003F };
    uint32_t const ces[9] = { 0x51B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_066)
{
    // 13166 0061;	
    // (𓅦) EGYPTIAN HIEROGLYPH G034	[51B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13166, 0x0061 };
    uint32_t const ces[9] = { 0x51B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_067)
{
    // 13166 0041;	
    // (𓅦) EGYPTIAN HIEROGLYPH G034	[51B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13166, 0x0041 };
    uint32_t const ces[9] = { 0x51B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_068)
{
    // 13166 0062;	
    // (𓅦) EGYPTIAN HIEROGLYPH G034	[51B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13166, 0x0062 };
    uint32_t const ces[9] = { 0x51B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_069)
{
    // 13167 0021;	
    // (𓅧) EGYPTIAN HIEROGLYPH G035	[51B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13167, 0x0021 };
    uint32_t const ces[9] = { 0x51B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_070)
{
    // 13167 003F;	
    // (𓅧) EGYPTIAN HIEROGLYPH G035	[51B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13167, 0x003F };
    uint32_t const ces[9] = { 0x51B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_071)
{
    // 13167 0061;	
    // (𓅧) EGYPTIAN HIEROGLYPH G035	[51B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13167, 0x0061 };
    uint32_t const ces[9] = { 0x51B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_072)
{
    // 13167 0041;	
    // (𓅧) EGYPTIAN HIEROGLYPH G035	[51B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13167, 0x0041 };
    uint32_t const ces[9] = { 0x51B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_073)
{
    // 13167 0062;	
    // (𓅧) EGYPTIAN HIEROGLYPH G035	[51B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13167, 0x0062 };
    uint32_t const ces[9] = { 0x51B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_074)
{
    // 13168 0021;	
    // (𓅨) EGYPTIAN HIEROGLYPH G036	[51B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13168, 0x0021 };
    uint32_t const ces[9] = { 0x51B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_075)
{
    // 13168 003F;	
    // (𓅨) EGYPTIAN HIEROGLYPH G036	[51B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13168, 0x003F };
    uint32_t const ces[9] = { 0x51B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_076)
{
    // 13168 0061;	
    // (𓅨) EGYPTIAN HIEROGLYPH G036	[51B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13168, 0x0061 };
    uint32_t const ces[9] = { 0x51B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_077)
{
    // 13168 0041;	
    // (𓅨) EGYPTIAN HIEROGLYPH G036	[51B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13168, 0x0041 };
    uint32_t const ces[9] = { 0x51B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_078)
{
    // 13168 0062;	
    // (𓅨) EGYPTIAN HIEROGLYPH G036	[51B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13168, 0x0062 };
    uint32_t const ces[9] = { 0x51B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_079)
{
    // 13169 0021;	
    // (𓅩) EGYPTIAN HIEROGLYPH G036A	[51B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13169, 0x0021 };
    uint32_t const ces[9] = { 0x51B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_080)
{
    // 13169 003F;	
    // (𓅩) EGYPTIAN HIEROGLYPH G036A	[51B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13169, 0x003F };
    uint32_t const ces[9] = { 0x51B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_081)
{
    // 13169 0061;	
    // (𓅩) EGYPTIAN HIEROGLYPH G036A	[51B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13169, 0x0061 };
    uint32_t const ces[9] = { 0x51B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_082)
{
    // 13169 0041;	
    // (𓅩) EGYPTIAN HIEROGLYPH G036A	[51B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13169, 0x0041 };
    uint32_t const ces[9] = { 0x51B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_083)
{
    // 13169 0062;	
    // (𓅩) EGYPTIAN HIEROGLYPH G036A	[51B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13169, 0x0062 };
    uint32_t const ces[9] = { 0x51B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_084)
{
    // 1316A 0021;	
    // (𓅪) EGYPTIAN HIEROGLYPH G037	[51B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316A, 0x0021 };
    uint32_t const ces[9] = { 0x51B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_085)
{
    // 1316A 003F;	
    // (𓅪) EGYPTIAN HIEROGLYPH G037	[51B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316A, 0x003F };
    uint32_t const ces[9] = { 0x51B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_086)
{
    // 1316A 0061;	
    // (𓅪) EGYPTIAN HIEROGLYPH G037	[51B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316A, 0x0061 };
    uint32_t const ces[9] = { 0x51B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_087)
{
    // 1316A 0041;	
    // (𓅪) EGYPTIAN HIEROGLYPH G037	[51B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1316A, 0x0041 };
    uint32_t const ces[9] = { 0x51B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_088)
{
    // 1316A 0062;	
    // (𓅪) EGYPTIAN HIEROGLYPH G037	[51B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316A, 0x0062 };
    uint32_t const ces[9] = { 0x51B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_089)
{
    // 1316B 0021;	
    // (𓅫) EGYPTIAN HIEROGLYPH G037A	[51B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316B, 0x0021 };
    uint32_t const ces[9] = { 0x51B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_090)
{
    // 1316B 003F;	
    // (𓅫) EGYPTIAN HIEROGLYPH G037A	[51B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316B, 0x003F };
    uint32_t const ces[9] = { 0x51B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_091)
{
    // 1316B 0061;	
    // (𓅫) EGYPTIAN HIEROGLYPH G037A	[51B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316B, 0x0061 };
    uint32_t const ces[9] = { 0x51B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_092)
{
    // 1316B 0041;	
    // (𓅫) EGYPTIAN HIEROGLYPH G037A	[51B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1316B, 0x0041 };
    uint32_t const ces[9] = { 0x51B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_093)
{
    // 1316B 0062;	
    // (𓅫) EGYPTIAN HIEROGLYPH G037A	[51B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316B, 0x0062 };
    uint32_t const ces[9] = { 0x51B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_094)
{
    // 1316C 0021;	
    // (𓅬) EGYPTIAN HIEROGLYPH G038	[51B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316C, 0x0021 };
    uint32_t const ces[9] = { 0x51B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_095)
{
    // 1316C 003F;	
    // (𓅬) EGYPTIAN HIEROGLYPH G038	[51B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316C, 0x003F };
    uint32_t const ces[9] = { 0x51B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_096)
{
    // 1316C 0061;	
    // (𓅬) EGYPTIAN HIEROGLYPH G038	[51B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316C, 0x0061 };
    uint32_t const ces[9] = { 0x51B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_097)
{
    // 1316C 0041;	
    // (𓅬) EGYPTIAN HIEROGLYPH G038	[51B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1316C, 0x0041 };
    uint32_t const ces[9] = { 0x51B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_098)
{
    // 1316C 0062;	
    // (𓅬) EGYPTIAN HIEROGLYPH G038	[51B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316C, 0x0062 };
    uint32_t const ces[9] = { 0x51B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_099)
{
    // 1316D 0021;	
    // (𓅭) EGYPTIAN HIEROGLYPH G039	[51B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316D, 0x0021 };
    uint32_t const ces[9] = { 0x51B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_100)
{
    // 1316D 003F;	
    // (𓅭) EGYPTIAN HIEROGLYPH G039	[51B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316D, 0x003F };
    uint32_t const ces[9] = { 0x51B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_101)
{
    // 1316D 0061;	
    // (𓅭) EGYPTIAN HIEROGLYPH G039	[51B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316D, 0x0061 };
    uint32_t const ces[9] = { 0x51B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_102)
{
    // 1316D 0041;	
    // (𓅭) EGYPTIAN HIEROGLYPH G039	[51B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1316D, 0x0041 };
    uint32_t const ces[9] = { 0x51B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_103)
{
    // 1316D 0062;	
    // (𓅭) EGYPTIAN HIEROGLYPH G039	[51B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316D, 0x0062 };
    uint32_t const ces[9] = { 0x51B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_104)
{
    // 1316E 0021;	
    // (𓅮) EGYPTIAN HIEROGLYPH G040	[51B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316E, 0x0021 };
    uint32_t const ces[9] = { 0x51B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_105)
{
    // 1316E 003F;	
    // (𓅮) EGYPTIAN HIEROGLYPH G040	[51B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316E, 0x003F };
    uint32_t const ces[9] = { 0x51B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_106)
{
    // 1316E 0061;	
    // (𓅮) EGYPTIAN HIEROGLYPH G040	[51B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316E, 0x0061 };
    uint32_t const ces[9] = { 0x51B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_107)
{
    // 1316E 0041;	
    // (𓅮) EGYPTIAN HIEROGLYPH G040	[51B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1316E, 0x0041 };
    uint32_t const ces[9] = { 0x51B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_108)
{
    // 1316E 0062;	
    // (𓅮) EGYPTIAN HIEROGLYPH G040	[51B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316E, 0x0062 };
    uint32_t const ces[9] = { 0x51B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_109)
{
    // 1316F 0021;	
    // (𓅯) EGYPTIAN HIEROGLYPH G041	[51B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316F, 0x0021 };
    uint32_t const ces[9] = { 0x51B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_110)
{
    // 1316F 003F;	
    // (𓅯) EGYPTIAN HIEROGLYPH G041	[51B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316F, 0x003F };
    uint32_t const ces[9] = { 0x51B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_111)
{
    // 1316F 0061;	
    // (𓅯) EGYPTIAN HIEROGLYPH G041	[51B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316F, 0x0061 };
    uint32_t const ces[9] = { 0x51B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_112)
{
    // 1316F 0041;	
    // (𓅯) EGYPTIAN HIEROGLYPH G041	[51B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1316F, 0x0041 };
    uint32_t const ces[9] = { 0x51B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_113)
{
    // 1316F 0062;	
    // (𓅯) EGYPTIAN HIEROGLYPH G041	[51B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1316F, 0x0062 };
    uint32_t const ces[9] = { 0x51B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_114)
{
    // 13170 0021;	
    // (𓅰) EGYPTIAN HIEROGLYPH G042	[51BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13170, 0x0021 };
    uint32_t const ces[9] = { 0x51BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_115)
{
    // 13170 003F;	
    // (𓅰) EGYPTIAN HIEROGLYPH G042	[51BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13170, 0x003F };
    uint32_t const ces[9] = { 0x51BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_116)
{
    // 13170 0061;	
    // (𓅰) EGYPTIAN HIEROGLYPH G042	[51BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13170, 0x0061 };
    uint32_t const ces[9] = { 0x51BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_117)
{
    // 13170 0041;	
    // (𓅰) EGYPTIAN HIEROGLYPH G042	[51BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13170, 0x0041 };
    uint32_t const ces[9] = { 0x51BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_118)
{
    // 13170 0062;	
    // (𓅰) EGYPTIAN HIEROGLYPH G042	[51BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13170, 0x0062 };
    uint32_t const ces[9] = { 0x51BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_119)
{
    // 13171 0021;	
    // (𓅱) EGYPTIAN HIEROGLYPH G043	[51BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13171, 0x0021 };
    uint32_t const ces[9] = { 0x51BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_120)
{
    // 13171 003F;	
    // (𓅱) EGYPTIAN HIEROGLYPH G043	[51BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13171, 0x003F };
    uint32_t const ces[9] = { 0x51BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_121)
{
    // 13171 0061;	
    // (𓅱) EGYPTIAN HIEROGLYPH G043	[51BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13171, 0x0061 };
    uint32_t const ces[9] = { 0x51BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_122)
{
    // 13171 0041;	
    // (𓅱) EGYPTIAN HIEROGLYPH G043	[51BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13171, 0x0041 };
    uint32_t const ces[9] = { 0x51BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_123)
{
    // 13171 0062;	
    // (𓅱) EGYPTIAN HIEROGLYPH G043	[51BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13171, 0x0062 };
    uint32_t const ces[9] = { 0x51BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_124)
{
    // 13172 0021;	
    // (𓅲) EGYPTIAN HIEROGLYPH G043A	[51BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13172, 0x0021 };
    uint32_t const ces[9] = { 0x51BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_125)
{
    // 13172 003F;	
    // (𓅲) EGYPTIAN HIEROGLYPH G043A	[51BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13172, 0x003F };
    uint32_t const ces[9] = { 0x51BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_126)
{
    // 13172 0061;	
    // (𓅲) EGYPTIAN HIEROGLYPH G043A	[51BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13172, 0x0061 };
    uint32_t const ces[9] = { 0x51BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_127)
{
    // 13172 0041;	
    // (𓅲) EGYPTIAN HIEROGLYPH G043A	[51BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13172, 0x0041 };
    uint32_t const ces[9] = { 0x51BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_128)
{
    // 13172 0062;	
    // (𓅲) EGYPTIAN HIEROGLYPH G043A	[51BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13172, 0x0062 };
    uint32_t const ces[9] = { 0x51BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_129)
{
    // 13173 0021;	
    // (𓅳) EGYPTIAN HIEROGLYPH G044	[51BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13173, 0x0021 };
    uint32_t const ces[9] = { 0x51BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_130)
{
    // 13173 003F;	
    // (𓅳) EGYPTIAN HIEROGLYPH G044	[51BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13173, 0x003F };
    uint32_t const ces[9] = { 0x51BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_131)
{
    // 13173 0061;	
    // (𓅳) EGYPTIAN HIEROGLYPH G044	[51BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13173, 0x0061 };
    uint32_t const ces[9] = { 0x51BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_132)
{
    // 13173 0041;	
    // (𓅳) EGYPTIAN HIEROGLYPH G044	[51BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13173, 0x0041 };
    uint32_t const ces[9] = { 0x51BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_133)
{
    // 13173 0062;	
    // (𓅳) EGYPTIAN HIEROGLYPH G044	[51BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13173, 0x0062 };
    uint32_t const ces[9] = { 0x51BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_134)
{
    // 13174 0021;	
    // (𓅴) EGYPTIAN HIEROGLYPH G045	[51BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13174, 0x0021 };
    uint32_t const ces[9] = { 0x51BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_135)
{
    // 13174 003F;	
    // (𓅴) EGYPTIAN HIEROGLYPH G045	[51BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13174, 0x003F };
    uint32_t const ces[9] = { 0x51BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_136)
{
    // 13174 0061;	
    // (𓅴) EGYPTIAN HIEROGLYPH G045	[51BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13174, 0x0061 };
    uint32_t const ces[9] = { 0x51BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_137)
{
    // 13174 0041;	
    // (𓅴) EGYPTIAN HIEROGLYPH G045	[51BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13174, 0x0041 };
    uint32_t const ces[9] = { 0x51BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_138)
{
    // 13174 0062;	
    // (𓅴) EGYPTIAN HIEROGLYPH G045	[51BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13174, 0x0062 };
    uint32_t const ces[9] = { 0x51BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_139)
{
    // 13175 0021;	
    // (𓅵) EGYPTIAN HIEROGLYPH G045A	[51BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13175, 0x0021 };
    uint32_t const ces[9] = { 0x51BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_140)
{
    // 13175 003F;	
    // (𓅵) EGYPTIAN HIEROGLYPH G045A	[51BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13175, 0x003F };
    uint32_t const ces[9] = { 0x51BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_141)
{
    // 13175 0061;	
    // (𓅵) EGYPTIAN HIEROGLYPH G045A	[51BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13175, 0x0061 };
    uint32_t const ces[9] = { 0x51BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_142)
{
    // 13175 0041;	
    // (𓅵) EGYPTIAN HIEROGLYPH G045A	[51BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13175, 0x0041 };
    uint32_t const ces[9] = { 0x51BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_143)
{
    // 13175 0062;	
    // (𓅵) EGYPTIAN HIEROGLYPH G045A	[51BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13175, 0x0062 };
    uint32_t const ces[9] = { 0x51BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_144)
{
    // 13176 0021;	
    // (𓅶) EGYPTIAN HIEROGLYPH G046	[51C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13176, 0x0021 };
    uint32_t const ces[9] = { 0x51C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_145)
{
    // 13176 003F;	
    // (𓅶) EGYPTIAN HIEROGLYPH G046	[51C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13176, 0x003F };
    uint32_t const ces[9] = { 0x51C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_146)
{
    // 13176 0061;	
    // (𓅶) EGYPTIAN HIEROGLYPH G046	[51C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13176, 0x0061 };
    uint32_t const ces[9] = { 0x51C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_147)
{
    // 13176 0041;	
    // (𓅶) EGYPTIAN HIEROGLYPH G046	[51C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13176, 0x0041 };
    uint32_t const ces[9] = { 0x51C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_148)
{
    // 13176 0062;	
    // (𓅶) EGYPTIAN HIEROGLYPH G046	[51C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13176, 0x0062 };
    uint32_t const ces[9] = { 0x51C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_149)
{
    // 13177 0021;	
    // (𓅷) EGYPTIAN HIEROGLYPH G047	[51C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13177, 0x0021 };
    uint32_t const ces[9] = { 0x51C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_150)
{
    // 13177 003F;	
    // (𓅷) EGYPTIAN HIEROGLYPH G047	[51C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13177, 0x003F };
    uint32_t const ces[9] = { 0x51C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_151)
{
    // 13177 0061;	
    // (𓅷) EGYPTIAN HIEROGLYPH G047	[51C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13177, 0x0061 };
    uint32_t const ces[9] = { 0x51C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_152)
{
    // 13177 0041;	
    // (𓅷) EGYPTIAN HIEROGLYPH G047	[51C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13177, 0x0041 };
    uint32_t const ces[9] = { 0x51C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_153)
{
    // 13177 0062;	
    // (𓅷) EGYPTIAN HIEROGLYPH G047	[51C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13177, 0x0062 };
    uint32_t const ces[9] = { 0x51C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_154)
{
    // 13178 0021;	
    // (𓅸) EGYPTIAN HIEROGLYPH G048	[51C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13178, 0x0021 };
    uint32_t const ces[9] = { 0x51C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_155)
{
    // 13178 003F;	
    // (𓅸) EGYPTIAN HIEROGLYPH G048	[51C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13178, 0x003F };
    uint32_t const ces[9] = { 0x51C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_156)
{
    // 13178 0061;	
    // (𓅸) EGYPTIAN HIEROGLYPH G048	[51C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13178, 0x0061 };
    uint32_t const ces[9] = { 0x51C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_157)
{
    // 13178 0041;	
    // (𓅸) EGYPTIAN HIEROGLYPH G048	[51C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13178, 0x0041 };
    uint32_t const ces[9] = { 0x51C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_158)
{
    // 13178 0062;	
    // (𓅸) EGYPTIAN HIEROGLYPH G048	[51C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13178, 0x0062 };
    uint32_t const ces[9] = { 0x51C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_159)
{
    // 13179 0021;	
    // (𓅹) EGYPTIAN HIEROGLYPH G049	[51C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13179, 0x0021 };
    uint32_t const ces[9] = { 0x51C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_160)
{
    // 13179 003F;	
    // (𓅹) EGYPTIAN HIEROGLYPH G049	[51C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13179, 0x003F };
    uint32_t const ces[9] = { 0x51C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_161)
{
    // 13179 0061;	
    // (𓅹) EGYPTIAN HIEROGLYPH G049	[51C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13179, 0x0061 };
    uint32_t const ces[9] = { 0x51C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_162)
{
    // 13179 0041;	
    // (𓅹) EGYPTIAN HIEROGLYPH G049	[51C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13179, 0x0041 };
    uint32_t const ces[9] = { 0x51C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_163)
{
    // 13179 0062;	
    // (𓅹) EGYPTIAN HIEROGLYPH G049	[51C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13179, 0x0062 };
    uint32_t const ces[9] = { 0x51C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_164)
{
    // 1317A 0021;	
    // (𓅺) EGYPTIAN HIEROGLYPH G050	[51C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317A, 0x0021 };
    uint32_t const ces[9] = { 0x51C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_165)
{
    // 1317A 003F;	
    // (𓅺) EGYPTIAN HIEROGLYPH G050	[51C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317A, 0x003F };
    uint32_t const ces[9] = { 0x51C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_166)
{
    // 1317A 0061;	
    // (𓅺) EGYPTIAN HIEROGLYPH G050	[51C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317A, 0x0061 };
    uint32_t const ces[9] = { 0x51C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_167)
{
    // 1317A 0041;	
    // (𓅺) EGYPTIAN HIEROGLYPH G050	[51C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1317A, 0x0041 };
    uint32_t const ces[9] = { 0x51C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_168)
{
    // 1317A 0062;	
    // (𓅺) EGYPTIAN HIEROGLYPH G050	[51C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317A, 0x0062 };
    uint32_t const ces[9] = { 0x51C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_169)
{
    // 1317B 0021;	
    // (𓅻) EGYPTIAN HIEROGLYPH G051	[51C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317B, 0x0021 };
    uint32_t const ces[9] = { 0x51C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_170)
{
    // 1317B 003F;	
    // (𓅻) EGYPTIAN HIEROGLYPH G051	[51C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317B, 0x003F };
    uint32_t const ces[9] = { 0x51C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_171)
{
    // 1317B 0061;	
    // (𓅻) EGYPTIAN HIEROGLYPH G051	[51C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317B, 0x0061 };
    uint32_t const ces[9] = { 0x51C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_172)
{
    // 1317B 0041;	
    // (𓅻) EGYPTIAN HIEROGLYPH G051	[51C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1317B, 0x0041 };
    uint32_t const ces[9] = { 0x51C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_173)
{
    // 1317B 0062;	
    // (𓅻) EGYPTIAN HIEROGLYPH G051	[51C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317B, 0x0062 };
    uint32_t const ces[9] = { 0x51C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_174)
{
    // 1317C 0021;	
    // (𓅼) EGYPTIAN HIEROGLYPH G052	[51C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317C, 0x0021 };
    uint32_t const ces[9] = { 0x51C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_175)
{
    // 1317C 003F;	
    // (𓅼) EGYPTIAN HIEROGLYPH G052	[51C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317C, 0x003F };
    uint32_t const ces[9] = { 0x51C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_176)
{
    // 1317C 0061;	
    // (𓅼) EGYPTIAN HIEROGLYPH G052	[51C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317C, 0x0061 };
    uint32_t const ces[9] = { 0x51C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_177)
{
    // 1317C 0041;	
    // (𓅼) EGYPTIAN HIEROGLYPH G052	[51C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1317C, 0x0041 };
    uint32_t const ces[9] = { 0x51C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_178)
{
    // 1317C 0062;	
    // (𓅼) EGYPTIAN HIEROGLYPH G052	[51C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317C, 0x0062 };
    uint32_t const ces[9] = { 0x51C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_179)
{
    // 1317D 0021;	
    // (𓅽) EGYPTIAN HIEROGLYPH G053	[51C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317D, 0x0021 };
    uint32_t const ces[9] = { 0x51C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_180)
{
    // 1317D 003F;	
    // (𓅽) EGYPTIAN HIEROGLYPH G053	[51C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317D, 0x003F };
    uint32_t const ces[9] = { 0x51C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_181)
{
    // 1317D 0061;	
    // (𓅽) EGYPTIAN HIEROGLYPH G053	[51C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317D, 0x0061 };
    uint32_t const ces[9] = { 0x51C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_182)
{
    // 1317D 0041;	
    // (𓅽) EGYPTIAN HIEROGLYPH G053	[51C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1317D, 0x0041 };
    uint32_t const ces[9] = { 0x51C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_183)
{
    // 1317D 0062;	
    // (𓅽) EGYPTIAN HIEROGLYPH G053	[51C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317D, 0x0062 };
    uint32_t const ces[9] = { 0x51C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_184)
{
    // 1317E 0021;	
    // (𓅾) EGYPTIAN HIEROGLYPH G054	[51C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317E, 0x0021 };
    uint32_t const ces[9] = { 0x51C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_185)
{
    // 1317E 003F;	
    // (𓅾) EGYPTIAN HIEROGLYPH G054	[51C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317E, 0x003F };
    uint32_t const ces[9] = { 0x51C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_186)
{
    // 1317E 0061;	
    // (𓅾) EGYPTIAN HIEROGLYPH G054	[51C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317E, 0x0061 };
    uint32_t const ces[9] = { 0x51C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_187)
{
    // 1317E 0041;	
    // (𓅾) EGYPTIAN HIEROGLYPH G054	[51C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1317E, 0x0041 };
    uint32_t const ces[9] = { 0x51C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_188)
{
    // 1317E 0062;	
    // (𓅾) EGYPTIAN HIEROGLYPH G054	[51C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317E, 0x0062 };
    uint32_t const ces[9] = { 0x51C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_189)
{
    // 1317F 0021;	
    // (𓅿) EGYPTIAN HIEROGLYPH H001	[51C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317F, 0x0021 };
    uint32_t const ces[9] = { 0x51C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_190)
{
    // 1317F 003F;	
    // (𓅿) EGYPTIAN HIEROGLYPH H001	[51C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317F, 0x003F };
    uint32_t const ces[9] = { 0x51C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_191)
{
    // 1317F 0061;	
    // (𓅿) EGYPTIAN HIEROGLYPH H001	[51C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317F, 0x0061 };
    uint32_t const ces[9] = { 0x51C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_192)
{
    // 1317F 0041;	
    // (𓅿) EGYPTIAN HIEROGLYPH H001	[51C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1317F, 0x0041 };
    uint32_t const ces[9] = { 0x51C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_193)
{
    // 1317F 0062;	
    // (𓅿) EGYPTIAN HIEROGLYPH H001	[51C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1317F, 0x0062 };
    uint32_t const ces[9] = { 0x51C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_194)
{
    // 13180 0021;	
    // (𓆀) EGYPTIAN HIEROGLYPH H002	[51CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13180, 0x0021 };
    uint32_t const ces[9] = { 0x51CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_195)
{
    // 13180 003F;	
    // (𓆀) EGYPTIAN HIEROGLYPH H002	[51CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13180, 0x003F };
    uint32_t const ces[9] = { 0x51CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_196)
{
    // 13180 0061;	
    // (𓆀) EGYPTIAN HIEROGLYPH H002	[51CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13180, 0x0061 };
    uint32_t const ces[9] = { 0x51CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_197)
{
    // 13180 0041;	
    // (𓆀) EGYPTIAN HIEROGLYPH H002	[51CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13180, 0x0041 };
    uint32_t const ces[9] = { 0x51CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_198)
{
    // 13180 0062;	
    // (𓆀) EGYPTIAN HIEROGLYPH H002	[51CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13180, 0x0062 };
    uint32_t const ces[9] = { 0x51CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_199)
{
    // 13181 0021;	
    // (𓆁) EGYPTIAN HIEROGLYPH H003	[51CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13181, 0x0021 };
    uint32_t const ces[9] = { 0x51CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_200)
{
    // 13181 003F;	
    // (𓆁) EGYPTIAN HIEROGLYPH H003	[51CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13181, 0x003F };
    uint32_t const ces[9] = { 0x51CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_201)
{
    // 13181 0061;	
    // (𓆁) EGYPTIAN HIEROGLYPH H003	[51CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13181, 0x0061 };
    uint32_t const ces[9] = { 0x51CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_202)
{
    // 13181 0041;	
    // (𓆁) EGYPTIAN HIEROGLYPH H003	[51CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13181, 0x0041 };
    uint32_t const ces[9] = { 0x51CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_203)
{
    // 13181 0062;	
    // (𓆁) EGYPTIAN HIEROGLYPH H003	[51CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13181, 0x0062 };
    uint32_t const ces[9] = { 0x51CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_204)
{
    // 13182 0021;	
    // (𓆂) EGYPTIAN HIEROGLYPH H004	[51CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13182, 0x0021 };
    uint32_t const ces[9] = { 0x51CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_205)
{
    // 13182 003F;	
    // (𓆂) EGYPTIAN HIEROGLYPH H004	[51CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13182, 0x003F };
    uint32_t const ces[9] = { 0x51CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_206)
{
    // 13182 0061;	
    // (𓆂) EGYPTIAN HIEROGLYPH H004	[51CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13182, 0x0061 };
    uint32_t const ces[9] = { 0x51CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_207)
{
    // 13182 0041;	
    // (𓆂) EGYPTIAN HIEROGLYPH H004	[51CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13182, 0x0041 };
    uint32_t const ces[9] = { 0x51CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_208)
{
    // 13182 0062;	
    // (𓆂) EGYPTIAN HIEROGLYPH H004	[51CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13182, 0x0062 };
    uint32_t const ces[9] = { 0x51CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_209)
{
    // 13183 0021;	
    // (𓆃) EGYPTIAN HIEROGLYPH H005	[51CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13183, 0x0021 };
    uint32_t const ces[9] = { 0x51CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_210)
{
    // 13183 003F;	
    // (𓆃) EGYPTIAN HIEROGLYPH H005	[51CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13183, 0x003F };
    uint32_t const ces[9] = { 0x51CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_211)
{
    // 13183 0061;	
    // (𓆃) EGYPTIAN HIEROGLYPH H005	[51CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13183, 0x0061 };
    uint32_t const ces[9] = { 0x51CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_212)
{
    // 13183 0041;	
    // (𓆃) EGYPTIAN HIEROGLYPH H005	[51CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13183, 0x0041 };
    uint32_t const ces[9] = { 0x51CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_213)
{
    // 13183 0062;	
    // (𓆃) EGYPTIAN HIEROGLYPH H005	[51CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13183, 0x0062 };
    uint32_t const ces[9] = { 0x51CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_214)
{
    // 13184 0021;	
    // (𓆄) EGYPTIAN HIEROGLYPH H006	[51CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13184, 0x0021 };
    uint32_t const ces[9] = { 0x51CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_215)
{
    // 13184 003F;	
    // (𓆄) EGYPTIAN HIEROGLYPH H006	[51CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13184, 0x003F };
    uint32_t const ces[9] = { 0x51CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_216)
{
    // 13184 0061;	
    // (𓆄) EGYPTIAN HIEROGLYPH H006	[51CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13184, 0x0061 };
    uint32_t const ces[9] = { 0x51CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_217)
{
    // 13184 0041;	
    // (𓆄) EGYPTIAN HIEROGLYPH H006	[51CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13184, 0x0041 };
    uint32_t const ces[9] = { 0x51CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_218)
{
    // 13184 0062;	
    // (𓆄) EGYPTIAN HIEROGLYPH H006	[51CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13184, 0x0062 };
    uint32_t const ces[9] = { 0x51CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_219)
{
    // 13185 0021;	
    // (𓆅) EGYPTIAN HIEROGLYPH H006A	[51CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13185, 0x0021 };
    uint32_t const ces[9] = { 0x51CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_220)
{
    // 13185 003F;	
    // (𓆅) EGYPTIAN HIEROGLYPH H006A	[51CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13185, 0x003F };
    uint32_t const ces[9] = { 0x51CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_221)
{
    // 13185 0061;	
    // (𓆅) EGYPTIAN HIEROGLYPH H006A	[51CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13185, 0x0061 };
    uint32_t const ces[9] = { 0x51CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_222)
{
    // 13185 0041;	
    // (𓆅) EGYPTIAN HIEROGLYPH H006A	[51CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13185, 0x0041 };
    uint32_t const ces[9] = { 0x51CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_223)
{
    // 13185 0062;	
    // (𓆅) EGYPTIAN HIEROGLYPH H006A	[51CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13185, 0x0062 };
    uint32_t const ces[9] = { 0x51CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_224)
{
    // 13186 0021;	
    // (𓆆) EGYPTIAN HIEROGLYPH H007	[51D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13186, 0x0021 };
    uint32_t const ces[9] = { 0x51D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_225)
{
    // 13186 003F;	
    // (𓆆) EGYPTIAN HIEROGLYPH H007	[51D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13186, 0x003F };
    uint32_t const ces[9] = { 0x51D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_226)
{
    // 13186 0061;	
    // (𓆆) EGYPTIAN HIEROGLYPH H007	[51D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13186, 0x0061 };
    uint32_t const ces[9] = { 0x51D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_227)
{
    // 13186 0041;	
    // (𓆆) EGYPTIAN HIEROGLYPH H007	[51D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13186, 0x0041 };
    uint32_t const ces[9] = { 0x51D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_228)
{
    // 13186 0062;	
    // (𓆆) EGYPTIAN HIEROGLYPH H007	[51D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13186, 0x0062 };
    uint32_t const ces[9] = { 0x51D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_229)
{
    // 13187 0021;	
    // (𓆇) EGYPTIAN HIEROGLYPH H008	[51D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13187, 0x0021 };
    uint32_t const ces[9] = { 0x51D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_230)
{
    // 13187 003F;	
    // (𓆇) EGYPTIAN HIEROGLYPH H008	[51D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13187, 0x003F };
    uint32_t const ces[9] = { 0x51D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_231)
{
    // 13187 0061;	
    // (𓆇) EGYPTIAN HIEROGLYPH H008	[51D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13187, 0x0061 };
    uint32_t const ces[9] = { 0x51D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_232)
{
    // 13187 0041;	
    // (𓆇) EGYPTIAN HIEROGLYPH H008	[51D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13187, 0x0041 };
    uint32_t const ces[9] = { 0x51D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_233)
{
    // 13187 0062;	
    // (𓆇) EGYPTIAN HIEROGLYPH H008	[51D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13187, 0x0062 };
    uint32_t const ces[9] = { 0x51D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_234)
{
    // 13188 0021;	
    // (𓆈) EGYPTIAN HIEROGLYPH I001	[51D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13188, 0x0021 };
    uint32_t const ces[9] = { 0x51D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_235)
{
    // 13188 003F;	
    // (𓆈) EGYPTIAN HIEROGLYPH I001	[51D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13188, 0x003F };
    uint32_t const ces[9] = { 0x51D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_236)
{
    // 13188 0061;	
    // (𓆈) EGYPTIAN HIEROGLYPH I001	[51D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13188, 0x0061 };
    uint32_t const ces[9] = { 0x51D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_237)
{
    // 13188 0041;	
    // (𓆈) EGYPTIAN HIEROGLYPH I001	[51D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13188, 0x0041 };
    uint32_t const ces[9] = { 0x51D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_238)
{
    // 13188 0062;	
    // (𓆈) EGYPTIAN HIEROGLYPH I001	[51D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13188, 0x0062 };
    uint32_t const ces[9] = { 0x51D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_239)
{
    // 13189 0021;	
    // (𓆉) EGYPTIAN HIEROGLYPH I002	[51D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13189, 0x0021 };
    uint32_t const ces[9] = { 0x51D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_240)
{
    // 13189 003F;	
    // (𓆉) EGYPTIAN HIEROGLYPH I002	[51D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13189, 0x003F };
    uint32_t const ces[9] = { 0x51D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_241)
{
    // 13189 0061;	
    // (𓆉) EGYPTIAN HIEROGLYPH I002	[51D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13189, 0x0061 };
    uint32_t const ces[9] = { 0x51D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_242)
{
    // 13189 0041;	
    // (𓆉) EGYPTIAN HIEROGLYPH I002	[51D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13189, 0x0041 };
    uint32_t const ces[9] = { 0x51D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_243)
{
    // 13189 0062;	
    // (𓆉) EGYPTIAN HIEROGLYPH I002	[51D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13189, 0x0062 };
    uint32_t const ces[9] = { 0x51D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_244)
{
    // 1318A 0021;	
    // (𓆊) EGYPTIAN HIEROGLYPH I003	[51D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318A, 0x0021 };
    uint32_t const ces[9] = { 0x51D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_245)
{
    // 1318A 003F;	
    // (𓆊) EGYPTIAN HIEROGLYPH I003	[51D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318A, 0x003F };
    uint32_t const ces[9] = { 0x51D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_246)
{
    // 1318A 0061;	
    // (𓆊) EGYPTIAN HIEROGLYPH I003	[51D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318A, 0x0061 };
    uint32_t const ces[9] = { 0x51D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_247)
{
    // 1318A 0041;	
    // (𓆊) EGYPTIAN HIEROGLYPH I003	[51D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1318A, 0x0041 };
    uint32_t const ces[9] = { 0x51D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_248)
{
    // 1318A 0062;	
    // (𓆊) EGYPTIAN HIEROGLYPH I003	[51D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318A, 0x0062 };
    uint32_t const ces[9] = { 0x51D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_249)
{
    // 1318B 0021;	
    // (𓆋) EGYPTIAN HIEROGLYPH I004	[51D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318B, 0x0021 };
    uint32_t const ces[9] = { 0x51D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_250)
{
    // 1318B 003F;	
    // (𓆋) EGYPTIAN HIEROGLYPH I004	[51D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318B, 0x003F };
    uint32_t const ces[9] = { 0x51D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_251)
{
    // 1318B 0061;	
    // (𓆋) EGYPTIAN HIEROGLYPH I004	[51D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318B, 0x0061 };
    uint32_t const ces[9] = { 0x51D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_252)
{
    // 1318B 0041;	
    // (𓆋) EGYPTIAN HIEROGLYPH I004	[51D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1318B, 0x0041 };
    uint32_t const ces[9] = { 0x51D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_253)
{
    // 1318B 0062;	
    // (𓆋) EGYPTIAN HIEROGLYPH I004	[51D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318B, 0x0062 };
    uint32_t const ces[9] = { 0x51D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_254)
{
    // 1318C 0021;	
    // (𓆌) EGYPTIAN HIEROGLYPH I005	[51D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318C, 0x0021 };
    uint32_t const ces[9] = { 0x51D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_255)
{
    // 1318C 003F;	
    // (𓆌) EGYPTIAN HIEROGLYPH I005	[51D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318C, 0x003F };
    uint32_t const ces[9] = { 0x51D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_256)
{
    // 1318C 0061;	
    // (𓆌) EGYPTIAN HIEROGLYPH I005	[51D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318C, 0x0061 };
    uint32_t const ces[9] = { 0x51D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_257)
{
    // 1318C 0041;	
    // (𓆌) EGYPTIAN HIEROGLYPH I005	[51D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1318C, 0x0041 };
    uint32_t const ces[9] = { 0x51D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_258)
{
    // 1318C 0062;	
    // (𓆌) EGYPTIAN HIEROGLYPH I005	[51D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318C, 0x0062 };
    uint32_t const ces[9] = { 0x51D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_259)
{
    // 1318D 0021;	
    // (𓆍) EGYPTIAN HIEROGLYPH I005A	[51D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318D, 0x0021 };
    uint32_t const ces[9] = { 0x51D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_260)
{
    // 1318D 003F;	
    // (𓆍) EGYPTIAN HIEROGLYPH I005A	[51D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318D, 0x003F };
    uint32_t const ces[9] = { 0x51D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_261)
{
    // 1318D 0061;	
    // (𓆍) EGYPTIAN HIEROGLYPH I005A	[51D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318D, 0x0061 };
    uint32_t const ces[9] = { 0x51D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_262)
{
    // 1318D 0041;	
    // (𓆍) EGYPTIAN HIEROGLYPH I005A	[51D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1318D, 0x0041 };
    uint32_t const ces[9] = { 0x51D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_263)
{
    // 1318D 0062;	
    // (𓆍) EGYPTIAN HIEROGLYPH I005A	[51D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318D, 0x0062 };
    uint32_t const ces[9] = { 0x51D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_264)
{
    // 1318E 0021;	
    // (𓆎) EGYPTIAN HIEROGLYPH I006	[51D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318E, 0x0021 };
    uint32_t const ces[9] = { 0x51D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_265)
{
    // 1318E 003F;	
    // (𓆎) EGYPTIAN HIEROGLYPH I006	[51D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318E, 0x003F };
    uint32_t const ces[9] = { 0x51D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_266)
{
    // 1318E 0061;	
    // (𓆎) EGYPTIAN HIEROGLYPH I006	[51D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318E, 0x0061 };
    uint32_t const ces[9] = { 0x51D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_267)
{
    // 1318E 0041;	
    // (𓆎) EGYPTIAN HIEROGLYPH I006	[51D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1318E, 0x0041 };
    uint32_t const ces[9] = { 0x51D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_268)
{
    // 1318E 0062;	
    // (𓆎) EGYPTIAN HIEROGLYPH I006	[51D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318E, 0x0062 };
    uint32_t const ces[9] = { 0x51D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_269)
{
    // 1318F 0021;	
    // (𓆏) EGYPTIAN HIEROGLYPH I007	[51D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318F, 0x0021 };
    uint32_t const ces[9] = { 0x51D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_270)
{
    // 1318F 003F;	
    // (𓆏) EGYPTIAN HIEROGLYPH I007	[51D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318F, 0x003F };
    uint32_t const ces[9] = { 0x51D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_271)
{
    // 1318F 0061;	
    // (𓆏) EGYPTIAN HIEROGLYPH I007	[51D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318F, 0x0061 };
    uint32_t const ces[9] = { 0x51D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_272)
{
    // 1318F 0041;	
    // (𓆏) EGYPTIAN HIEROGLYPH I007	[51D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1318F, 0x0041 };
    uint32_t const ces[9] = { 0x51D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_273)
{
    // 1318F 0062;	
    // (𓆏) EGYPTIAN HIEROGLYPH I007	[51D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1318F, 0x0062 };
    uint32_t const ces[9] = { 0x51D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_274)
{
    // 13190 0021;	
    // (𓆐) EGYPTIAN HIEROGLYPH I008	[51DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13190, 0x0021 };
    uint32_t const ces[9] = { 0x51DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_275)
{
    // 13190 003F;	
    // (𓆐) EGYPTIAN HIEROGLYPH I008	[51DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13190, 0x003F };
    uint32_t const ces[9] = { 0x51DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_276)
{
    // 13190 0061;	
    // (𓆐) EGYPTIAN HIEROGLYPH I008	[51DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13190, 0x0061 };
    uint32_t const ces[9] = { 0x51DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_277)
{
    // 13190 0041;	
    // (𓆐) EGYPTIAN HIEROGLYPH I008	[51DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13190, 0x0041 };
    uint32_t const ces[9] = { 0x51DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_278)
{
    // 13190 0062;	
    // (𓆐) EGYPTIAN HIEROGLYPH I008	[51DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13190, 0x0062 };
    uint32_t const ces[9] = { 0x51DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_279)
{
    // 13191 0021;	
    // (𓆑) EGYPTIAN HIEROGLYPH I009	[51DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13191, 0x0021 };
    uint32_t const ces[9] = { 0x51DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_280)
{
    // 13191 003F;	
    // (𓆑) EGYPTIAN HIEROGLYPH I009	[51DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13191, 0x003F };
    uint32_t const ces[9] = { 0x51DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_281)
{
    // 13191 0061;	
    // (𓆑) EGYPTIAN HIEROGLYPH I009	[51DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13191, 0x0061 };
    uint32_t const ces[9] = { 0x51DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_282)
{
    // 13191 0041;	
    // (𓆑) EGYPTIAN HIEROGLYPH I009	[51DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13191, 0x0041 };
    uint32_t const ces[9] = { 0x51DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_283)
{
    // 13191 0062;	
    // (𓆑) EGYPTIAN HIEROGLYPH I009	[51DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13191, 0x0062 };
    uint32_t const ces[9] = { 0x51DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_284)
{
    // 13192 0021;	
    // (𓆒) EGYPTIAN HIEROGLYPH I009A	[51DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13192, 0x0021 };
    uint32_t const ces[9] = { 0x51DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_285)
{
    // 13192 003F;	
    // (𓆒) EGYPTIAN HIEROGLYPH I009A	[51DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13192, 0x003F };
    uint32_t const ces[9] = { 0x51DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_286)
{
    // 13192 0061;	
    // (𓆒) EGYPTIAN HIEROGLYPH I009A	[51DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13192, 0x0061 };
    uint32_t const ces[9] = { 0x51DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_287)
{
    // 13192 0041;	
    // (𓆒) EGYPTIAN HIEROGLYPH I009A	[51DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13192, 0x0041 };
    uint32_t const ces[9] = { 0x51DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_288)
{
    // 13192 0062;	
    // (𓆒) EGYPTIAN HIEROGLYPH I009A	[51DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13192, 0x0062 };
    uint32_t const ces[9] = { 0x51DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_289)
{
    // 13193 0021;	
    // (𓆓) EGYPTIAN HIEROGLYPH I010	[51DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13193, 0x0021 };
    uint32_t const ces[9] = { 0x51DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_290)
{
    // 13193 003F;	
    // (𓆓) EGYPTIAN HIEROGLYPH I010	[51DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13193, 0x003F };
    uint32_t const ces[9] = { 0x51DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_291)
{
    // 13193 0061;	
    // (𓆓) EGYPTIAN HIEROGLYPH I010	[51DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13193, 0x0061 };
    uint32_t const ces[9] = { 0x51DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_292)
{
    // 13193 0041;	
    // (𓆓) EGYPTIAN HIEROGLYPH I010	[51DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13193, 0x0041 };
    uint32_t const ces[9] = { 0x51DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_293)
{
    // 13193 0062;	
    // (𓆓) EGYPTIAN HIEROGLYPH I010	[51DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13193, 0x0062 };
    uint32_t const ces[9] = { 0x51DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_294)
{
    // 13194 0021;	
    // (𓆔) EGYPTIAN HIEROGLYPH I010A	[51DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13194, 0x0021 };
    uint32_t const ces[9] = { 0x51DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_295)
{
    // 13194 003F;	
    // (𓆔) EGYPTIAN HIEROGLYPH I010A	[51DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13194, 0x003F };
    uint32_t const ces[9] = { 0x51DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_296)
{
    // 13194 0061;	
    // (𓆔) EGYPTIAN HIEROGLYPH I010A	[51DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13194, 0x0061 };
    uint32_t const ces[9] = { 0x51DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_297)
{
    // 13194 0041;	
    // (𓆔) EGYPTIAN HIEROGLYPH I010A	[51DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13194, 0x0041 };
    uint32_t const ces[9] = { 0x51DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_298)
{
    // 13194 0062;	
    // (𓆔) EGYPTIAN HIEROGLYPH I010A	[51DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13194, 0x0062 };
    uint32_t const ces[9] = { 0x51DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_299)
{
    // 13195 0021;	
    // (𓆕) EGYPTIAN HIEROGLYPH I011	[51DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13195, 0x0021 };
    uint32_t const ces[9] = { 0x51DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_300)
{
    // 13195 003F;	
    // (𓆕) EGYPTIAN HIEROGLYPH I011	[51DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13195, 0x003F };
    uint32_t const ces[9] = { 0x51DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_301)
{
    // 13195 0061;	
    // (𓆕) EGYPTIAN HIEROGLYPH I011	[51DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13195, 0x0061 };
    uint32_t const ces[9] = { 0x51DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_302)
{
    // 13195 0041;	
    // (𓆕) EGYPTIAN HIEROGLYPH I011	[51DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13195, 0x0041 };
    uint32_t const ces[9] = { 0x51DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_303)
{
    // 13195 0062;	
    // (𓆕) EGYPTIAN HIEROGLYPH I011	[51DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13195, 0x0062 };
    uint32_t const ces[9] = { 0x51DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_304)
{
    // 13196 0021;	
    // (𓆖) EGYPTIAN HIEROGLYPH I011A	[51E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13196, 0x0021 };
    uint32_t const ces[9] = { 0x51E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_305)
{
    // 13196 003F;	
    // (𓆖) EGYPTIAN HIEROGLYPH I011A	[51E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13196, 0x003F };
    uint32_t const ces[9] = { 0x51E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_306)
{
    // 13196 0061;	
    // (𓆖) EGYPTIAN HIEROGLYPH I011A	[51E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13196, 0x0061 };
    uint32_t const ces[9] = { 0x51E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_307)
{
    // 13196 0041;	
    // (𓆖) EGYPTIAN HIEROGLYPH I011A	[51E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13196, 0x0041 };
    uint32_t const ces[9] = { 0x51E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_308)
{
    // 13196 0062;	
    // (𓆖) EGYPTIAN HIEROGLYPH I011A	[51E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13196, 0x0062 };
    uint32_t const ces[9] = { 0x51E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_309)
{
    // 13197 0021;	
    // (𓆗) EGYPTIAN HIEROGLYPH I012	[51E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13197, 0x0021 };
    uint32_t const ces[9] = { 0x51E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_310)
{
    // 13197 003F;	
    // (𓆗) EGYPTIAN HIEROGLYPH I012	[51E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13197, 0x003F };
    uint32_t const ces[9] = { 0x51E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_311)
{
    // 13197 0061;	
    // (𓆗) EGYPTIAN HIEROGLYPH I012	[51E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13197, 0x0061 };
    uint32_t const ces[9] = { 0x51E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_312)
{
    // 13197 0041;	
    // (𓆗) EGYPTIAN HIEROGLYPH I012	[51E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13197, 0x0041 };
    uint32_t const ces[9] = { 0x51E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_313)
{
    // 13197 0062;	
    // (𓆗) EGYPTIAN HIEROGLYPH I012	[51E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13197, 0x0062 };
    uint32_t const ces[9] = { 0x51E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_314)
{
    // 13198 0021;	
    // (𓆘) EGYPTIAN HIEROGLYPH I013	[51E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13198, 0x0021 };
    uint32_t const ces[9] = { 0x51E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_315)
{
    // 13198 003F;	
    // (𓆘) EGYPTIAN HIEROGLYPH I013	[51E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13198, 0x003F };
    uint32_t const ces[9] = { 0x51E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_316)
{
    // 13198 0061;	
    // (𓆘) EGYPTIAN HIEROGLYPH I013	[51E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13198, 0x0061 };
    uint32_t const ces[9] = { 0x51E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_317)
{
    // 13198 0041;	
    // (𓆘) EGYPTIAN HIEROGLYPH I013	[51E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13198, 0x0041 };
    uint32_t const ces[9] = { 0x51E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_318)
{
    // 13198 0062;	
    // (𓆘) EGYPTIAN HIEROGLYPH I013	[51E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13198, 0x0062 };
    uint32_t const ces[9] = { 0x51E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_319)
{
    // 13199 0021;	
    // (𓆙) EGYPTIAN HIEROGLYPH I014	[51E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13199, 0x0021 };
    uint32_t const ces[9] = { 0x51E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_320)
{
    // 13199 003F;	
    // (𓆙) EGYPTIAN HIEROGLYPH I014	[51E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13199, 0x003F };
    uint32_t const ces[9] = { 0x51E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_321)
{
    // 13199 0061;	
    // (𓆙) EGYPTIAN HIEROGLYPH I014	[51E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13199, 0x0061 };
    uint32_t const ces[9] = { 0x51E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_322)
{
    // 13199 0041;	
    // (𓆙) EGYPTIAN HIEROGLYPH I014	[51E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13199, 0x0041 };
    uint32_t const ces[9] = { 0x51E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_323)
{
    // 13199 0062;	
    // (𓆙) EGYPTIAN HIEROGLYPH I014	[51E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13199, 0x0062 };
    uint32_t const ces[9] = { 0x51E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_324)
{
    // 1319A 0021;	
    // (𓆚) EGYPTIAN HIEROGLYPH I015	[51E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319A, 0x0021 };
    uint32_t const ces[9] = { 0x51E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_325)
{
    // 1319A 003F;	
    // (𓆚) EGYPTIAN HIEROGLYPH I015	[51E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319A, 0x003F };
    uint32_t const ces[9] = { 0x51E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_326)
{
    // 1319A 0061;	
    // (𓆚) EGYPTIAN HIEROGLYPH I015	[51E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319A, 0x0061 };
    uint32_t const ces[9] = { 0x51E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_327)
{
    // 1319A 0041;	
    // (𓆚) EGYPTIAN HIEROGLYPH I015	[51E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1319A, 0x0041 };
    uint32_t const ces[9] = { 0x51E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_328)
{
    // 1319A 0062;	
    // (𓆚) EGYPTIAN HIEROGLYPH I015	[51E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319A, 0x0062 };
    uint32_t const ces[9] = { 0x51E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_329)
{
    // 1319B 0021;	
    // (𓆛) EGYPTIAN HIEROGLYPH K001	[51E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319B, 0x0021 };
    uint32_t const ces[9] = { 0x51E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_330)
{
    // 1319B 003F;	
    // (𓆛) EGYPTIAN HIEROGLYPH K001	[51E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319B, 0x003F };
    uint32_t const ces[9] = { 0x51E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_331)
{
    // 1319B 0061;	
    // (𓆛) EGYPTIAN HIEROGLYPH K001	[51E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319B, 0x0061 };
    uint32_t const ces[9] = { 0x51E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_332)
{
    // 1319B 0041;	
    // (𓆛) EGYPTIAN HIEROGLYPH K001	[51E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1319B, 0x0041 };
    uint32_t const ces[9] = { 0x51E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_333)
{
    // 1319B 0062;	
    // (𓆛) EGYPTIAN HIEROGLYPH K001	[51E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319B, 0x0062 };
    uint32_t const ces[9] = { 0x51E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_334)
{
    // 1319C 0021;	
    // (𓆜) EGYPTIAN HIEROGLYPH K002	[51E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319C, 0x0021 };
    uint32_t const ces[9] = { 0x51E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_335)
{
    // 1319C 003F;	
    // (𓆜) EGYPTIAN HIEROGLYPH K002	[51E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319C, 0x003F };
    uint32_t const ces[9] = { 0x51E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_336)
{
    // 1319C 0061;	
    // (𓆜) EGYPTIAN HIEROGLYPH K002	[51E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319C, 0x0061 };
    uint32_t const ces[9] = { 0x51E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_337)
{
    // 1319C 0041;	
    // (𓆜) EGYPTIAN HIEROGLYPH K002	[51E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1319C, 0x0041 };
    uint32_t const ces[9] = { 0x51E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_338)
{
    // 1319C 0062;	
    // (𓆜) EGYPTIAN HIEROGLYPH K002	[51E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319C, 0x0062 };
    uint32_t const ces[9] = { 0x51E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_339)
{
    // 1319D 0021;	
    // (𓆝) EGYPTIAN HIEROGLYPH K003	[51E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319D, 0x0021 };
    uint32_t const ces[9] = { 0x51E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_340)
{
    // 1319D 003F;	
    // (𓆝) EGYPTIAN HIEROGLYPH K003	[51E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319D, 0x003F };
    uint32_t const ces[9] = { 0x51E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_341)
{
    // 1319D 0061;	
    // (𓆝) EGYPTIAN HIEROGLYPH K003	[51E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319D, 0x0061 };
    uint32_t const ces[9] = { 0x51E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_342)
{
    // 1319D 0041;	
    // (𓆝) EGYPTIAN HIEROGLYPH K003	[51E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1319D, 0x0041 };
    uint32_t const ces[9] = { 0x51E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_343)
{
    // 1319D 0062;	
    // (𓆝) EGYPTIAN HIEROGLYPH K003	[51E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319D, 0x0062 };
    uint32_t const ces[9] = { 0x51E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_344)
{
    // 1319E 0021;	
    // (𓆞) EGYPTIAN HIEROGLYPH K004	[51E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319E, 0x0021 };
    uint32_t const ces[9] = { 0x51E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_345)
{
    // 1319E 003F;	
    // (𓆞) EGYPTIAN HIEROGLYPH K004	[51E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319E, 0x003F };
    uint32_t const ces[9] = { 0x51E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_346)
{
    // 1319E 0061;	
    // (𓆞) EGYPTIAN HIEROGLYPH K004	[51E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319E, 0x0061 };
    uint32_t const ces[9] = { 0x51E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_347)
{
    // 1319E 0041;	
    // (𓆞) EGYPTIAN HIEROGLYPH K004	[51E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1319E, 0x0041 };
    uint32_t const ces[9] = { 0x51E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_348)
{
    // 1319E 0062;	
    // (𓆞) EGYPTIAN HIEROGLYPH K004	[51E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319E, 0x0062 };
    uint32_t const ces[9] = { 0x51E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_349)
{
    // 1319F 0021;	
    // (𓆟) EGYPTIAN HIEROGLYPH K005	[51E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319F, 0x0021 };
    uint32_t const ces[9] = { 0x51E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_350)
{
    // 1319F 003F;	
    // (𓆟) EGYPTIAN HIEROGLYPH K005	[51E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319F, 0x003F };
    uint32_t const ces[9] = { 0x51E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_351)
{
    // 1319F 0061;	
    // (𓆟) EGYPTIAN HIEROGLYPH K005	[51E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319F, 0x0061 };
    uint32_t const ces[9] = { 0x51E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_352)
{
    // 1319F 0041;	
    // (𓆟) EGYPTIAN HIEROGLYPH K005	[51E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1319F, 0x0041 };
    uint32_t const ces[9] = { 0x51E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_353)
{
    // 1319F 0062;	
    // (𓆟) EGYPTIAN HIEROGLYPH K005	[51E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1319F, 0x0062 };
    uint32_t const ces[9] = { 0x51E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_354)
{
    // 131A0 0021;	
    // (𓆠) EGYPTIAN HIEROGLYPH K006	[51EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A0, 0x0021 };
    uint32_t const ces[9] = { 0x51EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_355)
{
    // 131A0 003F;	
    // (𓆠) EGYPTIAN HIEROGLYPH K006	[51EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A0, 0x003F };
    uint32_t const ces[9] = { 0x51EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_356)
{
    // 131A0 0061;	
    // (𓆠) EGYPTIAN HIEROGLYPH K006	[51EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A0, 0x0061 };
    uint32_t const ces[9] = { 0x51EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_357)
{
    // 131A0 0041;	
    // (𓆠) EGYPTIAN HIEROGLYPH K006	[51EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A0, 0x0041 };
    uint32_t const ces[9] = { 0x51EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_358)
{
    // 131A0 0062;	
    // (𓆠) EGYPTIAN HIEROGLYPH K006	[51EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A0, 0x0062 };
    uint32_t const ces[9] = { 0x51EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_359)
{
    // 131A1 0021;	
    // (𓆡) EGYPTIAN HIEROGLYPH K007	[51EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A1, 0x0021 };
    uint32_t const ces[9] = { 0x51EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_360)
{
    // 131A1 003F;	
    // (𓆡) EGYPTIAN HIEROGLYPH K007	[51EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A1, 0x003F };
    uint32_t const ces[9] = { 0x51EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_361)
{
    // 131A1 0061;	
    // (𓆡) EGYPTIAN HIEROGLYPH K007	[51EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A1, 0x0061 };
    uint32_t const ces[9] = { 0x51EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_362)
{
    // 131A1 0041;	
    // (𓆡) EGYPTIAN HIEROGLYPH K007	[51EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A1, 0x0041 };
    uint32_t const ces[9] = { 0x51EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_363)
{
    // 131A1 0062;	
    // (𓆡) EGYPTIAN HIEROGLYPH K007	[51EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A1, 0x0062 };
    uint32_t const ces[9] = { 0x51EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_364)
{
    // 131A2 0021;	
    // (𓆢) EGYPTIAN HIEROGLYPH K008	[51EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A2, 0x0021 };
    uint32_t const ces[9] = { 0x51EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_365)
{
    // 131A2 003F;	
    // (𓆢) EGYPTIAN HIEROGLYPH K008	[51EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A2, 0x003F };
    uint32_t const ces[9] = { 0x51EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_366)
{
    // 131A2 0061;	
    // (𓆢) EGYPTIAN HIEROGLYPH K008	[51EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A2, 0x0061 };
    uint32_t const ces[9] = { 0x51EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_367)
{
    // 131A2 0041;	
    // (𓆢) EGYPTIAN HIEROGLYPH K008	[51EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A2, 0x0041 };
    uint32_t const ces[9] = { 0x51EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_368)
{
    // 131A2 0062;	
    // (𓆢) EGYPTIAN HIEROGLYPH K008	[51EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A2, 0x0062 };
    uint32_t const ces[9] = { 0x51EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_369)
{
    // 131A3 0021;	
    // (𓆣) EGYPTIAN HIEROGLYPH L001	[51ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A3, 0x0021 };
    uint32_t const ces[9] = { 0x51ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_370)
{
    // 131A3 003F;	
    // (𓆣) EGYPTIAN HIEROGLYPH L001	[51ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A3, 0x003F };
    uint32_t const ces[9] = { 0x51ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_371)
{
    // 131A3 0061;	
    // (𓆣) EGYPTIAN HIEROGLYPH L001	[51ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A3, 0x0061 };
    uint32_t const ces[9] = { 0x51ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_372)
{
    // 131A3 0041;	
    // (𓆣) EGYPTIAN HIEROGLYPH L001	[51ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A3, 0x0041 };
    uint32_t const ces[9] = { 0x51ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_373)
{
    // 131A3 0062;	
    // (𓆣) EGYPTIAN HIEROGLYPH L001	[51ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A3, 0x0062 };
    uint32_t const ces[9] = { 0x51ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_374)
{
    // 131A4 0021;	
    // (𓆤) EGYPTIAN HIEROGLYPH L002	[51EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A4, 0x0021 };
    uint32_t const ces[9] = { 0x51EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_375)
{
    // 131A4 003F;	
    // (𓆤) EGYPTIAN HIEROGLYPH L002	[51EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A4, 0x003F };
    uint32_t const ces[9] = { 0x51EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_376)
{
    // 131A4 0061;	
    // (𓆤) EGYPTIAN HIEROGLYPH L002	[51EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A4, 0x0061 };
    uint32_t const ces[9] = { 0x51EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_377)
{
    // 131A4 0041;	
    // (𓆤) EGYPTIAN HIEROGLYPH L002	[51EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A4, 0x0041 };
    uint32_t const ces[9] = { 0x51EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_378)
{
    // 131A4 0062;	
    // (𓆤) EGYPTIAN HIEROGLYPH L002	[51EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A4, 0x0062 };
    uint32_t const ces[9] = { 0x51EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_379)
{
    // 131A5 0021;	
    // (𓆥) EGYPTIAN HIEROGLYPH L002A	[51EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A5, 0x0021 };
    uint32_t const ces[9] = { 0x51EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_380)
{
    // 131A5 003F;	
    // (𓆥) EGYPTIAN HIEROGLYPH L002A	[51EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A5, 0x003F };
    uint32_t const ces[9] = { 0x51EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_381)
{
    // 131A5 0061;	
    // (𓆥) EGYPTIAN HIEROGLYPH L002A	[51EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A5, 0x0061 };
    uint32_t const ces[9] = { 0x51EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_382)
{
    // 131A5 0041;	
    // (𓆥) EGYPTIAN HIEROGLYPH L002A	[51EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A5, 0x0041 };
    uint32_t const ces[9] = { 0x51EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_383)
{
    // 131A5 0062;	
    // (𓆥) EGYPTIAN HIEROGLYPH L002A	[51EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A5, 0x0062 };
    uint32_t const ces[9] = { 0x51EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_384)
{
    // 131A6 0021;	
    // (𓆦) EGYPTIAN HIEROGLYPH L003	[51F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A6, 0x0021 };
    uint32_t const ces[9] = { 0x51F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_385)
{
    // 131A6 003F;	
    // (𓆦) EGYPTIAN HIEROGLYPH L003	[51F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A6, 0x003F };
    uint32_t const ces[9] = { 0x51F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_386)
{
    // 131A6 0061;	
    // (𓆦) EGYPTIAN HIEROGLYPH L003	[51F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A6, 0x0061 };
    uint32_t const ces[9] = { 0x51F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_387)
{
    // 131A6 0041;	
    // (𓆦) EGYPTIAN HIEROGLYPH L003	[51F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A6, 0x0041 };
    uint32_t const ces[9] = { 0x51F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_388)
{
    // 131A6 0062;	
    // (𓆦) EGYPTIAN HIEROGLYPH L003	[51F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A6, 0x0062 };
    uint32_t const ces[9] = { 0x51F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_389)
{
    // 131A7 0021;	
    // (𓆧) EGYPTIAN HIEROGLYPH L004	[51F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A7, 0x0021 };
    uint32_t const ces[9] = { 0x51F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_390)
{
    // 131A7 003F;	
    // (𓆧) EGYPTIAN HIEROGLYPH L004	[51F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A7, 0x003F };
    uint32_t const ces[9] = { 0x51F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_391)
{
    // 131A7 0061;	
    // (𓆧) EGYPTIAN HIEROGLYPH L004	[51F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A7, 0x0061 };
    uint32_t const ces[9] = { 0x51F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_392)
{
    // 131A7 0041;	
    // (𓆧) EGYPTIAN HIEROGLYPH L004	[51F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A7, 0x0041 };
    uint32_t const ces[9] = { 0x51F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_393)
{
    // 131A7 0062;	
    // (𓆧) EGYPTIAN HIEROGLYPH L004	[51F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A7, 0x0062 };
    uint32_t const ces[9] = { 0x51F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_394)
{
    // 131A8 0021;	
    // (𓆨) EGYPTIAN HIEROGLYPH L005	[51F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A8, 0x0021 };
    uint32_t const ces[9] = { 0x51F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_395)
{
    // 131A8 003F;	
    // (𓆨) EGYPTIAN HIEROGLYPH L005	[51F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A8, 0x003F };
    uint32_t const ces[9] = { 0x51F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_396)
{
    // 131A8 0061;	
    // (𓆨) EGYPTIAN HIEROGLYPH L005	[51F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A8, 0x0061 };
    uint32_t const ces[9] = { 0x51F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_397)
{
    // 131A8 0041;	
    // (𓆨) EGYPTIAN HIEROGLYPH L005	[51F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A8, 0x0041 };
    uint32_t const ces[9] = { 0x51F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_398)
{
    // 131A8 0062;	
    // (𓆨) EGYPTIAN HIEROGLYPH L005	[51F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A8, 0x0062 };
    uint32_t const ces[9] = { 0x51F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_399)
{
    // 131A9 0021;	
    // (𓆩) EGYPTIAN HIEROGLYPH L006	[51F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A9, 0x0021 };
    uint32_t const ces[9] = { 0x51F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_400)
{
    // 131A9 003F;	
    // (𓆩) EGYPTIAN HIEROGLYPH L006	[51F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A9, 0x003F };
    uint32_t const ces[9] = { 0x51F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_401)
{
    // 131A9 0061;	
    // (𓆩) EGYPTIAN HIEROGLYPH L006	[51F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A9, 0x0061 };
    uint32_t const ces[9] = { 0x51F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_402)
{
    // 131A9 0041;	
    // (𓆩) EGYPTIAN HIEROGLYPH L006	[51F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131A9, 0x0041 };
    uint32_t const ces[9] = { 0x51F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_403)
{
    // 131A9 0062;	
    // (𓆩) EGYPTIAN HIEROGLYPH L006	[51F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131A9, 0x0062 };
    uint32_t const ces[9] = { 0x51F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_404)
{
    // 131AA 0021;	
    // (𓆪) EGYPTIAN HIEROGLYPH L006A	[51F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AA, 0x0021 };
    uint32_t const ces[9] = { 0x51F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_405)
{
    // 131AA 003F;	
    // (𓆪) EGYPTIAN HIEROGLYPH L006A	[51F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AA, 0x003F };
    uint32_t const ces[9] = { 0x51F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_406)
{
    // 131AA 0061;	
    // (𓆪) EGYPTIAN HIEROGLYPH L006A	[51F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AA, 0x0061 };
    uint32_t const ces[9] = { 0x51F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_407)
{
    // 131AA 0041;	
    // (𓆪) EGYPTIAN HIEROGLYPH L006A	[51F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131AA, 0x0041 };
    uint32_t const ces[9] = { 0x51F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_408)
{
    // 131AA 0062;	
    // (𓆪) EGYPTIAN HIEROGLYPH L006A	[51F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AA, 0x0062 };
    uint32_t const ces[9] = { 0x51F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_409)
{
    // 131AB 0021;	
    // (𓆫) EGYPTIAN HIEROGLYPH L007	[51F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AB, 0x0021 };
    uint32_t const ces[9] = { 0x51F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_410)
{
    // 131AB 003F;	
    // (𓆫) EGYPTIAN HIEROGLYPH L007	[51F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AB, 0x003F };
    uint32_t const ces[9] = { 0x51F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_411)
{
    // 131AB 0061;	
    // (𓆫) EGYPTIAN HIEROGLYPH L007	[51F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AB, 0x0061 };
    uint32_t const ces[9] = { 0x51F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_412)
{
    // 131AB 0041;	
    // (𓆫) EGYPTIAN HIEROGLYPH L007	[51F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131AB, 0x0041 };
    uint32_t const ces[9] = { 0x51F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_413)
{
    // 131AB 0062;	
    // (𓆫) EGYPTIAN HIEROGLYPH L007	[51F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AB, 0x0062 };
    uint32_t const ces[9] = { 0x51F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_414)
{
    // 131AC 0021;	
    // (𓆬) EGYPTIAN HIEROGLYPH L008	[51F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AC, 0x0021 };
    uint32_t const ces[9] = { 0x51F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_415)
{
    // 131AC 003F;	
    // (𓆬) EGYPTIAN HIEROGLYPH L008	[51F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AC, 0x003F };
    uint32_t const ces[9] = { 0x51F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_416)
{
    // 131AC 0061;	
    // (𓆬) EGYPTIAN HIEROGLYPH L008	[51F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AC, 0x0061 };
    uint32_t const ces[9] = { 0x51F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_417)
{
    // 131AC 0041;	
    // (𓆬) EGYPTIAN HIEROGLYPH L008	[51F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131AC, 0x0041 };
    uint32_t const ces[9] = { 0x51F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_418)
{
    // 131AC 0062;	
    // (𓆬) EGYPTIAN HIEROGLYPH L008	[51F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AC, 0x0062 };
    uint32_t const ces[9] = { 0x51F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_419)
{
    // 131AD 0021;	
    // (𓆭) EGYPTIAN HIEROGLYPH M001	[51F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AD, 0x0021 };
    uint32_t const ces[9] = { 0x51F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_420)
{
    // 131AD 003F;	
    // (𓆭) EGYPTIAN HIEROGLYPH M001	[51F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AD, 0x003F };
    uint32_t const ces[9] = { 0x51F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_421)
{
    // 131AD 0061;	
    // (𓆭) EGYPTIAN HIEROGLYPH M001	[51F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AD, 0x0061 };
    uint32_t const ces[9] = { 0x51F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_422)
{
    // 131AD 0041;	
    // (𓆭) EGYPTIAN HIEROGLYPH M001	[51F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131AD, 0x0041 };
    uint32_t const ces[9] = { 0x51F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_423)
{
    // 131AD 0062;	
    // (𓆭) EGYPTIAN HIEROGLYPH M001	[51F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AD, 0x0062 };
    uint32_t const ces[9] = { 0x51F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_424)
{
    // 131AE 0021;	
    // (𓆮) EGYPTIAN HIEROGLYPH M001A	[51F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AE, 0x0021 };
    uint32_t const ces[9] = { 0x51F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_425)
{
    // 131AE 003F;	
    // (𓆮) EGYPTIAN HIEROGLYPH M001A	[51F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AE, 0x003F };
    uint32_t const ces[9] = { 0x51F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_426)
{
    // 131AE 0061;	
    // (𓆮) EGYPTIAN HIEROGLYPH M001A	[51F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AE, 0x0061 };
    uint32_t const ces[9] = { 0x51F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_427)
{
    // 131AE 0041;	
    // (𓆮) EGYPTIAN HIEROGLYPH M001A	[51F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131AE, 0x0041 };
    uint32_t const ces[9] = { 0x51F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_428)
{
    // 131AE 0062;	
    // (𓆮) EGYPTIAN HIEROGLYPH M001A	[51F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AE, 0x0062 };
    uint32_t const ces[9] = { 0x51F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_429)
{
    // 131AF 0021;	
    // (𓆯) EGYPTIAN HIEROGLYPH M001B	[51F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AF, 0x0021 };
    uint32_t const ces[9] = { 0x51F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_430)
{
    // 131AF 003F;	
    // (𓆯) EGYPTIAN HIEROGLYPH M001B	[51F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AF, 0x003F };
    uint32_t const ces[9] = { 0x51F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_431)
{
    // 131AF 0061;	
    // (𓆯) EGYPTIAN HIEROGLYPH M001B	[51F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AF, 0x0061 };
    uint32_t const ces[9] = { 0x51F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_432)
{
    // 131AF 0041;	
    // (𓆯) EGYPTIAN HIEROGLYPH M001B	[51F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131AF, 0x0041 };
    uint32_t const ces[9] = { 0x51F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_433)
{
    // 131AF 0062;	
    // (𓆯) EGYPTIAN HIEROGLYPH M001B	[51F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131AF, 0x0062 };
    uint32_t const ces[9] = { 0x51F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_434)
{
    // 131B0 0021;	
    // (𓆰) EGYPTIAN HIEROGLYPH M002	[51FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B0, 0x0021 };
    uint32_t const ces[9] = { 0x51FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_435)
{
    // 131B0 003F;	
    // (𓆰) EGYPTIAN HIEROGLYPH M002	[51FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B0, 0x003F };
    uint32_t const ces[9] = { 0x51FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_436)
{
    // 131B0 0061;	
    // (𓆰) EGYPTIAN HIEROGLYPH M002	[51FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B0, 0x0061 };
    uint32_t const ces[9] = { 0x51FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_437)
{
    // 131B0 0041;	
    // (𓆰) EGYPTIAN HIEROGLYPH M002	[51FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B0, 0x0041 };
    uint32_t const ces[9] = { 0x51FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_438)
{
    // 131B0 0062;	
    // (𓆰) EGYPTIAN HIEROGLYPH M002	[51FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B0, 0x0062 };
    uint32_t const ces[9] = { 0x51FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_439)
{
    // 131B1 0021;	
    // (𓆱) EGYPTIAN HIEROGLYPH M003	[51FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B1, 0x0021 };
    uint32_t const ces[9] = { 0x51FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_440)
{
    // 131B1 003F;	
    // (𓆱) EGYPTIAN HIEROGLYPH M003	[51FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B1, 0x003F };
    uint32_t const ces[9] = { 0x51FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_441)
{
    // 131B1 0061;	
    // (𓆱) EGYPTIAN HIEROGLYPH M003	[51FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B1, 0x0061 };
    uint32_t const ces[9] = { 0x51FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_442)
{
    // 131B1 0041;	
    // (𓆱) EGYPTIAN HIEROGLYPH M003	[51FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B1, 0x0041 };
    uint32_t const ces[9] = { 0x51FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_443)
{
    // 131B1 0062;	
    // (𓆱) EGYPTIAN HIEROGLYPH M003	[51FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B1, 0x0062 };
    uint32_t const ces[9] = { 0x51FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_444)
{
    // 131B2 0021;	
    // (𓆲) EGYPTIAN HIEROGLYPH M003A	[51FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B2, 0x0021 };
    uint32_t const ces[9] = { 0x51FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_445)
{
    // 131B2 003F;	
    // (𓆲) EGYPTIAN HIEROGLYPH M003A	[51FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B2, 0x003F };
    uint32_t const ces[9] = { 0x51FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_446)
{
    // 131B2 0061;	
    // (𓆲) EGYPTIAN HIEROGLYPH M003A	[51FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B2, 0x0061 };
    uint32_t const ces[9] = { 0x51FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_447)
{
    // 131B2 0041;	
    // (𓆲) EGYPTIAN HIEROGLYPH M003A	[51FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B2, 0x0041 };
    uint32_t const ces[9] = { 0x51FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_448)
{
    // 131B2 0062;	
    // (𓆲) EGYPTIAN HIEROGLYPH M003A	[51FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B2, 0x0062 };
    uint32_t const ces[9] = { 0x51FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_449)
{
    // 131B3 0021;	
    // (𓆳) EGYPTIAN HIEROGLYPH M004	[51FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B3, 0x0021 };
    uint32_t const ces[9] = { 0x51FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_450)
{
    // 131B3 003F;	
    // (𓆳) EGYPTIAN HIEROGLYPH M004	[51FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B3, 0x003F };
    uint32_t const ces[9] = { 0x51FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_451)
{
    // 131B3 0061;	
    // (𓆳) EGYPTIAN HIEROGLYPH M004	[51FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B3, 0x0061 };
    uint32_t const ces[9] = { 0x51FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_452)
{
    // 131B3 0041;	
    // (𓆳) EGYPTIAN HIEROGLYPH M004	[51FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B3, 0x0041 };
    uint32_t const ces[9] = { 0x51FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_453)
{
    // 131B3 0062;	
    // (𓆳) EGYPTIAN HIEROGLYPH M004	[51FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B3, 0x0062 };
    uint32_t const ces[9] = { 0x51FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_454)
{
    // 131B4 0021;	
    // (𓆴) EGYPTIAN HIEROGLYPH M005	[51FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B4, 0x0021 };
    uint32_t const ces[9] = { 0x51FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_455)
{
    // 131B4 003F;	
    // (𓆴) EGYPTIAN HIEROGLYPH M005	[51FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B4, 0x003F };
    uint32_t const ces[9] = { 0x51FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_456)
{
    // 131B4 0061;	
    // (𓆴) EGYPTIAN HIEROGLYPH M005	[51FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B4, 0x0061 };
    uint32_t const ces[9] = { 0x51FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_457)
{
    // 131B4 0041;	
    // (𓆴) EGYPTIAN HIEROGLYPH M005	[51FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B4, 0x0041 };
    uint32_t const ces[9] = { 0x51FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_458)
{
    // 131B4 0062;	
    // (𓆴) EGYPTIAN HIEROGLYPH M005	[51FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B4, 0x0062 };
    uint32_t const ces[9] = { 0x51FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_459)
{
    // 131B5 0021;	
    // (𓆵) EGYPTIAN HIEROGLYPH M006	[51FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B5, 0x0021 };
    uint32_t const ces[9] = { 0x51FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_460)
{
    // 131B5 003F;	
    // (𓆵) EGYPTIAN HIEROGLYPH M006	[51FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B5, 0x003F };
    uint32_t const ces[9] = { 0x51FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_461)
{
    // 131B5 0061;	
    // (𓆵) EGYPTIAN HIEROGLYPH M006	[51FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B5, 0x0061 };
    uint32_t const ces[9] = { 0x51FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_462)
{
    // 131B5 0041;	
    // (𓆵) EGYPTIAN HIEROGLYPH M006	[51FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B5, 0x0041 };
    uint32_t const ces[9] = { 0x51FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_463)
{
    // 131B5 0062;	
    // (𓆵) EGYPTIAN HIEROGLYPH M006	[51FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B5, 0x0062 };
    uint32_t const ces[9] = { 0x51FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_464)
{
    // 131B6 0021;	
    // (𓆶) EGYPTIAN HIEROGLYPH M007	[5200 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B6, 0x0021 };
    uint32_t const ces[9] = { 0x5200, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_465)
{
    // 131B6 003F;	
    // (𓆶) EGYPTIAN HIEROGLYPH M007	[5200 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B6, 0x003F };
    uint32_t const ces[9] = { 0x5200, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_466)
{
    // 131B6 0061;	
    // (𓆶) EGYPTIAN HIEROGLYPH M007	[5200 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B6, 0x0061 };
    uint32_t const ces[9] = { 0x5200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_467)
{
    // 131B6 0041;	
    // (𓆶) EGYPTIAN HIEROGLYPH M007	[5200 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B6, 0x0041 };
    uint32_t const ces[9] = { 0x5200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_468)
{
    // 131B6 0062;	
    // (𓆶) EGYPTIAN HIEROGLYPH M007	[5200 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B6, 0x0062 };
    uint32_t const ces[9] = { 0x5200, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_469)
{
    // 131B7 0021;	
    // (𓆷) EGYPTIAN HIEROGLYPH M008	[5201 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B7, 0x0021 };
    uint32_t const ces[9] = { 0x5201, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_470)
{
    // 131B7 003F;	
    // (𓆷) EGYPTIAN HIEROGLYPH M008	[5201 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B7, 0x003F };
    uint32_t const ces[9] = { 0x5201, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_471)
{
    // 131B7 0061;	
    // (𓆷) EGYPTIAN HIEROGLYPH M008	[5201 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B7, 0x0061 };
    uint32_t const ces[9] = { 0x5201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_472)
{
    // 131B7 0041;	
    // (𓆷) EGYPTIAN HIEROGLYPH M008	[5201 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B7, 0x0041 };
    uint32_t const ces[9] = { 0x5201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_473)
{
    // 131B7 0062;	
    // (𓆷) EGYPTIAN HIEROGLYPH M008	[5201 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B7, 0x0062 };
    uint32_t const ces[9] = { 0x5201, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_474)
{
    // 131B8 0021;	
    // (𓆸) EGYPTIAN HIEROGLYPH M009	[5202 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B8, 0x0021 };
    uint32_t const ces[9] = { 0x5202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_475)
{
    // 131B8 003F;	
    // (𓆸) EGYPTIAN HIEROGLYPH M009	[5202 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B8, 0x003F };
    uint32_t const ces[9] = { 0x5202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_476)
{
    // 131B8 0061;	
    // (𓆸) EGYPTIAN HIEROGLYPH M009	[5202 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B8, 0x0061 };
    uint32_t const ces[9] = { 0x5202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_477)
{
    // 131B8 0041;	
    // (𓆸) EGYPTIAN HIEROGLYPH M009	[5202 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B8, 0x0041 };
    uint32_t const ces[9] = { 0x5202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_478)
{
    // 131B8 0062;	
    // (𓆸) EGYPTIAN HIEROGLYPH M009	[5202 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B8, 0x0062 };
    uint32_t const ces[9] = { 0x5202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_479)
{
    // 131B9 0021;	
    // (𓆹) EGYPTIAN HIEROGLYPH M010	[5203 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B9, 0x0021 };
    uint32_t const ces[9] = { 0x5203, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_480)
{
    // 131B9 003F;	
    // (𓆹) EGYPTIAN HIEROGLYPH M010	[5203 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B9, 0x003F };
    uint32_t const ces[9] = { 0x5203, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_481)
{
    // 131B9 0061;	
    // (𓆹) EGYPTIAN HIEROGLYPH M010	[5203 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B9, 0x0061 };
    uint32_t const ces[9] = { 0x5203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_482)
{
    // 131B9 0041;	
    // (𓆹) EGYPTIAN HIEROGLYPH M010	[5203 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131B9, 0x0041 };
    uint32_t const ces[9] = { 0x5203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_483)
{
    // 131B9 0062;	
    // (𓆹) EGYPTIAN HIEROGLYPH M010	[5203 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131B9, 0x0062 };
    uint32_t const ces[9] = { 0x5203, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_484)
{
    // 131BA 0021;	
    // (𓆺) EGYPTIAN HIEROGLYPH M010A	[5204 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BA, 0x0021 };
    uint32_t const ces[9] = { 0x5204, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_485)
{
    // 131BA 003F;	
    // (𓆺) EGYPTIAN HIEROGLYPH M010A	[5204 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BA, 0x003F };
    uint32_t const ces[9] = { 0x5204, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_486)
{
    // 131BA 0061;	
    // (𓆺) EGYPTIAN HIEROGLYPH M010A	[5204 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BA, 0x0061 };
    uint32_t const ces[9] = { 0x5204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_487)
{
    // 131BA 0041;	
    // (𓆺) EGYPTIAN HIEROGLYPH M010A	[5204 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131BA, 0x0041 };
    uint32_t const ces[9] = { 0x5204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_488)
{
    // 131BA 0062;	
    // (𓆺) EGYPTIAN HIEROGLYPH M010A	[5204 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BA, 0x0062 };
    uint32_t const ces[9] = { 0x5204, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_489)
{
    // 131BB 0021;	
    // (𓆻) EGYPTIAN HIEROGLYPH M011	[5205 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BB, 0x0021 };
    uint32_t const ces[9] = { 0x5205, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_490)
{
    // 131BB 003F;	
    // (𓆻) EGYPTIAN HIEROGLYPH M011	[5205 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BB, 0x003F };
    uint32_t const ces[9] = { 0x5205, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_491)
{
    // 131BB 0061;	
    // (𓆻) EGYPTIAN HIEROGLYPH M011	[5205 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BB, 0x0061 };
    uint32_t const ces[9] = { 0x5205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_492)
{
    // 131BB 0041;	
    // (𓆻) EGYPTIAN HIEROGLYPH M011	[5205 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131BB, 0x0041 };
    uint32_t const ces[9] = { 0x5205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_493)
{
    // 131BB 0062;	
    // (𓆻) EGYPTIAN HIEROGLYPH M011	[5205 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BB, 0x0062 };
    uint32_t const ces[9] = { 0x5205, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_494)
{
    // 131BC 0021;	
    // (𓆼) EGYPTIAN HIEROGLYPH M012	[5206 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BC, 0x0021 };
    uint32_t const ces[9] = { 0x5206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_495)
{
    // 131BC 003F;	
    // (𓆼) EGYPTIAN HIEROGLYPH M012	[5206 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BC, 0x003F };
    uint32_t const ces[9] = { 0x5206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_496)
{
    // 131BC 0061;	
    // (𓆼) EGYPTIAN HIEROGLYPH M012	[5206 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BC, 0x0061 };
    uint32_t const ces[9] = { 0x5206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_497)
{
    // 131BC 0041;	
    // (𓆼) EGYPTIAN HIEROGLYPH M012	[5206 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131BC, 0x0041 };
    uint32_t const ces[9] = { 0x5206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_498)
{
    // 131BC 0062;	
    // (𓆼) EGYPTIAN HIEROGLYPH M012	[5206 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BC, 0x0062 };
    uint32_t const ces[9] = { 0x5206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_300_499)
{
    // 131BD 0021;	
    // (𓆽) EGYPTIAN HIEROGLYPH M012A	[5207 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BD, 0x0021 };
    uint32_t const ces[9] = { 0x5207, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

