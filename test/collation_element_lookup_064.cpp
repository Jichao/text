// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_064_000)
{
    // 275D  ; [*0A95.0020.0002] 
    // HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x275d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_001)
{
    // 275E  ; [*0A96.0020.0002] 
    // HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x275e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_002)
{
    // 275F  ; [*0A97.0020.0002] 
    // HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x275f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_003)
{
    // 2760  ; [*0A98.0020.0002] 
    // HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x2760 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_004)
{
    // 2761  ; [*0A99.0020.0002] 
    // CURVED STEM PARAGRAPH SIGN ORNAMENT

    uint32_t const cps[1] = { 0x2761 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_005)
{
    // 2762  ; [*0A9A.0020.0002] 
    // HEAVY EXCLAMATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x2762 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_006)
{
    // 2763  ; [*0A9B.0020.0002] 
    // HEAVY HEART EXCLAMATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x2763 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_007)
{
    // 2764  ; [*0A9C.0020.0002] 
    // HEAVY BLACK HEART

    uint32_t const cps[1] = { 0x2764 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_008)
{
    // 2765  ; [*0A9D.0020.0002] 
    // ROTATED HEAVY BLACK HEART BULLET

    uint32_t const cps[1] = { 0x2765 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_009)
{
    // 2766  ; [*0A9E.0020.0002] 
    // FLORAL HEART

    uint32_t const cps[1] = { 0x2766 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_010)
{
    // 2767  ; [*0A9F.0020.0002] 
    // ROTATED FLORAL HEART BULLET

    uint32_t const cps[1] = { 0x2767 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xa9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_011)
{
    // 2768  ; [*034E.0020.0002] 
    // MEDIUM LEFT PARENTHESIS ORNAMENT

    uint32_t const cps[1] = { 0x2768 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_012)
{
    // 2769  ; [*034F.0020.0002] 
    // MEDIUM RIGHT PARENTHESIS ORNAMENT

    uint32_t const cps[1] = { 0x2769 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_013)
{
    // 276A  ; [*0350.0020.0002] 
    // MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT

    uint32_t const cps[1] = { 0x276a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x350), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_014)
{
    // 276B  ; [*0351.0020.0002] 
    // MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT

    uint32_t const cps[1] = { 0x276b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x351), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_015)
{
    // 276C  ; [*0352.0020.0002] 
    // MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT

    uint32_t const cps[1] = { 0x276c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x352), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_016)
{
    // 276D  ; [*0353.0020.0002] 
    // MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT

    uint32_t const cps[1] = { 0x276d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x353), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_017)
{
    // 276E  ; [*0354.0020.0002] 
    // HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x276e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x354), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_018)
{
    // 276F  ; [*0355.0020.0002] 
    // HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT

    uint32_t const cps[1] = { 0x276f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x355), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_019)
{
    // 2770  ; [*0356.0020.0002] 
    // HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT

    uint32_t const cps[1] = { 0x2770 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x356), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_020)
{
    // 2771  ; [*0357.0020.0002] 
    // HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT

    uint32_t const cps[1] = { 0x2771 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x357), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_021)
{
    // 2772  ; [*0358.0020.0002] 
    // LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT

    uint32_t const cps[1] = { 0x2772 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x358), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_022)
{
    // 2773  ; [*0359.0020.0002] 
    // LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT

    uint32_t const cps[1] = { 0x2773 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x359), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_023)
{
    // 2774  ; [*035A.0020.0002] 
    // MEDIUM LEFT CURLY BRACKET ORNAMENT

    uint32_t const cps[1] = { 0x2774 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x35a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_024)
{
    // 2775  ; [*035B.0020.0002] 
    // MEDIUM RIGHT CURLY BRACKET ORNAMENT

    uint32_t const cps[1] = { 0x2775 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x35b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_025)
{
    // 2776  ; [.1CA4.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT ONE

    uint32_t const cps[1] = { 0x2776 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_026)
{
    // 2777  ; [.1CA5.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT TWO

    uint32_t const cps[1] = { 0x2777 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_027)
{
    // 2778  ; [.1CA6.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT THREE

    uint32_t const cps[1] = { 0x2778 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_028)
{
    // 2779  ; [.1CA7.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT FOUR

    uint32_t const cps[1] = { 0x2779 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_029)
{
    // 277A  ; [.1CA8.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT FIVE

    uint32_t const cps[1] = { 0x277a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_030)
{
    // 277B  ; [.1CA9.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT SIX

    uint32_t const cps[1] = { 0x277b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_031)
{
    // 277C  ; [.1CAA.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT SEVEN

    uint32_t const cps[1] = { 0x277c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_032)
{
    // 277D  ; [.1CAB.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT EIGHT

    uint32_t const cps[1] = { 0x277d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_033)
{
    // 277E  ; [.1CAC.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED DIGIT NINE

    uint32_t const cps[1] = { 0x277e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_034)
{
    // 277F  ; [.1CA4.0020.0006][.1CA3.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED NUMBER TEN

    uint32_t const cps[1] = { 0x277f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_064_035)
{
    // 2780  ; [.1CA4.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT ONE

    uint32_t const cps[1] = { 0x2780 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_036)
{
    // 2781  ; [.1CA5.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT TWO

    uint32_t const cps[1] = { 0x2781 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_037)
{
    // 2782  ; [.1CA6.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT THREE

    uint32_t const cps[1] = { 0x2782 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_038)
{
    // 2783  ; [.1CA7.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT FOUR

    uint32_t const cps[1] = { 0x2783 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_039)
{
    // 2784  ; [.1CA8.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT FIVE

    uint32_t const cps[1] = { 0x2784 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_040)
{
    // 2785  ; [.1CA9.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT SIX

    uint32_t const cps[1] = { 0x2785 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_041)
{
    // 2786  ; [.1CAA.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN

    uint32_t const cps[1] = { 0x2786 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_042)
{
    // 2787  ; [.1CAB.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT

    uint32_t const cps[1] = { 0x2787 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_043)
{
    // 2788  ; [.1CAC.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF DIGIT NINE

    uint32_t const cps[1] = { 0x2788 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_044)
{
    // 2789  ; [.1CA4.0020.0006][.1CA3.0020.0006] 
    // DINGBAT CIRCLED SANS-SERIF NUMBER TEN

    uint32_t const cps[1] = { 0x2789 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_064_045)
{
    // 278A  ; [.1CA4.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE

    uint32_t const cps[1] = { 0x278a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_046)
{
    // 278B  ; [.1CA5.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT TWO

    uint32_t const cps[1] = { 0x278b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_047)
{
    // 278C  ; [.1CA6.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE

    uint32_t const cps[1] = { 0x278c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_048)
{
    // 278D  ; [.1CA7.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR

    uint32_t const cps[1] = { 0x278d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_049)
{
    // 278E  ; [.1CA8.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE

    uint32_t const cps[1] = { 0x278e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_050)
{
    // 278F  ; [.1CA9.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX

    uint32_t const cps[1] = { 0x278f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_051)
{
    // 2790  ; [.1CAA.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN

    uint32_t const cps[1] = { 0x2790 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_052)
{
    // 2791  ; [.1CAB.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT

    uint32_t const cps[1] = { 0x2791 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_053)
{
    // 2792  ; [.1CAC.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE

    uint32_t const cps[1] = { 0x2792 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_054)
{
    // 2793  ; [.1CA4.0020.0006][.1CA3.0020.0006] 
    // DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN

    uint32_t const cps[1] = { 0x2793 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x6)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_064_055)
{
    // 2794  ; [*0AA0.0020.0002] 
    // HEAVY WIDE-HEADED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2794 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_056)
{
    // 2795  ; [*0AA1.0020.0002] 
    // HEAVY PLUS SIGN

    uint32_t const cps[1] = { 0x2795 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_057)
{
    // 2796  ; [*0AA2.0020.0002] 
    // HEAVY MINUS SIGN

    uint32_t const cps[1] = { 0x2796 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_058)
{
    // 2797  ; [*0AA3.0020.0002] 
    // HEAVY DIVISION SIGN

    uint32_t const cps[1] = { 0x2797 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_059)
{
    // 2798  ; [*0AA4.0020.0002] 
    // HEAVY SOUTH EAST ARROW

    uint32_t const cps[1] = { 0x2798 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_060)
{
    // 2799  ; [*0AA5.0020.0002] 
    // HEAVY RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2799 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_061)
{
    // 279A  ; [*0AA6.0020.0002] 
    // HEAVY NORTH EAST ARROW

    uint32_t const cps[1] = { 0x279a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_062)
{
    // 279B  ; [*0AA7.0020.0002] 
    // DRAFTING POINT RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x279b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_063)
{
    // 279C  ; [*0AA8.0020.0002] 
    // HEAVY ROUND-TIPPED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x279c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_064)
{
    // 279D  ; [*0AA9.0020.0002] 
    // TRIANGLE-HEADED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x279d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaa9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_065)
{
    // 279E  ; [*0AAA.0020.0002] 
    // HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x279e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaaa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_066)
{
    // 279F  ; [*0AAB.0020.0002] 
    // DASHED TRIANGLE-HEADED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x279f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_067)
{
    // 27A0  ; [*0AAC.0020.0002] 
    // HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_068)
{
    // 27A1  ; [*0AAD.0020.0002] 
    // BLACK RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_069)
{
    // 27A2  ; [*0AAE.0020.0002] 
    // THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD

    uint32_t const cps[1] = { 0x27a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_070)
{
    // 27A3  ; [*0AAF.0020.0002] 
    // THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD

    uint32_t const cps[1] = { 0x27a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaaf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_071)
{
    // 27A4  ; [*0AB0.0020.0002] 
    // BLACK RIGHTWARDS ARROWHEAD

    uint32_t const cps[1] = { 0x27a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_072)
{
    // 27A5  ; [*0AB1.0020.0002] 
    // HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_073)
{
    // 27A6  ; [*0AB2.0020.0002] 
    // HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_074)
{
    // 27A7  ; [*0AB3.0020.0002] 
    // SQUAT BLACK RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_075)
{
    // 27A8  ; [*0AB4.0020.0002] 
    // HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_076)
{
    // 27A9  ; [*0AB5.0020.0002] 
    // RIGHT-SHADED WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_077)
{
    // 27AA  ; [*0AB6.0020.0002] 
    // LEFT-SHADED WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_078)
{
    // 27AB  ; [*0AB7.0020.0002] 
    // BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_079)
{
    // 27AC  ; [*0AB8.0020.0002] 
    // FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_080)
{
    // 27AD  ; [*0AB9.0020.0002] 
    // HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xab9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_081)
{
    // 27AE  ; [*0ABA.0020.0002] 
    // HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_082)
{
    // 27AF  ; [*0ABB.0020.0002] 
    // NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xabb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_083)
{
    // 27B0  ; [*0ABC.0020.0002] 
    // CURLY LOOP

    uint32_t const cps[1] = { 0x27b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xabc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_084)
{
    // 27B1  ; [*0ABD.0020.0002] 
    // NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xabd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_085)
{
    // 27B2  ; [*0ABE.0020.0002] 
    // CIRCLED HEAVY WHITE RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xabe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_086)
{
    // 27B3  ; [*0ABF.0020.0002] 
    // WHITE-FEATHERED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xabf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_087)
{
    // 27B4  ; [*0AC0.0020.0002] 
    // BLACK-FEATHERED SOUTH EAST ARROW

    uint32_t const cps[1] = { 0x27b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_088)
{
    // 27B5  ; [*0AC1.0020.0002] 
    // BLACK-FEATHERED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_089)
{
    // 27B6  ; [*0AC2.0020.0002] 
    // BLACK-FEATHERED NORTH EAST ARROW

    uint32_t const cps[1] = { 0x27b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_090)
{
    // 27B7  ; [*0AC3.0020.0002] 
    // HEAVY BLACK-FEATHERED SOUTH EAST ARROW

    uint32_t const cps[1] = { 0x27b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_091)
{
    // 27B8  ; [*0AC4.0020.0002] 
    // HEAVY BLACK-FEATHERED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_092)
{
    // 27B9  ; [*0AC5.0020.0002] 
    // HEAVY BLACK-FEATHERED NORTH EAST ARROW

    uint32_t const cps[1] = { 0x27b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_093)
{
    // 27BA  ; [*0AC6.0020.0002] 
    // TEARDROP-BARBED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_094)
{
    // 27BB  ; [*0AC7.0020.0002] 
    // HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_095)
{
    // 27BC  ; [*0AC8.0020.0002] 
    // WEDGE-TAILED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_096)
{
    // 27BD  ; [*0AC9.0020.0002] 
    // HEAVY WEDGE-TAILED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xac9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_097)
{
    // 27BE  ; [*0ACA.0020.0002] 
    // OPEN-OUTLINED RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x27be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_098)
{
    // 27BF  ; [*0ACB.0020.0002] 
    // DOUBLE CURLY LOOP

    uint32_t const cps[1] = { 0x27bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xacb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_099)
{
    // 27C0  ; [*0ACC.0020.0002] 
    // THREE DIMENSIONAL ANGLE

    uint32_t const cps[1] = { 0x27c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xacc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_100)
{
    // 27C1  ; [*0ACD.0020.0002] 
    // WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE

    uint32_t const cps[1] = { 0x27c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xacd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_101)
{
    // 27C2  ; [*0ACE.0020.0002] 
    // PERPENDICULAR

    uint32_t const cps[1] = { 0x27c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xace), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_102)
{
    // 27C3  ; [*0ACF.0020.0002] 
    // OPEN SUBSET

    uint32_t const cps[1] = { 0x27c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xacf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_103)
{
    // 27C4  ; [*0AD0.0020.0002] 
    // OPEN SUPERSET

    uint32_t const cps[1] = { 0x27c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_104)
{
    // 27C5  ; [*0342.0020.0002] 
    // LEFT S-SHAPED BAG DELIMITER

    uint32_t const cps[1] = { 0x27c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x342), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_105)
{
    // 27C6  ; [*0343.0020.0002] 
    // RIGHT S-SHAPED BAG DELIMITER

    uint32_t const cps[1] = { 0x27c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x343), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_106)
{
    // 27C7  ; [*0AD1.0020.0002] 
    // OR WITH DOT INSIDE

    uint32_t const cps[1] = { 0x27c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_107)
{
    // 27C8  ; [*0AD2.0020.0002] 
    // REVERSE SOLIDUS PRECEDING SUBSET

    uint32_t const cps[1] = { 0x27c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_108)
{
    // 27C9  ; [*0AD3.0020.0002] 
    // SUPERSET PRECEDING SOLIDUS

    uint32_t const cps[1] = { 0x27c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_109)
{
    // 27CA  ; [*0AD4.0020.0002] 
    // VERTICAL BAR WITH HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x27ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_110)
{
    // 27CB  ; [*0AD5.0020.0002] 
    // MATHEMATICAL RISING DIAGONAL

    uint32_t const cps[1] = { 0x27cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_111)
{
    // 27CC  ; [*0AD6.0020.0002] 
    // LONG DIVISION

    uint32_t const cps[1] = { 0x27cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_112)
{
    // 27CD  ; [*0AD7.0020.0002] 
    // MATHEMATICAL FALLING DIAGONAL

    uint32_t const cps[1] = { 0x27cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_113)
{
    // 27CE  ; [*0AD8.0020.0002] 
    // SQUARED LOGICAL AND

    uint32_t const cps[1] = { 0x27ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_114)
{
    // 27CF  ; [*0AD9.0020.0002] 
    // SQUARED LOGICAL OR

    uint32_t const cps[1] = { 0x27cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xad9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_115)
{
    // 27D0  ; [*0ADA.0020.0002] 
    // WHITE DIAMOND WITH CENTRED DOT

    uint32_t const cps[1] = { 0x27d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xada), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_116)
{
    // 27D1  ; [*0ADB.0020.0002] 
    // AND WITH DOT

    uint32_t const cps[1] = { 0x27d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xadb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_117)
{
    // 27D2  ; [*0ADC.0020.0002] 
    // ELEMENT OF OPENING UPWARDS

    uint32_t const cps[1] = { 0x27d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xadc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_118)
{
    // 27D3  ; [*0ADD.0020.0002] 
    // LOWER RIGHT CORNER WITH DOT

    uint32_t const cps[1] = { 0x27d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xadd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_119)
{
    // 27D4  ; [*0ADE.0020.0002] 
    // UPPER LEFT CORNER WITH DOT

    uint32_t const cps[1] = { 0x27d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xade), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_120)
{
    // 27D5  ; [*0ADF.0020.0002] 
    // LEFT OUTER JOIN

    uint32_t const cps[1] = { 0x27d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xadf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_121)
{
    // 27D6  ; [*0AE0.0020.0002] 
    // RIGHT OUTER JOIN

    uint32_t const cps[1] = { 0x27d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_122)
{
    // 27D7  ; [*0AE1.0020.0002] 
    // FULL OUTER JOIN

    uint32_t const cps[1] = { 0x27d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_123)
{
    // 27D8  ; [*0AE2.0020.0002] 
    // LARGE UP TACK

    uint32_t const cps[1] = { 0x27d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_124)
{
    // 27D9  ; [*0AE3.0020.0002] 
    // LARGE DOWN TACK

    uint32_t const cps[1] = { 0x27d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_125)
{
    // 27DA  ; [*0AE4.0020.0002] 
    // LEFT AND RIGHT DOUBLE TURNSTILE

    uint32_t const cps[1] = { 0x27da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_126)
{
    // 27DB  ; [*0AE5.0020.0002] 
    // LEFT AND RIGHT TACK

    uint32_t const cps[1] = { 0x27db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_127)
{
    // 27DC  ; [*0AE6.0020.0002] 
    // LEFT MULTIMAP

    uint32_t const cps[1] = { 0x27dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_128)
{
    // 27DD  ; [*0AE7.0020.0002] 
    // LONG RIGHT TACK

    uint32_t const cps[1] = { 0x27dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_129)
{
    // 27DE  ; [*0AE8.0020.0002] 
    // LONG LEFT TACK

    uint32_t const cps[1] = { 0x27de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_130)
{
    // 27DF  ; [*0AE9.0020.0002] 
    // UP TACK WITH CIRCLE ABOVE

    uint32_t const cps[1] = { 0x27df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xae9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_131)
{
    // 27E0  ; [*0AEA.0020.0002] 
    // LOZENGE DIVIDED BY HORIZONTAL RULE

    uint32_t const cps[1] = { 0x27e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_132)
{
    // 27E1  ; [*0AEB.0020.0002] 
    // WHITE CONCAVE-SIDED DIAMOND

    uint32_t const cps[1] = { 0x27e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaeb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_133)
{
    // 27E2  ; [*0AEC.0020.0002] 
    // WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK

    uint32_t const cps[1] = { 0x27e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_134)
{
    // 27E3  ; [*0AED.0020.0002] 
    // WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK

    uint32_t const cps[1] = { 0x27e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_135)
{
    // 27E4  ; [*0AEE.0020.0002] 
    // WHITE SQUARE WITH LEFTWARDS TICK

    uint32_t const cps[1] = { 0x27e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_136)
{
    // 27E5  ; [*0AEF.0020.0002] 
    // WHITE SQUARE WITH RIGHTWARDS TICK

    uint32_t const cps[1] = { 0x27e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_137)
{
    // 27E6  ; [*0344.0020.0002] 
    // MATHEMATICAL LEFT WHITE SQUARE BRACKET

    uint32_t const cps[1] = { 0x27e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x344), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_138)
{
    // 27E7  ; [*0345.0020.0002] 
    // MATHEMATICAL RIGHT WHITE SQUARE BRACKET

    uint32_t const cps[1] = { 0x27e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x345), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_139)
{
    // 27E8  ; [*0346.0020.0002] 
    // MATHEMATICAL LEFT ANGLE BRACKET

    uint32_t const cps[1] = { 0x27e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x346), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_140)
{
    // 27E9  ; [*0347.0020.0002] 
    // MATHEMATICAL RIGHT ANGLE BRACKET

    uint32_t const cps[1] = { 0x27e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x347), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_141)
{
    // 27EA  ; [*0348.0020.0002] 
    // MATHEMATICAL LEFT DOUBLE ANGLE BRACKET

    uint32_t const cps[1] = { 0x27ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x348), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_142)
{
    // 27EB  ; [*0349.0020.0002] 
    // MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET

    uint32_t const cps[1] = { 0x27eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x349), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_143)
{
    // 27EC  ; [*034A.0020.0002] 
    // MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0x27ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_144)
{
    // 27ED  ; [*034B.0020.0002] 
    // MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0x27ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_145)
{
    // 27EE  ; [*034C.0020.0002] 
    // MATHEMATICAL LEFT FLATTENED PARENTHESIS

    uint32_t const cps[1] = { 0x27ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_146)
{
    // 27EF  ; [*034D.0020.0002] 
    // MATHEMATICAL RIGHT FLATTENED PARENTHESIS

    uint32_t const cps[1] = { 0x27ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x34d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_147)
{
    // 27F0  ; [*0AF0.0020.0002] 
    // UPWARDS QUADRUPLE ARROW

    uint32_t const cps[1] = { 0x27f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_148)
{
    // 27F1  ; [*0AF1.0020.0002] 
    // DOWNWARDS QUADRUPLE ARROW

    uint32_t const cps[1] = { 0x27f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_064_149)
{
    // 27F2  ; [*0AF2.0020.0002] 
    // ANTICLOCKWISE GAPPED CIRCLE ARROW

    uint32_t const cps[1] = { 0x27f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xaf2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

