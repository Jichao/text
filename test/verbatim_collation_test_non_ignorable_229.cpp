// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_229_000)
{
    // A551 0041;	
    // (ꕑ) VAI SYLLABLE BHA	[38C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA551, 0x0041 };
    uint32_t const ces[9] = { 0x38C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_001)
{
    // A551 0062;	
    // (ꕑ) VAI SYLLABLE BHA	[38C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA551, 0x0062 };
    uint32_t const ces[9] = { 0x38C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_002)
{
    // A552 0021;	
    // (ꕒ) VAI SYLLABLE BA	[38C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA552, 0x0021 };
    uint32_t const ces[9] = { 0x38C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_003)
{
    // A552 003F;	
    // (ꕒ) VAI SYLLABLE BA	[38C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA552, 0x003F };
    uint32_t const ces[9] = { 0x38C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_004)
{
    // A552 0061;	
    // (ꕒ) VAI SYLLABLE BA	[38C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA552, 0x0061 };
    uint32_t const ces[9] = { 0x38C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_005)
{
    // A552 0041;	
    // (ꕒ) VAI SYLLABLE BA	[38C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA552, 0x0041 };
    uint32_t const ces[9] = { 0x38C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_006)
{
    // A552 0062;	
    // (ꕒ) VAI SYLLABLE BA	[38C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA552, 0x0062 };
    uint32_t const ces[9] = { 0x38C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_007)
{
    // A617 0021;	
    // (ꘗ) VAI SYMBOL BANG	[38C3 397C 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA617, 0x0021 };
    uint32_t const ces[12] = { 0x38C3, 0x397C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_008)
{
    // A617 003F;	
    // (ꘗ) VAI SYMBOL BANG	[38C3 397C 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA617, 0x003F };
    uint32_t const ces[12] = { 0x38C3, 0x397C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_009)
{
    // A617 0061;	
    // (ꘗ) VAI SYMBOL BANG	[38C3 397C 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA617, 0x0061 };
    uint32_t const ces[12] = { 0x38C3, 0x397C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_010)
{
    // A617 0041;	
    // (ꘗ) VAI SYMBOL BANG	[38C3 397C 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA617, 0x0041 };
    uint32_t const ces[12] = { 0x38C3, 0x397C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_011)
{
    // A617 0062;	
    // (ꘗ) VAI SYMBOL BANG	[38C3 397C 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA617, 0x0062 };
    uint32_t const ces[12] = { 0x38C3, 0x397C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_012)
{
    // A553 0021;	
    // (ꕓ) VAI SYLLABLE MBA	[38C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA553, 0x0021 };
    uint32_t const ces[9] = { 0x38C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_013)
{
    // A553 003F;	
    // (ꕓ) VAI SYLLABLE MBA	[38C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA553, 0x003F };
    uint32_t const ces[9] = { 0x38C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_014)
{
    // A553 0061;	
    // (ꕓ) VAI SYLLABLE MBA	[38C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA553, 0x0061 };
    uint32_t const ces[9] = { 0x38C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_015)
{
    // A553 0041;	
    // (ꕓ) VAI SYLLABLE MBA	[38C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA553, 0x0041 };
    uint32_t const ces[9] = { 0x38C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_016)
{
    // A553 0062;	
    // (ꕓ) VAI SYLLABLE MBA	[38C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA553, 0x0062 };
    uint32_t const ces[9] = { 0x38C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_017)
{
    // A554 0021;	
    // (ꕔ) VAI SYLLABLE KPA	[38C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA554, 0x0021 };
    uint32_t const ces[9] = { 0x38C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_018)
{
    // A554 003F;	
    // (ꕔ) VAI SYLLABLE KPA	[38C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA554, 0x003F };
    uint32_t const ces[9] = { 0x38C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_019)
{
    // A554 0061;	
    // (ꕔ) VAI SYLLABLE KPA	[38C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA554, 0x0061 };
    uint32_t const ces[9] = { 0x38C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_020)
{
    // A554 0041;	
    // (ꕔ) VAI SYLLABLE KPA	[38C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA554, 0x0041 };
    uint32_t const ces[9] = { 0x38C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_021)
{
    // A554 0062;	
    // (ꕔ) VAI SYLLABLE KPA	[38C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA554, 0x0062 };
    uint32_t const ces[9] = { 0x38C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_022)
{
    // A555 0021;	
    // (ꕕ) VAI SYLLABLE KPAN	[38C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA555, 0x0021 };
    uint32_t const ces[9] = { 0x38C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_023)
{
    // A555 003F;	
    // (ꕕ) VAI SYLLABLE KPAN	[38C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA555, 0x003F };
    uint32_t const ces[9] = { 0x38C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_024)
{
    // A555 0061;	
    // (ꕕ) VAI SYLLABLE KPAN	[38C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA555, 0x0061 };
    uint32_t const ces[9] = { 0x38C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_025)
{
    // A555 0041;	
    // (ꕕ) VAI SYLLABLE KPAN	[38C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA555, 0x0041 };
    uint32_t const ces[9] = { 0x38C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_026)
{
    // A555 0062;	
    // (ꕕ) VAI SYLLABLE KPAN	[38C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA555, 0x0062 };
    uint32_t const ces[9] = { 0x38C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_027)
{
    // A556 0021;	
    // (ꕖ) VAI SYLLABLE MGBA	[38C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA556, 0x0021 };
    uint32_t const ces[9] = { 0x38C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_028)
{
    // A556 003F;	
    // (ꕖ) VAI SYLLABLE MGBA	[38C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA556, 0x003F };
    uint32_t const ces[9] = { 0x38C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_029)
{
    // A556 0061;	
    // (ꕖ) VAI SYLLABLE MGBA	[38C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA556, 0x0061 };
    uint32_t const ces[9] = { 0x38C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_030)
{
    // A556 0041;	
    // (ꕖ) VAI SYLLABLE MGBA	[38C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA556, 0x0041 };
    uint32_t const ces[9] = { 0x38C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_031)
{
    // A556 0062;	
    // (ꕖ) VAI SYLLABLE MGBA	[38C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA556, 0x0062 };
    uint32_t const ces[9] = { 0x38C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_032)
{
    // A557 0021;	
    // (ꕗ) VAI SYLLABLE GBA	[38C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA557, 0x0021 };
    uint32_t const ces[9] = { 0x38C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_033)
{
    // A557 003F;	
    // (ꕗ) VAI SYLLABLE GBA	[38C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA557, 0x003F };
    uint32_t const ces[9] = { 0x38C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_034)
{
    // A557 0061;	
    // (ꕗ) VAI SYLLABLE GBA	[38C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA557, 0x0061 };
    uint32_t const ces[9] = { 0x38C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_035)
{
    // A557 0041;	
    // (ꕗ) VAI SYLLABLE GBA	[38C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA557, 0x0041 };
    uint32_t const ces[9] = { 0x38C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_036)
{
    // A557 0062;	
    // (ꕗ) VAI SYLLABLE GBA	[38C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA557, 0x0062 };
    uint32_t const ces[9] = { 0x38C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_037)
{
    // A558 0021;	
    // (ꕘ) VAI SYLLABLE FA	[38C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA558, 0x0021 };
    uint32_t const ces[9] = { 0x38C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_038)
{
    // A610 0021;	
    // (ꘐ) VAI SYLLABLE NDOLE FA	[38C9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA610, 0x0021 };
    uint32_t const ces[9] = { 0x38C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_039)
{
    // A558 003F;	
    // (ꕘ) VAI SYLLABLE FA	[38C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA558, 0x003F };
    uint32_t const ces[9] = { 0x38C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_040)
{
    // A610 003F;	
    // (ꘐ) VAI SYLLABLE NDOLE FA	[38C9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA610, 0x003F };
    uint32_t const ces[9] = { 0x38C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_041)
{
    // A558 0061;	
    // (ꕘ) VAI SYLLABLE FA	[38C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA558, 0x0061 };
    uint32_t const ces[9] = { 0x38C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_042)
{
    // A558 0041;	
    // (ꕘ) VAI SYLLABLE FA	[38C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA558, 0x0041 };
    uint32_t const ces[9] = { 0x38C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_043)
{
    // A610 0061;	
    // (ꘐ) VAI SYLLABLE NDOLE FA	[38C9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA610, 0x0061 };
    uint32_t const ces[9] = { 0x38C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_044)
{
    // A610 0041;	
    // (ꘐ) VAI SYLLABLE NDOLE FA	[38C9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA610, 0x0041 };
    uint32_t const ces[9] = { 0x38C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_045)
{
    // A558 0062;	
    // (ꕘ) VAI SYLLABLE FA	[38C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA558, 0x0062 };
    uint32_t const ces[9] = { 0x38C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_046)
{
    // A610 0062;	
    // (ꘐ) VAI SYLLABLE NDOLE FA	[38C9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA610, 0x0062 };
    uint32_t const ces[9] = { 0x38C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_047)
{
    // A618 0021;	
    // (ꘘ) VAI SYMBOL FAA	[38C9 397D 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA618, 0x0021 };
    uint32_t const ces[12] = { 0x38C9, 0x397D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_048)
{
    // A618 003F;	
    // (ꘘ) VAI SYMBOL FAA	[38C9 397D 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA618, 0x003F };
    uint32_t const ces[12] = { 0x38C9, 0x397D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_049)
{
    // A618 0061;	
    // (ꘘ) VAI SYMBOL FAA	[38C9 397D 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA618, 0x0061 };
    uint32_t const ces[12] = { 0x38C9, 0x397D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_050)
{
    // A618 0041;	
    // (ꘘ) VAI SYMBOL FAA	[38C9 397D 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA618, 0x0041 };
    uint32_t const ces[12] = { 0x38C9, 0x397D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_051)
{
    // A618 0062;	
    // (ꘘ) VAI SYMBOL FAA	[38C9 397D 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA618, 0x0062 };
    uint32_t const ces[12] = { 0x38C9, 0x397D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_052)
{
    // A559 0021;	
    // (ꕙ) VAI SYLLABLE VA	[38CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA559, 0x0021 };
    uint32_t const ces[9] = { 0x38CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_053)
{
    // A559 003F;	
    // (ꕙ) VAI SYLLABLE VA	[38CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA559, 0x003F };
    uint32_t const ces[9] = { 0x38CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_054)
{
    // A559 0061;	
    // (ꕙ) VAI SYLLABLE VA	[38CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA559, 0x0061 };
    uint32_t const ces[9] = { 0x38CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_055)
{
    // A559 0041;	
    // (ꕙ) VAI SYLLABLE VA	[38CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA559, 0x0041 };
    uint32_t const ces[9] = { 0x38CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_056)
{
    // A559 0062;	
    // (ꕙ) VAI SYLLABLE VA	[38CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA559, 0x0062 };
    uint32_t const ces[9] = { 0x38CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_057)
{
    // A55A 0021;	
    // (ꕚ) VAI SYLLABLE TA	[38CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55A, 0x0021 };
    uint32_t const ces[9] = { 0x38CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_058)
{
    // A55A 003F;	
    // (ꕚ) VAI SYLLABLE TA	[38CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55A, 0x003F };
    uint32_t const ces[9] = { 0x38CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_059)
{
    // A55A 0061;	
    // (ꕚ) VAI SYLLABLE TA	[38CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55A, 0x0061 };
    uint32_t const ces[9] = { 0x38CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_060)
{
    // A55A 0041;	
    // (ꕚ) VAI SYLLABLE TA	[38CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA55A, 0x0041 };
    uint32_t const ces[9] = { 0x38CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_061)
{
    // A55A 0062;	
    // (ꕚ) VAI SYLLABLE TA	[38CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55A, 0x0062 };
    uint32_t const ces[9] = { 0x38CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_062)
{
    // A619 0021;	
    // (ꘙ) VAI SYMBOL TAA	[38CB 397D 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA619, 0x0021 };
    uint32_t const ces[12] = { 0x38CB, 0x397D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_063)
{
    // A619 003F;	
    // (ꘙ) VAI SYMBOL TAA	[38CB 397D 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA619, 0x003F };
    uint32_t const ces[12] = { 0x38CB, 0x397D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_064)
{
    // A619 0061;	
    // (ꘙ) VAI SYMBOL TAA	[38CB 397D 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA619, 0x0061 };
    uint32_t const ces[12] = { 0x38CB, 0x397D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_065)
{
    // A619 0041;	
    // (ꘙ) VAI SYMBOL TAA	[38CB 397D 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA619, 0x0041 };
    uint32_t const ces[12] = { 0x38CB, 0x397D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_066)
{
    // A619 0062;	
    // (ꘙ) VAI SYMBOL TAA	[38CB 397D 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA619, 0x0062 };
    uint32_t const ces[12] = { 0x38CB, 0x397D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_067)
{
    // A55B 0021;	
    // (ꕛ) VAI SYLLABLE THA	[38CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55B, 0x0021 };
    uint32_t const ces[9] = { 0x38CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_068)
{
    // A55B 003F;	
    // (ꕛ) VAI SYLLABLE THA	[38CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55B, 0x003F };
    uint32_t const ces[9] = { 0x38CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_069)
{
    // A55B 0061;	
    // (ꕛ) VAI SYLLABLE THA	[38CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55B, 0x0061 };
    uint32_t const ces[9] = { 0x38CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_070)
{
    // A55B 0041;	
    // (ꕛ) VAI SYLLABLE THA	[38CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA55B, 0x0041 };
    uint32_t const ces[9] = { 0x38CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_071)
{
    // A55B 0062;	
    // (ꕛ) VAI SYLLABLE THA	[38CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55B, 0x0062 };
    uint32_t const ces[9] = { 0x38CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_072)
{
    // A55C 0021;	
    // (ꕜ) VAI SYLLABLE DHA	[38CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55C, 0x0021 };
    uint32_t const ces[9] = { 0x38CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_073)
{
    // A55C 003F;	
    // (ꕜ) VAI SYLLABLE DHA	[38CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55C, 0x003F };
    uint32_t const ces[9] = { 0x38CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_074)
{
    // A55C 0061;	
    // (ꕜ) VAI SYLLABLE DHA	[38CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55C, 0x0061 };
    uint32_t const ces[9] = { 0x38CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_075)
{
    // A55C 0041;	
    // (ꕜ) VAI SYLLABLE DHA	[38CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA55C, 0x0041 };
    uint32_t const ces[9] = { 0x38CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_076)
{
    // A55C 0062;	
    // (ꕜ) VAI SYLLABLE DHA	[38CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55C, 0x0062 };
    uint32_t const ces[9] = { 0x38CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_077)
{
    // A55D 0021;	
    // (ꕝ) VAI SYLLABLE DHHA	[38CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55D, 0x0021 };
    uint32_t const ces[9] = { 0x38CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_078)
{
    // A55D 003F;	
    // (ꕝ) VAI SYLLABLE DHHA	[38CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55D, 0x003F };
    uint32_t const ces[9] = { 0x38CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_079)
{
    // A55D 0061;	
    // (ꕝ) VAI SYLLABLE DHHA	[38CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55D, 0x0061 };
    uint32_t const ces[9] = { 0x38CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_080)
{
    // A55D 0041;	
    // (ꕝ) VAI SYLLABLE DHHA	[38CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA55D, 0x0041 };
    uint32_t const ces[9] = { 0x38CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_081)
{
    // A55D 0062;	
    // (ꕝ) VAI SYLLABLE DHHA	[38CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55D, 0x0062 };
    uint32_t const ces[9] = { 0x38CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_082)
{
    // A55E 0021;	
    // (ꕞ) VAI SYLLABLE LA	[38CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55E, 0x0021 };
    uint32_t const ces[9] = { 0x38CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_083)
{
    // A55E 003F;	
    // (ꕞ) VAI SYLLABLE LA	[38CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55E, 0x003F };
    uint32_t const ces[9] = { 0x38CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_084)
{
    // A55E 0061;	
    // (ꕞ) VAI SYLLABLE LA	[38CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55E, 0x0061 };
    uint32_t const ces[9] = { 0x38CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_085)
{
    // A55E 0041;	
    // (ꕞ) VAI SYLLABLE LA	[38CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA55E, 0x0041 };
    uint32_t const ces[9] = { 0x38CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_086)
{
    // A55E 0062;	
    // (ꕞ) VAI SYLLABLE LA	[38CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55E, 0x0062 };
    uint32_t const ces[9] = { 0x38CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_087)
{
    // A55F 0021;	
    // (ꕟ) VAI SYLLABLE RA	[38D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55F, 0x0021 };
    uint32_t const ces[9] = { 0x38D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_088)
{
    // A55F 003F;	
    // (ꕟ) VAI SYLLABLE RA	[38D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55F, 0x003F };
    uint32_t const ces[9] = { 0x38D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_089)
{
    // A55F 0061;	
    // (ꕟ) VAI SYLLABLE RA	[38D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55F, 0x0061 };
    uint32_t const ces[9] = { 0x38D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_090)
{
    // A55F 0041;	
    // (ꕟ) VAI SYLLABLE RA	[38D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA55F, 0x0041 };
    uint32_t const ces[9] = { 0x38D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_091)
{
    // A55F 0062;	
    // (ꕟ) VAI SYLLABLE RA	[38D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA55F, 0x0062 };
    uint32_t const ces[9] = { 0x38D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_092)
{
    // A560 0021;	
    // (ꕠ) VAI SYLLABLE DA	[38D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA560, 0x0021 };
    uint32_t const ces[9] = { 0x38D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_093)
{
    // A560 003F;	
    // (ꕠ) VAI SYLLABLE DA	[38D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA560, 0x003F };
    uint32_t const ces[9] = { 0x38D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_094)
{
    // A560 0061;	
    // (ꕠ) VAI SYLLABLE DA	[38D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA560, 0x0061 };
    uint32_t const ces[9] = { 0x38D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_095)
{
    // A560 0041;	
    // (ꕠ) VAI SYLLABLE DA	[38D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA560, 0x0041 };
    uint32_t const ces[9] = { 0x38D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_096)
{
    // A560 0062;	
    // (ꕠ) VAI SYLLABLE DA	[38D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA560, 0x0062 };
    uint32_t const ces[9] = { 0x38D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_097)
{
    // A61A 0021;	
    // (ꘚ) VAI SYMBOL DANG	[38D1 397C 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA61A, 0x0021 };
    uint32_t const ces[12] = { 0x38D1, 0x397C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_098)
{
    // A61A 003F;	
    // (ꘚ) VAI SYMBOL DANG	[38D1 397C 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA61A, 0x003F };
    uint32_t const ces[12] = { 0x38D1, 0x397C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_099)
{
    // A61A 0061;	
    // (ꘚ) VAI SYMBOL DANG	[38D1 397C 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA61A, 0x0061 };
    uint32_t const ces[12] = { 0x38D1, 0x397C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_100)
{
    // A61A 0041;	
    // (ꘚ) VAI SYMBOL DANG	[38D1 397C 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA61A, 0x0041 };
    uint32_t const ces[12] = { 0x38D1, 0x397C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_101)
{
    // A61A 0062;	
    // (ꘚ) VAI SYMBOL DANG	[38D1 397C 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA61A, 0x0062 };
    uint32_t const ces[12] = { 0x38D1, 0x397C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_102)
{
    // A561 0021;	
    // (ꕡ) VAI SYLLABLE NDA	[38D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA561, 0x0021 };
    uint32_t const ces[9] = { 0x38D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_103)
{
    // A561 003F;	
    // (ꕡ) VAI SYLLABLE NDA	[38D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA561, 0x003F };
    uint32_t const ces[9] = { 0x38D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_104)
{
    // A561 0061;	
    // (ꕡ) VAI SYLLABLE NDA	[38D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA561, 0x0061 };
    uint32_t const ces[9] = { 0x38D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_105)
{
    // A561 0041;	
    // (ꕡ) VAI SYLLABLE NDA	[38D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA561, 0x0041 };
    uint32_t const ces[9] = { 0x38D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_106)
{
    // A561 0062;	
    // (ꕡ) VAI SYLLABLE NDA	[38D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA561, 0x0062 };
    uint32_t const ces[9] = { 0x38D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_107)
{
    // A562 0021;	
    // (ꕢ) VAI SYLLABLE SA	[38D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA562, 0x0021 };
    uint32_t const ces[9] = { 0x38D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_108)
{
    // A562 003F;	
    // (ꕢ) VAI SYLLABLE SA	[38D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA562, 0x003F };
    uint32_t const ces[9] = { 0x38D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_109)
{
    // A562 0061;	
    // (ꕢ) VAI SYLLABLE SA	[38D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA562, 0x0061 };
    uint32_t const ces[9] = { 0x38D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_110)
{
    // A562 0041;	
    // (ꕢ) VAI SYLLABLE SA	[38D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA562, 0x0041 };
    uint32_t const ces[9] = { 0x38D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_111)
{
    // A562 0062;	
    // (ꕢ) VAI SYLLABLE SA	[38D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA562, 0x0062 };
    uint32_t const ces[9] = { 0x38D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_112)
{
    // A563 0021;	
    // (ꕣ) VAI SYLLABLE SHA	[38D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA563, 0x0021 };
    uint32_t const ces[9] = { 0x38D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_113)
{
    // A563 003F;	
    // (ꕣ) VAI SYLLABLE SHA	[38D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA563, 0x003F };
    uint32_t const ces[9] = { 0x38D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_114)
{
    // A563 0061;	
    // (ꕣ) VAI SYLLABLE SHA	[38D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA563, 0x0061 };
    uint32_t const ces[9] = { 0x38D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_115)
{
    // A563 0041;	
    // (ꕣ) VAI SYLLABLE SHA	[38D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA563, 0x0041 };
    uint32_t const ces[9] = { 0x38D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_116)
{
    // A563 0062;	
    // (ꕣ) VAI SYLLABLE SHA	[38D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA563, 0x0062 };
    uint32_t const ces[9] = { 0x38D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_117)
{
    // A564 0021;	
    // (ꕤ) VAI SYLLABLE ZA	[38D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA564, 0x0021 };
    uint32_t const ces[9] = { 0x38D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_118)
{
    // A564 003F;	
    // (ꕤ) VAI SYLLABLE ZA	[38D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA564, 0x003F };
    uint32_t const ces[9] = { 0x38D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_119)
{
    // A564 0061;	
    // (ꕤ) VAI SYLLABLE ZA	[38D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA564, 0x0061 };
    uint32_t const ces[9] = { 0x38D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_120)
{
    // A564 0041;	
    // (ꕤ) VAI SYLLABLE ZA	[38D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA564, 0x0041 };
    uint32_t const ces[9] = { 0x38D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_121)
{
    // A564 0062;	
    // (ꕤ) VAI SYLLABLE ZA	[38D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA564, 0x0062 };
    uint32_t const ces[9] = { 0x38D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_122)
{
    // A565 0021;	
    // (ꕥ) VAI SYLLABLE ZHA	[38D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA565, 0x0021 };
    uint32_t const ces[9] = { 0x38D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_123)
{
    // A565 003F;	
    // (ꕥ) VAI SYLLABLE ZHA	[38D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA565, 0x003F };
    uint32_t const ces[9] = { 0x38D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_124)
{
    // A565 0061;	
    // (ꕥ) VAI SYLLABLE ZHA	[38D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA565, 0x0061 };
    uint32_t const ces[9] = { 0x38D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_125)
{
    // A565 0041;	
    // (ꕥ) VAI SYLLABLE ZHA	[38D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA565, 0x0041 };
    uint32_t const ces[9] = { 0x38D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_126)
{
    // A565 0062;	
    // (ꕥ) VAI SYLLABLE ZHA	[38D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA565, 0x0062 };
    uint32_t const ces[9] = { 0x38D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_127)
{
    // A566 0021;	
    // (ꕦ) VAI SYLLABLE CA	[38D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA566, 0x0021 };
    uint32_t const ces[9] = { 0x38D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_128)
{
    // A566 003F;	
    // (ꕦ) VAI SYLLABLE CA	[38D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA566, 0x003F };
    uint32_t const ces[9] = { 0x38D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_129)
{
    // A566 0061;	
    // (ꕦ) VAI SYLLABLE CA	[38D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA566, 0x0061 };
    uint32_t const ces[9] = { 0x38D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_130)
{
    // A566 0041;	
    // (ꕦ) VAI SYLLABLE CA	[38D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA566, 0x0041 };
    uint32_t const ces[9] = { 0x38D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_131)
{
    // A566 0062;	
    // (ꕦ) VAI SYLLABLE CA	[38D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA566, 0x0062 };
    uint32_t const ces[9] = { 0x38D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_132)
{
    // A567 0021;	
    // (ꕧ) VAI SYLLABLE JA	[38D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA567, 0x0021 };
    uint32_t const ces[9] = { 0x38D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_133)
{
    // A567 003F;	
    // (ꕧ) VAI SYLLABLE JA	[38D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA567, 0x003F };
    uint32_t const ces[9] = { 0x38D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_134)
{
    // A567 0061;	
    // (ꕧ) VAI SYLLABLE JA	[38D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA567, 0x0061 };
    uint32_t const ces[9] = { 0x38D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_135)
{
    // A567 0041;	
    // (ꕧ) VAI SYLLABLE JA	[38D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA567, 0x0041 };
    uint32_t const ces[9] = { 0x38D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_136)
{
    // A567 0062;	
    // (ꕧ) VAI SYLLABLE JA	[38D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA567, 0x0062 };
    uint32_t const ces[9] = { 0x38D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_137)
{
    // A568 0021;	
    // (ꕨ) VAI SYLLABLE NJA	[38D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA568, 0x0021 };
    uint32_t const ces[9] = { 0x38D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_138)
{
    // A568 003F;	
    // (ꕨ) VAI SYLLABLE NJA	[38D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA568, 0x003F };
    uint32_t const ces[9] = { 0x38D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_139)
{
    // A568 0061;	
    // (ꕨ) VAI SYLLABLE NJA	[38D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA568, 0x0061 };
    uint32_t const ces[9] = { 0x38D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_140)
{
    // A568 0041;	
    // (ꕨ) VAI SYLLABLE NJA	[38D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA568, 0x0041 };
    uint32_t const ces[9] = { 0x38D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_141)
{
    // A568 0062;	
    // (ꕨ) VAI SYLLABLE NJA	[38D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA568, 0x0062 };
    uint32_t const ces[9] = { 0x38D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_142)
{
    // A569 0021;	
    // (ꕩ) VAI SYLLABLE YA	[38DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA569, 0x0021 };
    uint32_t const ces[9] = { 0x38DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_143)
{
    // A569 003F;	
    // (ꕩ) VAI SYLLABLE YA	[38DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA569, 0x003F };
    uint32_t const ces[9] = { 0x38DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_144)
{
    // A569 0061;	
    // (ꕩ) VAI SYLLABLE YA	[38DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA569, 0x0061 };
    uint32_t const ces[9] = { 0x38DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_145)
{
    // A569 0041;	
    // (ꕩ) VAI SYLLABLE YA	[38DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA569, 0x0041 };
    uint32_t const ces[9] = { 0x38DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_146)
{
    // A569 0062;	
    // (ꕩ) VAI SYLLABLE YA	[38DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA569, 0x0062 };
    uint32_t const ces[9] = { 0x38DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_147)
{
    // A56A 0021;	
    // (ꕪ) VAI SYLLABLE KA	[38DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56A, 0x0021 };
    uint32_t const ces[9] = { 0x38DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_148)
{
    // A611 0021;	
    // (ꘑ) VAI SYLLABLE NDOLE KA	[38DB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA611, 0x0021 };
    uint32_t const ces[9] = { 0x38DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_149)
{
    // A56A 003F;	
    // (ꕪ) VAI SYLLABLE KA	[38DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56A, 0x003F };
    uint32_t const ces[9] = { 0x38DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_150)
{
    // A611 003F;	
    // (ꘑ) VAI SYLLABLE NDOLE KA	[38DB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA611, 0x003F };
    uint32_t const ces[9] = { 0x38DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_151)
{
    // A56A 0061;	
    // (ꕪ) VAI SYLLABLE KA	[38DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56A, 0x0061 };
    uint32_t const ces[9] = { 0x38DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_152)
{
    // A56A 0041;	
    // (ꕪ) VAI SYLLABLE KA	[38DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA56A, 0x0041 };
    uint32_t const ces[9] = { 0x38DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_153)
{
    // A611 0061;	
    // (ꘑ) VAI SYLLABLE NDOLE KA	[38DB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA611, 0x0061 };
    uint32_t const ces[9] = { 0x38DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_154)
{
    // A611 0041;	
    // (ꘑ) VAI SYLLABLE NDOLE KA	[38DB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA611, 0x0041 };
    uint32_t const ces[9] = { 0x38DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_155)
{
    // A56A 0062;	
    // (ꕪ) VAI SYLLABLE KA	[38DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56A, 0x0062 };
    uint32_t const ces[9] = { 0x38DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_156)
{
    // A611 0062;	
    // (ꘑ) VAI SYLLABLE NDOLE KA	[38DB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA611, 0x0062 };
    uint32_t const ces[9] = { 0x38DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_157)
{
    // A56B 0021;	
    // (ꕫ) VAI SYLLABLE KAN	[38DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56B, 0x0021 };
    uint32_t const ces[9] = { 0x38DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_158)
{
    // A56B 003F;	
    // (ꕫ) VAI SYLLABLE KAN	[38DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56B, 0x003F };
    uint32_t const ces[9] = { 0x38DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_159)
{
    // A56B 0061;	
    // (ꕫ) VAI SYLLABLE KAN	[38DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56B, 0x0061 };
    uint32_t const ces[9] = { 0x38DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_160)
{
    // A56B 0041;	
    // (ꕫ) VAI SYLLABLE KAN	[38DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA56B, 0x0041 };
    uint32_t const ces[9] = { 0x38DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_161)
{
    // A56B 0062;	
    // (ꕫ) VAI SYLLABLE KAN	[38DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56B, 0x0062 };
    uint32_t const ces[9] = { 0x38DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_162)
{
    // A56C 0021;	
    // (ꕬ) VAI SYLLABLE NGGA	[38DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56C, 0x0021 };
    uint32_t const ces[9] = { 0x38DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_163)
{
    // A56C 003F;	
    // (ꕬ) VAI SYLLABLE NGGA	[38DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56C, 0x003F };
    uint32_t const ces[9] = { 0x38DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_164)
{
    // A56C 0061;	
    // (ꕬ) VAI SYLLABLE NGGA	[38DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56C, 0x0061 };
    uint32_t const ces[9] = { 0x38DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_165)
{
    // A56C 0041;	
    // (ꕬ) VAI SYLLABLE NGGA	[38DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA56C, 0x0041 };
    uint32_t const ces[9] = { 0x38DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_166)
{
    // A56C 0062;	
    // (ꕬ) VAI SYLLABLE NGGA	[38DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56C, 0x0062 };
    uint32_t const ces[9] = { 0x38DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_167)
{
    // A56D 0021;	
    // (ꕭ) VAI SYLLABLE GA	[38DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56D, 0x0021 };
    uint32_t const ces[9] = { 0x38DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_168)
{
    // A56D 003F;	
    // (ꕭ) VAI SYLLABLE GA	[38DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56D, 0x003F };
    uint32_t const ces[9] = { 0x38DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_169)
{
    // A56D 0061;	
    // (ꕭ) VAI SYLLABLE GA	[38DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56D, 0x0061 };
    uint32_t const ces[9] = { 0x38DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_170)
{
    // A56D 0041;	
    // (ꕭ) VAI SYLLABLE GA	[38DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA56D, 0x0041 };
    uint32_t const ces[9] = { 0x38DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_171)
{
    // A56D 0062;	
    // (ꕭ) VAI SYLLABLE GA	[38DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56D, 0x0062 };
    uint32_t const ces[9] = { 0x38DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_172)
{
    // A56E 0021;	
    // (ꕮ) VAI SYLLABLE MA	[38DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56E, 0x0021 };
    uint32_t const ces[9] = { 0x38DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_173)
{
    // A62A 0021;	
    // (ꘪ) VAI SYLLABLE NDOLE MA	[38DF 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA62A, 0x0021 };
    uint32_t const ces[9] = { 0x38DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_174)
{
    // A56E 003F;	
    // (ꕮ) VAI SYLLABLE MA	[38DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56E, 0x003F };
    uint32_t const ces[9] = { 0x38DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_175)
{
    // A62A 003F;	
    // (ꘪ) VAI SYLLABLE NDOLE MA	[38DF 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA62A, 0x003F };
    uint32_t const ces[9] = { 0x38DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_176)
{
    // A56E 0061;	
    // (ꕮ) VAI SYLLABLE MA	[38DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56E, 0x0061 };
    uint32_t const ces[9] = { 0x38DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_177)
{
    // A56E 0041;	
    // (ꕮ) VAI SYLLABLE MA	[38DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA56E, 0x0041 };
    uint32_t const ces[9] = { 0x38DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_178)
{
    // A62A 0061;	
    // (ꘪ) VAI SYLLABLE NDOLE MA	[38DF 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA62A, 0x0061 };
    uint32_t const ces[9] = { 0x38DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_179)
{
    // A62A 0041;	
    // (ꘪ) VAI SYLLABLE NDOLE MA	[38DF 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA62A, 0x0041 };
    uint32_t const ces[9] = { 0x38DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_180)
{
    // A56E 0062;	
    // (ꕮ) VAI SYLLABLE MA	[38DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56E, 0x0062 };
    uint32_t const ces[9] = { 0x38DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_181)
{
    // A62A 0062;	
    // (ꘪ) VAI SYLLABLE NDOLE MA	[38DF 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA62A, 0x0062 };
    uint32_t const ces[9] = { 0x38DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_182)
{
    // A56F 0021;	
    // (ꕯ) VAI SYLLABLE NA	[38E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56F, 0x0021 };
    uint32_t const ces[9] = { 0x38E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_183)
{
    // A56F 003F;	
    // (ꕯ) VAI SYLLABLE NA	[38E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56F, 0x003F };
    uint32_t const ces[9] = { 0x38E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_184)
{
    // A56F 0061;	
    // (ꕯ) VAI SYLLABLE NA	[38E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56F, 0x0061 };
    uint32_t const ces[9] = { 0x38E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_185)
{
    // A56F 0041;	
    // (ꕯ) VAI SYLLABLE NA	[38E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA56F, 0x0041 };
    uint32_t const ces[9] = { 0x38E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_186)
{
    // A56F 0062;	
    // (ꕯ) VAI SYLLABLE NA	[38E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA56F, 0x0062 };
    uint32_t const ces[9] = { 0x38E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_187)
{
    // A570 0021;	
    // (ꕰ) VAI SYLLABLE NYA	[38E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA570, 0x0021 };
    uint32_t const ces[9] = { 0x38E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_188)
{
    // A570 003F;	
    // (ꕰ) VAI SYLLABLE NYA	[38E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA570, 0x003F };
    uint32_t const ces[9] = { 0x38E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_189)
{
    // A570 0061;	
    // (ꕰ) VAI SYLLABLE NYA	[38E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA570, 0x0061 };
    uint32_t const ces[9] = { 0x38E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_190)
{
    // A570 0041;	
    // (ꕰ) VAI SYLLABLE NYA	[38E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA570, 0x0041 };
    uint32_t const ces[9] = { 0x38E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_191)
{
    // A570 0062;	
    // (ꕰ) VAI SYLLABLE NYA	[38E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA570, 0x0062 };
    uint32_t const ces[9] = { 0x38E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_192)
{
    // A571 0021;	
    // (ꕱ) VAI SYLLABLE OO	[38E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA571, 0x0021 };
    uint32_t const ces[9] = { 0x38E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_193)
{
    // A571 003F;	
    // (ꕱ) VAI SYLLABLE OO	[38E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA571, 0x003F };
    uint32_t const ces[9] = { 0x38E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_194)
{
    // A571 0061;	
    // (ꕱ) VAI SYLLABLE OO	[38E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA571, 0x0061 };
    uint32_t const ces[9] = { 0x38E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_195)
{
    // A571 0041;	
    // (ꕱ) VAI SYLLABLE OO	[38E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA571, 0x0041 };
    uint32_t const ces[9] = { 0x38E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_196)
{
    // A571 0062;	
    // (ꕱ) VAI SYLLABLE OO	[38E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA571, 0x0062 };
    uint32_t const ces[9] = { 0x38E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_197)
{
    // A572 0021;	
    // (ꕲ) VAI SYLLABLE OON	[38E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA572, 0x0021 };
    uint32_t const ces[9] = { 0x38E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_198)
{
    // A572 003F;	
    // (ꕲ) VAI SYLLABLE OON	[38E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA572, 0x003F };
    uint32_t const ces[9] = { 0x38E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_199)
{
    // A572 0061;	
    // (ꕲ) VAI SYLLABLE OON	[38E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA572, 0x0061 };
    uint32_t const ces[9] = { 0x38E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_200)
{
    // A572 0041;	
    // (ꕲ) VAI SYLLABLE OON	[38E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA572, 0x0041 };
    uint32_t const ces[9] = { 0x38E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_201)
{
    // A572 0062;	
    // (ꕲ) VAI SYLLABLE OON	[38E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA572, 0x0062 };
    uint32_t const ces[9] = { 0x38E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_202)
{
    // A573 0021;	
    // (ꕳ) VAI SYLLABLE HOO	[38E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA573, 0x0021 };
    uint32_t const ces[9] = { 0x38E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_203)
{
    // A573 003F;	
    // (ꕳ) VAI SYLLABLE HOO	[38E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA573, 0x003F };
    uint32_t const ces[9] = { 0x38E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_204)
{
    // A573 0061;	
    // (ꕳ) VAI SYLLABLE HOO	[38E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA573, 0x0061 };
    uint32_t const ces[9] = { 0x38E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_205)
{
    // A573 0041;	
    // (ꕳ) VAI SYLLABLE HOO	[38E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA573, 0x0041 };
    uint32_t const ces[9] = { 0x38E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_206)
{
    // A573 0062;	
    // (ꕳ) VAI SYLLABLE HOO	[38E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA573, 0x0062 };
    uint32_t const ces[9] = { 0x38E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_207)
{
    // A574 0021;	
    // (ꕴ) VAI SYLLABLE WOO	[38E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA574, 0x0021 };
    uint32_t const ces[9] = { 0x38E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_208)
{
    // A574 003F;	
    // (ꕴ) VAI SYLLABLE WOO	[38E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA574, 0x003F };
    uint32_t const ces[9] = { 0x38E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_209)
{
    // A574 0061;	
    // (ꕴ) VAI SYLLABLE WOO	[38E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA574, 0x0061 };
    uint32_t const ces[9] = { 0x38E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_210)
{
    // A574 0041;	
    // (ꕴ) VAI SYLLABLE WOO	[38E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA574, 0x0041 };
    uint32_t const ces[9] = { 0x38E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_211)
{
    // A574 0062;	
    // (ꕴ) VAI SYLLABLE WOO	[38E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA574, 0x0062 };
    uint32_t const ces[9] = { 0x38E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_212)
{
    // A575 0021;	
    // (ꕵ) VAI SYLLABLE WOON	[38E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA575, 0x0021 };
    uint32_t const ces[9] = { 0x38E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_213)
{
    // A575 003F;	
    // (ꕵ) VAI SYLLABLE WOON	[38E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA575, 0x003F };
    uint32_t const ces[9] = { 0x38E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_214)
{
    // A575 0061;	
    // (ꕵ) VAI SYLLABLE WOON	[38E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA575, 0x0061 };
    uint32_t const ces[9] = { 0x38E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_215)
{
    // A575 0041;	
    // (ꕵ) VAI SYLLABLE WOON	[38E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA575, 0x0041 };
    uint32_t const ces[9] = { 0x38E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_216)
{
    // A575 0062;	
    // (ꕵ) VAI SYLLABLE WOON	[38E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA575, 0x0062 };
    uint32_t const ces[9] = { 0x38E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_217)
{
    // A576 0021;	
    // (ꕶ) VAI SYLLABLE POO	[38E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA576, 0x0021 };
    uint32_t const ces[9] = { 0x38E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_218)
{
    // A576 003F;	
    // (ꕶ) VAI SYLLABLE POO	[38E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA576, 0x003F };
    uint32_t const ces[9] = { 0x38E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_219)
{
    // A576 0061;	
    // (ꕶ) VAI SYLLABLE POO	[38E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA576, 0x0061 };
    uint32_t const ces[9] = { 0x38E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_220)
{
    // A576 0041;	
    // (ꕶ) VAI SYLLABLE POO	[38E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA576, 0x0041 };
    uint32_t const ces[9] = { 0x38E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_221)
{
    // A576 0062;	
    // (ꕶ) VAI SYLLABLE POO	[38E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA576, 0x0062 };
    uint32_t const ces[9] = { 0x38E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_222)
{
    // A577 0021;	
    // (ꕷ) VAI SYLLABLE BHOO	[38E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA577, 0x0021 };
    uint32_t const ces[9] = { 0x38E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_223)
{
    // A577 003F;	
    // (ꕷ) VAI SYLLABLE BHOO	[38E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA577, 0x003F };
    uint32_t const ces[9] = { 0x38E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_224)
{
    // A577 0061;	
    // (ꕷ) VAI SYLLABLE BHOO	[38E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA577, 0x0061 };
    uint32_t const ces[9] = { 0x38E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_225)
{
    // A577 0041;	
    // (ꕷ) VAI SYLLABLE BHOO	[38E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA577, 0x0041 };
    uint32_t const ces[9] = { 0x38E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_226)
{
    // A577 0062;	
    // (ꕷ) VAI SYLLABLE BHOO	[38E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA577, 0x0062 };
    uint32_t const ces[9] = { 0x38E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_227)
{
    // A578 0021;	
    // (ꕸ) VAI SYLLABLE BOO	[38E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA578, 0x0021 };
    uint32_t const ces[9] = { 0x38E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_228)
{
    // A578 003F;	
    // (ꕸ) VAI SYLLABLE BOO	[38E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA578, 0x003F };
    uint32_t const ces[9] = { 0x38E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_229)
{
    // A578 0061;	
    // (ꕸ) VAI SYLLABLE BOO	[38E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA578, 0x0061 };
    uint32_t const ces[9] = { 0x38E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_230)
{
    // A578 0041;	
    // (ꕸ) VAI SYLLABLE BOO	[38E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA578, 0x0041 };
    uint32_t const ces[9] = { 0x38E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_231)
{
    // A578 0062;	
    // (ꕸ) VAI SYLLABLE BOO	[38E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA578, 0x0062 };
    uint32_t const ces[9] = { 0x38E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_232)
{
    // A579 0021;	
    // (ꕹ) VAI SYLLABLE MBOO	[38EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA579, 0x0021 };
    uint32_t const ces[9] = { 0x38EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_233)
{
    // A579 003F;	
    // (ꕹ) VAI SYLLABLE MBOO	[38EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA579, 0x003F };
    uint32_t const ces[9] = { 0x38EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_234)
{
    // A579 0061;	
    // (ꕹ) VAI SYLLABLE MBOO	[38EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA579, 0x0061 };
    uint32_t const ces[9] = { 0x38EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_235)
{
    // A579 0041;	
    // (ꕹ) VAI SYLLABLE MBOO	[38EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA579, 0x0041 };
    uint32_t const ces[9] = { 0x38EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_236)
{
    // A579 0062;	
    // (ꕹ) VAI SYLLABLE MBOO	[38EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA579, 0x0062 };
    uint32_t const ces[9] = { 0x38EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_237)
{
    // A57A 0021;	
    // (ꕺ) VAI SYLLABLE KPOO	[38EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57A, 0x0021 };
    uint32_t const ces[9] = { 0x38EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_238)
{
    // A57A 003F;	
    // (ꕺ) VAI SYLLABLE KPOO	[38EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57A, 0x003F };
    uint32_t const ces[9] = { 0x38EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_239)
{
    // A57A 0061;	
    // (ꕺ) VAI SYLLABLE KPOO	[38EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57A, 0x0061 };
    uint32_t const ces[9] = { 0x38EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_240)
{
    // A57A 0041;	
    // (ꕺ) VAI SYLLABLE KPOO	[38EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA57A, 0x0041 };
    uint32_t const ces[9] = { 0x38EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_241)
{
    // A57A 0062;	
    // (ꕺ) VAI SYLLABLE KPOO	[38EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57A, 0x0062 };
    uint32_t const ces[9] = { 0x38EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_242)
{
    // A57B 0021;	
    // (ꕻ) VAI SYLLABLE MGBOO	[38EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57B, 0x0021 };
    uint32_t const ces[9] = { 0x38EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_243)
{
    // A57B 003F;	
    // (ꕻ) VAI SYLLABLE MGBOO	[38EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57B, 0x003F };
    uint32_t const ces[9] = { 0x38EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_244)
{
    // A57B 0061;	
    // (ꕻ) VAI SYLLABLE MGBOO	[38EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57B, 0x0061 };
    uint32_t const ces[9] = { 0x38EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_245)
{
    // A57B 0041;	
    // (ꕻ) VAI SYLLABLE MGBOO	[38EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA57B, 0x0041 };
    uint32_t const ces[9] = { 0x38EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_246)
{
    // A57B 0062;	
    // (ꕻ) VAI SYLLABLE MGBOO	[38EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57B, 0x0062 };
    uint32_t const ces[9] = { 0x38EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_247)
{
    // A57C 0021;	
    // (ꕼ) VAI SYLLABLE GBOO	[38ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57C, 0x0021 };
    uint32_t const ces[9] = { 0x38ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_248)
{
    // A57C 003F;	
    // (ꕼ) VAI SYLLABLE GBOO	[38ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57C, 0x003F };
    uint32_t const ces[9] = { 0x38ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_249)
{
    // A57C 0061;	
    // (ꕼ) VAI SYLLABLE GBOO	[38ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57C, 0x0061 };
    uint32_t const ces[9] = { 0x38ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_250)
{
    // A57C 0041;	
    // (ꕼ) VAI SYLLABLE GBOO	[38ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA57C, 0x0041 };
    uint32_t const ces[9] = { 0x38ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_251)
{
    // A57C 0062;	
    // (ꕼ) VAI SYLLABLE GBOO	[38ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57C, 0x0062 };
    uint32_t const ces[9] = { 0x38ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_252)
{
    // A57D 0021;	
    // (ꕽ) VAI SYLLABLE FOO	[38EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57D, 0x0021 };
    uint32_t const ces[9] = { 0x38EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_253)
{
    // A57D 003F;	
    // (ꕽ) VAI SYLLABLE FOO	[38EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57D, 0x003F };
    uint32_t const ces[9] = { 0x38EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_254)
{
    // A57D 0061;	
    // (ꕽ) VAI SYLLABLE FOO	[38EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57D, 0x0061 };
    uint32_t const ces[9] = { 0x38EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_255)
{
    // A57D 0041;	
    // (ꕽ) VAI SYLLABLE FOO	[38EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA57D, 0x0041 };
    uint32_t const ces[9] = { 0x38EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_256)
{
    // A57D 0062;	
    // (ꕽ) VAI SYLLABLE FOO	[38EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57D, 0x0062 };
    uint32_t const ces[9] = { 0x38EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_257)
{
    // A57E 0021;	
    // (ꕾ) VAI SYLLABLE VOO	[38EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57E, 0x0021 };
    uint32_t const ces[9] = { 0x38EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_258)
{
    // A57E 003F;	
    // (ꕾ) VAI SYLLABLE VOO	[38EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57E, 0x003F };
    uint32_t const ces[9] = { 0x38EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_259)
{
    // A57E 0061;	
    // (ꕾ) VAI SYLLABLE VOO	[38EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57E, 0x0061 };
    uint32_t const ces[9] = { 0x38EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_260)
{
    // A57E 0041;	
    // (ꕾ) VAI SYLLABLE VOO	[38EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA57E, 0x0041 };
    uint32_t const ces[9] = { 0x38EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_261)
{
    // A57E 0062;	
    // (ꕾ) VAI SYLLABLE VOO	[38EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57E, 0x0062 };
    uint32_t const ces[9] = { 0x38EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_262)
{
    // A57F 0021;	
    // (ꕿ) VAI SYLLABLE TOO	[38F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57F, 0x0021 };
    uint32_t const ces[9] = { 0x38F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_263)
{
    // A57F 003F;	
    // (ꕿ) VAI SYLLABLE TOO	[38F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57F, 0x003F };
    uint32_t const ces[9] = { 0x38F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_264)
{
    // A57F 0061;	
    // (ꕿ) VAI SYLLABLE TOO	[38F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57F, 0x0061 };
    uint32_t const ces[9] = { 0x38F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_265)
{
    // A57F 0041;	
    // (ꕿ) VAI SYLLABLE TOO	[38F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA57F, 0x0041 };
    uint32_t const ces[9] = { 0x38F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_266)
{
    // A57F 0062;	
    // (ꕿ) VAI SYLLABLE TOO	[38F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA57F, 0x0062 };
    uint32_t const ces[9] = { 0x38F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_267)
{
    // A580 0021;	
    // (ꖀ) VAI SYLLABLE THOO	[38F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA580, 0x0021 };
    uint32_t const ces[9] = { 0x38F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_268)
{
    // A580 003F;	
    // (ꖀ) VAI SYLLABLE THOO	[38F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA580, 0x003F };
    uint32_t const ces[9] = { 0x38F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_269)
{
    // A580 0061;	
    // (ꖀ) VAI SYLLABLE THOO	[38F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA580, 0x0061 };
    uint32_t const ces[9] = { 0x38F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_270)
{
    // A580 0041;	
    // (ꖀ) VAI SYLLABLE THOO	[38F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA580, 0x0041 };
    uint32_t const ces[9] = { 0x38F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_271)
{
    // A580 0062;	
    // (ꖀ) VAI SYLLABLE THOO	[38F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA580, 0x0062 };
    uint32_t const ces[9] = { 0x38F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_272)
{
    // A581 0021;	
    // (ꖁ) VAI SYLLABLE DHOO	[38F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA581, 0x0021 };
    uint32_t const ces[9] = { 0x38F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_273)
{
    // A581 003F;	
    // (ꖁ) VAI SYLLABLE DHOO	[38F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA581, 0x003F };
    uint32_t const ces[9] = { 0x38F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_274)
{
    // A581 0061;	
    // (ꖁ) VAI SYLLABLE DHOO	[38F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA581, 0x0061 };
    uint32_t const ces[9] = { 0x38F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_275)
{
    // A581 0041;	
    // (ꖁ) VAI SYLLABLE DHOO	[38F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA581, 0x0041 };
    uint32_t const ces[9] = { 0x38F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_276)
{
    // A581 0062;	
    // (ꖁ) VAI SYLLABLE DHOO	[38F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA581, 0x0062 };
    uint32_t const ces[9] = { 0x38F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_277)
{
    // A582 0021;	
    // (ꖂ) VAI SYLLABLE DHHOO	[38F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA582, 0x0021 };
    uint32_t const ces[9] = { 0x38F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_278)
{
    // A582 003F;	
    // (ꖂ) VAI SYLLABLE DHHOO	[38F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA582, 0x003F };
    uint32_t const ces[9] = { 0x38F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_279)
{
    // A582 0061;	
    // (ꖂ) VAI SYLLABLE DHHOO	[38F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA582, 0x0061 };
    uint32_t const ces[9] = { 0x38F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_280)
{
    // A582 0041;	
    // (ꖂ) VAI SYLLABLE DHHOO	[38F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA582, 0x0041 };
    uint32_t const ces[9] = { 0x38F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_281)
{
    // A582 0062;	
    // (ꖂ) VAI SYLLABLE DHHOO	[38F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA582, 0x0062 };
    uint32_t const ces[9] = { 0x38F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_282)
{
    // A583 0021;	
    // (ꖃ) VAI SYLLABLE LOO	[38F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA583, 0x0021 };
    uint32_t const ces[9] = { 0x38F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_283)
{
    // A583 003F;	
    // (ꖃ) VAI SYLLABLE LOO	[38F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA583, 0x003F };
    uint32_t const ces[9] = { 0x38F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_284)
{
    // A583 0061;	
    // (ꖃ) VAI SYLLABLE LOO	[38F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA583, 0x0061 };
    uint32_t const ces[9] = { 0x38F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_285)
{
    // A583 0041;	
    // (ꖃ) VAI SYLLABLE LOO	[38F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA583, 0x0041 };
    uint32_t const ces[9] = { 0x38F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_286)
{
    // A583 0062;	
    // (ꖃ) VAI SYLLABLE LOO	[38F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA583, 0x0062 };
    uint32_t const ces[9] = { 0x38F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_287)
{
    // A584 0021;	
    // (ꖄ) VAI SYLLABLE ROO	[38F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA584, 0x0021 };
    uint32_t const ces[9] = { 0x38F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_288)
{
    // A584 003F;	
    // (ꖄ) VAI SYLLABLE ROO	[38F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA584, 0x003F };
    uint32_t const ces[9] = { 0x38F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_289)
{
    // A584 0061;	
    // (ꖄ) VAI SYLLABLE ROO	[38F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA584, 0x0061 };
    uint32_t const ces[9] = { 0x38F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_290)
{
    // A584 0041;	
    // (ꖄ) VAI SYLLABLE ROO	[38F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA584, 0x0041 };
    uint32_t const ces[9] = { 0x38F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_291)
{
    // A584 0062;	
    // (ꖄ) VAI SYLLABLE ROO	[38F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA584, 0x0062 };
    uint32_t const ces[9] = { 0x38F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_292)
{
    // A585 0021;	
    // (ꖅ) VAI SYLLABLE DOO	[38F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA585, 0x0021 };
    uint32_t const ces[9] = { 0x38F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_293)
{
    // A585 003F;	
    // (ꖅ) VAI SYLLABLE DOO	[38F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA585, 0x003F };
    uint32_t const ces[9] = { 0x38F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_294)
{
    // A585 0061;	
    // (ꖅ) VAI SYLLABLE DOO	[38F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA585, 0x0061 };
    uint32_t const ces[9] = { 0x38F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_295)
{
    // A585 0041;	
    // (ꖅ) VAI SYLLABLE DOO	[38F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA585, 0x0041 };
    uint32_t const ces[9] = { 0x38F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_296)
{
    // A585 0062;	
    // (ꖅ) VAI SYLLABLE DOO	[38F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA585, 0x0062 };
    uint32_t const ces[9] = { 0x38F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_297)
{
    // A61B 0021;	
    // (ꘛ) VAI SYMBOL DOONG	[38F6 397C 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA61B, 0x0021 };
    uint32_t const ces[12] = { 0x38F6, 0x397C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_298)
{
    // A61B 003F;	
    // (ꘛ) VAI SYMBOL DOONG	[38F6 397C 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA61B, 0x003F };
    uint32_t const ces[12] = { 0x38F6, 0x397C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_299)
{
    // A61B 0061;	
    // (ꘛ) VAI SYMBOL DOONG	[38F6 397C 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA61B, 0x0061 };
    uint32_t const ces[12] = { 0x38F6, 0x397C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_300)
{
    // A61B 0041;	
    // (ꘛ) VAI SYMBOL DOONG	[38F6 397C 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA61B, 0x0041 };
    uint32_t const ces[12] = { 0x38F6, 0x397C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_301)
{
    // A61B 0062;	
    // (ꘛ) VAI SYMBOL DOONG	[38F6 397C 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA61B, 0x0062 };
    uint32_t const ces[12] = { 0x38F6, 0x397C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_302)
{
    // A586 0021;	
    // (ꖆ) VAI SYLLABLE NDOO	[38F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA586, 0x0021 };
    uint32_t const ces[9] = { 0x38F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_303)
{
    // A586 003F;	
    // (ꖆ) VAI SYLLABLE NDOO	[38F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA586, 0x003F };
    uint32_t const ces[9] = { 0x38F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_304)
{
    // A586 0061;	
    // (ꖆ) VAI SYLLABLE NDOO	[38F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA586, 0x0061 };
    uint32_t const ces[9] = { 0x38F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_305)
{
    // A586 0041;	
    // (ꖆ) VAI SYLLABLE NDOO	[38F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA586, 0x0041 };
    uint32_t const ces[9] = { 0x38F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_306)
{
    // A586 0062;	
    // (ꖆ) VAI SYLLABLE NDOO	[38F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA586, 0x0062 };
    uint32_t const ces[9] = { 0x38F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_307)
{
    // A587 0021;	
    // (ꖇ) VAI SYLLABLE SOO	[38F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA587, 0x0021 };
    uint32_t const ces[9] = { 0x38F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_308)
{
    // A612 0021;	
    // (ꘒ) VAI SYLLABLE NDOLE SOO	[38F8 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA612, 0x0021 };
    uint32_t const ces[9] = { 0x38F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_309)
{
    // A587 003F;	
    // (ꖇ) VAI SYLLABLE SOO	[38F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA587, 0x003F };
    uint32_t const ces[9] = { 0x38F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_310)
{
    // A612 003F;	
    // (ꘒ) VAI SYLLABLE NDOLE SOO	[38F8 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA612, 0x003F };
    uint32_t const ces[9] = { 0x38F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_311)
{
    // A587 0061;	
    // (ꖇ) VAI SYLLABLE SOO	[38F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA587, 0x0061 };
    uint32_t const ces[9] = { 0x38F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_312)
{
    // A587 0041;	
    // (ꖇ) VAI SYLLABLE SOO	[38F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA587, 0x0041 };
    uint32_t const ces[9] = { 0x38F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_313)
{
    // A612 0061;	
    // (ꘒ) VAI SYLLABLE NDOLE SOO	[38F8 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA612, 0x0061 };
    uint32_t const ces[9] = { 0x38F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_314)
{
    // A612 0041;	
    // (ꘒ) VAI SYLLABLE NDOLE SOO	[38F8 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA612, 0x0041 };
    uint32_t const ces[9] = { 0x38F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_315)
{
    // A587 0062;	
    // (ꖇ) VAI SYLLABLE SOO	[38F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA587, 0x0062 };
    uint32_t const ces[9] = { 0x38F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_316)
{
    // A612 0062;	
    // (ꘒ) VAI SYLLABLE NDOLE SOO	[38F8 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA612, 0x0062 };
    uint32_t const ces[9] = { 0x38F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_317)
{
    // A588 0021;	
    // (ꖈ) VAI SYLLABLE SHOO	[38F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA588, 0x0021 };
    uint32_t const ces[9] = { 0x38F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_318)
{
    // A588 003F;	
    // (ꖈ) VAI SYLLABLE SHOO	[38F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA588, 0x003F };
    uint32_t const ces[9] = { 0x38F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_319)
{
    // A588 0061;	
    // (ꖈ) VAI SYLLABLE SHOO	[38F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA588, 0x0061 };
    uint32_t const ces[9] = { 0x38F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_320)
{
    // A588 0041;	
    // (ꖈ) VAI SYLLABLE SHOO	[38F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA588, 0x0041 };
    uint32_t const ces[9] = { 0x38F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_321)
{
    // A588 0062;	
    // (ꖈ) VAI SYLLABLE SHOO	[38F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA588, 0x0062 };
    uint32_t const ces[9] = { 0x38F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_322)
{
    // A589 0021;	
    // (ꖉ) VAI SYLLABLE ZOO	[38FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA589, 0x0021 };
    uint32_t const ces[9] = { 0x38FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_323)
{
    // A589 003F;	
    // (ꖉ) VAI SYLLABLE ZOO	[38FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA589, 0x003F };
    uint32_t const ces[9] = { 0x38FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_324)
{
    // A589 0061;	
    // (ꖉ) VAI SYLLABLE ZOO	[38FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA589, 0x0061 };
    uint32_t const ces[9] = { 0x38FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_325)
{
    // A589 0041;	
    // (ꖉ) VAI SYLLABLE ZOO	[38FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA589, 0x0041 };
    uint32_t const ces[9] = { 0x38FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_326)
{
    // A589 0062;	
    // (ꖉ) VAI SYLLABLE ZOO	[38FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA589, 0x0062 };
    uint32_t const ces[9] = { 0x38FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_327)
{
    // A58A 0021;	
    // (ꖊ) VAI SYLLABLE ZHOO	[38FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58A, 0x0021 };
    uint32_t const ces[9] = { 0x38FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_328)
{
    // A58A 003F;	
    // (ꖊ) VAI SYLLABLE ZHOO	[38FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58A, 0x003F };
    uint32_t const ces[9] = { 0x38FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_329)
{
    // A58A 0061;	
    // (ꖊ) VAI SYLLABLE ZHOO	[38FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58A, 0x0061 };
    uint32_t const ces[9] = { 0x38FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_330)
{
    // A58A 0041;	
    // (ꖊ) VAI SYLLABLE ZHOO	[38FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA58A, 0x0041 };
    uint32_t const ces[9] = { 0x38FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_331)
{
    // A58A 0062;	
    // (ꖊ) VAI SYLLABLE ZHOO	[38FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58A, 0x0062 };
    uint32_t const ces[9] = { 0x38FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_332)
{
    // A58B 0021;	
    // (ꖋ) VAI SYLLABLE COO	[38FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58B, 0x0021 };
    uint32_t const ces[9] = { 0x38FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_333)
{
    // A58B 003F;	
    // (ꖋ) VAI SYLLABLE COO	[38FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58B, 0x003F };
    uint32_t const ces[9] = { 0x38FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_334)
{
    // A58B 0061;	
    // (ꖋ) VAI SYLLABLE COO	[38FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58B, 0x0061 };
    uint32_t const ces[9] = { 0x38FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_335)
{
    // A58B 0041;	
    // (ꖋ) VAI SYLLABLE COO	[38FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA58B, 0x0041 };
    uint32_t const ces[9] = { 0x38FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_336)
{
    // A58B 0062;	
    // (ꖋ) VAI SYLLABLE COO	[38FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58B, 0x0062 };
    uint32_t const ces[9] = { 0x38FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_337)
{
    // A58C 0021;	
    // (ꖌ) VAI SYLLABLE JOO	[38FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58C, 0x0021 };
    uint32_t const ces[9] = { 0x38FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_338)
{
    // A58C 003F;	
    // (ꖌ) VAI SYLLABLE JOO	[38FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58C, 0x003F };
    uint32_t const ces[9] = { 0x38FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_339)
{
    // A58C 0061;	
    // (ꖌ) VAI SYLLABLE JOO	[38FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58C, 0x0061 };
    uint32_t const ces[9] = { 0x38FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_340)
{
    // A58C 0041;	
    // (ꖌ) VAI SYLLABLE JOO	[38FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA58C, 0x0041 };
    uint32_t const ces[9] = { 0x38FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_341)
{
    // A58C 0062;	
    // (ꖌ) VAI SYLLABLE JOO	[38FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58C, 0x0062 };
    uint32_t const ces[9] = { 0x38FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_342)
{
    // A58D 0021;	
    // (ꖍ) VAI SYLLABLE NJOO	[38FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58D, 0x0021 };
    uint32_t const ces[9] = { 0x38FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_343)
{
    // A58D 003F;	
    // (ꖍ) VAI SYLLABLE NJOO	[38FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58D, 0x003F };
    uint32_t const ces[9] = { 0x38FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_344)
{
    // A58D 0061;	
    // (ꖍ) VAI SYLLABLE NJOO	[38FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58D, 0x0061 };
    uint32_t const ces[9] = { 0x38FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_345)
{
    // A58D 0041;	
    // (ꖍ) VAI SYLLABLE NJOO	[38FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA58D, 0x0041 };
    uint32_t const ces[9] = { 0x38FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_346)
{
    // A58D 0062;	
    // (ꖍ) VAI SYLLABLE NJOO	[38FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58D, 0x0062 };
    uint32_t const ces[9] = { 0x38FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_347)
{
    // A58E 0021;	
    // (ꖎ) VAI SYLLABLE YOO	[38FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58E, 0x0021 };
    uint32_t const ces[9] = { 0x38FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_348)
{
    // A58E 003F;	
    // (ꖎ) VAI SYLLABLE YOO	[38FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58E, 0x003F };
    uint32_t const ces[9] = { 0x38FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_349)
{
    // A58E 0061;	
    // (ꖎ) VAI SYLLABLE YOO	[38FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58E, 0x0061 };
    uint32_t const ces[9] = { 0x38FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_350)
{
    // A58E 0041;	
    // (ꖎ) VAI SYLLABLE YOO	[38FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA58E, 0x0041 };
    uint32_t const ces[9] = { 0x38FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_351)
{
    // A58E 0062;	
    // (ꖎ) VAI SYLLABLE YOO	[38FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58E, 0x0062 };
    uint32_t const ces[9] = { 0x38FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_352)
{
    // A58F 0021;	
    // (ꖏ) VAI SYLLABLE KOO	[3900 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58F, 0x0021 };
    uint32_t const ces[9] = { 0x3900, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_353)
{
    // A58F 003F;	
    // (ꖏ) VAI SYLLABLE KOO	[3900 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58F, 0x003F };
    uint32_t const ces[9] = { 0x3900, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_354)
{
    // A58F 0061;	
    // (ꖏ) VAI SYLLABLE KOO	[3900 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58F, 0x0061 };
    uint32_t const ces[9] = { 0x3900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_355)
{
    // A58F 0041;	
    // (ꖏ) VAI SYLLABLE KOO	[3900 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA58F, 0x0041 };
    uint32_t const ces[9] = { 0x3900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_356)
{
    // A58F 0062;	
    // (ꖏ) VAI SYLLABLE KOO	[3900 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA58F, 0x0062 };
    uint32_t const ces[9] = { 0x3900, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_357)
{
    // A590 0021;	
    // (ꖐ) VAI SYLLABLE NGGOO	[3901 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA590, 0x0021 };
    uint32_t const ces[9] = { 0x3901, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_358)
{
    // A590 003F;	
    // (ꖐ) VAI SYLLABLE NGGOO	[3901 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA590, 0x003F };
    uint32_t const ces[9] = { 0x3901, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_359)
{
    // A590 0061;	
    // (ꖐ) VAI SYLLABLE NGGOO	[3901 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA590, 0x0061 };
    uint32_t const ces[9] = { 0x3901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_360)
{
    // A590 0041;	
    // (ꖐ) VAI SYLLABLE NGGOO	[3901 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA590, 0x0041 };
    uint32_t const ces[9] = { 0x3901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_361)
{
    // A590 0062;	
    // (ꖐ) VAI SYLLABLE NGGOO	[3901 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA590, 0x0062 };
    uint32_t const ces[9] = { 0x3901, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_362)
{
    // A591 0021;	
    // (ꖑ) VAI SYLLABLE GOO	[3902 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA591, 0x0021 };
    uint32_t const ces[9] = { 0x3902, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_363)
{
    // A591 003F;	
    // (ꖑ) VAI SYLLABLE GOO	[3902 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA591, 0x003F };
    uint32_t const ces[9] = { 0x3902, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_364)
{
    // A591 0061;	
    // (ꖑ) VAI SYLLABLE GOO	[3902 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA591, 0x0061 };
    uint32_t const ces[9] = { 0x3902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_365)
{
    // A591 0041;	
    // (ꖑ) VAI SYLLABLE GOO	[3902 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA591, 0x0041 };
    uint32_t const ces[9] = { 0x3902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_366)
{
    // A591 0062;	
    // (ꖑ) VAI SYLLABLE GOO	[3902 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA591, 0x0062 };
    uint32_t const ces[9] = { 0x3902, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_367)
{
    // A592 0021;	
    // (ꖒ) VAI SYLLABLE MOO	[3903 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA592, 0x0021 };
    uint32_t const ces[9] = { 0x3903, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_368)
{
    // A592 003F;	
    // (ꖒ) VAI SYLLABLE MOO	[3903 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA592, 0x003F };
    uint32_t const ces[9] = { 0x3903, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_369)
{
    // A592 0061;	
    // (ꖒ) VAI SYLLABLE MOO	[3903 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA592, 0x0061 };
    uint32_t const ces[9] = { 0x3903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_370)
{
    // A592 0041;	
    // (ꖒ) VAI SYLLABLE MOO	[3903 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA592, 0x0041 };
    uint32_t const ces[9] = { 0x3903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_371)
{
    // A592 0062;	
    // (ꖒ) VAI SYLLABLE MOO	[3903 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA592, 0x0062 };
    uint32_t const ces[9] = { 0x3903, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_372)
{
    // A593 0021;	
    // (ꖓ) VAI SYLLABLE NOO	[3904 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA593, 0x0021 };
    uint32_t const ces[9] = { 0x3904, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_373)
{
    // A593 003F;	
    // (ꖓ) VAI SYLLABLE NOO	[3904 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA593, 0x003F };
    uint32_t const ces[9] = { 0x3904, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_374)
{
    // A593 0061;	
    // (ꖓ) VAI SYLLABLE NOO	[3904 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA593, 0x0061 };
    uint32_t const ces[9] = { 0x3904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_375)
{
    // A593 0041;	
    // (ꖓ) VAI SYLLABLE NOO	[3904 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA593, 0x0041 };
    uint32_t const ces[9] = { 0x3904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_376)
{
    // A593 0062;	
    // (ꖓ) VAI SYLLABLE NOO	[3904 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA593, 0x0062 };
    uint32_t const ces[9] = { 0x3904, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_377)
{
    // A594 0021;	
    // (ꖔ) VAI SYLLABLE NYOO	[3905 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA594, 0x0021 };
    uint32_t const ces[9] = { 0x3905, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_378)
{
    // A594 003F;	
    // (ꖔ) VAI SYLLABLE NYOO	[3905 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA594, 0x003F };
    uint32_t const ces[9] = { 0x3905, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_379)
{
    // A594 0061;	
    // (ꖔ) VAI SYLLABLE NYOO	[3905 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA594, 0x0061 };
    uint32_t const ces[9] = { 0x3905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_380)
{
    // A594 0041;	
    // (ꖔ) VAI SYLLABLE NYOO	[3905 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA594, 0x0041 };
    uint32_t const ces[9] = { 0x3905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_381)
{
    // A594 0062;	
    // (ꖔ) VAI SYLLABLE NYOO	[3905 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA594, 0x0062 };
    uint32_t const ces[9] = { 0x3905, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_382)
{
    // A595 0021;	
    // (ꖕ) VAI SYLLABLE U	[3906 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA595, 0x0021 };
    uint32_t const ces[9] = { 0x3906, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_383)
{
    // A595 003F;	
    // (ꖕ) VAI SYLLABLE U	[3906 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA595, 0x003F };
    uint32_t const ces[9] = { 0x3906, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_384)
{
    // A595 0061;	
    // (ꖕ) VAI SYLLABLE U	[3906 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA595, 0x0061 };
    uint32_t const ces[9] = { 0x3906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_385)
{
    // A595 0041;	
    // (ꖕ) VAI SYLLABLE U	[3906 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA595, 0x0041 };
    uint32_t const ces[9] = { 0x3906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_386)
{
    // A595 0062;	
    // (ꖕ) VAI SYLLABLE U	[3906 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA595, 0x0062 };
    uint32_t const ces[9] = { 0x3906, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_387)
{
    // A596 0021;	
    // (ꖖ) VAI SYLLABLE UN	[3907 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA596, 0x0021 };
    uint32_t const ces[9] = { 0x3907, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_388)
{
    // A596 003F;	
    // (ꖖ) VAI SYLLABLE UN	[3907 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA596, 0x003F };
    uint32_t const ces[9] = { 0x3907, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_389)
{
    // A596 0061;	
    // (ꖖ) VAI SYLLABLE UN	[3907 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA596, 0x0061 };
    uint32_t const ces[9] = { 0x3907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_390)
{
    // A596 0041;	
    // (ꖖ) VAI SYLLABLE UN	[3907 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA596, 0x0041 };
    uint32_t const ces[9] = { 0x3907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_391)
{
    // A596 0062;	
    // (ꖖ) VAI SYLLABLE UN	[3907 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA596, 0x0062 };
    uint32_t const ces[9] = { 0x3907, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_392)
{
    // A597 0021;	
    // (ꖗ) VAI SYLLABLE HU	[3908 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA597, 0x0021 };
    uint32_t const ces[9] = { 0x3908, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_393)
{
    // A597 003F;	
    // (ꖗ) VAI SYLLABLE HU	[3908 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA597, 0x003F };
    uint32_t const ces[9] = { 0x3908, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_394)
{
    // A597 0061;	
    // (ꖗ) VAI SYLLABLE HU	[3908 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA597, 0x0061 };
    uint32_t const ces[9] = { 0x3908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_395)
{
    // A597 0041;	
    // (ꖗ) VAI SYLLABLE HU	[3908 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA597, 0x0041 };
    uint32_t const ces[9] = { 0x3908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_396)
{
    // A597 0062;	
    // (ꖗ) VAI SYLLABLE HU	[3908 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA597, 0x0062 };
    uint32_t const ces[9] = { 0x3908, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_397)
{
    // A598 0021;	
    // (ꖘ) VAI SYLLABLE HUN	[3909 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA598, 0x0021 };
    uint32_t const ces[9] = { 0x3909, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_398)
{
    // A598 003F;	
    // (ꖘ) VAI SYLLABLE HUN	[3909 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA598, 0x003F };
    uint32_t const ces[9] = { 0x3909, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_399)
{
    // A598 0061;	
    // (ꖘ) VAI SYLLABLE HUN	[3909 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA598, 0x0061 };
    uint32_t const ces[9] = { 0x3909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_400)
{
    // A598 0041;	
    // (ꖘ) VAI SYLLABLE HUN	[3909 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA598, 0x0041 };
    uint32_t const ces[9] = { 0x3909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_401)
{
    // A598 0062;	
    // (ꖘ) VAI SYLLABLE HUN	[3909 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA598, 0x0062 };
    uint32_t const ces[9] = { 0x3909, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_402)
{
    // A599 0021;	
    // (ꖙ) VAI SYLLABLE WU	[390A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA599, 0x0021 };
    uint32_t const ces[9] = { 0x390A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_403)
{
    // A599 003F;	
    // (ꖙ) VAI SYLLABLE WU	[390A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA599, 0x003F };
    uint32_t const ces[9] = { 0x390A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_404)
{
    // A599 0061;	
    // (ꖙ) VAI SYLLABLE WU	[390A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA599, 0x0061 };
    uint32_t const ces[9] = { 0x390A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_405)
{
    // A599 0041;	
    // (ꖙ) VAI SYLLABLE WU	[390A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA599, 0x0041 };
    uint32_t const ces[9] = { 0x390A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_406)
{
    // A599 0062;	
    // (ꖙ) VAI SYLLABLE WU	[390A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA599, 0x0062 };
    uint32_t const ces[9] = { 0x390A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_407)
{
    // A59A 0021;	
    // (ꖚ) VAI SYLLABLE WUN	[390B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59A, 0x0021 };
    uint32_t const ces[9] = { 0x390B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_408)
{
    // A59A 003F;	
    // (ꖚ) VAI SYLLABLE WUN	[390B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59A, 0x003F };
    uint32_t const ces[9] = { 0x390B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_409)
{
    // A59A 0061;	
    // (ꖚ) VAI SYLLABLE WUN	[390B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59A, 0x0061 };
    uint32_t const ces[9] = { 0x390B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_410)
{
    // A59A 0041;	
    // (ꖚ) VAI SYLLABLE WUN	[390B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA59A, 0x0041 };
    uint32_t const ces[9] = { 0x390B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_411)
{
    // A59A 0062;	
    // (ꖚ) VAI SYLLABLE WUN	[390B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59A, 0x0062 };
    uint32_t const ces[9] = { 0x390B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_412)
{
    // A59B 0021;	
    // (ꖛ) VAI SYLLABLE PU	[390C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59B, 0x0021 };
    uint32_t const ces[9] = { 0x390C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_413)
{
    // A59B 003F;	
    // (ꖛ) VAI SYLLABLE PU	[390C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59B, 0x003F };
    uint32_t const ces[9] = { 0x390C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_414)
{
    // A59B 0061;	
    // (ꖛ) VAI SYLLABLE PU	[390C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59B, 0x0061 };
    uint32_t const ces[9] = { 0x390C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_415)
{
    // A59B 0041;	
    // (ꖛ) VAI SYLLABLE PU	[390C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA59B, 0x0041 };
    uint32_t const ces[9] = { 0x390C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_416)
{
    // A59B 0062;	
    // (ꖛ) VAI SYLLABLE PU	[390C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59B, 0x0062 };
    uint32_t const ces[9] = { 0x390C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_417)
{
    // A59C 0021;	
    // (ꖜ) VAI SYLLABLE BHU	[390D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59C, 0x0021 };
    uint32_t const ces[9] = { 0x390D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_418)
{
    // A59C 003F;	
    // (ꖜ) VAI SYLLABLE BHU	[390D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59C, 0x003F };
    uint32_t const ces[9] = { 0x390D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_419)
{
    // A59C 0061;	
    // (ꖜ) VAI SYLLABLE BHU	[390D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59C, 0x0061 };
    uint32_t const ces[9] = { 0x390D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_420)
{
    // A59C 0041;	
    // (ꖜ) VAI SYLLABLE BHU	[390D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA59C, 0x0041 };
    uint32_t const ces[9] = { 0x390D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_421)
{
    // A59C 0062;	
    // (ꖜ) VAI SYLLABLE BHU	[390D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59C, 0x0062 };
    uint32_t const ces[9] = { 0x390D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_422)
{
    // A59D 0021;	
    // (ꖝ) VAI SYLLABLE BU	[390E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59D, 0x0021 };
    uint32_t const ces[9] = { 0x390E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_423)
{
    // A59D 003F;	
    // (ꖝ) VAI SYLLABLE BU	[390E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59D, 0x003F };
    uint32_t const ces[9] = { 0x390E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_424)
{
    // A59D 0061;	
    // (ꖝ) VAI SYLLABLE BU	[390E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59D, 0x0061 };
    uint32_t const ces[9] = { 0x390E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_425)
{
    // A59D 0041;	
    // (ꖝ) VAI SYLLABLE BU	[390E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA59D, 0x0041 };
    uint32_t const ces[9] = { 0x390E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_426)
{
    // A59D 0062;	
    // (ꖝ) VAI SYLLABLE BU	[390E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59D, 0x0062 };
    uint32_t const ces[9] = { 0x390E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_427)
{
    // A59E 0021;	
    // (ꖞ) VAI SYLLABLE MBU	[390F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59E, 0x0021 };
    uint32_t const ces[9] = { 0x390F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_428)
{
    // A59E 003F;	
    // (ꖞ) VAI SYLLABLE MBU	[390F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59E, 0x003F };
    uint32_t const ces[9] = { 0x390F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_429)
{
    // A59E 0061;	
    // (ꖞ) VAI SYLLABLE MBU	[390F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59E, 0x0061 };
    uint32_t const ces[9] = { 0x390F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_430)
{
    // A59E 0041;	
    // (ꖞ) VAI SYLLABLE MBU	[390F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA59E, 0x0041 };
    uint32_t const ces[9] = { 0x390F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_431)
{
    // A59E 0062;	
    // (ꖞ) VAI SYLLABLE MBU	[390F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59E, 0x0062 };
    uint32_t const ces[9] = { 0x390F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_432)
{
    // A59F 0021;	
    // (ꖟ) VAI SYLLABLE KPU	[3910 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59F, 0x0021 };
    uint32_t const ces[9] = { 0x3910, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_433)
{
    // A59F 003F;	
    // (ꖟ) VAI SYLLABLE KPU	[3910 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59F, 0x003F };
    uint32_t const ces[9] = { 0x3910, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_434)
{
    // A59F 0061;	
    // (ꖟ) VAI SYLLABLE KPU	[3910 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59F, 0x0061 };
    uint32_t const ces[9] = { 0x3910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_435)
{
    // A59F 0041;	
    // (ꖟ) VAI SYLLABLE KPU	[3910 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA59F, 0x0041 };
    uint32_t const ces[9] = { 0x3910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_436)
{
    // A59F 0062;	
    // (ꖟ) VAI SYLLABLE KPU	[3910 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA59F, 0x0062 };
    uint32_t const ces[9] = { 0x3910, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_437)
{
    // A5A0 0021;	
    // (ꖠ) VAI SYLLABLE MGBU	[3911 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A0, 0x0021 };
    uint32_t const ces[9] = { 0x3911, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_438)
{
    // A5A0 003F;	
    // (ꖠ) VAI SYLLABLE MGBU	[3911 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A0, 0x003F };
    uint32_t const ces[9] = { 0x3911, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_439)
{
    // A5A0 0061;	
    // (ꖠ) VAI SYLLABLE MGBU	[3911 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A0, 0x0061 };
    uint32_t const ces[9] = { 0x3911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_440)
{
    // A5A0 0041;	
    // (ꖠ) VAI SYLLABLE MGBU	[3911 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A0, 0x0041 };
    uint32_t const ces[9] = { 0x3911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_441)
{
    // A5A0 0062;	
    // (ꖠ) VAI SYLLABLE MGBU	[3911 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A0, 0x0062 };
    uint32_t const ces[9] = { 0x3911, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_442)
{
    // A5A1 0021;	
    // (ꖡ) VAI SYLLABLE GBU	[3912 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A1, 0x0021 };
    uint32_t const ces[9] = { 0x3912, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_443)
{
    // A5A1 003F;	
    // (ꖡ) VAI SYLLABLE GBU	[3912 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A1, 0x003F };
    uint32_t const ces[9] = { 0x3912, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_444)
{
    // A5A1 0061;	
    // (ꖡ) VAI SYLLABLE GBU	[3912 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A1, 0x0061 };
    uint32_t const ces[9] = { 0x3912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_445)
{
    // A5A1 0041;	
    // (ꖡ) VAI SYLLABLE GBU	[3912 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A1, 0x0041 };
    uint32_t const ces[9] = { 0x3912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_446)
{
    // A5A1 0062;	
    // (ꖡ) VAI SYLLABLE GBU	[3912 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A1, 0x0062 };
    uint32_t const ces[9] = { 0x3912, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_447)
{
    // A5A2 0021;	
    // (ꖢ) VAI SYLLABLE FU	[3913 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A2, 0x0021 };
    uint32_t const ces[9] = { 0x3913, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_448)
{
    // A5A2 003F;	
    // (ꖢ) VAI SYLLABLE FU	[3913 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A2, 0x003F };
    uint32_t const ces[9] = { 0x3913, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_449)
{
    // A5A2 0061;	
    // (ꖢ) VAI SYLLABLE FU	[3913 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A2, 0x0061 };
    uint32_t const ces[9] = { 0x3913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_450)
{
    // A5A2 0041;	
    // (ꖢ) VAI SYLLABLE FU	[3913 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A2, 0x0041 };
    uint32_t const ces[9] = { 0x3913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_451)
{
    // A5A2 0062;	
    // (ꖢ) VAI SYLLABLE FU	[3913 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A2, 0x0062 };
    uint32_t const ces[9] = { 0x3913, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_452)
{
    // A5A3 0021;	
    // (ꖣ) VAI SYLLABLE VU	[3914 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A3, 0x0021 };
    uint32_t const ces[9] = { 0x3914, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_453)
{
    // A5A3 003F;	
    // (ꖣ) VAI SYLLABLE VU	[3914 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A3, 0x003F };
    uint32_t const ces[9] = { 0x3914, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_454)
{
    // A5A3 0061;	
    // (ꖣ) VAI SYLLABLE VU	[3914 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A3, 0x0061 };
    uint32_t const ces[9] = { 0x3914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_455)
{
    // A5A3 0041;	
    // (ꖣ) VAI SYLLABLE VU	[3914 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A3, 0x0041 };
    uint32_t const ces[9] = { 0x3914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_456)
{
    // A5A3 0062;	
    // (ꖣ) VAI SYLLABLE VU	[3914 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A3, 0x0062 };
    uint32_t const ces[9] = { 0x3914, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_457)
{
    // A5A4 0021;	
    // (ꖤ) VAI SYLLABLE TU	[3915 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A4, 0x0021 };
    uint32_t const ces[9] = { 0x3915, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_458)
{
    // A5A4 003F;	
    // (ꖤ) VAI SYLLABLE TU	[3915 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A4, 0x003F };
    uint32_t const ces[9] = { 0x3915, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_459)
{
    // A5A4 0061;	
    // (ꖤ) VAI SYLLABLE TU	[3915 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A4, 0x0061 };
    uint32_t const ces[9] = { 0x3915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_460)
{
    // A5A4 0041;	
    // (ꖤ) VAI SYLLABLE TU	[3915 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A4, 0x0041 };
    uint32_t const ces[9] = { 0x3915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_461)
{
    // A5A4 0062;	
    // (ꖤ) VAI SYLLABLE TU	[3915 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A4, 0x0062 };
    uint32_t const ces[9] = { 0x3915, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_462)
{
    // A5A5 0021;	
    // (ꖥ) VAI SYLLABLE THU	[3916 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A5, 0x0021 };
    uint32_t const ces[9] = { 0x3916, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_463)
{
    // A5A5 003F;	
    // (ꖥ) VAI SYLLABLE THU	[3916 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A5, 0x003F };
    uint32_t const ces[9] = { 0x3916, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_464)
{
    // A5A5 0061;	
    // (ꖥ) VAI SYLLABLE THU	[3916 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A5, 0x0061 };
    uint32_t const ces[9] = { 0x3916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_465)
{
    // A5A5 0041;	
    // (ꖥ) VAI SYLLABLE THU	[3916 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A5, 0x0041 };
    uint32_t const ces[9] = { 0x3916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_466)
{
    // A5A5 0062;	
    // (ꖥ) VAI SYLLABLE THU	[3916 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A5, 0x0062 };
    uint32_t const ces[9] = { 0x3916, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_467)
{
    // A5A6 0021;	
    // (ꖦ) VAI SYLLABLE DHU	[3917 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A6, 0x0021 };
    uint32_t const ces[9] = { 0x3917, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_468)
{
    // A5A6 003F;	
    // (ꖦ) VAI SYLLABLE DHU	[3917 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A6, 0x003F };
    uint32_t const ces[9] = { 0x3917, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_469)
{
    // A5A6 0061;	
    // (ꖦ) VAI SYLLABLE DHU	[3917 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A6, 0x0061 };
    uint32_t const ces[9] = { 0x3917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_470)
{
    // A5A6 0041;	
    // (ꖦ) VAI SYLLABLE DHU	[3917 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A6, 0x0041 };
    uint32_t const ces[9] = { 0x3917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_471)
{
    // A5A6 0062;	
    // (ꖦ) VAI SYLLABLE DHU	[3917 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A6, 0x0062 };
    uint32_t const ces[9] = { 0x3917, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_472)
{
    // A5A7 0021;	
    // (ꖧ) VAI SYLLABLE DHHU	[3918 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A7, 0x0021 };
    uint32_t const ces[9] = { 0x3918, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_473)
{
    // A5A7 003F;	
    // (ꖧ) VAI SYLLABLE DHHU	[3918 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A7, 0x003F };
    uint32_t const ces[9] = { 0x3918, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_474)
{
    // A5A7 0061;	
    // (ꖧ) VAI SYLLABLE DHHU	[3918 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A7, 0x0061 };
    uint32_t const ces[9] = { 0x3918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_475)
{
    // A5A7 0041;	
    // (ꖧ) VAI SYLLABLE DHHU	[3918 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A7, 0x0041 };
    uint32_t const ces[9] = { 0x3918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_476)
{
    // A5A7 0062;	
    // (ꖧ) VAI SYLLABLE DHHU	[3918 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A7, 0x0062 };
    uint32_t const ces[9] = { 0x3918, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_477)
{
    // A5A8 0021;	
    // (ꖨ) VAI SYLLABLE LU	[3919 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A8, 0x0021 };
    uint32_t const ces[9] = { 0x3919, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_478)
{
    // A5A8 003F;	
    // (ꖨ) VAI SYLLABLE LU	[3919 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A8, 0x003F };
    uint32_t const ces[9] = { 0x3919, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_479)
{
    // A5A8 0061;	
    // (ꖨ) VAI SYLLABLE LU	[3919 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A8, 0x0061 };
    uint32_t const ces[9] = { 0x3919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_480)
{
    // A5A8 0041;	
    // (ꖨ) VAI SYLLABLE LU	[3919 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A8, 0x0041 };
    uint32_t const ces[9] = { 0x3919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_481)
{
    // A5A8 0062;	
    // (ꖨ) VAI SYLLABLE LU	[3919 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A8, 0x0062 };
    uint32_t const ces[9] = { 0x3919, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_482)
{
    // A5A9 0021;	
    // (ꖩ) VAI SYLLABLE RU	[391A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A9, 0x0021 };
    uint32_t const ces[9] = { 0x391A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_483)
{
    // A5A9 003F;	
    // (ꖩ) VAI SYLLABLE RU	[391A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A9, 0x003F };
    uint32_t const ces[9] = { 0x391A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_484)
{
    // A5A9 0061;	
    // (ꖩ) VAI SYLLABLE RU	[391A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A9, 0x0061 };
    uint32_t const ces[9] = { 0x391A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_485)
{
    // A5A9 0041;	
    // (ꖩ) VAI SYLLABLE RU	[391A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5A9, 0x0041 };
    uint32_t const ces[9] = { 0x391A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_486)
{
    // A5A9 0062;	
    // (ꖩ) VAI SYLLABLE RU	[391A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5A9, 0x0062 };
    uint32_t const ces[9] = { 0x391A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_487)
{
    // A5AA 0021;	
    // (ꖪ) VAI SYLLABLE DU	[391B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AA, 0x0021 };
    uint32_t const ces[9] = { 0x391B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_488)
{
    // A5AA 003F;	
    // (ꖪ) VAI SYLLABLE DU	[391B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AA, 0x003F };
    uint32_t const ces[9] = { 0x391B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_489)
{
    // A5AA 0061;	
    // (ꖪ) VAI SYLLABLE DU	[391B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AA, 0x0061 };
    uint32_t const ces[9] = { 0x391B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_490)
{
    // A5AA 0041;	
    // (ꖪ) VAI SYLLABLE DU	[391B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5AA, 0x0041 };
    uint32_t const ces[9] = { 0x391B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_491)
{
    // A5AA 0062;	
    // (ꖪ) VAI SYLLABLE DU	[391B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AA, 0x0062 };
    uint32_t const ces[9] = { 0x391B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_492)
{
    // A5AB 0021;	
    // (ꖫ) VAI SYLLABLE NDU	[391C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AB, 0x0021 };
    uint32_t const ces[9] = { 0x391C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_493)
{
    // A5AB 003F;	
    // (ꖫ) VAI SYLLABLE NDU	[391C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AB, 0x003F };
    uint32_t const ces[9] = { 0x391C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_494)
{
    // A5AB 0061;	
    // (ꖫ) VAI SYLLABLE NDU	[391C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AB, 0x0061 };
    uint32_t const ces[9] = { 0x391C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_495)
{
    // A5AB 0041;	
    // (ꖫ) VAI SYLLABLE NDU	[391C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA5AB, 0x0041 };
    uint32_t const ces[9] = { 0x391C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_496)
{
    // A5AB 0062;	
    // (ꖫ) VAI SYLLABLE NDU	[391C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AB, 0x0062 };
    uint32_t const ces[9] = { 0x391C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_497)
{
    // A5AC 0021;	
    // (ꖬ) VAI SYLLABLE SU	[391D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AC, 0x0021 };
    uint32_t const ces[9] = { 0x391D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_498)
{
    // A5AC 003F;	
    // (ꖬ) VAI SYLLABLE SU	[391D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AC, 0x003F };
    uint32_t const ces[9] = { 0x391D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_229_499)
{
    // A5AC 0061;	
    // (ꖬ) VAI SYLLABLE SU	[391D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA5AC, 0x0061 };
    uint32_t const ces[9] = { 0x391D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

