// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_041_000)
{
    // 1966  ; [.3289.0020.0002] 
    // TAI LE LETTER EH

    uint32_t const cps[1] = { 0x1966 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3289), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_001)
{
    // 1967  ; [.328A.0020.0002] 
    // TAI LE LETTER U

    uint32_t const cps[1] = { 0x1967 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x328a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_002)
{
    // 1968  ; [.328B.0020.0002] 
    // TAI LE LETTER OO

    uint32_t const cps[1] = { 0x1968 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x328b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_003)
{
    // 1969  ; [.328C.0020.0002] 
    // TAI LE LETTER O

    uint32_t const cps[1] = { 0x1969 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x328c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_004)
{
    // 196A  ; [.328D.0020.0002] 
    // TAI LE LETTER UE

    uint32_t const cps[1] = { 0x196a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x328d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_005)
{
    // 196B  ; [.328E.0020.0002] 
    // TAI LE LETTER E

    uint32_t const cps[1] = { 0x196b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x328e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_006)
{
    // 196C  ; [.328F.0020.0002] 
    // TAI LE LETTER AUE

    uint32_t const cps[1] = { 0x196c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x328f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_007)
{
    // 196D  ; [.3290.0020.0002] 
    // TAI LE LETTER AI

    uint32_t const cps[1] = { 0x196d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3290), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_008)
{
    // 1970  ; [.3291.0020.0002] 
    // TAI LE LETTER TONE-2

    uint32_t const cps[1] = { 0x1970 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3291), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_009)
{
    // 1971  ; [.3292.0020.0002] 
    // TAI LE LETTER TONE-3

    uint32_t const cps[1] = { 0x1971 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3292), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_010)
{
    // 1972  ; [.3293.0020.0002] 
    // TAI LE LETTER TONE-4

    uint32_t const cps[1] = { 0x1972 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3293), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_011)
{
    // 1973  ; [.3294.0020.0002] 
    // TAI LE LETTER TONE-5

    uint32_t const cps[1] = { 0x1973 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3294), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_012)
{
    // 1974  ; [.3295.0020.0002] 
    // TAI LE LETTER TONE-6

    uint32_t const cps[1] = { 0x1974 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3295), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_013)
{
    // 1980  ; [.3296.0020.0002] 
    // NEW TAI LUE LETTER HIGH QA

    uint32_t const cps[1] = { 0x1980 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3296), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_014)
{
    // 1981  ; [.3297.0020.0002] 
    // NEW TAI LUE LETTER LOW QA

    uint32_t const cps[1] = { 0x1981 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3297), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_015)
{
    // 1982  ; [.3298.0020.0002] 
    // NEW TAI LUE LETTER HIGH KA

    uint32_t const cps[1] = { 0x1982 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3298), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_016)
{
    // 1983  ; [.3299.0020.0002] 
    // NEW TAI LUE LETTER HIGH XA

    uint32_t const cps[1] = { 0x1983 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3299), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_017)
{
    // 1984  ; [.329A.0020.0002] 
    // NEW TAI LUE LETTER HIGH NGA

    uint32_t const cps[1] = { 0x1984 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x329a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_018)
{
    // 1985  ; [.329B.0020.0002] 
    // NEW TAI LUE LETTER LOW KA

    uint32_t const cps[1] = { 0x1985 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x329b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_019)
{
    // 1986  ; [.329C.0020.0002] 
    // NEW TAI LUE LETTER LOW XA

    uint32_t const cps[1] = { 0x1986 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x329c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_020)
{
    // 1987  ; [.329D.0020.0002] 
    // NEW TAI LUE LETTER LOW NGA

    uint32_t const cps[1] = { 0x1987 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x329d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_021)
{
    // 1988  ; [.329E.0020.0002] 
    // NEW TAI LUE LETTER HIGH TSA

    uint32_t const cps[1] = { 0x1988 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x329e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_022)
{
    // 1989  ; [.329F.0020.0002] 
    // NEW TAI LUE LETTER HIGH SA

    uint32_t const cps[1] = { 0x1989 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x329f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_023)
{
    // 198A  ; [.32A0.0020.0002] 
    // NEW TAI LUE LETTER HIGH YA

    uint32_t const cps[1] = { 0x198a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_024)
{
    // 198B  ; [.32A1.0020.0002] 
    // NEW TAI LUE LETTER LOW TSA

    uint32_t const cps[1] = { 0x198b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_025)
{
    // 198C  ; [.32A2.0020.0002] 
    // NEW TAI LUE LETTER LOW SA

    uint32_t const cps[1] = { 0x198c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_026)
{
    // 198D  ; [.32A3.0020.0002] 
    // NEW TAI LUE LETTER LOW YA

    uint32_t const cps[1] = { 0x198d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_027)
{
    // 198E  ; [.32A4.0020.0002] 
    // NEW TAI LUE LETTER HIGH TA

    uint32_t const cps[1] = { 0x198e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_028)
{
    // 198F  ; [.32A5.0020.0002] 
    // NEW TAI LUE LETTER HIGH THA

    uint32_t const cps[1] = { 0x198f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_029)
{
    // 1990  ; [.32A6.0020.0002] 
    // NEW TAI LUE LETTER HIGH NA

    uint32_t const cps[1] = { 0x1990 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_030)
{
    // 1991  ; [.32A7.0020.0002] 
    // NEW TAI LUE LETTER LOW TA

    uint32_t const cps[1] = { 0x1991 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_031)
{
    // 1992  ; [.32A8.0020.0002] 
    // NEW TAI LUE LETTER LOW THA

    uint32_t const cps[1] = { 0x1992 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_032)
{
    // 1993  ; [.32A9.0020.0002] 
    // NEW TAI LUE LETTER LOW NA

    uint32_t const cps[1] = { 0x1993 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_033)
{
    // 1994  ; [.32AA.0020.0002] 
    // NEW TAI LUE LETTER HIGH PA

    uint32_t const cps[1] = { 0x1994 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_034)
{
    // 1995  ; [.32AB.0020.0002] 
    // NEW TAI LUE LETTER HIGH PHA

    uint32_t const cps[1] = { 0x1995 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_035)
{
    // 1996  ; [.32AC.0020.0002] 
    // NEW TAI LUE LETTER HIGH MA

    uint32_t const cps[1] = { 0x1996 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_036)
{
    // 1997  ; [.32AD.0020.0002] 
    // NEW TAI LUE LETTER LOW PA

    uint32_t const cps[1] = { 0x1997 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_037)
{
    // 1998  ; [.32AE.0020.0002] 
    // NEW TAI LUE LETTER LOW PHA

    uint32_t const cps[1] = { 0x1998 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_038)
{
    // 1999  ; [.32AF.0020.0002] 
    // NEW TAI LUE LETTER LOW MA

    uint32_t const cps[1] = { 0x1999 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_039)
{
    // 199A  ; [.32B0.0020.0002] 
    // NEW TAI LUE LETTER HIGH FA

    uint32_t const cps[1] = { 0x199a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_040)
{
    // 199B  ; [.32B1.0020.0002] 
    // NEW TAI LUE LETTER HIGH VA

    uint32_t const cps[1] = { 0x199b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_041)
{
    // 199C  ; [.32B2.0020.0002] 
    // NEW TAI LUE LETTER HIGH LA

    uint32_t const cps[1] = { 0x199c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_042)
{
    // 199D  ; [.32B3.0020.0002] 
    // NEW TAI LUE LETTER LOW FA

    uint32_t const cps[1] = { 0x199d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_043)
{
    // 199E  ; [.32B4.0020.0002] 
    // NEW TAI LUE LETTER LOW VA

    uint32_t const cps[1] = { 0x199e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_044)
{
    // 199F  ; [.32B5.0020.0002] 
    // NEW TAI LUE LETTER LOW LA

    uint32_t const cps[1] = { 0x199f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_045)
{
    // 19A0  ; [.32B6.0020.0002] 
    // NEW TAI LUE LETTER HIGH HA

    uint32_t const cps[1] = { 0x19a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_046)
{
    // 19A1  ; [.32B7.0020.0002] 
    // NEW TAI LUE LETTER HIGH DA

    uint32_t const cps[1] = { 0x19a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_047)
{
    // 19A2  ; [.32B8.0020.0002] 
    // NEW TAI LUE LETTER HIGH BA

    uint32_t const cps[1] = { 0x19a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_048)
{
    // 19A3  ; [.32B9.0020.0002] 
    // NEW TAI LUE LETTER LOW HA

    uint32_t const cps[1] = { 0x19a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_049)
{
    // 19A4  ; [.32BA.0020.0002] 
    // NEW TAI LUE LETTER LOW DA

    uint32_t const cps[1] = { 0x19a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_050)
{
    // 19A5  ; [.32BB.0020.0002] 
    // NEW TAI LUE LETTER LOW BA

    uint32_t const cps[1] = { 0x19a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_051)
{
    // 19A6  ; [.32BC.0020.0002] 
    // NEW TAI LUE LETTER HIGH KVA

    uint32_t const cps[1] = { 0x19a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_052)
{
    // 19A7  ; [.32BD.0020.0002] 
    // NEW TAI LUE LETTER HIGH XVA

    uint32_t const cps[1] = { 0x19a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_053)
{
    // 19A8  ; [.32BE.0020.0002] 
    // NEW TAI LUE LETTER LOW KVA

    uint32_t const cps[1] = { 0x19a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_054)
{
    // 19A9  ; [.32BF.0020.0002] 
    // NEW TAI LUE LETTER LOW XVA

    uint32_t const cps[1] = { 0x19a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_055)
{
    // 19AA  ; [.32C0.0020.0002] 
    // NEW TAI LUE LETTER HIGH SUA

    uint32_t const cps[1] = { 0x19aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_056)
{
    // 19AB  ; [.32C1.0020.0002] 
    // NEW TAI LUE LETTER LOW SUA

    uint32_t const cps[1] = { 0x19ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_057)
{
    // 19B0  ; [.32C2.0020.0002] 
    // NEW TAI LUE VOWEL SIGN VOWEL SHORTENER

    uint32_t const cps[1] = { 0x19b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_058)
{
    // 19B1  ; [.32C3.0020.0002] 
    // NEW TAI LUE VOWEL SIGN AA

    uint32_t const cps[1] = { 0x19b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_059)
{
    // 19B2  ; [.32C4.0020.0002] 
    // NEW TAI LUE VOWEL SIGN II

    uint32_t const cps[1] = { 0x19b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_060)
{
    // 19B3  ; [.32C5.0020.0002] 
    // NEW TAI LUE VOWEL SIGN U

    uint32_t const cps[1] = { 0x19b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_061)
{
    // 19B4  ; [.32C6.0020.0002] 
    // NEW TAI LUE VOWEL SIGN UU

    uint32_t const cps[1] = { 0x19b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_062)
{
    // 19B5  ; [.32C7.0020.0002] 
    // NEW TAI LUE VOWEL SIGN E

    uint32_t const cps[1] = { 0x19b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_063)
{
    // 19B5 1980 ; [.3296.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH QA>

    uint32_t const cps[2] = { 0x19b5, 0x1980 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3296), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_064)
{
    // 19B5 1981 ; [.3297.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW QA>

    uint32_t const cps[2] = { 0x19b5, 0x1981 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3297), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_065)
{
    // 19B5 1982 ; [.3298.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH KA>

    uint32_t const cps[2] = { 0x19b5, 0x1982 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3298), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_066)
{
    // 19B5 1983 ; [.3299.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH XA>

    uint32_t const cps[2] = { 0x19b5, 0x1983 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3299), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_067)
{
    // 19B5 1984 ; [.329A.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH NGA>

    uint32_t const cps[2] = { 0x19b5, 0x1984 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_068)
{
    // 19B5 1985 ; [.329B.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW KA>

    uint32_t const cps[2] = { 0x19b5, 0x1985 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_069)
{
    // 19B5 1986 ; [.329C.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW XA>

    uint32_t const cps[2] = { 0x19b5, 0x1986 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_070)
{
    // 19B5 1987 ; [.329D.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW NGA>

    uint32_t const cps[2] = { 0x19b5, 0x1987 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_071)
{
    // 19B5 1988 ; [.329E.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH TSA>

    uint32_t const cps[2] = { 0x19b5, 0x1988 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_072)
{
    // 19B5 1989 ; [.329F.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH SA>

    uint32_t const cps[2] = { 0x19b5, 0x1989 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_073)
{
    // 19B5 198A ; [.32A0.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH YA>

    uint32_t const cps[2] = { 0x19b5, 0x198a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_074)
{
    // 19B5 198B ; [.32A1.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW TSA>

    uint32_t const cps[2] = { 0x19b5, 0x198b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_075)
{
    // 19B5 198C ; [.32A2.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW SA>

    uint32_t const cps[2] = { 0x19b5, 0x198c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_076)
{
    // 19B5 198D ; [.32A3.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW YA>

    uint32_t const cps[2] = { 0x19b5, 0x198d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_077)
{
    // 19B5 198E ; [.32A4.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH TA>

    uint32_t const cps[2] = { 0x19b5, 0x198e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_078)
{
    // 19B5 198F ; [.32A5.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH THA>

    uint32_t const cps[2] = { 0x19b5, 0x198f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_079)
{
    // 19B5 1990 ; [.32A6.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH NA>

    uint32_t const cps[2] = { 0x19b5, 0x1990 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_080)
{
    // 19B5 1991 ; [.32A7.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW TA>

    uint32_t const cps[2] = { 0x19b5, 0x1991 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_081)
{
    // 19B5 1992 ; [.32A8.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW THA>

    uint32_t const cps[2] = { 0x19b5, 0x1992 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_082)
{
    // 19B5 1993 ; [.32A9.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW NA>

    uint32_t const cps[2] = { 0x19b5, 0x1993 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_083)
{
    // 19B5 1994 ; [.32AA.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH PA>

    uint32_t const cps[2] = { 0x19b5, 0x1994 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32aa), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_084)
{
    // 19B5 1995 ; [.32AB.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH PHA>

    uint32_t const cps[2] = { 0x19b5, 0x1995 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ab), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_085)
{
    // 19B5 1996 ; [.32AC.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH MA>

    uint32_t const cps[2] = { 0x19b5, 0x1996 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ac), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_086)
{
    // 19B5 1997 ; [.32AD.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW PA>

    uint32_t const cps[2] = { 0x19b5, 0x1997 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ad), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_087)
{
    // 19B5 1998 ; [.32AE.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW PHA>

    uint32_t const cps[2] = { 0x19b5, 0x1998 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ae), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_088)
{
    // 19B5 1999 ; [.32AF.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW MA>

    uint32_t const cps[2] = { 0x19b5, 0x1999 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32af), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_089)
{
    // 19B5 199A ; [.32B0.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH FA>

    uint32_t const cps[2] = { 0x19b5, 0x199a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_090)
{
    // 19B5 199B ; [.32B1.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH VA>

    uint32_t const cps[2] = { 0x19b5, 0x199b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_091)
{
    // 19B5 199C ; [.32B2.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH LA>

    uint32_t const cps[2] = { 0x19b5, 0x199c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_092)
{
    // 19B5 199D ; [.32B3.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW FA>

    uint32_t const cps[2] = { 0x19b5, 0x199d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_093)
{
    // 19B5 199E ; [.32B4.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW VA>

    uint32_t const cps[2] = { 0x19b5, 0x199e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_094)
{
    // 19B5 199F ; [.32B5.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW LA>

    uint32_t const cps[2] = { 0x19b5, 0x199f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_095)
{
    // 19B5 19A0 ; [.32B6.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH HA>

    uint32_t const cps[2] = { 0x19b5, 0x19a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_096)
{
    // 19B5 19A1 ; [.32B7.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH DA>

    uint32_t const cps[2] = { 0x19b5, 0x19a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_097)
{
    // 19B5 19A2 ; [.32B8.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH BA>

    uint32_t const cps[2] = { 0x19b5, 0x19a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_098)
{
    // 19B5 19A3 ; [.32B9.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW HA>

    uint32_t const cps[2] = { 0x19b5, 0x19a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_099)
{
    // 19B5 19A4 ; [.32BA.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW DA>

    uint32_t const cps[2] = { 0x19b5, 0x19a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ba), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_100)
{
    // 19B5 19A5 ; [.32BB.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW BA>

    uint32_t const cps[2] = { 0x19b5, 0x19a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32bb), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_101)
{
    // 19B5 19A6 ; [.32BC.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH KVA>

    uint32_t const cps[2] = { 0x19b5, 0x19a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32bc), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_102)
{
    // 19B5 19A7 ; [.32BD.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH XVA>

    uint32_t const cps[2] = { 0x19b5, 0x19a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32bd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_103)
{
    // 19B5 19A8 ; [.32BE.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW KVA>

    uint32_t const cps[2] = { 0x19b5, 0x19a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32be), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_104)
{
    // 19B5 19A9 ; [.32BF.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW XVA>

    uint32_t const cps[2] = { 0x19b5, 0x19a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32bf), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_105)
{
    // 19B5 19AA ; [.32C0.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER HIGH SUA>

    uint32_t const cps[2] = { 0x19b5, 0x19aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32c0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_106)
{
    // 19B5 19AB ; [.32C1.0020.0002][.32C7.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN E, NEW TAI LUE LETTER LOW SUA>

    uint32_t const cps[2] = { 0x19b5, 0x19ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32c1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_107)
{
    // 19B6  ; [.32C8.0020.0002] 
    // NEW TAI LUE VOWEL SIGN AE

    uint32_t const cps[1] = { 0x19b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_041_108)
{
    // 19B6 1980 ; [.3296.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH QA>

    uint32_t const cps[2] = { 0x19b6, 0x1980 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3296), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_109)
{
    // 19B6 1981 ; [.3297.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW QA>

    uint32_t const cps[2] = { 0x19b6, 0x1981 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3297), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_110)
{
    // 19B6 1982 ; [.3298.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH KA>

    uint32_t const cps[2] = { 0x19b6, 0x1982 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3298), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_111)
{
    // 19B6 1983 ; [.3299.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH XA>

    uint32_t const cps[2] = { 0x19b6, 0x1983 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3299), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_112)
{
    // 19B6 1984 ; [.329A.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH NGA>

    uint32_t const cps[2] = { 0x19b6, 0x1984 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_113)
{
    // 19B6 1985 ; [.329B.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW KA>

    uint32_t const cps[2] = { 0x19b6, 0x1985 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_114)
{
    // 19B6 1986 ; [.329C.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW XA>

    uint32_t const cps[2] = { 0x19b6, 0x1986 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_115)
{
    // 19B6 1987 ; [.329D.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW NGA>

    uint32_t const cps[2] = { 0x19b6, 0x1987 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_116)
{
    // 19B6 1988 ; [.329E.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH TSA>

    uint32_t const cps[2] = { 0x19b6, 0x1988 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_117)
{
    // 19B6 1989 ; [.329F.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH SA>

    uint32_t const cps[2] = { 0x19b6, 0x1989 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x329f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_118)
{
    // 19B6 198A ; [.32A0.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH YA>

    uint32_t const cps[2] = { 0x19b6, 0x198a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_119)
{
    // 19B6 198B ; [.32A1.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW TSA>

    uint32_t const cps[2] = { 0x19b6, 0x198b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_120)
{
    // 19B6 198C ; [.32A2.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW SA>

    uint32_t const cps[2] = { 0x19b6, 0x198c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_121)
{
    // 19B6 198D ; [.32A3.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW YA>

    uint32_t const cps[2] = { 0x19b6, 0x198d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_122)
{
    // 19B6 198E ; [.32A4.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH TA>

    uint32_t const cps[2] = { 0x19b6, 0x198e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_123)
{
    // 19B6 198F ; [.32A5.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH THA>

    uint32_t const cps[2] = { 0x19b6, 0x198f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_124)
{
    // 19B6 1990 ; [.32A6.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH NA>

    uint32_t const cps[2] = { 0x19b6, 0x1990 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_125)
{
    // 19B6 1991 ; [.32A7.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW TA>

    uint32_t const cps[2] = { 0x19b6, 0x1991 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_126)
{
    // 19B6 1992 ; [.32A8.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW THA>

    uint32_t const cps[2] = { 0x19b6, 0x1992 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_127)
{
    // 19B6 1993 ; [.32A9.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW NA>

    uint32_t const cps[2] = { 0x19b6, 0x1993 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32a9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_128)
{
    // 19B6 1994 ; [.32AA.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH PA>

    uint32_t const cps[2] = { 0x19b6, 0x1994 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32aa), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_129)
{
    // 19B6 1995 ; [.32AB.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH PHA>

    uint32_t const cps[2] = { 0x19b6, 0x1995 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ab), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_130)
{
    // 19B6 1996 ; [.32AC.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH MA>

    uint32_t const cps[2] = { 0x19b6, 0x1996 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ac), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_131)
{
    // 19B6 1997 ; [.32AD.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW PA>

    uint32_t const cps[2] = { 0x19b6, 0x1997 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ad), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_132)
{
    // 19B6 1998 ; [.32AE.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW PHA>

    uint32_t const cps[2] = { 0x19b6, 0x1998 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ae), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_133)
{
    // 19B6 1999 ; [.32AF.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW MA>

    uint32_t const cps[2] = { 0x19b6, 0x1999 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32af), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_134)
{
    // 19B6 199A ; [.32B0.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH FA>

    uint32_t const cps[2] = { 0x19b6, 0x199a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_135)
{
    // 19B6 199B ; [.32B1.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH VA>

    uint32_t const cps[2] = { 0x19b6, 0x199b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_136)
{
    // 19B6 199C ; [.32B2.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH LA>

    uint32_t const cps[2] = { 0x19b6, 0x199c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_137)
{
    // 19B6 199D ; [.32B3.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW FA>

    uint32_t const cps[2] = { 0x19b6, 0x199d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_138)
{
    // 19B6 199E ; [.32B4.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW VA>

    uint32_t const cps[2] = { 0x19b6, 0x199e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_139)
{
    // 19B6 199F ; [.32B5.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW LA>

    uint32_t const cps[2] = { 0x19b6, 0x199f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_140)
{
    // 19B6 19A0 ; [.32B6.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH HA>

    uint32_t const cps[2] = { 0x19b6, 0x19a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_141)
{
    // 19B6 19A1 ; [.32B7.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH DA>

    uint32_t const cps[2] = { 0x19b6, 0x19a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_142)
{
    // 19B6 19A2 ; [.32B8.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH BA>

    uint32_t const cps[2] = { 0x19b6, 0x19a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_143)
{
    // 19B6 19A3 ; [.32B9.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW HA>

    uint32_t const cps[2] = { 0x19b6, 0x19a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32b9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_144)
{
    // 19B6 19A4 ; [.32BA.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW DA>

    uint32_t const cps[2] = { 0x19b6, 0x19a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32ba), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_145)
{
    // 19B6 19A5 ; [.32BB.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW BA>

    uint32_t const cps[2] = { 0x19b6, 0x19a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32bb), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_146)
{
    // 19B6 19A6 ; [.32BC.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH KVA>

    uint32_t const cps[2] = { 0x19b6, 0x19a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32bc), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_147)
{
    // 19B6 19A7 ; [.32BD.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH XVA>

    uint32_t const cps[2] = { 0x19b6, 0x19a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32bd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_148)
{
    // 19B6 19A8 ; [.32BE.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW KVA>

    uint32_t const cps[2] = { 0x19b6, 0x19a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32be), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_041_149)
{
    // 19B6 19A9 ; [.32BF.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW XVA>

    uint32_t const cps[2] = { 0x19b6, 0x19a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x32bf), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

