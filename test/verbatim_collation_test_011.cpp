// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_011_000)
{
    uint32_t const cps[2] = { 0x205B, 0x0062 };

    // 205B 0062;	
    // (⁛) FOUR DOT MARK	[02EE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205B 0062;	
    // (⁛) FOUR DOT MARK	[1CC6 | 0020 | 0002 | 02EE FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02EE, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_001)
{
    uint32_t const cps[2] = { 0x205C, 0x0021 };

    // 205C 0021;	
    // (⁜) DOTTED CROSS	[02EF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205C 0021;	
    // (⁜) DOTTED CROSS	[| | | 02EF 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02EF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_002)
{
    uint32_t const cps[2] = { 0x205C, 0x003F };

    // 205C 003F;	
    // (⁜) DOTTED CROSS	[02EF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205C 003F;	
    // (⁜) DOTTED CROSS	[| | | 02EF 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02EF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_003)
{
    uint32_t const cps[2] = { 0x205C, 0x0061 };

    // 205C 0061;	
    // (⁜) DOTTED CROSS	[02EF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205C 0061;	
    // (⁜) DOTTED CROSS	[1CAD | 0020 | 0002 | 02EF FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02EF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_004)
{
    uint32_t const cps[2] = { 0x205C, 0x0041 };

    // 205C 0041;	
    // (⁜) DOTTED CROSS	[02EF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205C 0041;	
    // (⁜) DOTTED CROSS	[1CAD | 0020 | 0008 | 02EF FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02EF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_005)
{
    uint32_t const cps[2] = { 0x205C, 0x0062 };

    // 205C 0062;	
    // (⁜) DOTTED CROSS	[02EF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205C 0062;	
    // (⁜) DOTTED CROSS	[1CC6 | 0020 | 0002 | 02EF FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02EF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_006)
{
    uint32_t const cps[2] = { 0x205D, 0x0021 };

    // 205D 0021;	
    // (⁝) TRICOLON	[02F0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205D 0021;	
    // (⁝) TRICOLON	[| | | 02F0 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F0, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_007)
{
    uint32_t const cps[2] = { 0x205D, 0x003F };

    // 205D 003F;	
    // (⁝) TRICOLON	[02F0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205D 003F;	
    // (⁝) TRICOLON	[| | | 02F0 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F0, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_008)
{
    uint32_t const cps[2] = { 0x205D, 0x0061 };

    // 205D 0061;	
    // (⁝) TRICOLON	[02F0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205D 0061;	
    // (⁝) TRICOLON	[1CAD | 0020 | 0002 | 02F0 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F0, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_009)
{
    uint32_t const cps[2] = { 0x205D, 0x0041 };

    // 205D 0041;	
    // (⁝) TRICOLON	[02F0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205D 0041;	
    // (⁝) TRICOLON	[1CAD | 0020 | 0008 | 02F0 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F0, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_010)
{
    uint32_t const cps[2] = { 0x205D, 0x0062 };

    // 205D 0062;	
    // (⁝) TRICOLON	[02F0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205D 0062;	
    // (⁝) TRICOLON	[1CC6 | 0020 | 0002 | 02F0 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F0, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_011)
{
    uint32_t const cps[2] = { 0x205E, 0x0021 };

    // 205E 0021;	
    // (⁞) VERTICAL FOUR DOTS	[02F1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205E 0021;	
    // (⁞) VERTICAL FOUR DOTS	[| | | 02F1 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F1, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_012)
{
    uint32_t const cps[2] = { 0x205E, 0x003F };

    // 205E 003F;	
    // (⁞) VERTICAL FOUR DOTS	[02F1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205E 003F;	
    // (⁞) VERTICAL FOUR DOTS	[| | | 02F1 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F1, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_013)
{
    uint32_t const cps[2] = { 0x205E, 0x0061 };

    // 205E 0061;	
    // (⁞) VERTICAL FOUR DOTS	[02F1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205E 0061;	
    // (⁞) VERTICAL FOUR DOTS	[1CAD | 0020 | 0002 | 02F1 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F1, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_014)
{
    uint32_t const cps[2] = { 0x205E, 0x0041 };

    // 205E 0041;	
    // (⁞) VERTICAL FOUR DOTS	[02F1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205E 0041;	
    // (⁞) VERTICAL FOUR DOTS	[1CAD | 0020 | 0008 | 02F1 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F1, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_015)
{
    uint32_t const cps[2] = { 0x205E, 0x0062 };

    // 205E 0062;	
    // (⁞) VERTICAL FOUR DOTS	[02F1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 205E 0062;	
    // (⁞) VERTICAL FOUR DOTS	[1CC6 | 0020 | 0002 | 02F1 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F1, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_016)
{
    uint32_t const cps[2] = { 0x2E2A, 0x0021 };

    // 2E2A 0021;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[02F2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2A 0021;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[| | | 02F2 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F2, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_017)
{
    uint32_t const cps[2] = { 0x2E2A, 0x003F };

    // 2E2A 003F;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[02F2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2A 003F;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[| | | 02F2 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F2, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_018)
{
    uint32_t const cps[2] = { 0x2E2A, 0x0061 };

    // 2E2A 0061;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[02F2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2A 0061;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[1CAD | 0020 | 0002 | 02F2 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F2, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_019)
{
    uint32_t const cps[2] = { 0x2E2A, 0x0041 };

    // 2E2A 0041;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[02F2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2A 0041;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[1CAD | 0020 | 0008 | 02F2 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F2, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_020)
{
    uint32_t const cps[2] = { 0x2E2A, 0x0062 };

    // 2E2A 0062;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[02F2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2A 0062;	
    // (⸪) TWO DOTS OVER ONE DOT PUNCTUATION	[1CC6 | 0020 | 0002 | 02F2 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F2, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_021)
{
    uint32_t const cps[2] = { 0x2E2B, 0x0021 };

    // 2E2B 0021;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[02F3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2B 0021;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[| | | 02F3 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F3, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_022)
{
    uint32_t const cps[2] = { 0x2E2B, 0x003F };

    // 2E2B 003F;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[02F3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2B 003F;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[| | | 02F3 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F3, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_023)
{
    uint32_t const cps[2] = { 0x2E2B, 0x0061 };

    // 2E2B 0061;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[02F3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2B 0061;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[1CAD | 0020 | 0002 | 02F3 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F3, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_024)
{
    uint32_t const cps[2] = { 0x2E2B, 0x0041 };

    // 2E2B 0041;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[02F3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2B 0041;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[1CAD | 0020 | 0008 | 02F3 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F3, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_025)
{
    uint32_t const cps[2] = { 0x2E2B, 0x0062 };

    // 2E2B 0062;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[02F3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2B 0062;	
    // (⸫) ONE DOT OVER TWO DOTS PUNCTUATION	[1CC6 | 0020 | 0002 | 02F3 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F3, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_026)
{
    uint32_t const cps[2] = { 0x2E2C, 0x0021 };

    // 2E2C 0021;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[02F4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2C 0021;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[| | | 02F4 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F4, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_027)
{
    uint32_t const cps[2] = { 0x2E2C, 0x003F };

    // 2E2C 003F;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[02F4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2C 003F;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[| | | 02F4 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F4, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_028)
{
    uint32_t const cps[2] = { 0x2E2C, 0x0061 };

    // 2E2C 0061;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[02F4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2C 0061;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[1CAD | 0020 | 0002 | 02F4 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F4, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_029)
{
    uint32_t const cps[2] = { 0x2E2C, 0x0041 };

    // 2E2C 0041;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[02F4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2C 0041;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[1CAD | 0020 | 0008 | 02F4 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F4, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_030)
{
    uint32_t const cps[2] = { 0x2E2C, 0x0062 };

    // 2E2C 0062;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[02F4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2C 0062;	
    // (⸬) SQUARED FOUR DOT PUNCTUATION	[1CC6 | 0020 | 0002 | 02F4 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F4, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_031)
{
    uint32_t const cps[2] = { 0x2E2D, 0x0021 };

    // 2E2D 0021;	
    // (⸭) FIVE DOT MARK	[02F5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2D 0021;	
    // (⸭) FIVE DOT MARK	[| | | 02F5 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F5, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_032)
{
    uint32_t const cps[2] = { 0x2E2D, 0x003F };

    // 2E2D 003F;	
    // (⸭) FIVE DOT MARK	[02F5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2D 003F;	
    // (⸭) FIVE DOT MARK	[| | | 02F5 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F5, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_033)
{
    uint32_t const cps[2] = { 0x2E2D, 0x0061 };

    // 2E2D 0061;	
    // (⸭) FIVE DOT MARK	[02F5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2D 0061;	
    // (⸭) FIVE DOT MARK	[1CAD | 0020 | 0002 | 02F5 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F5, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_034)
{
    uint32_t const cps[2] = { 0x2E2D, 0x0041 };

    // 2E2D 0041;	
    // (⸭) FIVE DOT MARK	[02F5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2D 0041;	
    // (⸭) FIVE DOT MARK	[1CAD | 0020 | 0008 | 02F5 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F5, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_035)
{
    uint32_t const cps[2] = { 0x2E2D, 0x0062 };

    // 2E2D 0062;	
    // (⸭) FIVE DOT MARK	[02F5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E2D 0062;	
    // (⸭) FIVE DOT MARK	[1CC6 | 0020 | 0002 | 02F5 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F5, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_036)
{
    uint32_t const cps[2] = { 0x2E3D, 0x0021 };

    // 2E3D 0021;	
    // (⸽) VERTICAL SIX DOTS	[02F6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E3D 0021;	
    // (⸽) VERTICAL SIX DOTS	[| | | 02F6 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F6, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_037)
{
    uint32_t const cps[2] = { 0x2E3D, 0x003F };

    // 2E3D 003F;	
    // (⸽) VERTICAL SIX DOTS	[02F6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E3D 003F;	
    // (⸽) VERTICAL SIX DOTS	[| | | 02F6 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F6, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_038)
{
    uint32_t const cps[2] = { 0x2E3D, 0x0061 };

    // 2E3D 0061;	
    // (⸽) VERTICAL SIX DOTS	[02F6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E3D 0061;	
    // (⸽) VERTICAL SIX DOTS	[1CAD | 0020 | 0002 | 02F6 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F6, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_039)
{
    uint32_t const cps[2] = { 0x2E3D, 0x0041 };

    // 2E3D 0041;	
    // (⸽) VERTICAL SIX DOTS	[02F6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E3D 0041;	
    // (⸽) VERTICAL SIX DOTS	[1CAD | 0020 | 0008 | 02F6 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F6, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_040)
{
    uint32_t const cps[2] = { 0x2E3D, 0x0062 };

    // 2E3D 0062;	
    // (⸽) VERTICAL SIX DOTS	[02F6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E3D 0062;	
    // (⸽) VERTICAL SIX DOTS	[1CC6 | 0020 | 0002 | 02F6 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F6, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_041)
{
    uint32_t const cps[2] = { 0x2CFC, 0x0021 };

    // 2CFC 0021;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[02F7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFC 0021;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[| | | 02F7 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F7, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_042)
{
    uint32_t const cps[2] = { 0x2CFC, 0x003F };

    // 2CFC 003F;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[02F7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFC 003F;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[| | | 02F7 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F7, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_043)
{
    uint32_t const cps[2] = { 0x2CFC, 0x0061 };

    // 2CFC 0061;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[02F7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFC 0061;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[1CAD | 0020 | 0002 | 02F7 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F7, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_044)
{
    uint32_t const cps[2] = { 0x2CFC, 0x0041 };

    // 2CFC 0041;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[02F7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFC 0041;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[1CAD | 0020 | 0008 | 02F7 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F7, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_045)
{
    uint32_t const cps[2] = { 0x2CFC, 0x0062 };

    // 2CFC 0062;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[02F7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFC 0062;	
    // (⳼) COPTIC OLD NUBIAN VERSE DIVIDER	[1CC6 | 0020 | 0002 | 02F7 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F7, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_046)
{
    uint32_t const cps[2] = { 0x2CFF, 0x0021 };

    // 2CFF 0021;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[02F8 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFF 0021;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[| | | 02F8 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F8, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_047)
{
    uint32_t const cps[2] = { 0x2CFF, 0x003F };

    // 2CFF 003F;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[02F8 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFF 003F;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[| | | 02F8 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F8, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_048)
{
    uint32_t const cps[2] = { 0x2CFF, 0x0061 };

    // 2CFF 0061;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[02F8 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFF 0061;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[1CAD | 0020 | 0002 | 02F8 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F8, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_049)
{
    uint32_t const cps[2] = { 0x2CFF, 0x0041 };

    // 2CFF 0041;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[02F8 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFF 0041;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[1CAD | 0020 | 0008 | 02F8 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F8, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_050)
{
    uint32_t const cps[2] = { 0x2CFF, 0x0062 };

    // 2CFF 0062;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[02F8 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CFF 0062;	
    // (⳿) COPTIC MORPHOLOGICAL DIVIDER	[1CC6 | 0020 | 0002 | 02F8 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F8, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_051)
{
    uint32_t const cps[2] = { 0x2E19, 0x0021 };

    // 2E19 0021;	
    // (⸙) PALM BRANCH	[02F9 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E19 0021;	
    // (⸙) PALM BRANCH	[| | | 02F9 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F9, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_052)
{
    uint32_t const cps[2] = { 0x2E19, 0x003F };

    // 2E19 003F;	
    // (⸙) PALM BRANCH	[02F9 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E19 003F;	
    // (⸙) PALM BRANCH	[| | | 02F9 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02F9, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_053)
{
    uint32_t const cps[2] = { 0x2E19, 0x0061 };

    // 2E19 0061;	
    // (⸙) PALM BRANCH	[02F9 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E19 0061;	
    // (⸙) PALM BRANCH	[1CAD | 0020 | 0002 | 02F9 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F9, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_054)
{
    uint32_t const cps[2] = { 0x2E19, 0x0041 };

    // 2E19 0041;	
    // (⸙) PALM BRANCH	[02F9 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E19 0041;	
    // (⸙) PALM BRANCH	[1CAD | 0020 | 0008 | 02F9 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02F9, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_055)
{
    uint32_t const cps[2] = { 0x2E19, 0x0062 };

    // 2E19 0062;	
    // (⸙) PALM BRANCH	[02F9 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E19 0062;	
    // (⸙) PALM BRANCH	[1CC6 | 0020 | 0002 | 02F9 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02F9, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_056)
{
    uint32_t const cps[2] = { 0x1093F, 0x0021 };

    // 1093F 0021;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[02FA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1093F 0021;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[| | | 02FA 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FA, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_057)
{
    uint32_t const cps[2] = { 0x1093F, 0x003F };

    // 1093F 003F;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[02FA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1093F 003F;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[| | | 02FA 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FA, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_058)
{
    uint32_t const cps[2] = { 0x1093F, 0x0061 };

    // 1093F 0061;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[02FA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1093F 0061;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[1CAD | 0020 | 0002 | 02FA FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FA, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_059)
{
    uint32_t const cps[2] = { 0x1093F, 0x0041 };

    // 1093F 0041;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[02FA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1093F 0041;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[1CAD | 0020 | 0008 | 02FA FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02FA, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_060)
{
    uint32_t const cps[2] = { 0x1093F, 0x0062 };

    // 1093F 0062;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[02FA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1093F 0062;	
    // (‎‎𐤿‎‎) LYDIAN TRIANGULAR MARK	[1CC6 | 0020 | 0002 | 02FA FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FA, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_061)
{
    uint32_t const cps[2] = { 0x10100, 0x0021 };

    // 10100 0021;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[02FB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10100 0021;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[| | | 02FB 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FB, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_062)
{
    uint32_t const cps[2] = { 0x10100, 0x003F };

    // 10100 003F;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[02FB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10100 003F;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[| | | 02FB 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FB, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_063)
{
    uint32_t const cps[2] = { 0x10100, 0x0061 };

    // 10100 0061;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[02FB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10100 0061;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[1CAD | 0020 | 0002 | 02FB FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FB, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_064)
{
    uint32_t const cps[2] = { 0x10100, 0x0041 };

    // 10100 0041;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[02FB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10100 0041;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[1CAD | 0020 | 0008 | 02FB FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02FB, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_065)
{
    uint32_t const cps[2] = { 0x10100, 0x0062 };

    // 10100 0062;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[02FB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10100 0062;	
    // (𐄀) AEGEAN WORD SEPARATOR LINE	[1CC6 | 0020 | 0002 | 02FB FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FB, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_066)
{
    uint32_t const cps[2] = { 0x10101, 0x0021 };

    // 10101 0021;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[02FC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10101 0021;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[| | | 02FC 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FC, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_067)
{
    uint32_t const cps[2] = { 0x10101, 0x003F };

    // 10101 003F;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[02FC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10101 003F;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[| | | 02FC 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FC, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_068)
{
    uint32_t const cps[2] = { 0x10101, 0x0061 };

    // 10101 0061;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[02FC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10101 0061;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[1CAD | 0020 | 0002 | 02FC FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FC, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_069)
{
    uint32_t const cps[2] = { 0x10101, 0x0041 };

    // 10101 0041;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[02FC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10101 0041;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[1CAD | 0020 | 0008 | 02FC FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02FC, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_070)
{
    uint32_t const cps[2] = { 0x10101, 0x0062 };

    // 10101 0062;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[02FC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10101 0062;	
    // (𐄁) AEGEAN WORD SEPARATOR DOT	[1CC6 | 0020 | 0002 | 02FC FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FC, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_071)
{
    uint32_t const cps[2] = { 0x10102, 0x0021 };

    // 10102 0021;	
    // (𐄂) AEGEAN CHECK MARK	[02FD 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10102 0021;	
    // (𐄂) AEGEAN CHECK MARK	[| | | 02FD 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FD, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_072)
{
    uint32_t const cps[2] = { 0x10102, 0x003F };

    // 10102 003F;	
    // (𐄂) AEGEAN CHECK MARK	[02FD 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10102 003F;	
    // (𐄂) AEGEAN CHECK MARK	[| | | 02FD 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FD, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_073)
{
    uint32_t const cps[2] = { 0x10102, 0x0061 };

    // 10102 0061;	
    // (𐄂) AEGEAN CHECK MARK	[02FD 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10102 0061;	
    // (𐄂) AEGEAN CHECK MARK	[1CAD | 0020 | 0002 | 02FD FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FD, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_074)
{
    uint32_t const cps[2] = { 0x10102, 0x0041 };

    // 10102 0041;	
    // (𐄂) AEGEAN CHECK MARK	[02FD 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10102 0041;	
    // (𐄂) AEGEAN CHECK MARK	[1CAD | 0020 | 0008 | 02FD FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02FD, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_075)
{
    uint32_t const cps[2] = { 0x10102, 0x0062 };

    // 10102 0062;	
    // (𐄂) AEGEAN CHECK MARK	[02FD 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 10102 0062;	
    // (𐄂) AEGEAN CHECK MARK	[1CC6 | 0020 | 0002 | 02FD FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FD, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_076)
{
    uint32_t const cps[2] = { 0x1039F, 0x0021 };

    // 1039F 0021;	
    // (𐎟) UGARITIC WORD DIVIDER	[02FE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1039F 0021;	
    // (𐎟) UGARITIC WORD DIVIDER	[| | | 02FE 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FE, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_077)
{
    uint32_t const cps[2] = { 0x1039F, 0x003F };

    // 1039F 003F;	
    // (𐎟) UGARITIC WORD DIVIDER	[02FE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1039F 003F;	
    // (𐎟) UGARITIC WORD DIVIDER	[| | | 02FE 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FE, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_078)
{
    uint32_t const cps[2] = { 0x1039F, 0x0061 };

    // 1039F 0061;	
    // (𐎟) UGARITIC WORD DIVIDER	[02FE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1039F 0061;	
    // (𐎟) UGARITIC WORD DIVIDER	[1CAD | 0020 | 0002 | 02FE FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FE, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_079)
{
    uint32_t const cps[2] = { 0x1039F, 0x0041 };

    // 1039F 0041;	
    // (𐎟) UGARITIC WORD DIVIDER	[02FE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1039F 0041;	
    // (𐎟) UGARITIC WORD DIVIDER	[1CAD | 0020 | 0008 | 02FE FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02FE, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_080)
{
    uint32_t const cps[2] = { 0x1039F, 0x0062 };

    // 1039F 0062;	
    // (𐎟) UGARITIC WORD DIVIDER	[02FE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1039F 0062;	
    // (𐎟) UGARITIC WORD DIVIDER	[1CC6 | 0020 | 0002 | 02FE FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FE, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_081)
{
    uint32_t const cps[2] = { 0x103D0, 0x0021 };

    // 103D0 0021;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[02FF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 103D0 0021;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[| | | 02FF 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_082)
{
    uint32_t const cps[2] = { 0x103D0, 0x003F };

    // 103D0 003F;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[02FF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 103D0 003F;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[| | | 02FF 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x02FF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_083)
{
    uint32_t const cps[2] = { 0x103D0, 0x0061 };

    // 103D0 0061;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[02FF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 103D0 0061;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[1CAD | 0020 | 0002 | 02FF FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_084)
{
    uint32_t const cps[2] = { 0x103D0, 0x0041 };

    // 103D0 0041;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[02FF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 103D0 0041;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[1CAD | 0020 | 0008 | 02FF FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x02FF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_085)
{
    uint32_t const cps[2] = { 0x103D0, 0x0062 };

    // 103D0 0062;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[02FF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x02FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 103D0 0062;	
    // (𐏐) OLD PERSIAN WORD DIVIDER	[1CC6 | 0020 | 0002 | 02FF FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x02FF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_086)
{
    uint32_t const cps[2] = { 0x1091F, 0x0021 };

    // 1091F 0021;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[0300 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0300, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1091F 0021;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[| | | 0300 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0300, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_087)
{
    uint32_t const cps[2] = { 0x1091F, 0x003F };

    // 1091F 003F;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[0300 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0300, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1091F 003F;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[| | | 0300 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0300, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_088)
{
    uint32_t const cps[2] = { 0x1091F, 0x0061 };

    // 1091F 0061;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[0300 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0300, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1091F 0061;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[1CAD | 0020 | 0002 | 0300 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0300, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_089)
{
    uint32_t const cps[2] = { 0x1091F, 0x0041 };

    // 1091F 0041;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[0300 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0300, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1091F 0041;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[1CAD | 0020 | 0008 | 0300 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0300, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_090)
{
    uint32_t const cps[2] = { 0x1091F, 0x0062 };

    // 1091F 0062;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[0300 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0300, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1091F 0062;	
    // (𐤟) PHOENICIAN WORD SEPARATOR	[1CC6 | 0020 | 0002 | 0300 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0300, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_091)
{
    uint32_t const cps[2] = { 0x12470, 0x0021 };

    // 12470 0021;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[0301 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0301, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12470 0021;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[| | | 0301 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0301, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_092)
{
    uint32_t const cps[2] = { 0x12470, 0x003F };

    // 12470 003F;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[0301 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0301, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12470 003F;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[| | | 0301 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0301, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_093)
{
    uint32_t const cps[2] = { 0x12470, 0x0061 };

    // 12470 0061;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[0301 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12470 0061;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[1CAD | 0020 | 0002 | 0301 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0301, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_094)
{
    uint32_t const cps[2] = { 0x12470, 0x0041 };

    // 12470 0041;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[0301 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12470 0041;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[1CAD | 0020 | 0008 | 0301 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0301, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_095)
{
    uint32_t const cps[2] = { 0x12470, 0x0062 };

    // 12470 0062;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[0301 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0301, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12470 0062;	
    // (𒑰) CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER	[1CC6 | 0020 | 0002 | 0301 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0301, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_096)
{
    uint32_t const cps[2] = { 0x12471, 0x0021 };

    // 12471 0021;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[0302 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0302, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12471 0021;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[| | | 0302 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0302, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_097)
{
    uint32_t const cps[2] = { 0x12471, 0x003F };

    // 12471 003F;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[0302 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0302, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12471 003F;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[| | | 0302 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0302, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_098)
{
    uint32_t const cps[2] = { 0x12471, 0x0061 };

    // 12471 0061;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[0302 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12471 0061;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[1CAD | 0020 | 0002 | 0302 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0302, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_099)
{
    uint32_t const cps[2] = { 0x12471, 0x0041 };

    // 12471 0041;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[0302 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12471 0041;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[1CAD | 0020 | 0008 | 0302 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0302, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_100)
{
    uint32_t const cps[2] = { 0x12471, 0x0062 };

    // 12471 0062;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[0302 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0302, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12471 0062;	
    // (𒑱) CUNEIFORM PUNCTUATION SIGN VERTICAL COLON	[1CC6 | 0020 | 0002 | 0302 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0302, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_101)
{
    uint32_t const cps[2] = { 0x12472, 0x0021 };

    // 12472 0021;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[0303 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0303, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12472 0021;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[| | | 0303 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0303, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_102)
{
    uint32_t const cps[2] = { 0x12472, 0x003F };

    // 12472 003F;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[0303 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0303, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12472 003F;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[| | | 0303 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0303, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_103)
{
    uint32_t const cps[2] = { 0x12472, 0x0061 };

    // 12472 0061;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[0303 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0303, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12472 0061;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[1CAD | 0020 | 0002 | 0303 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0303, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_104)
{
    uint32_t const cps[2] = { 0x12472, 0x0041 };

    // 12472 0041;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[0303 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0303, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12472 0041;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[1CAD | 0020 | 0008 | 0303 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0303, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_105)
{
    uint32_t const cps[2] = { 0x12472, 0x0062 };

    // 12472 0062;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[0303 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0303, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12472 0062;	
    // (𒑲) CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON	[1CC6 | 0020 | 0002 | 0303 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0303, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_106)
{
    uint32_t const cps[2] = { 0x12473, 0x0021 };

    // 12473 0021;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[0304 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0304, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12473 0021;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[| | | 0304 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0304, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_107)
{
    uint32_t const cps[2] = { 0x12473, 0x003F };

    // 12473 003F;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[0304 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0304, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12473 003F;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[| | | 0304 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0304, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_108)
{
    uint32_t const cps[2] = { 0x12473, 0x0061 };

    // 12473 0061;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[0304 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0304, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12473 0061;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[1CAD | 0020 | 0002 | 0304 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0304, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_109)
{
    uint32_t const cps[2] = { 0x12473, 0x0041 };

    // 12473 0041;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[0304 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0304, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12473 0041;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[1CAD | 0020 | 0008 | 0304 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0304, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_110)
{
    uint32_t const cps[2] = { 0x12473, 0x0062 };

    // 12473 0062;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[0304 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0304, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12473 0062;	
    // (𒑳) CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON	[1CC6 | 0020 | 0002 | 0304 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0304, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_111)
{
    uint32_t const cps[2] = { 0x12474, 0x0021 };

    // 12474 0021;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[0305 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0305, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12474 0021;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[| | | 0305 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0305, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_112)
{
    uint32_t const cps[2] = { 0x12474, 0x003F };

    // 12474 003F;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[0305 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0305, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12474 003F;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[| | | 0305 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0305, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_113)
{
    uint32_t const cps[2] = { 0x12474, 0x0061 };

    // 12474 0061;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[0305 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12474 0061;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[1CAD | 0020 | 0002 | 0305 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0305, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_114)
{
    uint32_t const cps[2] = { 0x12474, 0x0041 };

    // 12474 0041;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[0305 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12474 0041;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[1CAD | 0020 | 0008 | 0305 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0305, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_115)
{
    uint32_t const cps[2] = { 0x12474, 0x0062 };

    // 12474 0062;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[0305 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0305, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 12474 0062;	
    // (𒑴) CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON	[1CC6 | 0020 | 0002 | 0305 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0305, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_116)
{
    uint32_t const cps[2] = { 0x0027, 0x0021 };

    // 0027 0021;	
    // ('') APOSTROPHE	[0306 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0027 0021;	
    // ('') APOSTROPHE	[| | | 0306 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0306, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_117)
{
    uint32_t const cps[2] = { 0xFF07, 0x0021 };

    // FF07 0021;	
    // (＇) FULLWIDTH APOSTROPHE	[0306 0261 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF07 0021;	
    // (＇) FULLWIDTH APOSTROPHE	[| | | 0306 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0306, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_118)
{
    uint32_t const cps[2] = { 0x0027, 0x003F };

    // 0027 003F;	
    // ('') APOSTROPHE	[0306 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0027 003F;	
    // ('') APOSTROPHE	[| | | 0306 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0306, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_119)
{
    uint32_t const cps[2] = { 0xFF07, 0x003F };

    // FF07 003F;	
    // (＇) FULLWIDTH APOSTROPHE	[0306 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF07 003F;	
    // (＇) FULLWIDTH APOSTROPHE	[| | | 0306 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0306, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_120)
{
    uint32_t const cps[2] = { 0x0027, 0x0061 };

    // 0027 0061;	
    // ('') APOSTROPHE	[0306 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0027 0061;	
    // ('') APOSTROPHE	[1CAD | 0020 | 0002 | 0306 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0306, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_121)
{
    uint32_t const cps[2] = { 0x0027, 0x0041 };

    // 0027 0041;	
    // ('') APOSTROPHE	[0306 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0027 0041;	
    // ('') APOSTROPHE	[1CAD | 0020 | 0008 | 0306 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0306, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_122)
{
    uint32_t const cps[2] = { 0xFF07, 0x0061 };

    // FF07 0061;	
    // (＇) FULLWIDTH APOSTROPHE	[0306 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF07 0061;	
    // (＇) FULLWIDTH APOSTROPHE	[1CAD | 0020 | 0002 | 0306 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0306, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_123)
{
    uint32_t const cps[2] = { 0xFF07, 0x0041 };

    // FF07 0041;	
    // (＇) FULLWIDTH APOSTROPHE	[0306 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF07 0041;	
    // (＇) FULLWIDTH APOSTROPHE	[1CAD | 0020 | 0008 | 0306 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0306, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_124)
{
    uint32_t const cps[2] = { 0x0027, 0x0062 };

    // 0027 0062;	
    // ('') APOSTROPHE	[0306 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0027 0062;	
    // ('') APOSTROPHE	[1CC6 | 0020 | 0002 | 0306 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0306, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_125)
{
    uint32_t const cps[2] = { 0xFF07, 0x0062 };

    // FF07 0062;	
    // (＇) FULLWIDTH APOSTROPHE	[0306 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0306, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF07 0062;	
    // (＇) FULLWIDTH APOSTROPHE	[1CC6 | 0020 | 0002 | 0306 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0306, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_126)
{
    uint32_t const cps[2] = { 0x2018, 0x0021 };

    // 2018 0021;	
    // (‘) LEFT SINGLE QUOTATION MARK	[0307 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0307, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2018 0021;	
    // (‘) LEFT SINGLE QUOTATION MARK	[| | | 0307 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0307, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_127)
{
    uint32_t const cps[2] = { 0x2018, 0x003F };

    // 2018 003F;	
    // (‘) LEFT SINGLE QUOTATION MARK	[0307 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0307, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2018 003F;	
    // (‘) LEFT SINGLE QUOTATION MARK	[| | | 0307 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0307, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_128)
{
    uint32_t const cps[2] = { 0x2018, 0x0061 };

    // 2018 0061;	
    // (‘) LEFT SINGLE QUOTATION MARK	[0307 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2018 0061;	
    // (‘) LEFT SINGLE QUOTATION MARK	[1CAD | 0020 | 0002 | 0307 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0307, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_129)
{
    uint32_t const cps[2] = { 0x2018, 0x0041 };

    // 2018 0041;	
    // (‘) LEFT SINGLE QUOTATION MARK	[0307 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2018 0041;	
    // (‘) LEFT SINGLE QUOTATION MARK	[1CAD | 0020 | 0008 | 0307 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0307, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_130)
{
    uint32_t const cps[2] = { 0x2018, 0x0062 };

    // 2018 0062;	
    // (‘) LEFT SINGLE QUOTATION MARK	[0307 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0307, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2018 0062;	
    // (‘) LEFT SINGLE QUOTATION MARK	[1CC6 | 0020 | 0002 | 0307 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0307, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_131)
{
    uint32_t const cps[2] = { 0x2019, 0x0021 };

    // 2019 0021;	
    // (’) RIGHT SINGLE QUOTATION MARK	[0308 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0308, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2019 0021;	
    // (’) RIGHT SINGLE QUOTATION MARK	[| | | 0308 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0308, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_132)
{
    uint32_t const cps[2] = { 0x2019, 0x003F };

    // 2019 003F;	
    // (’) RIGHT SINGLE QUOTATION MARK	[0308 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0308, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2019 003F;	
    // (’) RIGHT SINGLE QUOTATION MARK	[| | | 0308 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0308, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_133)
{
    uint32_t const cps[2] = { 0x2019, 0x0061 };

    // 2019 0061;	
    // (’) RIGHT SINGLE QUOTATION MARK	[0308 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0308, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2019 0061;	
    // (’) RIGHT SINGLE QUOTATION MARK	[1CAD | 0020 | 0002 | 0308 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0308, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_134)
{
    uint32_t const cps[2] = { 0x2019, 0x0041 };

    // 2019 0041;	
    // (’) RIGHT SINGLE QUOTATION MARK	[0308 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0308, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2019 0041;	
    // (’) RIGHT SINGLE QUOTATION MARK	[1CAD | 0020 | 0008 | 0308 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0308, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_135)
{
    uint32_t const cps[2] = { 0x2019, 0x0062 };

    // 2019 0062;	
    // (’) RIGHT SINGLE QUOTATION MARK	[0308 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0308, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2019 0062;	
    // (’) RIGHT SINGLE QUOTATION MARK	[1CC6 | 0020 | 0002 | 0308 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0308, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_136)
{
    uint32_t const cps[2] = { 0x201A, 0x0021 };

    // 201A 0021;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[0309 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0309, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201A 0021;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[| | | 0309 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0309, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_137)
{
    uint32_t const cps[2] = { 0x201A, 0x003F };

    // 201A 003F;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[0309 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0309, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201A 003F;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[| | | 0309 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0309, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_138)
{
    uint32_t const cps[2] = { 0x201A, 0x0061 };

    // 201A 0061;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[0309 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0309, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201A 0061;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[1CAD | 0020 | 0002 | 0309 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0309, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_139)
{
    uint32_t const cps[2] = { 0x201A, 0x0041 };

    // 201A 0041;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[0309 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0309, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201A 0041;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[1CAD | 0020 | 0008 | 0309 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0309, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_140)
{
    uint32_t const cps[2] = { 0x201A, 0x0062 };

    // 201A 0062;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[0309 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0309, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201A 0062;	
    // (‚) SINGLE LOW-9 QUOTATION MARK	[1CC6 | 0020 | 0002 | 0309 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0309, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_141)
{
    uint32_t const cps[2] = { 0x201B, 0x0021 };

    // 201B 0021;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[030A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201B 0021;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[| | | 030A 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030A, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_142)
{
    uint32_t const cps[2] = { 0x201B, 0x003F };

    // 201B 003F;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[030A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201B 003F;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[| | | 030A 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030A, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_143)
{
    uint32_t const cps[2] = { 0x201B, 0x0061 };

    // 201B 0061;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[030A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201B 0061;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[1CAD | 0020 | 0002 | 030A FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030A, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_144)
{
    uint32_t const cps[2] = { 0x201B, 0x0041 };

    // 201B 0041;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[030A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x030A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201B 0041;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[1CAD | 0020 | 0008 | 030A FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x030A, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_145)
{
    uint32_t const cps[2] = { 0x201B, 0x0062 };

    // 201B 0062;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[030A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201B 0062;	
    // (‛) SINGLE HIGH-REVERSED-9 QUOTATION MARK	[1CC6 | 0020 | 0002 | 030A FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030A, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_146)
{
    uint32_t const cps[2] = { 0x2039, 0x0021 };

    // 2039 0021;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[030B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2039 0021;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[| | | 030B 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030B, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_147)
{
    uint32_t const cps[2] = { 0x2039, 0x003F };

    // 2039 003F;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[030B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2039 003F;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[| | | 030B 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030B, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_148)
{
    uint32_t const cps[2] = { 0x2039, 0x0061 };

    // 2039 0061;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[030B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2039 0061;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[1CAD | 0020 | 0002 | 030B FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030B, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_149)
{
    uint32_t const cps[2] = { 0x2039, 0x0041 };

    // 2039 0041;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[030B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x030B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2039 0041;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[1CAD | 0020 | 0008 | 030B FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x030B, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_150)
{
    uint32_t const cps[2] = { 0x2039, 0x0062 };

    // 2039 0062;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[030B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2039 0062;	
    // (‹) SINGLE LEFT-POINTING ANGLE QUOTATION MARK	[1CC6 | 0020 | 0002 | 030B FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030B, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_151)
{
    uint32_t const cps[2] = { 0x203A, 0x0021 };

    // 203A 0021;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[030C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 203A 0021;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[| | | 030C 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030C, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_152)
{
    uint32_t const cps[2] = { 0x203A, 0x003F };

    // 203A 003F;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[030C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 203A 003F;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[| | | 030C 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030C, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_153)
{
    uint32_t const cps[2] = { 0x203A, 0x0061 };

    // 203A 0061;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[030C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 203A 0061;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[1CAD | 0020 | 0002 | 030C FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030C, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_154)
{
    uint32_t const cps[2] = { 0x203A, 0x0041 };

    // 203A 0041;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[030C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x030C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 203A 0041;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[1CAD | 0020 | 0008 | 030C FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x030C, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_155)
{
    uint32_t const cps[2] = { 0x203A, 0x0062 };

    // 203A 0062;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[030C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 203A 0062;	
    // (›) SINGLE RIGHT-POINTING ANGLE QUOTATION MARK	[1CC6 | 0020 | 0002 | 030C FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030C, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_156)
{
    uint32_t const cps[2] = { 0x0022, 0x0021 };

    // 0022 0021;	
    // ('"') QUOTATION MARK	[030D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0022 0021;	
    // ('"') QUOTATION MARK	[| | | 030D 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030D, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_157)
{
    uint32_t const cps[2] = { 0xFF02, 0x0021 };

    // FF02 0021;	
    // (＂) FULLWIDTH QUOTATION MARK	[030D 0261 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF02 0021;	
    // (＂) FULLWIDTH QUOTATION MARK	[| | | 030D 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030D, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_158)
{
    uint32_t const cps[2] = { 0x0022, 0x003F };

    // 0022 003F;	
    // ('"') QUOTATION MARK	[030D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0022 003F;	
    // ('"') QUOTATION MARK	[| | | 030D 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030D, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_159)
{
    uint32_t const cps[2] = { 0xFF02, 0x003F };

    // FF02 003F;	
    // (＂) FULLWIDTH QUOTATION MARK	[030D 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF02 003F;	
    // (＂) FULLWIDTH QUOTATION MARK	[| | | 030D 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030D, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_160)
{
    uint32_t const cps[2] = { 0x0022, 0x0061 };

    // 0022 0061;	
    // ('"') QUOTATION MARK	[030D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0022 0061;	
    // ('"') QUOTATION MARK	[1CAD | 0020 | 0002 | 030D FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030D, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_161)
{
    uint32_t const cps[2] = { 0x0022, 0x0041 };

    // 0022 0041;	
    // ('"') QUOTATION MARK	[030D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0022 0041;	
    // ('"') QUOTATION MARK	[1CAD | 0020 | 0008 | 030D FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x030D, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_162)
{
    uint32_t const cps[2] = { 0xFF02, 0x0061 };

    // FF02 0061;	
    // (＂) FULLWIDTH QUOTATION MARK	[030D 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF02 0061;	
    // (＂) FULLWIDTH QUOTATION MARK	[1CAD | 0020 | 0002 | 030D FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030D, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_163)
{
    uint32_t const cps[2] = { 0xFF02, 0x0041 };

    // FF02 0041;	
    // (＂) FULLWIDTH QUOTATION MARK	[030D 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF02 0041;	
    // (＂) FULLWIDTH QUOTATION MARK	[1CAD | 0020 | 0008 | 030D FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x030D, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_164)
{
    uint32_t const cps[2] = { 0x0022, 0x0062 };

    // 0022 0062;	
    // ('"') QUOTATION MARK	[030D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0022 0062;	
    // ('"') QUOTATION MARK	[1CC6 | 0020 | 0002 | 030D FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030D, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_165)
{
    uint32_t const cps[2] = { 0xFF02, 0x0062 };

    // FF02 0062;	
    // (＂) FULLWIDTH QUOTATION MARK	[030D 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF02 0062;	
    // (＂) FULLWIDTH QUOTATION MARK	[1CC6 | 0020 | 0002 | 030D FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030D, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_166)
{
    uint32_t const cps[2] = { 0x201C, 0x0021 };

    // 201C 0021;	
    // (“) LEFT DOUBLE QUOTATION MARK	[030E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201C 0021;	
    // (“) LEFT DOUBLE QUOTATION MARK	[| | | 030E 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030E, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_167)
{
    uint32_t const cps[2] = { 0x201C, 0x003F };

    // 201C 003F;	
    // (“) LEFT DOUBLE QUOTATION MARK	[030E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201C 003F;	
    // (“) LEFT DOUBLE QUOTATION MARK	[| | | 030E 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030E, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_168)
{
    uint32_t const cps[2] = { 0x201C, 0x0061 };

    // 201C 0061;	
    // (“) LEFT DOUBLE QUOTATION MARK	[030E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201C 0061;	
    // (“) LEFT DOUBLE QUOTATION MARK	[1CAD | 0020 | 0002 | 030E FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030E, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_169)
{
    uint32_t const cps[2] = { 0x201C, 0x0041 };

    // 201C 0041;	
    // (“) LEFT DOUBLE QUOTATION MARK	[030E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x030E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201C 0041;	
    // (“) LEFT DOUBLE QUOTATION MARK	[1CAD | 0020 | 0008 | 030E FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x030E, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_170)
{
    uint32_t const cps[2] = { 0x201C, 0x0062 };

    // 201C 0062;	
    // (“) LEFT DOUBLE QUOTATION MARK	[030E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201C 0062;	
    // (“) LEFT DOUBLE QUOTATION MARK	[1CC6 | 0020 | 0002 | 030E FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030E, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_171)
{
    uint32_t const cps[2] = { 0x201D, 0x0021 };

    // 201D 0021;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[030F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201D 0021;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[| | | 030F 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030F, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_172)
{
    uint32_t const cps[2] = { 0x201D, 0x003F };

    // 201D 003F;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[030F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201D 003F;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[| | | 030F 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x030F, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_173)
{
    uint32_t const cps[2] = { 0x201D, 0x0061 };

    // 201D 0061;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[030F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201D 0061;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[1CAD | 0020 | 0002 | 030F FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030F, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_174)
{
    uint32_t const cps[2] = { 0x201D, 0x0041 };

    // 201D 0041;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[030F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x030F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201D 0041;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[1CAD | 0020 | 0008 | 030F FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x030F, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_175)
{
    uint32_t const cps[2] = { 0x201D, 0x0062 };

    // 201D 0062;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[030F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x030F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201D 0062;	
    // (”) RIGHT DOUBLE QUOTATION MARK	[1CC6 | 0020 | 0002 | 030F FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x030F, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_176)
{
    uint32_t const cps[2] = { 0x201E, 0x0021 };

    // 201E 0021;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[0310 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0310, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201E 0021;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[| | | 0310 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0310, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_177)
{
    uint32_t const cps[2] = { 0x201E, 0x003F };

    // 201E 003F;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[0310 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0310, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201E 003F;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[| | | 0310 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0310, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_178)
{
    uint32_t const cps[2] = { 0x201E, 0x0061 };

    // 201E 0061;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[0310 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0310, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201E 0061;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[1CAD | 0020 | 0002 | 0310 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0310, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_179)
{
    uint32_t const cps[2] = { 0x201E, 0x0041 };

    // 201E 0041;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[0310 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0310, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201E 0041;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[1CAD | 0020 | 0008 | 0310 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0310, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_180)
{
    uint32_t const cps[2] = { 0x201E, 0x0062 };

    // 201E 0062;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[0310 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0310, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201E 0062;	
    // („) DOUBLE LOW-9 QUOTATION MARK	[1CC6 | 0020 | 0002 | 0310 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0310, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_181)
{
    uint32_t const cps[2] = { 0x201F, 0x0021 };

    // 201F 0021;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[0311 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0311, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201F 0021;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[| | | 0311 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0311, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_182)
{
    uint32_t const cps[2] = { 0x201F, 0x003F };

    // 201F 003F;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[0311 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0311, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201F 003F;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[| | | 0311 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0311, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_183)
{
    uint32_t const cps[2] = { 0x201F, 0x0061 };

    // 201F 0061;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[0311 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0311, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201F 0061;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[1CAD | 0020 | 0002 | 0311 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0311, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_184)
{
    uint32_t const cps[2] = { 0x201F, 0x0041 };

    // 201F 0041;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[0311 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0311, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201F 0041;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[1CAD | 0020 | 0008 | 0311 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0311, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_185)
{
    uint32_t const cps[2] = { 0x201F, 0x0062 };

    // 201F 0062;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[0311 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0311, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 201F 0062;	
    // (‟) DOUBLE HIGH-REVERSED-9 QUOTATION MARK	[1CC6 | 0020 | 0002 | 0311 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0311, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_186)
{
    uint32_t const cps[2] = { 0x2E42, 0x0021 };

    // 2E42 0021;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[0312 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0312, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E42 0021;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[| | | 0312 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0312, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_187)
{
    uint32_t const cps[2] = { 0x2E42, 0x003F };

    // 2E42 003F;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[0312 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0312, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E42 003F;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[| | | 0312 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0312, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_188)
{
    uint32_t const cps[2] = { 0x2E42, 0x0061 };

    // 2E42 0061;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[0312 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0312, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E42 0061;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[1CAD | 0020 | 0002 | 0312 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0312, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_189)
{
    uint32_t const cps[2] = { 0x2E42, 0x0041 };

    // 2E42 0041;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[0312 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0312, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E42 0041;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[1CAD | 0020 | 0008 | 0312 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0312, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_190)
{
    uint32_t const cps[2] = { 0x2E42, 0x0062 };

    // 2E42 0062;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[0312 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0312, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2E42 0062;	
    // (⹂) DOUBLE LOW-REVERSED-9 QUOTATION MARK	[1CC6 | 0020 | 0002 | 0312 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0312, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_191)
{
    uint32_t const cps[2] = { 0x301D, 0x0021 };

    // 301D 0021;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[0313 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0313, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301D 0021;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[| | | 0313 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0313, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_192)
{
    uint32_t const cps[2] = { 0x301D, 0x003F };

    // 301D 003F;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[0313 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0313, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301D 003F;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[| | | 0313 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0313, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_193)
{
    uint32_t const cps[2] = { 0x301D, 0x0061 };

    // 301D 0061;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[0313 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0313, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301D 0061;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[1CAD | 0020 | 0002 | 0313 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0313, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_194)
{
    uint32_t const cps[2] = { 0x301D, 0x0041 };

    // 301D 0041;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[0313 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0313, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301D 0041;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[1CAD | 0020 | 0008 | 0313 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0313, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_195)
{
    uint32_t const cps[2] = { 0x301D, 0x0062 };

    // 301D 0062;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[0313 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0313, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301D 0062;	
    // (〝) REVERSED DOUBLE PRIME QUOTATION MARK	[1CC6 | 0020 | 0002 | 0313 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0313, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_196)
{
    uint32_t const cps[2] = { 0x301E, 0x0021 };

    // 301E 0021;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[0314 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0314, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301E 0021;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[| | | 0314 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0314, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_197)
{
    uint32_t const cps[2] = { 0x301E, 0x003F };

    // 301E 003F;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[0314 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0314, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301E 003F;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[| | | 0314 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0314, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_198)
{
    uint32_t const cps[2] = { 0x301E, 0x0061 };

    // 301E 0061;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[0314 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0314, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301E 0061;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[1CAD | 0020 | 0002 | 0314 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0314, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_199)
{
    uint32_t const cps[2] = { 0x301E, 0x0041 };

    // 301E 0041;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[0314 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0314, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301E 0041;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[1CAD | 0020 | 0008 | 0314 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0314, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_200)
{
    uint32_t const cps[2] = { 0x301E, 0x0062 };

    // 301E 0062;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[0314 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0314, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301E 0062;	
    // (〞) DOUBLE PRIME QUOTATION MARK	[1CC6 | 0020 | 0002 | 0314 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0314, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_201)
{
    uint32_t const cps[2] = { 0x301F, 0x0021 };

    // 301F 0021;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[0315 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0315, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301F 0021;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[| | | 0315 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0315, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_202)
{
    uint32_t const cps[2] = { 0x301F, 0x003F };

    // 301F 003F;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[0315 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0315, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301F 003F;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[| | | 0315 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0315, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_203)
{
    uint32_t const cps[2] = { 0x301F, 0x0061 };

    // 301F 0061;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[0315 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301F 0061;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[1CAD | 0020 | 0002 | 0315 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0315, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_204)
{
    uint32_t const cps[2] = { 0x301F, 0x0041 };

    // 301F 0041;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[0315 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301F 0041;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[1CAD | 0020 | 0008 | 0315 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0315, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_205)
{
    uint32_t const cps[2] = { 0x301F, 0x0062 };

    // 301F 0062;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[0315 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0315, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 301F 0062;	
    // (〟) LOW DOUBLE PRIME QUOTATION MARK	[1CC6 | 0020 | 0002 | 0315 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0315, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_206)
{
    uint32_t const cps[2] = { 0x00AB, 0x0021 };

    // 00AB 0021;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[0316 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0316, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00AB 0021;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[| | | 0316 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0316, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_207)
{
    uint32_t const cps[2] = { 0x00AB, 0x003F };

    // 00AB 003F;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[0316 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0316, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00AB 003F;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[| | | 0316 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0316, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_208)
{
    uint32_t const cps[2] = { 0x00AB, 0x0061 };

    // 00AB 0061;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[0316 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0316, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00AB 0061;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[1CAD | 0020 | 0002 | 0316 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0316, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_209)
{
    uint32_t const cps[2] = { 0x00AB, 0x0041 };

    // 00AB 0041;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[0316 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0316, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00AB 0041;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[1CAD | 0020 | 0008 | 0316 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0316, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_210)
{
    uint32_t const cps[2] = { 0x00AB, 0x0062 };

    // 00AB 0062;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[0316 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0316, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00AB 0062;	
    // («) LEFT-POINTING DOUBLE ANGLE QUOTATION MARK	[1CC6 | 0020 | 0002 | 0316 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0316, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_211)
{
    uint32_t const cps[2] = { 0x00BB, 0x0021 };

    // 00BB 0021;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[0317 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0317, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00BB 0021;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[| | | 0317 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0317, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_212)
{
    uint32_t const cps[2] = { 0x00BB, 0x003F };

    // 00BB 003F;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[0317 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0317, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00BB 003F;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[| | | 0317 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0317, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_213)
{
    uint32_t const cps[2] = { 0x00BB, 0x0061 };

    // 00BB 0061;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[0317 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00BB 0061;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[1CAD | 0020 | 0002 | 0317 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0317, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_214)
{
    uint32_t const cps[2] = { 0x00BB, 0x0041 };

    // 00BB 0041;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[0317 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00BB 0041;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[1CAD | 0020 | 0008 | 0317 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0317, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_215)
{
    uint32_t const cps[2] = { 0x00BB, 0x0062 };

    // 00BB 0062;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[0317 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0317, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00BB 0062;	
    // (») RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK	[1CC6 | 0020 | 0002 | 0317 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0317, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_216)
{
    uint32_t const cps[2] = { 0x0028, 0x0021 };

    // 0028 0021;	
    // ('(') LEFT PARENTHESIS	[0318 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0028 0021;	
    // ('(') LEFT PARENTHESIS	[| | | 0318 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_217)
{
    uint32_t const cps[2] = { 0xFF08, 0x0021 };

    // FF08 0021;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[0318 0261 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF08 0021;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[| | | 0318 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_218)
{
    uint32_t const cps[2] = { 0xFE59, 0x0021 };

    // FE59 0021;	
    // (﹙) SMALL LEFT PARENTHESIS	[0318 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE59 0021;	
    // (﹙) SMALL LEFT PARENTHESIS	[| | | 0318 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_219)
{
    uint32_t const cps[2] = { 0x207D, 0x0021 };

    // 207D 0021;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[0318 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207D 0021;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[| | | 0318 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_220)
{
    uint32_t const cps[2] = { 0x208D, 0x0021 };

    // 208D 0021;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[0318 0261 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208D 0021;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[| | | 0318 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_221)
{
    uint32_t const cps[2] = { 0xFE35, 0x0021 };

    // FE35 0021;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[0318 0261 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE35 0021;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[| | | 0318 0261 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_222)
{
    uint32_t const cps[2] = { 0x0028, 0x003F };

    // 0028 003F;	
    // ('(') LEFT PARENTHESIS	[0318 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0028 003F;	
    // ('(') LEFT PARENTHESIS	[| | | 0318 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_223)
{
    uint32_t const cps[2] = { 0xFF08, 0x003F };

    // FF08 003F;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[0318 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF08 003F;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[| | | 0318 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_224)
{
    uint32_t const cps[2] = { 0xFE59, 0x003F };

    // FE59 003F;	
    // (﹙) SMALL LEFT PARENTHESIS	[0318 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE59 003F;	
    // (﹙) SMALL LEFT PARENTHESIS	[| | | 0318 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_225)
{
    uint32_t const cps[2] = { 0x207D, 0x003F };

    // 207D 003F;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[0318 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207D 003F;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[| | | 0318 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_226)
{
    uint32_t const cps[2] = { 0x208D, 0x003F };

    // 208D 003F;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[0318 0267 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208D 003F;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[| | | 0318 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_227)
{
    uint32_t const cps[2] = { 0xFE35, 0x003F };

    // FE35 003F;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[0318 0267 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE35 003F;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[| | | 0318 0267 |]
    uint32_t const ces_shifted[6] = { 0x0000, 0x0000, 0x0000, 0x0318, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_228)
{
    uint32_t const cps[2] = { 0x2474, 0x0021 };

    // 2474 0021;	
    // (⑴) PARENTHESIZED DIGIT ONE	[0318 1CA4 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA4, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2474 0021;	
    // (⑴) PARENTHESIZED DIGIT ONE	[1CA4 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CA4, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_229)
{
    uint32_t const cps[2] = { 0x2474, 0x003F };

    // 2474 003F;	
    // (⑴) PARENTHESIZED DIGIT ONE	[0318 1CA4 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA4, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2474 003F;	
    // (⑴) PARENTHESIZED DIGIT ONE	[1CA4 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CA4, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_230)
{
    uint32_t const cps[2] = { 0x2474, 0x0061 };

    // 2474 0061;	
    // (⑴) PARENTHESIZED DIGIT ONE	[0318 1CA4 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA4, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2474 0061;	
    // (⑴) PARENTHESIZED DIGIT ONE	[1CA4 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_231)
{
    uint32_t const cps[2] = { 0x2474, 0x0041 };

    // 2474 0041;	
    // (⑴) PARENTHESIZED DIGIT ONE	[0318 1CA4 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA4, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2474 0041;	
    // (⑴) PARENTHESIZED DIGIT ONE	[1CA4 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_232)
{
    uint32_t const cps[2] = { 0x2474, 0x0062 };

    // 2474 0062;	
    // (⑴) PARENTHESIZED DIGIT ONE	[0318 1CA4 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA4, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2474 0062;	
    // (⑴) PARENTHESIZED DIGIT ONE	[1CA4 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_233)
{
    uint32_t const cps[2] = { 0x247D, 0x0021 };

    // 247D 0021;	
    // (⑽) PARENTHESIZED NUMBER TEN	[0318 1CA4 1CA3 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA3, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247D 0021;	
    // (⑽) PARENTHESIZED NUMBER TEN	[1CA4 1CA3 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA3, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_234)
{
    uint32_t const cps[2] = { 0x247D, 0x003F };

    // 247D 003F;	
    // (⑽) PARENTHESIZED NUMBER TEN	[0318 1CA4 1CA3 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA3, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247D 003F;	
    // (⑽) PARENTHESIZED NUMBER TEN	[1CA4 1CA3 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA3, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_235)
{
    uint32_t const cps[2] = { 0x247D, 0x0061 };

    // 247D 0061;	
    // (⑽) PARENTHESIZED NUMBER TEN	[0318 1CA4 1CA3 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247D 0061;	
    // (⑽) PARENTHESIZED NUMBER TEN	[1CA4 1CA3 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_236)
{
    uint32_t const cps[2] = { 0x247D, 0x0041 };

    // 247D 0041;	
    // (⑽) PARENTHESIZED NUMBER TEN	[0318 1CA4 1CA3 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247D 0041;	
    // (⑽) PARENTHESIZED NUMBER TEN	[1CA4 1CA3 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_237)
{
    uint32_t const cps[2] = { 0x247D, 0x0062 };

    // 247D 0062;	
    // (⑽) PARENTHESIZED NUMBER TEN	[0318 1CA4 1CA3 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA3, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247D 0062;	
    // (⑽) PARENTHESIZED NUMBER TEN	[1CA4 1CA3 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_238)
{
    uint32_t const cps[2] = { 0x247E, 0x0021 };

    // 247E 0021;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[0318 1CA4 1CA4 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA4, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247E 0021;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[1CA4 1CA4 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA4, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_239)
{
    uint32_t const cps[2] = { 0x247E, 0x003F };

    // 247E 003F;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[0318 1CA4 1CA4 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA4, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247E 003F;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[1CA4 1CA4 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA4, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_240)
{
    uint32_t const cps[2] = { 0x247E, 0x0061 };

    // 247E 0061;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[0318 1CA4 1CA4 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA4, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247E 0061;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[1CA4 1CA4 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_241)
{
    uint32_t const cps[2] = { 0x247E, 0x0041 };

    // 247E 0041;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[0318 1CA4 1CA4 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA4, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247E 0041;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[1CA4 1CA4 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_242)
{
    uint32_t const cps[2] = { 0x247E, 0x0062 };

    // 247E 0062;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[0318 1CA4 1CA4 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA4, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247E 0062;	
    // (⑾) PARENTHESIZED NUMBER ELEVEN	[1CA4 1CA4 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_243)
{
    uint32_t const cps[2] = { 0x247F, 0x0021 };

    // 247F 0021;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[0318 1CA4 1CA5 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA5, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247F 0021;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[1CA4 1CA5 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA5, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_244)
{
    uint32_t const cps[2] = { 0x247F, 0x003F };

    // 247F 003F;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[0318 1CA4 1CA5 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA5, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247F 003F;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[1CA4 1CA5 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA5, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_245)
{
    uint32_t const cps[2] = { 0x247F, 0x0061 };

    // 247F 0061;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[0318 1CA4 1CA5 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247F 0061;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[1CA4 1CA5 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_246)
{
    uint32_t const cps[2] = { 0x247F, 0x0041 };

    // 247F 0041;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[0318 1CA4 1CA5 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247F 0041;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[1CA4 1CA5 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_247)
{
    uint32_t const cps[2] = { 0x247F, 0x0062 };

    // 247F 0062;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[0318 1CA4 1CA5 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA5, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247F 0062;	
    // (⑿) PARENTHESIZED NUMBER TWELVE	[1CA4 1CA5 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_248)
{
    uint32_t const cps[2] = { 0x2480, 0x0021 };

    // 2480 0021;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[0318 1CA4 1CA6 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA6, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2480 0021;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[1CA4 1CA6 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_249)
{
    uint32_t const cps[2] = { 0x2480, 0x003F };

    // 2480 003F;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[0318 1CA4 1CA6 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA6, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2480 003F;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[1CA4 1CA6 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_250)
{
    uint32_t const cps[2] = { 0x2480, 0x0061 };

    // 2480 0061;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[0318 1CA4 1CA6 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA6, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2480 0061;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[1CA4 1CA6 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_251)
{
    uint32_t const cps[2] = { 0x2480, 0x0041 };

    // 2480 0041;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[0318 1CA4 1CA6 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA6, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2480 0041;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[1CA4 1CA6 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_252)
{
    uint32_t const cps[2] = { 0x2480, 0x0062 };

    // 2480 0062;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[0318 1CA4 1CA6 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA6, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2480 0062;	
    // (⒀) PARENTHESIZED NUMBER THIRTEEN	[1CA4 1CA6 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_253)
{
    uint32_t const cps[2] = { 0x2481, 0x0021 };

    // 2481 0021;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[0318 1CA4 1CA7 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA7, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2481 0021;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[1CA4 1CA7 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA7, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_254)
{
    uint32_t const cps[2] = { 0x2481, 0x003F };

    // 2481 003F;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[0318 1CA4 1CA7 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA7, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2481 003F;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[1CA4 1CA7 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA7, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_255)
{
    uint32_t const cps[2] = { 0x2481, 0x0061 };

    // 2481 0061;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[0318 1CA4 1CA7 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2481 0061;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[1CA4 1CA7 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_256)
{
    uint32_t const cps[2] = { 0x2481, 0x0041 };

    // 2481 0041;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[0318 1CA4 1CA7 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2481 0041;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[1CA4 1CA7 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_257)
{
    uint32_t const cps[2] = { 0x2481, 0x0062 };

    // 2481 0062;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[0318 1CA4 1CA7 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA7, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2481 0062;	
    // (⒁) PARENTHESIZED NUMBER FOURTEEN	[1CA4 1CA7 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_258)
{
    uint32_t const cps[2] = { 0x2482, 0x0021 };

    // 2482 0021;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[0318 1CA4 1CA8 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA8, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2482 0021;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[1CA4 1CA8 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA8, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_259)
{
    uint32_t const cps[2] = { 0x2482, 0x003F };

    // 2482 003F;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[0318 1CA4 1CA8 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA8, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2482 003F;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[1CA4 1CA8 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA8, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_260)
{
    uint32_t const cps[2] = { 0x2482, 0x0061 };

    // 2482 0061;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[0318 1CA4 1CA8 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA8, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2482 0061;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[1CA4 1CA8 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_261)
{
    uint32_t const cps[2] = { 0x2482, 0x0041 };

    // 2482 0041;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[0318 1CA4 1CA8 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA8, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2482 0041;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[1CA4 1CA8 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_262)
{
    uint32_t const cps[2] = { 0x2482, 0x0062 };

    // 2482 0062;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[0318 1CA4 1CA8 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA8, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2482 0062;	
    // (⒂) PARENTHESIZED NUMBER FIFTEEN	[1CA4 1CA8 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_263)
{
    uint32_t const cps[2] = { 0x2483, 0x0021 };

    // 2483 0021;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[0318 1CA4 1CA9 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA9, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2483 0021;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[1CA4 1CA9 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA9, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_264)
{
    uint32_t const cps[2] = { 0x2483, 0x003F };

    // 2483 003F;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[0318 1CA4 1CA9 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA9, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2483 003F;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[1CA4 1CA9 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CA9, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_265)
{
    uint32_t const cps[2] = { 0x2483, 0x0061 };

    // 2483 0061;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[0318 1CA4 1CA9 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA9, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2483 0061;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[1CA4 1CA9 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_266)
{
    uint32_t const cps[2] = { 0x2483, 0x0041 };

    // 2483 0041;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[0318 1CA4 1CA9 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA9, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2483 0041;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[1CA4 1CA9 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_267)
{
    uint32_t const cps[2] = { 0x2483, 0x0062 };

    // 2483 0062;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[0318 1CA4 1CA9 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CA9, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2483 0062;	
    // (⒃) PARENTHESIZED NUMBER SIXTEEN	[1CA4 1CA9 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_268)
{
    uint32_t const cps[2] = { 0x2484, 0x0021 };

    // 2484 0021;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[0318 1CA4 1CAA 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAA, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2484 0021;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[1CA4 1CAA | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CAA, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_269)
{
    uint32_t const cps[2] = { 0x2484, 0x003F };

    // 2484 003F;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[0318 1CA4 1CAA 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAA, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2484 003F;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[1CA4 1CAA | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CAA, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_270)
{
    uint32_t const cps[2] = { 0x2484, 0x0061 };

    // 2484 0061;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[0318 1CA4 1CAA 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAA, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2484 0061;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[1CA4 1CAA 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_271)
{
    uint32_t const cps[2] = { 0x2484, 0x0041 };

    // 2484 0041;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[0318 1CA4 1CAA 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAA, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2484 0041;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[1CA4 1CAA 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_272)
{
    uint32_t const cps[2] = { 0x2484, 0x0062 };

    // 2484 0062;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[0318 1CA4 1CAA 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAA, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2484 0062;	
    // (⒄) PARENTHESIZED NUMBER SEVENTEEN	[1CA4 1CAA 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_273)
{
    uint32_t const cps[2] = { 0x2485, 0x0021 };

    // 2485 0021;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[0318 1CA4 1CAB 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAB, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2485 0021;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[1CA4 1CAB | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CAB, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_274)
{
    uint32_t const cps[2] = { 0x2485, 0x003F };

    // 2485 003F;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[0318 1CA4 1CAB 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAB, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2485 003F;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[1CA4 1CAB | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CAB, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_275)
{
    uint32_t const cps[2] = { 0x2485, 0x0061 };

    // 2485 0061;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[0318 1CA4 1CAB 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2485 0061;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[1CA4 1CAB 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_276)
{
    uint32_t const cps[2] = { 0x2485, 0x0041 };

    // 2485 0041;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[0318 1CA4 1CAB 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2485 0041;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[1CA4 1CAB 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_277)
{
    uint32_t const cps[2] = { 0x2485, 0x0062 };

    // 2485 0062;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[0318 1CA4 1CAB 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAB, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2485 0062;	
    // (⒅) PARENTHESIZED NUMBER EIGHTEEN	[1CA4 1CAB 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_278)
{
    uint32_t const cps[2] = { 0x2486, 0x0021 };

    // 2486 0021;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[0318 1CA4 1CAC 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAC, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2486 0021;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[1CA4 1CAC | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CAC, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_279)
{
    uint32_t const cps[2] = { 0x2486, 0x003F };

    // 2486 003F;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[0318 1CA4 1CAC 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAC, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2486 003F;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[1CA4 1CAC | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA4, 0x1CAC, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_280)
{
    uint32_t const cps[2] = { 0x2486, 0x0061 };

    // 2486 0061;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[0318 1CA4 1CAC 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAC, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2486 0061;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[1CA4 1CAC 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_281)
{
    uint32_t const cps[2] = { 0x2486, 0x0041 };

    // 2486 0041;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[0318 1CA4 1CAC 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAC, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2486 0041;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[1CA4 1CAC 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_282)
{
    uint32_t const cps[2] = { 0x2486, 0x0062 };

    // 2486 0062;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[0318 1CA4 1CAC 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA4, 0x1CAC, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2486 0062;	
    // (⒆) PARENTHESIZED NUMBER NINETEEN	[1CA4 1CAC 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA4, 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_283)
{
    uint32_t const cps[2] = { 0x2475, 0x0021 };

    // 2475 0021;	
    // (⑵) PARENTHESIZED DIGIT TWO	[0318 1CA5 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA5, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2475 0021;	
    // (⑵) PARENTHESIZED DIGIT TWO	[1CA5 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CA5, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_284)
{
    uint32_t const cps[2] = { 0x2475, 0x003F };

    // 2475 003F;	
    // (⑵) PARENTHESIZED DIGIT TWO	[0318 1CA5 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA5, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2475 003F;	
    // (⑵) PARENTHESIZED DIGIT TWO	[1CA5 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CA5, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_285)
{
    uint32_t const cps[2] = { 0x2475, 0x0061 };

    // 2475 0061;	
    // (⑵) PARENTHESIZED DIGIT TWO	[0318 1CA5 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2475 0061;	
    // (⑵) PARENTHESIZED DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_286)
{
    uint32_t const cps[2] = { 0x2475, 0x0041 };

    // 2475 0041;	
    // (⑵) PARENTHESIZED DIGIT TWO	[0318 1CA5 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2475 0041;	
    // (⑵) PARENTHESIZED DIGIT TWO	[1CA5 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_287)
{
    uint32_t const cps[2] = { 0x2475, 0x0062 };

    // 2475 0062;	
    // (⑵) PARENTHESIZED DIGIT TWO	[0318 1CA5 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA5, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2475 0062;	
    // (⑵) PARENTHESIZED DIGIT TWO	[1CA5 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_288)
{
    uint32_t const cps[2] = { 0x2487, 0x0021 };

    // 2487 0021;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[0318 1CA5 1CA3 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA5, 0x1CA3, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2487 0021;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[1CA5 1CA3 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CA5, 0x1CA3, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_289)
{
    uint32_t const cps[2] = { 0x2487, 0x003F };

    // 2487 003F;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[0318 1CA5 1CA3 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA5, 0x1CA3, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2487 003F;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[1CA5 1CA3 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CA5, 0x1CA3, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_290)
{
    uint32_t const cps[2] = { 0x2487, 0x0061 };

    // 2487 0061;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[0318 1CA5 1CA3 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA5, 0x1CA3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2487 0061;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[1CA5 1CA3 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA5, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_291)
{
    uint32_t const cps[2] = { 0x2487, 0x0041 };

    // 2487 0041;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[0318 1CA5 1CA3 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA5, 0x1CA3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2487 0041;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[1CA5 1CA3 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA5, 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_292)
{
    uint32_t const cps[2] = { 0x2487, 0x0062 };

    // 2487 0062;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[0318 1CA5 1CA3 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x0318, 0x1CA5, 0x1CA3, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2487 0062;	
    // (⒇) PARENTHESIZED NUMBER TWENTY	[1CA5 1CA3 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CA5, 0x1CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_293)
{
    uint32_t const cps[2] = { 0x2476, 0x0021 };

    // 2476 0021;	
    // (⑶) PARENTHESIZED DIGIT THREE	[0318 1CA6 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA6, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2476 0021;	
    // (⑶) PARENTHESIZED DIGIT THREE	[1CA6 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CA6, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_294)
{
    uint32_t const cps[2] = { 0x2476, 0x003F };

    // 2476 003F;	
    // (⑶) PARENTHESIZED DIGIT THREE	[0318 1CA6 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA6, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2476 003F;	
    // (⑶) PARENTHESIZED DIGIT THREE	[1CA6 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CA6, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_295)
{
    uint32_t const cps[2] = { 0x2476, 0x0061 };

    // 2476 0061;	
    // (⑶) PARENTHESIZED DIGIT THREE	[0318 1CA6 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA6, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2476 0061;	
    // (⑶) PARENTHESIZED DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_296)
{
    uint32_t const cps[2] = { 0x2476, 0x0041 };

    // 2476 0041;	
    // (⑶) PARENTHESIZED DIGIT THREE	[0318 1CA6 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA6, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2476 0041;	
    // (⑶) PARENTHESIZED DIGIT THREE	[1CA6 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_297)
{
    uint32_t const cps[2] = { 0x2476, 0x0062 };

    // 2476 0062;	
    // (⑶) PARENTHESIZED DIGIT THREE	[0318 1CA6 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA6, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2476 0062;	
    // (⑶) PARENTHESIZED DIGIT THREE	[1CA6 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_298)
{
    uint32_t const cps[2] = { 0x2477, 0x0021 };

    // 2477 0021;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[0318 1CA7 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA7, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2477 0021;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[1CA7 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_299)
{
    uint32_t const cps[2] = { 0x2477, 0x003F };

    // 2477 003F;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[0318 1CA7 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA7, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2477 003F;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[1CA7 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CA7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_300)
{
    uint32_t const cps[2] = { 0x2477, 0x0061 };

    // 2477 0061;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[0318 1CA7 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2477 0061;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_301)
{
    uint32_t const cps[2] = { 0x2477, 0x0041 };

    // 2477 0041;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[0318 1CA7 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2477 0041;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[1CA7 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_302)
{
    uint32_t const cps[2] = { 0x2477, 0x0062 };

    // 2477 0062;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[0318 1CA7 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA7, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2477 0062;	
    // (⑷) PARENTHESIZED DIGIT FOUR	[1CA7 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_303)
{
    uint32_t const cps[2] = { 0x2478, 0x0021 };

    // 2478 0021;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[0318 1CA8 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA8, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2478 0021;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[1CA8 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CA8, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_304)
{
    uint32_t const cps[2] = { 0x2478, 0x003F };

    // 2478 003F;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[0318 1CA8 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA8, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2478 003F;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[1CA8 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CA8, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_305)
{
    uint32_t const cps[2] = { 0x2478, 0x0061 };

    // 2478 0061;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[0318 1CA8 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA8, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2478 0061;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_306)
{
    uint32_t const cps[2] = { 0x2478, 0x0041 };

    // 2478 0041;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[0318 1CA8 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA8, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2478 0041;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[1CA8 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_307)
{
    uint32_t const cps[2] = { 0x2478, 0x0062 };

    // 2478 0062;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[0318 1CA8 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA8, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2478 0062;	
    // (⑸) PARENTHESIZED DIGIT FIVE	[1CA8 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_308)
{
    uint32_t const cps[2] = { 0x2479, 0x0021 };

    // 2479 0021;	
    // (⑹) PARENTHESIZED DIGIT SIX	[0318 1CA9 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA9, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2479 0021;	
    // (⑹) PARENTHESIZED DIGIT SIX	[1CA9 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CA9, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_309)
{
    uint32_t const cps[2] = { 0x2479, 0x003F };

    // 2479 003F;	
    // (⑹) PARENTHESIZED DIGIT SIX	[0318 1CA9 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA9, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2479 003F;	
    // (⑹) PARENTHESIZED DIGIT SIX	[1CA9 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CA9, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_310)
{
    uint32_t const cps[2] = { 0x2479, 0x0061 };

    // 2479 0061;	
    // (⑹) PARENTHESIZED DIGIT SIX	[0318 1CA9 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA9, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2479 0061;	
    // (⑹) PARENTHESIZED DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_311)
{
    uint32_t const cps[2] = { 0x2479, 0x0041 };

    // 2479 0041;	
    // (⑹) PARENTHESIZED DIGIT SIX	[0318 1CA9 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA9, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2479 0041;	
    // (⑹) PARENTHESIZED DIGIT SIX	[1CA9 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_312)
{
    uint32_t const cps[2] = { 0x2479, 0x0062 };

    // 2479 0062;	
    // (⑹) PARENTHESIZED DIGIT SIX	[0318 1CA9 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CA9, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2479 0062;	
    // (⑹) PARENTHESIZED DIGIT SIX	[1CA9 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_313)
{
    uint32_t const cps[2] = { 0x247A, 0x0021 };

    // 247A 0021;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[0318 1CAA 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAA, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247A 0021;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[1CAA | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CAA, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_314)
{
    uint32_t const cps[2] = { 0x247A, 0x003F };

    // 247A 003F;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[0318 1CAA 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAA, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247A 003F;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[1CAA | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CAA, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_315)
{
    uint32_t const cps[2] = { 0x247A, 0x0061 };

    // 247A 0061;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[0318 1CAA 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAA, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247A 0061;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_316)
{
    uint32_t const cps[2] = { 0x247A, 0x0041 };

    // 247A 0041;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[0318 1CAA 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAA, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247A 0041;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[1CAA 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_317)
{
    uint32_t const cps[2] = { 0x247A, 0x0062 };

    // 247A 0062;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[0318 1CAA 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAA, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247A 0062;	
    // (⑺) PARENTHESIZED DIGIT SEVEN	[1CAA 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_318)
{
    uint32_t const cps[2] = { 0x247B, 0x0021 };

    // 247B 0021;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[0318 1CAB 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAB, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247B 0021;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[1CAB | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CAB, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_319)
{
    uint32_t const cps[2] = { 0x247B, 0x003F };

    // 247B 003F;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[0318 1CAB 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAB, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247B 003F;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[1CAB | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CAB, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_320)
{
    uint32_t const cps[2] = { 0x247B, 0x0061 };

    // 247B 0061;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[0318 1CAB 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247B 0061;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_321)
{
    uint32_t const cps[2] = { 0x247B, 0x0041 };

    // 247B 0041;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[0318 1CAB 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247B 0041;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[1CAB 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_322)
{
    uint32_t const cps[2] = { 0x247B, 0x0062 };

    // 247B 0062;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[0318 1CAB 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAB, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247B 0062;	
    // (⑻) PARENTHESIZED DIGIT EIGHT	[1CAB 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_323)
{
    uint32_t const cps[2] = { 0x247C, 0x0021 };

    // 247C 0021;	
    // (⑼) PARENTHESIZED DIGIT NINE	[0318 1CAC 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAC, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247C 0021;	
    // (⑼) PARENTHESIZED DIGIT NINE	[1CAC | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CAC, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_324)
{
    uint32_t const cps[2] = { 0x247C, 0x003F };

    // 247C 003F;	
    // (⑼) PARENTHESIZED DIGIT NINE	[0318 1CAC 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAC, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247C 003F;	
    // (⑼) PARENTHESIZED DIGIT NINE	[1CAC | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CAC, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_325)
{
    uint32_t const cps[2] = { 0x247C, 0x0061 };

    // 247C 0061;	
    // (⑼) PARENTHESIZED DIGIT NINE	[0318 1CAC 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAC, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247C 0061;	
    // (⑼) PARENTHESIZED DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_326)
{
    uint32_t const cps[2] = { 0x247C, 0x0041 };

    // 247C 0041;	
    // (⑼) PARENTHESIZED DIGIT NINE	[0318 1CAC 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAC, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247C 0041;	
    // (⑼) PARENTHESIZED DIGIT NINE	[1CAC 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_327)
{
    uint32_t const cps[2] = { 0x247C, 0x0062 };

    // 247C 0062;	
    // (⑼) PARENTHESIZED DIGIT NINE	[0318 1CAC 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAC, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 247C 0062;	
    // (⑼) PARENTHESIZED DIGIT NINE	[1CAC 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_328)
{
    uint32_t const cps[2] = { 0x0028, 0x0061 };

    // 0028 0061;	
    // ('(') LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0028 0061;	
    // ('(') LEFT PARENTHESIS	[1CAD | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_329)
{
    uint32_t const cps[2] = { 0x0028, 0x0041 };

    // 0028 0041;	
    // ('(') LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0028 0041;	
    // ('(') LEFT PARENTHESIS	[1CAD | 0020 | 0008 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_330)
{
    uint32_t const cps[2] = { 0xFF08, 0x0061 };

    // FF08 0061;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF08 0061;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[1CAD | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_331)
{
    uint32_t const cps[2] = { 0xFF08, 0x0041 };

    // FF08 0041;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF08 0041;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[1CAD | 0020 | 0008 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_332)
{
    uint32_t const cps[2] = { 0xFE59, 0x0061 };

    // FE59 0061;	
    // (﹙) SMALL LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE59 0061;	
    // (﹙) SMALL LEFT PARENTHESIS	[1CAD | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_333)
{
    uint32_t const cps[2] = { 0xFE59, 0x0041 };

    // FE59 0041;	
    // (﹙) SMALL LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE59 0041;	
    // (﹙) SMALL LEFT PARENTHESIS	[1CAD | 0020 | 0008 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_334)
{
    uint32_t const cps[2] = { 0x207D, 0x0061 };

    // 207D 0061;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207D 0061;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[1CAD | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_335)
{
    uint32_t const cps[2] = { 0x207D, 0x0041 };

    // 207D 0041;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207D 0041;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[1CAD | 0020 | 0008 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_336)
{
    uint32_t const cps[2] = { 0x208D, 0x0061 };

    // 208D 0061;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208D 0061;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[1CAD | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_337)
{
    uint32_t const cps[2] = { 0x208D, 0x0041 };

    // 208D 0041;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0015 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208D 0041;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[1CAD | 0020 | 0008 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_338)
{
    uint32_t const cps[2] = { 0xFE35, 0x0061 };

    // FE35 0061;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE35 0061;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[1CAD | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_339)
{
    uint32_t const cps[2] = { 0xFE35, 0x0041 };

    // FE35 0041;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[0318 1CAD | 0020 0020 | 0016 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE35 0041;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[1CAD | 0020 | 0008 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_340)
{
    uint32_t const cps[2] = { 0x249C, 0x0021 };

    // 249C 0021;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[0318 1CAD 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249C 0021;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[1CAD | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_341)
{
    uint32_t const cps[2] = { 0x1F110, 0x0021 };

    // 1F110 0021;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[0318 1CAD 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F110 0021;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[1CAD | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_342)
{
    uint32_t const cps[2] = { 0x249C, 0x003F };

    // 249C 003F;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[0318 1CAD 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249C 003F;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[1CAD | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_343)
{
    uint32_t const cps[2] = { 0x1F110, 0x003F };

    // 1F110 003F;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[0318 1CAD 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F110 003F;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[1CAD | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_344)
{
    uint32_t const cps[2] = { 0x249C, 0x0061 };

    // 249C 0061;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[0318 1CAD 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249C 0061;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_345)
{
    uint32_t const cps[2] = { 0x249C, 0x0041 };

    // 249C 0041;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[0318 1CAD 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249C 0041;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_346)
{
    uint32_t const cps[2] = { 0x1F110, 0x0061 };

    // 1F110 0061;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[0318 1CAD 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F110 0061;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_347)
{
    uint32_t const cps[2] = { 0x1F110, 0x0041 };

    // 1F110 0041;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[0318 1CAD 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F110 0041;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_348)
{
    uint32_t const cps[2] = { 0x249C, 0x0062 };

    // 249C 0062;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[0318 1CAD 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249C 0062;	
    // (⒜) PARENTHESIZED LATIN SMALL LETTER A	[1CAD 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_349)
{
    uint32_t const cps[2] = { 0x1F110, 0x0062 };

    // 1F110 0062;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[0318 1CAD 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CAD, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F110 0062;	
    // (🄐) PARENTHESIZED LATIN CAPITAL LETTER A	[1CAD 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_350)
{
    uint32_t const cps[2] = { 0x0028, 0x0062 };

    // 0028 0062;	
    // ('(') LEFT PARENTHESIS	[0318 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0028 0062;	
    // ('(') LEFT PARENTHESIS	[1CC6 | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_351)
{
    uint32_t const cps[2] = { 0xFF08, 0x0062 };

    // FF08 0062;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[0318 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF08 0062;	
    // (（) FULLWIDTH LEFT PARENTHESIS	[1CC6 | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_352)
{
    uint32_t const cps[2] = { 0xFE59, 0x0062 };

    // FE59 0062;	
    // (﹙) SMALL LEFT PARENTHESIS	[0318 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE59 0062;	
    // (﹙) SMALL LEFT PARENTHESIS	[1CC6 | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_353)
{
    uint32_t const cps[2] = { 0x207D, 0x0062 };

    // 207D 0062;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[0318 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207D 0062;	
    // (⁽) SUPERSCRIPT LEFT PARENTHESIS	[1CC6 | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_354)
{
    uint32_t const cps[2] = { 0x208D, 0x0062 };

    // 208D 0062;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[0318 1CC6 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208D 0062;	
    // (₍) SUBSCRIPT LEFT PARENTHESIS	[1CC6 | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_355)
{
    uint32_t const cps[2] = { 0xFE35, 0x0062 };

    // FE35 0062;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[0318 1CC6 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x0318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE35 0062;	
    // (︵) PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS	[1CC6 | 0020 | 0002 | 0318 FFFF |]
    uint32_t const ces_shifted[9] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_356)
{
    uint32_t const cps[2] = { 0x249D, 0x0021 };

    // 249D 0021;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[0318 1CC6 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249D 0021;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[1CC6 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_357)
{
    uint32_t const cps[2] = { 0x1F111, 0x0021 };

    // 1F111 0021;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[0318 1CC6 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F111 0021;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[1CC6 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_358)
{
    uint32_t const cps[2] = { 0x249D, 0x003F };

    // 249D 003F;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[0318 1CC6 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249D 003F;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[1CC6 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_359)
{
    uint32_t const cps[2] = { 0x1F111, 0x003F };

    // 1F111 003F;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[0318 1CC6 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F111 003F;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[1CC6 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_360)
{
    uint32_t const cps[2] = { 0x249D, 0x0061 };

    // 249D 0061;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[0318 1CC6 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249D 0061;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[1CC6 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_361)
{
    uint32_t const cps[2] = { 0x249D, 0x0041 };

    // 249D 0041;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[0318 1CC6 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249D 0041;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[1CC6 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_362)
{
    uint32_t const cps[2] = { 0x1F111, 0x0061 };

    // 1F111 0061;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[0318 1CC6 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F111 0061;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[1CC6 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_363)
{
    uint32_t const cps[2] = { 0x1F111, 0x0041 };

    // 1F111 0041;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[0318 1CC6 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F111 0041;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[1CC6 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_364)
{
    uint32_t const cps[2] = { 0x249D, 0x0062 };

    // 249D 0062;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[0318 1CC6 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249D 0062;	
    // (⒝) PARENTHESIZED LATIN SMALL LETTER B	[1CC6 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_365)
{
    uint32_t const cps[2] = { 0x1F111, 0x0062 };

    // 1F111 0062;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[0318 1CC6 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CC6, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F111 0062;	
    // (🄑) PARENTHESIZED LATIN CAPITAL LETTER B	[1CC6 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_366)
{
    uint32_t const cps[2] = { 0x249E, 0x0021 };

    // 249E 0021;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[0318 1CE0 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249E 0021;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[1CE0 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CE0, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_367)
{
    uint32_t const cps[2] = { 0x1F112, 0x0021 };

    // 1F112 0021;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[0318 1CE0 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F112 0021;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[1CE0 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CE0, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_368)
{
    uint32_t const cps[2] = { 0x249E, 0x003F };

    // 249E 003F;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[0318 1CE0 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249E 003F;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[1CE0 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CE0, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_369)
{
    uint32_t const cps[2] = { 0x1F112, 0x003F };

    // 1F112 003F;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[0318 1CE0 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F112 003F;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[1CE0 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CE0, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_370)
{
    uint32_t const cps[2] = { 0x249E, 0x0061 };

    // 249E 0061;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[0318 1CE0 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249E 0061;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[1CE0 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_371)
{
    uint32_t const cps[2] = { 0x249E, 0x0041 };

    // 249E 0041;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[0318 1CE0 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249E 0041;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[1CE0 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_372)
{
    uint32_t const cps[2] = { 0x1F112, 0x0061 };

    // 1F112 0061;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[0318 1CE0 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F112 0061;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[1CE0 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_373)
{
    uint32_t const cps[2] = { 0x1F112, 0x0041 };

    // 1F112 0041;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[0318 1CE0 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F112 0041;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[1CE0 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_374)
{
    uint32_t const cps[2] = { 0x249E, 0x0062 };

    // 249E 0062;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[0318 1CE0 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249E 0062;	
    // (⒞) PARENTHESIZED LATIN SMALL LETTER C	[1CE0 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_375)
{
    uint32_t const cps[2] = { 0x1F112, 0x0062 };

    // 1F112 0062;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[0318 1CE0 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CE0, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F112 0062;	
    // (🄒) PARENTHESIZED LATIN CAPITAL LETTER C	[1CE0 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_376)
{
    uint32_t const cps[2] = { 0x249F, 0x0021 };

    // 249F 0021;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[0318 1CF5 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249F 0021;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[1CF5 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_377)
{
    uint32_t const cps[2] = { 0x1F113, 0x0021 };

    // 1F113 0021;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[0318 1CF5 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F113 0021;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_378)
{
    uint32_t const cps[2] = { 0x249F, 0x003F };

    // 249F 003F;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[0318 1CF5 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249F 003F;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[1CF5 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_379)
{
    uint32_t const cps[2] = { 0x1F113, 0x003F };

    // 1F113 003F;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[0318 1CF5 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F113 003F;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_380)
{
    uint32_t const cps[2] = { 0x249F, 0x0061 };

    // 249F 0061;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[0318 1CF5 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249F 0061;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_381)
{
    uint32_t const cps[2] = { 0x249F, 0x0041 };

    // 249F 0041;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[0318 1CF5 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249F 0041;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_382)
{
    uint32_t const cps[2] = { 0x1F113, 0x0061 };

    // 1F113 0061;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[0318 1CF5 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F113 0061;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_383)
{
    uint32_t const cps[2] = { 0x1F113, 0x0041 };

    // 1F113 0041;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[0318 1CF5 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F113 0041;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_384)
{
    uint32_t const cps[2] = { 0x249F, 0x0062 };

    // 249F 0062;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[0318 1CF5 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 249F 0062;	
    // (⒟) PARENTHESIZED LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_385)
{
    uint32_t const cps[2] = { 0x1F113, 0x0062 };

    // 1F113 0062;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[0318 1CF5 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1CF5, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F113 0062;	
    // (🄓) PARENTHESIZED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_386)
{
    uint32_t const cps[2] = { 0x24A0, 0x0021 };

    // 24A0 0021;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[0318 1D10 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A0 0021;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[1D10 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D10, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_387)
{
    uint32_t const cps[2] = { 0x1F114, 0x0021 };

    // 1F114 0021;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[0318 1D10 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F114 0021;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[1D10 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D10, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_388)
{
    uint32_t const cps[2] = { 0x24A0, 0x003F };

    // 24A0 003F;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[0318 1D10 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A0 003F;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[1D10 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D10, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_389)
{
    uint32_t const cps[2] = { 0x1F114, 0x003F };

    // 1F114 003F;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[0318 1D10 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F114 003F;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[1D10 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D10, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_390)
{
    uint32_t const cps[2] = { 0x24A0, 0x0061 };

    // 24A0 0061;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[0318 1D10 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A0 0061;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_391)
{
    uint32_t const cps[2] = { 0x24A0, 0x0041 };

    // 24A0 0041;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[0318 1D10 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A0 0041;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_392)
{
    uint32_t const cps[2] = { 0x1F114, 0x0061 };

    // 1F114 0061;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[0318 1D10 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F114 0061;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_393)
{
    uint32_t const cps[2] = { 0x1F114, 0x0041 };

    // 1F114 0041;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[0318 1D10 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F114 0041;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_394)
{
    uint32_t const cps[2] = { 0x24A0, 0x0062 };

    // 24A0 0062;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[0318 1D10 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A0 0062;	
    // (⒠) PARENTHESIZED LATIN SMALL LETTER E	[1D10 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_395)
{
    uint32_t const cps[2] = { 0x1F114, 0x0062 };

    // 1F114 0062;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[0318 1D10 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D10, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F114 0062;	
    // (🄔) PARENTHESIZED LATIN CAPITAL LETTER E	[1D10 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_396)
{
    uint32_t const cps[2] = { 0x24A1, 0x0021 };

    // 24A1 0021;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[0318 1D4B 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A1 0021;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[1D4B | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D4B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_397)
{
    uint32_t const cps[2] = { 0x1F115, 0x0021 };

    // 1F115 0021;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[0318 1D4B 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F115 0021;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[1D4B | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D4B, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_398)
{
    uint32_t const cps[2] = { 0x24A1, 0x003F };

    // 24A1 003F;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[0318 1D4B 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A1 003F;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[1D4B | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D4B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_399)
{
    uint32_t const cps[2] = { 0x1F115, 0x003F };

    // 1F115 003F;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[0318 1D4B 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F115 003F;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[1D4B | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D4B, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_400)
{
    uint32_t const cps[2] = { 0x24A1, 0x0061 };

    // 24A1 0061;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[0318 1D4B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A1 0061;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_401)
{
    uint32_t const cps[2] = { 0x24A1, 0x0041 };

    // 24A1 0041;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[0318 1D4B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A1 0041;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[1D4B 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_402)
{
    uint32_t const cps[2] = { 0x1F115, 0x0061 };

    // 1F115 0061;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[0318 1D4B 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F115 0061;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_403)
{
    uint32_t const cps[2] = { 0x1F115, 0x0041 };

    // 1F115 0041;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[0318 1D4B 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F115 0041;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[1D4B 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_404)
{
    uint32_t const cps[2] = { 0x24A1, 0x0062 };

    // 24A1 0062;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[0318 1D4B 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A1 0062;	
    // (⒡) PARENTHESIZED LATIN SMALL LETTER F	[1D4B 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_405)
{
    uint32_t const cps[2] = { 0x1F115, 0x0062 };

    // 1F115 0062;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[0318 1D4B 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D4B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F115 0062;	
    // (🄕) PARENTHESIZED LATIN CAPITAL LETTER F	[1D4B 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_406)
{
    uint32_t const cps[2] = { 0x24A2, 0x0021 };

    // 24A2 0021;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[0318 1D5A 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A2 0021;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[1D5A | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D5A, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_407)
{
    uint32_t const cps[2] = { 0x1F116, 0x0021 };

    // 1F116 0021;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[0318 1D5A 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F116 0021;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[1D5A | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D5A, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_408)
{
    uint32_t const cps[2] = { 0x24A2, 0x003F };

    // 24A2 003F;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[0318 1D5A 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A2 003F;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[1D5A | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D5A, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_409)
{
    uint32_t const cps[2] = { 0x1F116, 0x003F };

    // 1F116 003F;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[0318 1D5A 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F116 003F;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[1D5A | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D5A, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_410)
{
    uint32_t const cps[2] = { 0x24A2, 0x0061 };

    // 24A2 0061;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[0318 1D5A 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A2 0061;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_411)
{
    uint32_t const cps[2] = { 0x24A2, 0x0041 };

    // 24A2 0041;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[0318 1D5A 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A2 0041;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[1D5A 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_412)
{
    uint32_t const cps[2] = { 0x1F116, 0x0061 };

    // 1F116 0061;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[0318 1D5A 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F116 0061;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_413)
{
    uint32_t const cps[2] = { 0x1F116, 0x0041 };

    // 1F116 0041;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[0318 1D5A 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F116 0041;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[1D5A 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_414)
{
    uint32_t const cps[2] = { 0x24A2, 0x0062 };

    // 24A2 0062;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[0318 1D5A 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A2 0062;	
    // (⒢) PARENTHESIZED LATIN SMALL LETTER G	[1D5A 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_415)
{
    uint32_t const cps[2] = { 0x1F116, 0x0062 };

    // 1F116 0062;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[0318 1D5A 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D5A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F116 0062;	
    // (🄖) PARENTHESIZED LATIN CAPITAL LETTER G	[1D5A 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_416)
{
    uint32_t const cps[2] = { 0x24A3, 0x0021 };

    // 24A3 0021;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[0318 1D7E 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A3 0021;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[1D7E | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D7E, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_417)
{
    uint32_t const cps[2] = { 0x1F117, 0x0021 };

    // 1F117 0021;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[0318 1D7E 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F117 0021;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[1D7E | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D7E, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_418)
{
    uint32_t const cps[2] = { 0x24A3, 0x003F };

    // 24A3 003F;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[0318 1D7E 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A3 003F;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[1D7E | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D7E, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_419)
{
    uint32_t const cps[2] = { 0x1F117, 0x003F };

    // 1F117 003F;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[0318 1D7E 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F117 003F;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[1D7E | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D7E, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_420)
{
    uint32_t const cps[2] = { 0x24A3, 0x0061 };

    // 24A3 0061;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[0318 1D7E 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A3 0061;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[1D7E 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_421)
{
    uint32_t const cps[2] = { 0x24A3, 0x0041 };

    // 24A3 0041;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[0318 1D7E 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A3 0041;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[1D7E 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_422)
{
    uint32_t const cps[2] = { 0x1F117, 0x0061 };

    // 1F117 0061;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[0318 1D7E 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F117 0061;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[1D7E 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_423)
{
    uint32_t const cps[2] = { 0x1F117, 0x0041 };

    // 1F117 0041;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[0318 1D7E 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F117 0041;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[1D7E 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_424)
{
    uint32_t const cps[2] = { 0x24A3, 0x0062 };

    // 24A3 0062;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[0318 1D7E 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A3 0062;	
    // (⒣) PARENTHESIZED LATIN SMALL LETTER H	[1D7E 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_425)
{
    uint32_t const cps[2] = { 0x1F117, 0x0062 };

    // 1F117 0062;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[0318 1D7E 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D7E, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F117 0062;	
    // (🄗) PARENTHESIZED LATIN CAPITAL LETTER H	[1D7E 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_426)
{
    uint32_t const cps[2] = { 0x24A4, 0x0021 };

    // 24A4 0021;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[0318 1D98 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A4 0021;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[1D98 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D98, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_427)
{
    uint32_t const cps[2] = { 0x1F118, 0x0021 };

    // 1F118 0021;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[0318 1D98 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F118 0021;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[1D98 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1D98, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_428)
{
    uint32_t const cps[2] = { 0x24A4, 0x003F };

    // 24A4 003F;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[0318 1D98 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A4 003F;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[1D98 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D98, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_429)
{
    uint32_t const cps[2] = { 0x1F118, 0x003F };

    // 1F118 003F;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[0318 1D98 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F118 003F;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[1D98 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1D98, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_430)
{
    uint32_t const cps[2] = { 0x24A4, 0x0061 };

    // 24A4 0061;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[0318 1D98 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A4 0061;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_431)
{
    uint32_t const cps[2] = { 0x24A4, 0x0041 };

    // 24A4 0041;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[0318 1D98 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A4 0041;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[1D98 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_432)
{
    uint32_t const cps[2] = { 0x1F118, 0x0061 };

    // 1F118 0061;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[0318 1D98 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F118 0061;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_433)
{
    uint32_t const cps[2] = { 0x1F118, 0x0041 };

    // 1F118 0041;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[0318 1D98 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F118 0041;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[1D98 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_434)
{
    uint32_t const cps[2] = { 0x24A4, 0x0062 };

    // 24A4 0062;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[0318 1D98 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A4 0062;	
    // (⒤) PARENTHESIZED LATIN SMALL LETTER I	[1D98 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_435)
{
    uint32_t const cps[2] = { 0x1F118, 0x0062 };

    // 1F118 0062;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[0318 1D98 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1D98, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F118 0062;	
    // (🄘) PARENTHESIZED LATIN CAPITAL LETTER I	[1D98 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_436)
{
    uint32_t const cps[2] = { 0x24A5, 0x0021 };

    // 24A5 0021;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[0318 1DB2 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A5 0021;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[1DB2 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1DB2, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_437)
{
    uint32_t const cps[2] = { 0x1F119, 0x0021 };

    // 1F119 0021;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[0318 1DB2 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F119 0021;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[1DB2 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1DB2, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_438)
{
    uint32_t const cps[2] = { 0x24A5, 0x003F };

    // 24A5 003F;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[0318 1DB2 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A5 003F;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[1DB2 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1DB2, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_439)
{
    uint32_t const cps[2] = { 0x1F119, 0x003F };

    // 1F119 003F;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[0318 1DB2 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F119 003F;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[1DB2 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1DB2, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_440)
{
    uint32_t const cps[2] = { 0x24A5, 0x0061 };

    // 24A5 0061;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[0318 1DB2 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A5 0061;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[1DB2 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_441)
{
    uint32_t const cps[2] = { 0x24A5, 0x0041 };

    // 24A5 0041;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[0318 1DB2 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A5 0041;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[1DB2 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_442)
{
    uint32_t const cps[2] = { 0x1F119, 0x0061 };

    // 1F119 0061;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[0318 1DB2 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F119 0061;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[1DB2 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_443)
{
    uint32_t const cps[2] = { 0x1F119, 0x0041 };

    // 1F119 0041;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[0318 1DB2 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F119 0041;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[1DB2 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_444)
{
    uint32_t const cps[2] = { 0x24A5, 0x0062 };

    // 24A5 0062;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[0318 1DB2 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A5 0062;	
    // (⒥) PARENTHESIZED LATIN SMALL LETTER J	[1DB2 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_445)
{
    uint32_t const cps[2] = { 0x1F119, 0x0062 };

    // 1F119 0062;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[0318 1DB2 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DB2, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F119 0062;	
    // (🄙) PARENTHESIZED LATIN CAPITAL LETTER J	[1DB2 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_446)
{
    uint32_t const cps[2] = { 0x24A6, 0x0021 };

    // 24A6 0021;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[0318 1DCB 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A6 0021;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[1DCB | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1DCB, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_447)
{
    uint32_t const cps[2] = { 0x1F11A, 0x0021 };

    // 1F11A 0021;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[0318 1DCB 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11A 0021;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[1DCB | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1DCB, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_448)
{
    uint32_t const cps[2] = { 0x24A6, 0x003F };

    // 24A6 003F;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[0318 1DCB 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A6 003F;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[1DCB | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1DCB, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_449)
{
    uint32_t const cps[2] = { 0x1F11A, 0x003F };

    // 1F11A 003F;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[0318 1DCB 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11A 003F;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[1DCB | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1DCB, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_450)
{
    uint32_t const cps[2] = { 0x24A6, 0x0061 };

    // 24A6 0061;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[0318 1DCB 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A6 0061;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[1DCB 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_451)
{
    uint32_t const cps[2] = { 0x24A6, 0x0041 };

    // 24A6 0041;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[0318 1DCB 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A6 0041;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[1DCB 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_452)
{
    uint32_t const cps[2] = { 0x1F11A, 0x0061 };

    // 1F11A 0061;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[0318 1DCB 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11A 0061;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[1DCB 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_453)
{
    uint32_t const cps[2] = { 0x1F11A, 0x0041 };

    // 1F11A 0041;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[0318 1DCB 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11A 0041;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[1DCB 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_454)
{
    uint32_t const cps[2] = { 0x24A6, 0x0062 };

    // 24A6 0062;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[0318 1DCB 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A6 0062;	
    // (⒦) PARENTHESIZED LATIN SMALL LETTER K	[1DCB 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_455)
{
    uint32_t const cps[2] = { 0x1F11A, 0x0062 };

    // 1F11A 0062;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[0318 1DCB 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DCB, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11A 0062;	
    // (🄚) PARENTHESIZED LATIN CAPITAL LETTER K	[1DCB 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_456)
{
    uint32_t const cps[2] = { 0x24A7, 0x0021 };

    // 24A7 0021;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[0318 1DDD 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A7 0021;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[1DDD | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1DDD, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_457)
{
    uint32_t const cps[2] = { 0x1F11B, 0x0021 };

    // 1F11B 0021;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[0318 1DDD 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11B 0021;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[1DDD | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1DDD, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_458)
{
    uint32_t const cps[2] = { 0x24A7, 0x003F };

    // 24A7 003F;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[0318 1DDD 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A7 003F;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[1DDD | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1DDD, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_459)
{
    uint32_t const cps[2] = { 0x1F11B, 0x003F };

    // 1F11B 003F;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[0318 1DDD 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11B 003F;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[1DDD | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1DDD, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_460)
{
    uint32_t const cps[2] = { 0x24A7, 0x0061 };

    // 24A7 0061;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[0318 1DDD 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A7 0061;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[1DDD 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_461)
{
    uint32_t const cps[2] = { 0x24A7, 0x0041 };

    // 24A7 0041;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[0318 1DDD 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A7 0041;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[1DDD 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_462)
{
    uint32_t const cps[2] = { 0x1F11B, 0x0061 };

    // 1F11B 0061;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[0318 1DDD 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11B 0061;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[1DDD 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_463)
{
    uint32_t const cps[2] = { 0x1F11B, 0x0041 };

    // 1F11B 0041;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[0318 1DDD 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11B 0041;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[1DDD 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_464)
{
    uint32_t const cps[2] = { 0x24A7, 0x0062 };

    // 24A7 0062;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[0318 1DDD 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A7 0062;	
    // (⒧) PARENTHESIZED LATIN SMALL LETTER L	[1DDD 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_465)
{
    uint32_t const cps[2] = { 0x1F11B, 0x0062 };

    // 1F11B 0062;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[0318 1DDD 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1DDD, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11B 0062;	
    // (🄛) PARENTHESIZED LATIN CAPITAL LETTER L	[1DDD 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_466)
{
    uint32_t const cps[2] = { 0x24A8, 0x0021 };

    // 24A8 0021;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[0318 1E10 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A8 0021;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[1E10 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1E10, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_467)
{
    uint32_t const cps[2] = { 0x1F11C, 0x0021 };

    // 1F11C 0021;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[0318 1E10 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11C 0021;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[1E10 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1E10, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_468)
{
    uint32_t const cps[2] = { 0x24A8, 0x003F };

    // 24A8 003F;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[0318 1E10 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A8 003F;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[1E10 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1E10, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_469)
{
    uint32_t const cps[2] = { 0x1F11C, 0x003F };

    // 1F11C 003F;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[0318 1E10 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11C 003F;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[1E10 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1E10, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_470)
{
    uint32_t const cps[2] = { 0x24A8, 0x0061 };

    // 24A8 0061;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[0318 1E10 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A8 0061;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_471)
{
    uint32_t const cps[2] = { 0x24A8, 0x0041 };

    // 24A8 0041;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[0318 1E10 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A8 0041;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[1E10 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_472)
{
    uint32_t const cps[2] = { 0x1F11C, 0x0061 };

    // 1F11C 0061;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[0318 1E10 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11C 0061;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_473)
{
    uint32_t const cps[2] = { 0x1F11C, 0x0041 };

    // 1F11C 0041;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[0318 1E10 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11C 0041;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[1E10 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_474)
{
    uint32_t const cps[2] = { 0x24A8, 0x0062 };

    // 24A8 0062;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[0318 1E10 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A8 0062;	
    // (⒨) PARENTHESIZED LATIN SMALL LETTER M	[1E10 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_475)
{
    uint32_t const cps[2] = { 0x1F11C, 0x0062 };

    // 1F11C 0062;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[0318 1E10 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E10, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11C 0062;	
    // (🄜) PARENTHESIZED LATIN CAPITAL LETTER M	[1E10 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_476)
{
    uint32_t const cps[2] = { 0x24A9, 0x0021 };

    // 24A9 0021;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[0318 1E1F 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A9 0021;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[1E1F | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1E1F, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_477)
{
    uint32_t const cps[2] = { 0x1F11D, 0x0021 };

    // 1F11D 0021;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[0318 1E1F 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11D 0021;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[1E1F | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1E1F, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_478)
{
    uint32_t const cps[2] = { 0x24A9, 0x003F };

    // 24A9 003F;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[0318 1E1F 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A9 003F;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[1E1F | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1E1F, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_479)
{
    uint32_t const cps[2] = { 0x1F11D, 0x003F };

    // 1F11D 003F;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[0318 1E1F 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11D 003F;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[1E1F | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1E1F, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_480)
{
    uint32_t const cps[2] = { 0x24A9, 0x0061 };

    // 24A9 0061;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[0318 1E1F 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A9 0061;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[1E1F 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_481)
{
    uint32_t const cps[2] = { 0x24A9, 0x0041 };

    // 24A9 0041;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[0318 1E1F 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A9 0041;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[1E1F 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_482)
{
    uint32_t const cps[2] = { 0x1F11D, 0x0061 };

    // 1F11D 0061;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[0318 1E1F 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11D 0061;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[1E1F 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_483)
{
    uint32_t const cps[2] = { 0x1F11D, 0x0041 };

    // 1F11D 0041;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[0318 1E1F 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11D 0041;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[1E1F 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_484)
{
    uint32_t const cps[2] = { 0x24A9, 0x0062 };

    // 24A9 0062;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[0318 1E1F 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24A9 0062;	
    // (⒩) PARENTHESIZED LATIN SMALL LETTER N	[1E1F 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_485)
{
    uint32_t const cps[2] = { 0x1F11D, 0x0062 };

    // 1F11D 0062;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[0318 1E1F 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E1F, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11D 0062;	
    // (🄝) PARENTHESIZED LATIN CAPITAL LETTER N	[1E1F 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_486)
{
    uint32_t const cps[2] = { 0x24AA, 0x0021 };

    // 24AA 0021;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[0318 1E43 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AA 0021;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[1E43 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1E43, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_487)
{
    uint32_t const cps[2] = { 0x1F11E, 0x0021 };

    // 1F11E 0021;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[0318 1E43 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11E 0021;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[1E43 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1E43, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_488)
{
    uint32_t const cps[2] = { 0x24AA, 0x003F };

    // 24AA 003F;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[0318 1E43 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AA 003F;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[1E43 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1E43, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_489)
{
    uint32_t const cps[2] = { 0x1F11E, 0x003F };

    // 1F11E 003F;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[0318 1E43 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11E 003F;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[1E43 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1E43, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_490)
{
    uint32_t const cps[2] = { 0x24AA, 0x0061 };

    // 24AA 0061;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[0318 1E43 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AA 0061;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_491)
{
    uint32_t const cps[2] = { 0x24AA, 0x0041 };

    // 24AA 0041;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[0318 1E43 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AA 0041;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[1E43 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_492)
{
    uint32_t const cps[2] = { 0x1F11E, 0x0061 };

    // 1F11E 0061;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[0318 1E43 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11E 0061;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_493)
{
    uint32_t const cps[2] = { 0x1F11E, 0x0041 };

    // 1F11E 0041;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[0318 1E43 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11E 0041;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[1E43 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_494)
{
    uint32_t const cps[2] = { 0x24AA, 0x0062 };

    // 24AA 0062;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[0318 1E43 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AA 0062;	
    // (⒪) PARENTHESIZED LATIN SMALL LETTER O	[1E43 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_495)
{
    uint32_t const cps[2] = { 0x1F11E, 0x0062 };

    // 1F11E 0062;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[0318 1E43 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E43, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11E 0062;	
    // (🄞) PARENTHESIZED LATIN CAPITAL LETTER O	[1E43 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0x1E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_496)
{
    uint32_t const cps[2] = { 0x24AB, 0x0021 };

    // 24AB 0021;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[0318 1E72 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E72, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AB 0021;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[1E72 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1E72, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_497)
{
    uint32_t const cps[2] = { 0x1F11F, 0x0021 };

    // 1F11F 0021;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[0318 1E72 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E72, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11F 0021;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[1E72 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0x1E72, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_498)
{
    uint32_t const cps[2] = { 0x24AB, 0x003F };

    // 24AB 003F;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[0318 1E72 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E72, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AB 003F;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[1E72 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1E72, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_011_499)
{
    uint32_t const cps[2] = { 0x1F11F, 0x003F };

    // 1F11F 003F;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[0318 1E72 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0x1E72, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11F 003F;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[1E72 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0x1E72, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

