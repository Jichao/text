// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_071_000)
{
    // 2B79  ; [*0D56.0020.0002] 
    // SOUTH WEST TRIANGLE-HEADED ARROW TO BAR

    uint32_t const cps[1] = { 0x2b79 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_001)
{
    // 2B7A  ; [*0D57.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x2b7a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_002)
{
    // 2B7B  ; [*0D58.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x2b7b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_003)
{
    // 2B7C  ; [*0D59.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x2b7c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_004)
{
    // 2B7D  ; [*0D5A.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x2b7d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_005)
{
    // 2B7E  ; [*0D5B.0020.0002] 
    // HORIZONTAL TAB KEY

    uint32_t const cps[1] = { 0x2b7e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_006)
{
    // 2B7F  ; [*0D5C.0020.0002] 
    // VERTICAL TAB KEY

    uint32_t const cps[1] = { 0x2b7f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_007)
{
    // 2B80  ; [*0D5D.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW OVER RIGHTWARDS TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b80 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_008)
{
    // 2B81  ; [*0D5E.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF DOWNWARDS TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b81 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_009)
{
    // 2B82  ; [*0D5F.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW OVER LEFTWARDS TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b82 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_010)
{
    // 2B83  ; [*0D60.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF UPWARDS TRIANGLE-HEADED ARROW

    uint32_t const cps[1] = { 0x2b83 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_011)
{
    // 2B84  ; [*0D61.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS

    uint32_t const cps[1] = { 0x2b84 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_012)
{
    // 2B85  ; [*0D62.0020.0002] 
    // UPWARDS TRIANGLE-HEADED PAIRED ARROWS

    uint32_t const cps[1] = { 0x2b85 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_013)
{
    // 2B86  ; [*0D63.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED PAIRED ARROWS

    uint32_t const cps[1] = { 0x2b86 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_014)
{
    // 2B87  ; [*0D64.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED PAIRED ARROWS

    uint32_t const cps[1] = { 0x2b87 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_015)
{
    // 2B88  ; [*0D65.0020.0002] 
    // LEFTWARDS BLACK CIRCLED WHITE ARROW

    uint32_t const cps[1] = { 0x2b88 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_016)
{
    // 2B89  ; [*0D66.0020.0002] 
    // UPWARDS BLACK CIRCLED WHITE ARROW

    uint32_t const cps[1] = { 0x2b89 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_017)
{
    // 2B8A  ; [*0D67.0020.0002] 
    // RIGHTWARDS BLACK CIRCLED WHITE ARROW

    uint32_t const cps[1] = { 0x2b8a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_018)
{
    // 2B8B  ; [*0D68.0020.0002] 
    // DOWNWARDS BLACK CIRCLED WHITE ARROW

    uint32_t const cps[1] = { 0x2b8b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_019)
{
    // 2B8C  ; [*0D69.0020.0002] 
    // ANTICLOCKWISE TRIANGLE-HEADED RIGHT U-SHAPED ARROW

    uint32_t const cps[1] = { 0x2b8c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_020)
{
    // 2B8D  ; [*0D6A.0020.0002] 
    // ANTICLOCKWISE TRIANGLE-HEADED BOTTOM U-SHAPED ARROW

    uint32_t const cps[1] = { 0x2b8d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_021)
{
    // 2B8E  ; [*0D6B.0020.0002] 
    // ANTICLOCKWISE TRIANGLE-HEADED LEFT U-SHAPED ARROW

    uint32_t const cps[1] = { 0x2b8e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_022)
{
    // 2B8F  ; [*0D6C.0020.0002] 
    // ANTICLOCKWISE TRIANGLE-HEADED TOP U-SHAPED ARROW

    uint32_t const cps[1] = { 0x2b8f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_023)
{
    // 2B90  ; [*0D6D.0020.0002] 
    // RETURN LEFT

    uint32_t const cps[1] = { 0x2b90 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_024)
{
    // 2B91  ; [*0D6E.0020.0002] 
    // RETURN RIGHT

    uint32_t const cps[1] = { 0x2b91 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_025)
{
    // 2B92  ; [*0D6F.0020.0002] 
    // NEWLINE LEFT

    uint32_t const cps[1] = { 0x2b92 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_026)
{
    // 2B93  ; [*0D70.0020.0002] 
    // NEWLINE RIGHT

    uint32_t const cps[1] = { 0x2b93 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_027)
{
    // 2B94  ; [*0D71.0020.0002] 
    // FOUR CORNER ARROWS CIRCLING ANTICLOCKWISE

    uint32_t const cps[1] = { 0x2b94 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_028)
{
    // 2B95  ; [*0D72.0020.0002] 
    // RIGHTWARDS BLACK ARROW

    uint32_t const cps[1] = { 0x2b95 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_029)
{
    // 2B98  ; [*0D73.0020.0002] 
    // THREE-D TOP-LIGHTED LEFTWARDS EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x2b98 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_030)
{
    // 2B99  ; [*0D74.0020.0002] 
    // THREE-D RIGHT-LIGHTED UPWARDS EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x2b99 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_031)
{
    // 2B9A  ; [*0D75.0020.0002] 
    // THREE-D TOP-LIGHTED RIGHTWARDS EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x2b9a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_032)
{
    // 2B9B  ; [*0D76.0020.0002] 
    // THREE-D LEFT-LIGHTED DOWNWARDS EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x2b9b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_033)
{
    // 2B9C  ; [*0D77.0020.0002] 
    // BLACK LEFTWARDS EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x2b9c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_034)
{
    // 2B9D  ; [*0D78.0020.0002] 
    // BLACK UPWARDS EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x2b9d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_035)
{
    // 2B9E  ; [*0D79.0020.0002] 
    // BLACK RIGHTWARDS EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x2b9e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_036)
{
    // 2B9F  ; [*0D7A.0020.0002] 
    // BLACK DOWNWARDS EQUILATERAL ARROWHEAD

    uint32_t const cps[1] = { 0x2b9f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_037)
{
    // 2BA0  ; [*0D7B.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS

    uint32_t const cps[1] = { 0x2ba0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_038)
{
    // 2BA1  ; [*0D7C.0020.0002] 
    // DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS

    uint32_t const cps[1] = { 0x2ba1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_039)
{
    // 2BA2  ; [*0D7D.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS

    uint32_t const cps[1] = { 0x2ba2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_040)
{
    // 2BA3  ; [*0D7E.0020.0002] 
    // UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS

    uint32_t const cps[1] = { 0x2ba3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_041)
{
    // 2BA4  ; [*0D7F.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS

    uint32_t const cps[1] = { 0x2ba4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_042)
{
    // 2BA5  ; [*0D80.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS

    uint32_t const cps[1] = { 0x2ba5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_043)
{
    // 2BA6  ; [*0D81.0020.0002] 
    // LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS

    uint32_t const cps[1] = { 0x2ba6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_044)
{
    // 2BA7  ; [*0D82.0020.0002] 
    // RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS

    uint32_t const cps[1] = { 0x2ba7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_045)
{
    // 2BA8  ; [*0D83.0020.0002] 
    // BLACK CURVED DOWNWARDS AND LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2ba8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_046)
{
    // 2BA9  ; [*0D84.0020.0002] 
    // BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2ba9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_047)
{
    // 2BAA  ; [*0D85.0020.0002] 
    // BLACK CURVED UPWARDS AND LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2baa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_048)
{
    // 2BAB  ; [*0D86.0020.0002] 
    // BLACK CURVED UPWARDS AND RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2bab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_049)
{
    // 2BAC  ; [*0D87.0020.0002] 
    // BLACK CURVED LEFTWARDS AND UPWARDS ARROW

    uint32_t const cps[1] = { 0x2bac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_050)
{
    // 2BAD  ; [*0D88.0020.0002] 
    // BLACK CURVED RIGHTWARDS AND UPWARDS ARROW

    uint32_t const cps[1] = { 0x2bad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_051)
{
    // 2BAE  ; [*0D89.0020.0002] 
    // BLACK CURVED LEFTWARDS AND DOWNWARDS ARROW

    uint32_t const cps[1] = { 0x2bae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_052)
{
    // 2BAF  ; [*0D8A.0020.0002] 
    // BLACK CURVED RIGHTWARDS AND DOWNWARDS ARROW

    uint32_t const cps[1] = { 0x2baf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_053)
{
    // 2BB0  ; [*0D8B.0020.0002] 
    // RIBBON ARROW DOWN LEFT

    uint32_t const cps[1] = { 0x2bb0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_054)
{
    // 2BB1  ; [*0D8C.0020.0002] 
    // RIBBON ARROW DOWN RIGHT

    uint32_t const cps[1] = { 0x2bb1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_055)
{
    // 2BB2  ; [*0D8D.0020.0002] 
    // RIBBON ARROW UP LEFT

    uint32_t const cps[1] = { 0x2bb2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_056)
{
    // 2BB3  ; [*0D8E.0020.0002] 
    // RIBBON ARROW UP RIGHT

    uint32_t const cps[1] = { 0x2bb3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_057)
{
    // 2BB4  ; [*0D8F.0020.0002] 
    // RIBBON ARROW LEFT UP

    uint32_t const cps[1] = { 0x2bb4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_058)
{
    // 2BB5  ; [*0D90.0020.0002] 
    // RIBBON ARROW RIGHT UP

    uint32_t const cps[1] = { 0x2bb5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_059)
{
    // 2BB6  ; [*0D91.0020.0002] 
    // RIBBON ARROW LEFT DOWN

    uint32_t const cps[1] = { 0x2bb6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_060)
{
    // 2BB7  ; [*0D92.0020.0002] 
    // RIBBON ARROW RIGHT DOWN

    uint32_t const cps[1] = { 0x2bb7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_061)
{
    // 2BB8  ; [*0D93.0020.0002] 
    // UPWARDS WHITE ARROW FROM BAR WITH HORIZONTAL BAR

    uint32_t const cps[1] = { 0x2bb8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_062)
{
    // 2BB9  ; [*0D94.0020.0002] 
    // UP ARROWHEAD IN A RECTANGLE BOX

    uint32_t const cps[1] = { 0x2bb9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_063)
{
    // 2BBD  ; [*0D95.0020.0002] 
    // BALLOT BOX WITH LIGHT X

    uint32_t const cps[1] = { 0x2bbd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_064)
{
    // 2BBE  ; [*0D96.0020.0002] 
    // CIRCLED X

    uint32_t const cps[1] = { 0x2bbe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_065)
{
    // 2BBF  ; [*0D97.0020.0002] 
    // CIRCLED BOLD X

    uint32_t const cps[1] = { 0x2bbf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_066)
{
    // 2BC0  ; [*0D98.0020.0002] 
    // BLACK SQUARE CENTRED

    uint32_t const cps[1] = { 0x2bc0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_067)
{
    // 2BC1  ; [*0D99.0020.0002] 
    // BLACK DIAMOND CENTRED

    uint32_t const cps[1] = { 0x2bc1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_068)
{
    // 2BC2  ; [*0D9A.0020.0002] 
    // TURNED BLACK PENTAGON

    uint32_t const cps[1] = { 0x2bc2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_069)
{
    // 2BC3  ; [*0D9B.0020.0002] 
    // HORIZONTAL BLACK OCTAGON

    uint32_t const cps[1] = { 0x2bc3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_070)
{
    // 2BC4  ; [*0D9C.0020.0002] 
    // BLACK OCTAGON

    uint32_t const cps[1] = { 0x2bc4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_071)
{
    // 2BC5  ; [*0D9D.0020.0002] 
    // BLACK MEDIUM UP-POINTING TRIANGLE CENTRED

    uint32_t const cps[1] = { 0x2bc5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_072)
{
    // 2BC6  ; [*0D9E.0020.0002] 
    // BLACK MEDIUM DOWN-POINTING TRIANGLE CENTRED

    uint32_t const cps[1] = { 0x2bc6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_073)
{
    // 2BC7  ; [*0D9F.0020.0002] 
    // BLACK MEDIUM LEFT-POINTING TRIANGLE CENTRED

    uint32_t const cps[1] = { 0x2bc7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xd9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_074)
{
    // 2BC8  ; [*0DA0.0020.0002] 
    // BLACK MEDIUM RIGHT-POINTING TRIANGLE CENTRED

    uint32_t const cps[1] = { 0x2bc8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_075)
{
    // 2BCA  ; [*0DA1.0020.0002] 
    // TOP HALF BLACK CIRCLE

    uint32_t const cps[1] = { 0x2bca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_076)
{
    // 2BCB  ; [*0DA2.0020.0002] 
    // BOTTOM HALF BLACK CIRCLE

    uint32_t const cps[1] = { 0x2bcb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_077)
{
    // 2BCC  ; [*0DA3.0020.0002] 
    // LIGHT FOUR POINTED BLACK CUSP

    uint32_t const cps[1] = { 0x2bcc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_078)
{
    // 2BCD  ; [*0DA4.0020.0002] 
    // ROTATED LIGHT FOUR POINTED BLACK CUSP

    uint32_t const cps[1] = { 0x2bcd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_079)
{
    // 2BCE  ; [*0DA5.0020.0002] 
    // WHITE FOUR POINTED CUSP

    uint32_t const cps[1] = { 0x2bce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_080)
{
    // 2BCF  ; [*0DA6.0020.0002] 
    // ROTATED WHITE FOUR POINTED CUSP

    uint32_t const cps[1] = { 0x2bcf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_081)
{
    // 2BD0  ; [*0DA7.0020.0002] 
    // SQUARE POSITION INDICATOR

    uint32_t const cps[1] = { 0x2bd0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_082)
{
    // 2BD1  ; [*0DA8.0020.0002] 
    // UNCERTAINTY SIGN

    uint32_t const cps[1] = { 0x2bd1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_083)
{
    // 2BD2  ; [*0DA9.0020.0002] 
    // GROUP MARK

    uint32_t const cps[1] = { 0x2bd2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xda9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_084)
{
    // 2BEC  ; [*0DAA.0020.0002] 
    // LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS

    uint32_t const cps[1] = { 0x2bec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdaa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_085)
{
    // 2BED  ; [*0DAB.0020.0002] 
    // UPWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS

    uint32_t const cps[1] = { 0x2bed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_086)
{
    // 2BEE  ; [*0DAC.0020.0002] 
    // RIGHTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS

    uint32_t const cps[1] = { 0x2bee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_087)
{
    // 2BEF  ; [*0DAD.0020.0002] 
    // DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS

    uint32_t const cps[1] = { 0x2bef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xdad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_088)
{
    // 2C00  ; [.224B.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER AZU

    uint32_t const cps[1] = { 0x2c00 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_089)
{
    // 2C01  ; [.224C.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER BUKY

    uint32_t const cps[1] = { 0x2c01 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_090)
{
    // 2C02  ; [.224D.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER VEDE

    uint32_t const cps[1] = { 0x2c02 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_091)
{
    // 2C03  ; [.224E.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER GLAGOLI

    uint32_t const cps[1] = { 0x2c03 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_092)
{
    // 2C04  ; [.224F.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER DOBRO

    uint32_t const cps[1] = { 0x2c04 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_093)
{
    // 2C05  ; [.2250.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER YESTU

    uint32_t const cps[1] = { 0x2c05 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2250), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_094)
{
    // 2C06  ; [.2251.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER ZHIVETE

    uint32_t const cps[1] = { 0x2c06 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2251), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_095)
{
    // 2C07  ; [.2252.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER DZELO

    uint32_t const cps[1] = { 0x2c07 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2252), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_096)
{
    // 2C08  ; [.2253.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER ZEMLJA

    uint32_t const cps[1] = { 0x2c08 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2253), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_097)
{
    // 2C09  ; [.2254.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER IZHE

    uint32_t const cps[1] = { 0x2c09 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2254), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_098)
{
    // 2C0A  ; [.2255.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER INITIAL IZHE

    uint32_t const cps[1] = { 0x2c0a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2255), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_099)
{
    // 2C0B  ; [.2256.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER I

    uint32_t const cps[1] = { 0x2c0b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2256), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_100)
{
    // 2C0C  ; [.2257.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER DJERVI

    uint32_t const cps[1] = { 0x2c0c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2257), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_101)
{
    // 2C0D  ; [.2258.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER KAKO

    uint32_t const cps[1] = { 0x2c0d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2258), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_102)
{
    // 2C0E  ; [.2259.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER LJUDIJE

    uint32_t const cps[1] = { 0x2c0e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2259), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_103)
{
    // 2C0F  ; [.225A.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER MYSLITE

    uint32_t const cps[1] = { 0x2c0f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x225a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_104)
{
    // 2C10  ; [.225B.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER NASHI

    uint32_t const cps[1] = { 0x2c10 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x225b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_105)
{
    // 2C11  ; [.225C.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER ONU

    uint32_t const cps[1] = { 0x2c11 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x225c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_106)
{
    // 2C12  ; [.225D.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER POKOJI

    uint32_t const cps[1] = { 0x2c12 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x225d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_107)
{
    // 2C13  ; [.225E.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER RITSI

    uint32_t const cps[1] = { 0x2c13 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x225e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_108)
{
    // 2C14  ; [.225F.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER SLOVO

    uint32_t const cps[1] = { 0x2c14 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x225f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_109)
{
    // 2C15  ; [.2260.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER TVRIDO

    uint32_t const cps[1] = { 0x2c15 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2260), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_110)
{
    // 2C16  ; [.2261.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER UKU

    uint32_t const cps[1] = { 0x2c16 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2261), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_111)
{
    // 2C17  ; [.2262.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER FRITU

    uint32_t const cps[1] = { 0x2c17 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2262), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_112)
{
    // 2C18  ; [.2263.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER HERU

    uint32_t const cps[1] = { 0x2c18 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2263), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_113)
{
    // 2C19  ; [.2264.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER OTU

    uint32_t const cps[1] = { 0x2c19 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2264), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_114)
{
    // 2C1A  ; [.2265.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER PE

    uint32_t const cps[1] = { 0x2c1a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2265), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_115)
{
    // 2C1B  ; [.2266.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER SHTA

    uint32_t const cps[1] = { 0x2c1b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2266), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_116)
{
    // 2C1C  ; [.2267.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER TSI

    uint32_t const cps[1] = { 0x2c1c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2267), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_117)
{
    // 2C1D  ; [.2268.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER CHRIVI

    uint32_t const cps[1] = { 0x2c1d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2268), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_118)
{
    // 2C1E  ; [.2269.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER SHA

    uint32_t const cps[1] = { 0x2c1e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2269), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_119)
{
    // 2C1F  ; [.226A.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER YERU

    uint32_t const cps[1] = { 0x2c1f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x226a), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_120)
{
    // 2C20  ; [.226B.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER YERI

    uint32_t const cps[1] = { 0x2c20 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x226b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_121)
{
    // 2C21  ; [.226C.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER YATI

    uint32_t const cps[1] = { 0x2c21 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x226c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_122)
{
    // 2C22  ; [.226D.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER SPIDERY HA

    uint32_t const cps[1] = { 0x2c22 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x226d), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_123)
{
    // 2C23  ; [.226E.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER YU

    uint32_t const cps[1] = { 0x2c23 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x226e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_124)
{
    // 2C24  ; [.226F.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER SMALL YUS

    uint32_t const cps[1] = { 0x2c24 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x226f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_125)
{
    // 2C25  ; [.2270.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER SMALL YUS WITH TAIL

    uint32_t const cps[1] = { 0x2c25 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2270), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_126)
{
    // 2C26  ; [.2271.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER YO

    uint32_t const cps[1] = { 0x2c26 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2271), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_127)
{
    // 2C27  ; [.2272.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER IOTATED SMALL YUS

    uint32_t const cps[1] = { 0x2c27 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2272), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_128)
{
    // 2C28  ; [.2273.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER BIG YUS

    uint32_t const cps[1] = { 0x2c28 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2273), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_129)
{
    // 2C29  ; [.2274.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER IOTATED BIG YUS

    uint32_t const cps[1] = { 0x2c29 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2274), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_130)
{
    // 2C2A  ; [.2275.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER FITA

    uint32_t const cps[1] = { 0x2c2a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2275), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_131)
{
    // 2C2B  ; [.2276.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER IZHITSA

    uint32_t const cps[1] = { 0x2c2b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2276), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_132)
{
    // 2C2C  ; [.2277.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER SHTAPIC

    uint32_t const cps[1] = { 0x2c2c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2277), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_133)
{
    // 2C2D  ; [.2278.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER TROKUTASTI A

    uint32_t const cps[1] = { 0x2c2d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2278), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_134)
{
    // 2C2E  ; [.2279.0020.0008] 
    // GLAGOLITIC CAPITAL LETTER LATINATE MYSLITE

    uint32_t const cps[1] = { 0x2c2e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2279), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_135)
{
    // 2C30  ; [.224B.0020.0002] 
    // GLAGOLITIC SMALL LETTER AZU

    uint32_t const cps[1] = { 0x2c30 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_136)
{
    // 2C31  ; [.224C.0020.0002] 
    // GLAGOLITIC SMALL LETTER BUKY

    uint32_t const cps[1] = { 0x2c31 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_137)
{
    // 2C32  ; [.224D.0020.0002] 
    // GLAGOLITIC SMALL LETTER VEDE

    uint32_t const cps[1] = { 0x2c32 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_138)
{
    // 2C33  ; [.224E.0020.0002] 
    // GLAGOLITIC SMALL LETTER GLAGOLI

    uint32_t const cps[1] = { 0x2c33 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_139)
{
    // 2C34  ; [.224F.0020.0002] 
    // GLAGOLITIC SMALL LETTER DOBRO

    uint32_t const cps[1] = { 0x2c34 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x224f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_140)
{
    // 2C35  ; [.2250.0020.0002] 
    // GLAGOLITIC SMALL LETTER YESTU

    uint32_t const cps[1] = { 0x2c35 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2250), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_141)
{
    // 2C36  ; [.2251.0020.0002] 
    // GLAGOLITIC SMALL LETTER ZHIVETE

    uint32_t const cps[1] = { 0x2c36 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2251), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_142)
{
    // 2C37  ; [.2252.0020.0002] 
    // GLAGOLITIC SMALL LETTER DZELO

    uint32_t const cps[1] = { 0x2c37 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2252), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_143)
{
    // 2C38  ; [.2253.0020.0002] 
    // GLAGOLITIC SMALL LETTER ZEMLJA

    uint32_t const cps[1] = { 0x2c38 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2253), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_144)
{
    // 2C39  ; [.2254.0020.0002] 
    // GLAGOLITIC SMALL LETTER IZHE

    uint32_t const cps[1] = { 0x2c39 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2254), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_145)
{
    // 2C3A  ; [.2255.0020.0002] 
    // GLAGOLITIC SMALL LETTER INITIAL IZHE

    uint32_t const cps[1] = { 0x2c3a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2255), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_146)
{
    // 2C3B  ; [.2256.0020.0002] 
    // GLAGOLITIC SMALL LETTER I

    uint32_t const cps[1] = { 0x2c3b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2256), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_147)
{
    // 2C3C  ; [.2257.0020.0002] 
    // GLAGOLITIC SMALL LETTER DJERVI

    uint32_t const cps[1] = { 0x2c3c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2257), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_148)
{
    // 2C3D  ; [.2258.0020.0002] 
    // GLAGOLITIC SMALL LETTER KAKO

    uint32_t const cps[1] = { 0x2c3d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2258), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_071_149)
{
    // 2C3E  ; [.2259.0020.0002] 
    // GLAGOLITIC SMALL LETTER LJUDIJE

    uint32_t const cps[1] = { 0x2c3e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2259), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

