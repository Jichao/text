// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_179_000)
{
    // 11431 0041;	
    // (ëê±) NEWA LETTER SHA	[2BDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11431, 0x0041 };
    uint32_t const ces[9] = { 0x2BDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_001)
{
    // 11431 0062;	
    // (ëê±) NEWA LETTER SHA	[2BDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11431, 0x0062 };
    uint32_t const ces[9] = { 0x2BDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_002)
{
    // 11432 0021;	
    // (ëê≤) NEWA LETTER SSA	[2BDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11432, 0x0021 };
    uint32_t const ces[9] = { 0x2BDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_003)
{
    // 11432 003F;	
    // (ëê≤) NEWA LETTER SSA	[2BDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11432, 0x003F };
    uint32_t const ces[9] = { 0x2BDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_004)
{
    // 11432 0061;	
    // (ëê≤) NEWA LETTER SSA	[2BDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11432, 0x0061 };
    uint32_t const ces[9] = { 0x2BDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_005)
{
    // 11432 0041;	
    // (ëê≤) NEWA LETTER SSA	[2BDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11432, 0x0041 };
    uint32_t const ces[9] = { 0x2BDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_006)
{
    // 11432 0062;	
    // (ëê≤) NEWA LETTER SSA	[2BDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11432, 0x0062 };
    uint32_t const ces[9] = { 0x2BDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_007)
{
    // 11433 0021;	
    // (ëê≥) NEWA LETTER SA	[2BDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11433, 0x0021 };
    uint32_t const ces[9] = { 0x2BDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_008)
{
    // 11433 003F;	
    // (ëê≥) NEWA LETTER SA	[2BDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11433, 0x003F };
    uint32_t const ces[9] = { 0x2BDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_009)
{
    // 11433 0061;	
    // (ëê≥) NEWA LETTER SA	[2BDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11433, 0x0061 };
    uint32_t const ces[9] = { 0x2BDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_010)
{
    // 11433 0041;	
    // (ëê≥) NEWA LETTER SA	[2BDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11433, 0x0041 };
    uint32_t const ces[9] = { 0x2BDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_011)
{
    // 11433 0062;	
    // (ëê≥) NEWA LETTER SA	[2BDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11433, 0x0062 };
    uint32_t const ces[9] = { 0x2BDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_012)
{
    // 11434 0021;	
    // (ëê¥) NEWA LETTER HA	[2BE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11434, 0x0021 };
    uint32_t const ces[9] = { 0x2BE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_013)
{
    // 11434 003F;	
    // (ëê¥) NEWA LETTER HA	[2BE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11434, 0x003F };
    uint32_t const ces[9] = { 0x2BE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_014)
{
    // 11434 0061;	
    // (ëê¥) NEWA LETTER HA	[2BE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11434, 0x0061 };
    uint32_t const ces[9] = { 0x2BE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_015)
{
    // 11434 0041;	
    // (ëê¥) NEWA LETTER HA	[2BE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11434, 0x0041 };
    uint32_t const ces[9] = { 0x2BE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_016)
{
    // 11434 0062;	
    // (ëê¥) NEWA LETTER HA	[2BE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11434, 0x0062 };
    uint32_t const ces[9] = { 0x2BE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_017)
{
    // 11447 0021;	
    // (ëëá) NEWA SIGN AVAGRAHA	[2BE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11447, 0x0021 };
    uint32_t const ces[9] = { 0x2BE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_018)
{
    // 11447 003F;	
    // (ëëá) NEWA SIGN AVAGRAHA	[2BE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11447, 0x003F };
    uint32_t const ces[9] = { 0x2BE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_019)
{
    // 11447 0061;	
    // (ëëá) NEWA SIGN AVAGRAHA	[2BE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11447, 0x0061 };
    uint32_t const ces[9] = { 0x2BE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_020)
{
    // 11447 0041;	
    // (ëëá) NEWA SIGN AVAGRAHA	[2BE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11447, 0x0041 };
    uint32_t const ces[9] = { 0x2BE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_021)
{
    // 11447 0062;	
    // (ëëá) NEWA SIGN AVAGRAHA	[2BE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11447, 0x0062 };
    uint32_t const ces[9] = { 0x2BE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_022)
{
    // 11448 0021;	
    // (ëëà) NEWA SIGN FINAL ANUSVARA	[2BE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11448, 0x0021 };
    uint32_t const ces[9] = { 0x2BE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_023)
{
    // 11448 003F;	
    // (ëëà) NEWA SIGN FINAL ANUSVARA	[2BE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11448, 0x003F };
    uint32_t const ces[9] = { 0x2BE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_024)
{
    // 11448 0061;	
    // (ëëà) NEWA SIGN FINAL ANUSVARA	[2BE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11448, 0x0061 };
    uint32_t const ces[9] = { 0x2BE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_025)
{
    // 11448 0041;	
    // (ëëà) NEWA SIGN FINAL ANUSVARA	[2BE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11448, 0x0041 };
    uint32_t const ces[9] = { 0x2BE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_026)
{
    // 11448 0062;	
    // (ëëà) NEWA SIGN FINAL ANUSVARA	[2BE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11448, 0x0062 };
    uint32_t const ces[9] = { 0x2BE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_027)
{
    // 11435 0021;	
    // (ëêµ) NEWA VOWEL SIGN AA	[2BE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11435, 0x0021 };
    uint32_t const ces[9] = { 0x2BE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_028)
{
    // 11435 003F;	
    // (ëêµ) NEWA VOWEL SIGN AA	[2BE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11435, 0x003F };
    uint32_t const ces[9] = { 0x2BE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_029)
{
    // 11435 0061;	
    // (ëêµ) NEWA VOWEL SIGN AA	[2BE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11435, 0x0061 };
    uint32_t const ces[9] = { 0x2BE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_030)
{
    // 11435 0041;	
    // (ëêµ) NEWA VOWEL SIGN AA	[2BE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11435, 0x0041 };
    uint32_t const ces[9] = { 0x2BE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_031)
{
    // 11435 0062;	
    // (ëêµ) NEWA VOWEL SIGN AA	[2BE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11435, 0x0062 };
    uint32_t const ces[9] = { 0x2BE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_032)
{
    // 11436 0021;	
    // (ëê∂) NEWA VOWEL SIGN I	[2BE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11436, 0x0021 };
    uint32_t const ces[9] = { 0x2BE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_033)
{
    // 11436 003F;	
    // (ëê∂) NEWA VOWEL SIGN I	[2BE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11436, 0x003F };
    uint32_t const ces[9] = { 0x2BE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_034)
{
    // 11436 0061;	
    // (ëê∂) NEWA VOWEL SIGN I	[2BE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11436, 0x0061 };
    uint32_t const ces[9] = { 0x2BE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_035)
{
    // 11436 0041;	
    // (ëê∂) NEWA VOWEL SIGN I	[2BE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11436, 0x0041 };
    uint32_t const ces[9] = { 0x2BE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_036)
{
    // 11436 0062;	
    // (ëê∂) NEWA VOWEL SIGN I	[2BE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11436, 0x0062 };
    uint32_t const ces[9] = { 0x2BE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_037)
{
    // 11437 0021;	
    // (ëê∑) NEWA VOWEL SIGN II	[2BE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11437, 0x0021 };
    uint32_t const ces[9] = { 0x2BE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_038)
{
    // 11437 003F;	
    // (ëê∑) NEWA VOWEL SIGN II	[2BE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11437, 0x003F };
    uint32_t const ces[9] = { 0x2BE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_039)
{
    // 11437 0061;	
    // (ëê∑) NEWA VOWEL SIGN II	[2BE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11437, 0x0061 };
    uint32_t const ces[9] = { 0x2BE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_040)
{
    // 11437 0041;	
    // (ëê∑) NEWA VOWEL SIGN II	[2BE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11437, 0x0041 };
    uint32_t const ces[9] = { 0x2BE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_041)
{
    // 11437 0062;	
    // (ëê∑) NEWA VOWEL SIGN II	[2BE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11437, 0x0062 };
    uint32_t const ces[9] = { 0x2BE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_042)
{
    // 11438 0021;	
    // (ëê∏) NEWA VOWEL SIGN U	[2BE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11438, 0x0021 };
    uint32_t const ces[9] = { 0x2BE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_043)
{
    // 11438 003F;	
    // (ëê∏) NEWA VOWEL SIGN U	[2BE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11438, 0x003F };
    uint32_t const ces[9] = { 0x2BE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_044)
{
    // 11438 0061;	
    // (ëê∏) NEWA VOWEL SIGN U	[2BE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11438, 0x0061 };
    uint32_t const ces[9] = { 0x2BE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_045)
{
    // 11438 0041;	
    // (ëê∏) NEWA VOWEL SIGN U	[2BE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11438, 0x0041 };
    uint32_t const ces[9] = { 0x2BE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_046)
{
    // 11438 0062;	
    // (ëê∏) NEWA VOWEL SIGN U	[2BE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11438, 0x0062 };
    uint32_t const ces[9] = { 0x2BE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_047)
{
    // 11439 0021;	
    // (ëêπ) NEWA VOWEL SIGN UU	[2BE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11439, 0x0021 };
    uint32_t const ces[9] = { 0x2BE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_048)
{
    // 11439 003F;	
    // (ëêπ) NEWA VOWEL SIGN UU	[2BE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11439, 0x003F };
    uint32_t const ces[9] = { 0x2BE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_049)
{
    // 11439 0061;	
    // (ëêπ) NEWA VOWEL SIGN UU	[2BE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11439, 0x0061 };
    uint32_t const ces[9] = { 0x2BE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_050)
{
    // 11439 0041;	
    // (ëêπ) NEWA VOWEL SIGN UU	[2BE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11439, 0x0041 };
    uint32_t const ces[9] = { 0x2BE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_051)
{
    // 11439 0062;	
    // (ëêπ) NEWA VOWEL SIGN UU	[2BE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11439, 0x0062 };
    uint32_t const ces[9] = { 0x2BE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_052)
{
    // 1143A 0021;	
    // (ëê∫) NEWA VOWEL SIGN VOCALIC R	[2BE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143A, 0x0021 };
    uint32_t const ces[9] = { 0x2BE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_053)
{
    // 1143A 003F;	
    // (ëê∫) NEWA VOWEL SIGN VOCALIC R	[2BE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143A, 0x003F };
    uint32_t const ces[9] = { 0x2BE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_054)
{
    // 1143A 0061;	
    // (ëê∫) NEWA VOWEL SIGN VOCALIC R	[2BE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143A, 0x0061 };
    uint32_t const ces[9] = { 0x2BE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_055)
{
    // 1143A 0041;	
    // (ëê∫) NEWA VOWEL SIGN VOCALIC R	[2BE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1143A, 0x0041 };
    uint32_t const ces[9] = { 0x2BE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_056)
{
    // 1143A 0062;	
    // (ëê∫) NEWA VOWEL SIGN VOCALIC R	[2BE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143A, 0x0062 };
    uint32_t const ces[9] = { 0x2BE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_057)
{
    // 1143B 0021;	
    // (ëêª) NEWA VOWEL SIGN VOCALIC RR	[2BE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143B, 0x0021 };
    uint32_t const ces[9] = { 0x2BE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_058)
{
    // 1143B 003F;	
    // (ëêª) NEWA VOWEL SIGN VOCALIC RR	[2BE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143B, 0x003F };
    uint32_t const ces[9] = { 0x2BE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_059)
{
    // 1143B 0061;	
    // (ëêª) NEWA VOWEL SIGN VOCALIC RR	[2BE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143B, 0x0061 };
    uint32_t const ces[9] = { 0x2BE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_060)
{
    // 1143B 0041;	
    // (ëêª) NEWA VOWEL SIGN VOCALIC RR	[2BE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1143B, 0x0041 };
    uint32_t const ces[9] = { 0x2BE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_061)
{
    // 1143B 0062;	
    // (ëêª) NEWA VOWEL SIGN VOCALIC RR	[2BE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143B, 0x0062 };
    uint32_t const ces[9] = { 0x2BE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_062)
{
    // 1143C 0021;	
    // (ëêº) NEWA VOWEL SIGN VOCALIC L	[2BEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143C, 0x0021 };
    uint32_t const ces[9] = { 0x2BEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_063)
{
    // 1143C 003F;	
    // (ëêº) NEWA VOWEL SIGN VOCALIC L	[2BEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143C, 0x003F };
    uint32_t const ces[9] = { 0x2BEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_064)
{
    // 1143C 0061;	
    // (ëêº) NEWA VOWEL SIGN VOCALIC L	[2BEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143C, 0x0061 };
    uint32_t const ces[9] = { 0x2BEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_065)
{
    // 1143C 0041;	
    // (ëêº) NEWA VOWEL SIGN VOCALIC L	[2BEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1143C, 0x0041 };
    uint32_t const ces[9] = { 0x2BEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_066)
{
    // 1143C 0062;	
    // (ëêº) NEWA VOWEL SIGN VOCALIC L	[2BEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143C, 0x0062 };
    uint32_t const ces[9] = { 0x2BEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_067)
{
    // 1143D 0021;	
    // (ëêΩ) NEWA VOWEL SIGN VOCALIC LL	[2BEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143D, 0x0021 };
    uint32_t const ces[9] = { 0x2BEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_068)
{
    // 1143D 003F;	
    // (ëêΩ) NEWA VOWEL SIGN VOCALIC LL	[2BEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143D, 0x003F };
    uint32_t const ces[9] = { 0x2BEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_069)
{
    // 1143D 0061;	
    // (ëêΩ) NEWA VOWEL SIGN VOCALIC LL	[2BEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143D, 0x0061 };
    uint32_t const ces[9] = { 0x2BEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_070)
{
    // 1143D 0041;	
    // (ëêΩ) NEWA VOWEL SIGN VOCALIC LL	[2BEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1143D, 0x0041 };
    uint32_t const ces[9] = { 0x2BEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_071)
{
    // 1143D 0062;	
    // (ëêΩ) NEWA VOWEL SIGN VOCALIC LL	[2BEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143D, 0x0062 };
    uint32_t const ces[9] = { 0x2BEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_072)
{
    // 1143E 0021;	
    // (ëêæ) NEWA VOWEL SIGN E	[2BEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143E, 0x0021 };
    uint32_t const ces[9] = { 0x2BEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_073)
{
    // 1143E 003F;	
    // (ëêæ) NEWA VOWEL SIGN E	[2BEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143E, 0x003F };
    uint32_t const ces[9] = { 0x2BEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_074)
{
    // 1143E 0061;	
    // (ëêæ) NEWA VOWEL SIGN E	[2BEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143E, 0x0061 };
    uint32_t const ces[9] = { 0x2BEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_075)
{
    // 1143E 0041;	
    // (ëêæ) NEWA VOWEL SIGN E	[2BEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1143E, 0x0041 };
    uint32_t const ces[9] = { 0x2BEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_076)
{
    // 1143E 0062;	
    // (ëêæ) NEWA VOWEL SIGN E	[2BEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143E, 0x0062 };
    uint32_t const ces[9] = { 0x2BEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_077)
{
    // 1143F 0021;	
    // (ëêø) NEWA VOWEL SIGN AI	[2BED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143F, 0x0021 };
    uint32_t const ces[9] = { 0x2BED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_078)
{
    // 1143F 003F;	
    // (ëêø) NEWA VOWEL SIGN AI	[2BED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143F, 0x003F };
    uint32_t const ces[9] = { 0x2BED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_079)
{
    // 1143F 0061;	
    // (ëêø) NEWA VOWEL SIGN AI	[2BED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143F, 0x0061 };
    uint32_t const ces[9] = { 0x2BED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_080)
{
    // 1143F 0041;	
    // (ëêø) NEWA VOWEL SIGN AI	[2BED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1143F, 0x0041 };
    uint32_t const ces[9] = { 0x2BED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_081)
{
    // 1143F 0062;	
    // (ëêø) NEWA VOWEL SIGN AI	[2BED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1143F, 0x0062 };
    uint32_t const ces[9] = { 0x2BED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_082)
{
    // 11440 0021;	
    // (ëëÄ) NEWA VOWEL SIGN O	[2BEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11440, 0x0021 };
    uint32_t const ces[9] = { 0x2BEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_083)
{
    // 11440 003F;	
    // (ëëÄ) NEWA VOWEL SIGN O	[2BEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11440, 0x003F };
    uint32_t const ces[9] = { 0x2BEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_084)
{
    // 11440 0061;	
    // (ëëÄ) NEWA VOWEL SIGN O	[2BEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11440, 0x0061 };
    uint32_t const ces[9] = { 0x2BEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_085)
{
    // 11440 0041;	
    // (ëëÄ) NEWA VOWEL SIGN O	[2BEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11440, 0x0041 };
    uint32_t const ces[9] = { 0x2BEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_086)
{
    // 11440 0062;	
    // (ëëÄ) NEWA VOWEL SIGN O	[2BEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11440, 0x0062 };
    uint32_t const ces[9] = { 0x2BEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_087)
{
    // 11441 0021;	
    // (ëëÅ) NEWA VOWEL SIGN AU	[2BEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11441, 0x0021 };
    uint32_t const ces[9] = { 0x2BEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_088)
{
    // 11441 003F;	
    // (ëëÅ) NEWA VOWEL SIGN AU	[2BEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11441, 0x003F };
    uint32_t const ces[9] = { 0x2BEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_089)
{
    // 11441 0061;	
    // (ëëÅ) NEWA VOWEL SIGN AU	[2BEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11441, 0x0061 };
    uint32_t const ces[9] = { 0x2BEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_090)
{
    // 11441 0041;	
    // (ëëÅ) NEWA VOWEL SIGN AU	[2BEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11441, 0x0041 };
    uint32_t const ces[9] = { 0x2BEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_091)
{
    // 11441 0062;	
    // (ëëÅ) NEWA VOWEL SIGN AU	[2BEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11441, 0x0062 };
    uint32_t const ces[9] = { 0x2BEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_092)
{
    // 0334 11442;	
    // (ëëÇ) NEWA SIGN VIRAMA	[2BF0 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11442 };
    uint32_t const ces[8] = { 0x2BF0, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_093)
{
    // 11442 0334;	
    // (ëëÇ) NEWA SIGN VIRAMA	[2BF0 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11442, 0x0334 };
    uint32_t const ces[8] = { 0x2BF0, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_094)
{
    // 11442 0021;	
    // (ëëÇ) NEWA SIGN VIRAMA	[2BF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11442, 0x0021 };
    uint32_t const ces[9] = { 0x2BF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_095)
{
    // 11442 003F;	
    // (ëëÇ) NEWA SIGN VIRAMA	[2BF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11442, 0x003F };
    uint32_t const ces[9] = { 0x2BF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_096)
{
    // 11442 0061;	
    // (ëëÇ) NEWA SIGN VIRAMA	[2BF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11442, 0x0061 };
    uint32_t const ces[9] = { 0x2BF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_097)
{
    // 11442 0041;	
    // (ëëÇ) NEWA SIGN VIRAMA	[2BF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11442, 0x0041 };
    uint32_t const ces[9] = { 0x2BF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_098)
{
    // 11442 0062;	
    // (ëëÇ) NEWA SIGN VIRAMA	[2BF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11442, 0x0062 };
    uint32_t const ces[9] = { 0x2BF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_099)
{
    // 114C7 0021;	
    // (ëìá) TIRHUTA OM	[2BF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C7, 0x0021 };
    uint32_t const ces[9] = { 0x2BF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_100)
{
    // 114C7 003F;	
    // (ëìá) TIRHUTA OM	[2BF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C7, 0x003F };
    uint32_t const ces[9] = { 0x2BF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_101)
{
    // 114C7 0061;	
    // (ëìá) TIRHUTA OM	[2BF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C7, 0x0061 };
    uint32_t const ces[9] = { 0x2BF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_102)
{
    // 114C7 0041;	
    // (ëìá) TIRHUTA OM	[2BF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114C7, 0x0041 };
    uint32_t const ces[9] = { 0x2BF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_103)
{
    // 114C7 0062;	
    // (ëìá) TIRHUTA OM	[2BF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C7, 0x0062 };
    uint32_t const ces[9] = { 0x2BF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_104)
{
    // 11480 0021;	
    // (ëíÄ) TIRHUTA ANJI	[2BF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11480, 0x0021 };
    uint32_t const ces[9] = { 0x2BF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_105)
{
    // 11480 003F;	
    // (ëíÄ) TIRHUTA ANJI	[2BF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11480, 0x003F };
    uint32_t const ces[9] = { 0x2BF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_106)
{
    // 11480 0061;	
    // (ëíÄ) TIRHUTA ANJI	[2BF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11480, 0x0061 };
    uint32_t const ces[9] = { 0x2BF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_107)
{
    // 11480 0041;	
    // (ëíÄ) TIRHUTA ANJI	[2BF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11480, 0x0041 };
    uint32_t const ces[9] = { 0x2BF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_108)
{
    // 11480 0062;	
    // (ëíÄ) TIRHUTA ANJI	[2BF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11480, 0x0062 };
    uint32_t const ces[9] = { 0x2BF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_109)
{
    // 11481 0021;	
    // (ëíÅ) TIRHUTA LETTER A	[2BF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11481, 0x0021 };
    uint32_t const ces[9] = { 0x2BF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_110)
{
    // 11481 003F;	
    // (ëíÅ) TIRHUTA LETTER A	[2BF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11481, 0x003F };
    uint32_t const ces[9] = { 0x2BF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_111)
{
    // 11481 0061;	
    // (ëíÅ) TIRHUTA LETTER A	[2BF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11481, 0x0061 };
    uint32_t const ces[9] = { 0x2BF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_112)
{
    // 11481 0041;	
    // (ëíÅ) TIRHUTA LETTER A	[2BF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11481, 0x0041 };
    uint32_t const ces[9] = { 0x2BF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_113)
{
    // 11481 0062;	
    // (ëíÅ) TIRHUTA LETTER A	[2BF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11481, 0x0062 };
    uint32_t const ces[9] = { 0x2BF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_114)
{
    // 11482 0021;	
    // (ëíÇ) TIRHUTA LETTER AA	[2BF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11482, 0x0021 };
    uint32_t const ces[9] = { 0x2BF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_115)
{
    // 11482 003F;	
    // (ëíÇ) TIRHUTA LETTER AA	[2BF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11482, 0x003F };
    uint32_t const ces[9] = { 0x2BF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_116)
{
    // 11482 0061;	
    // (ëíÇ) TIRHUTA LETTER AA	[2BF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11482, 0x0061 };
    uint32_t const ces[9] = { 0x2BF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_117)
{
    // 11482 0041;	
    // (ëíÇ) TIRHUTA LETTER AA	[2BF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11482, 0x0041 };
    uint32_t const ces[9] = { 0x2BF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_118)
{
    // 11482 0062;	
    // (ëíÇ) TIRHUTA LETTER AA	[2BF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11482, 0x0062 };
    uint32_t const ces[9] = { 0x2BF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_119)
{
    // 11483 0021;	
    // (ëíÉ) TIRHUTA LETTER I	[2BF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11483, 0x0021 };
    uint32_t const ces[9] = { 0x2BF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_120)
{
    // 11483 003F;	
    // (ëíÉ) TIRHUTA LETTER I	[2BF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11483, 0x003F };
    uint32_t const ces[9] = { 0x2BF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_121)
{
    // 11483 0061;	
    // (ëíÉ) TIRHUTA LETTER I	[2BF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11483, 0x0061 };
    uint32_t const ces[9] = { 0x2BF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_122)
{
    // 11483 0041;	
    // (ëíÉ) TIRHUTA LETTER I	[2BF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11483, 0x0041 };
    uint32_t const ces[9] = { 0x2BF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_123)
{
    // 11483 0062;	
    // (ëíÉ) TIRHUTA LETTER I	[2BF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11483, 0x0062 };
    uint32_t const ces[9] = { 0x2BF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_124)
{
    // 11484 0021;	
    // (ëíÑ) TIRHUTA LETTER II	[2BF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11484, 0x0021 };
    uint32_t const ces[9] = { 0x2BF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_125)
{
    // 11484 003F;	
    // (ëíÑ) TIRHUTA LETTER II	[2BF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11484, 0x003F };
    uint32_t const ces[9] = { 0x2BF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_126)
{
    // 11484 0061;	
    // (ëíÑ) TIRHUTA LETTER II	[2BF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11484, 0x0061 };
    uint32_t const ces[9] = { 0x2BF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_127)
{
    // 11484 0041;	
    // (ëíÑ) TIRHUTA LETTER II	[2BF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11484, 0x0041 };
    uint32_t const ces[9] = { 0x2BF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_128)
{
    // 11484 0062;	
    // (ëíÑ) TIRHUTA LETTER II	[2BF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11484, 0x0062 };
    uint32_t const ces[9] = { 0x2BF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_129)
{
    // 11485 0021;	
    // (ëíÖ) TIRHUTA LETTER U	[2BF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11485, 0x0021 };
    uint32_t const ces[9] = { 0x2BF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_130)
{
    // 11485 003F;	
    // (ëíÖ) TIRHUTA LETTER U	[2BF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11485, 0x003F };
    uint32_t const ces[9] = { 0x2BF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_131)
{
    // 11485 0061;	
    // (ëíÖ) TIRHUTA LETTER U	[2BF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11485, 0x0061 };
    uint32_t const ces[9] = { 0x2BF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_132)
{
    // 11485 0041;	
    // (ëíÖ) TIRHUTA LETTER U	[2BF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11485, 0x0041 };
    uint32_t const ces[9] = { 0x2BF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_133)
{
    // 11485 0062;	
    // (ëíÖ) TIRHUTA LETTER U	[2BF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11485, 0x0062 };
    uint32_t const ces[9] = { 0x2BF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_134)
{
    // 11486 0021;	
    // (ëíÜ) TIRHUTA LETTER UU	[2BF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11486, 0x0021 };
    uint32_t const ces[9] = { 0x2BF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_135)
{
    // 11486 003F;	
    // (ëíÜ) TIRHUTA LETTER UU	[2BF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11486, 0x003F };
    uint32_t const ces[9] = { 0x2BF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_136)
{
    // 11486 0061;	
    // (ëíÜ) TIRHUTA LETTER UU	[2BF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11486, 0x0061 };
    uint32_t const ces[9] = { 0x2BF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_137)
{
    // 11486 0041;	
    // (ëíÜ) TIRHUTA LETTER UU	[2BF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11486, 0x0041 };
    uint32_t const ces[9] = { 0x2BF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_138)
{
    // 11486 0062;	
    // (ëíÜ) TIRHUTA LETTER UU	[2BF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11486, 0x0062 };
    uint32_t const ces[9] = { 0x2BF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_139)
{
    // 11487 0021;	
    // (ëíá) TIRHUTA LETTER VOCALIC R	[2BF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11487, 0x0021 };
    uint32_t const ces[9] = { 0x2BF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_140)
{
    // 11487 003F;	
    // (ëíá) TIRHUTA LETTER VOCALIC R	[2BF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11487, 0x003F };
    uint32_t const ces[9] = { 0x2BF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_141)
{
    // 11487 0061;	
    // (ëíá) TIRHUTA LETTER VOCALIC R	[2BF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11487, 0x0061 };
    uint32_t const ces[9] = { 0x2BF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_142)
{
    // 11487 0041;	
    // (ëíá) TIRHUTA LETTER VOCALIC R	[2BF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11487, 0x0041 };
    uint32_t const ces[9] = { 0x2BF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_143)
{
    // 11487 0062;	
    // (ëíá) TIRHUTA LETTER VOCALIC R	[2BF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11487, 0x0062 };
    uint32_t const ces[9] = { 0x2BF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_144)
{
    // 11488 0021;	
    // (ëíà) TIRHUTA LETTER VOCALIC RR	[2BFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11488, 0x0021 };
    uint32_t const ces[9] = { 0x2BFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_145)
{
    // 11488 003F;	
    // (ëíà) TIRHUTA LETTER VOCALIC RR	[2BFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11488, 0x003F };
    uint32_t const ces[9] = { 0x2BFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_146)
{
    // 11488 0061;	
    // (ëíà) TIRHUTA LETTER VOCALIC RR	[2BFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11488, 0x0061 };
    uint32_t const ces[9] = { 0x2BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_147)
{
    // 11488 0041;	
    // (ëíà) TIRHUTA LETTER VOCALIC RR	[2BFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11488, 0x0041 };
    uint32_t const ces[9] = { 0x2BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_148)
{
    // 11488 0062;	
    // (ëíà) TIRHUTA LETTER VOCALIC RR	[2BFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11488, 0x0062 };
    uint32_t const ces[9] = { 0x2BFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_149)
{
    // 11489 0021;	
    // (ëíâ) TIRHUTA LETTER VOCALIC L	[2BFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11489, 0x0021 };
    uint32_t const ces[9] = { 0x2BFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_150)
{
    // 11489 003F;	
    // (ëíâ) TIRHUTA LETTER VOCALIC L	[2BFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11489, 0x003F };
    uint32_t const ces[9] = { 0x2BFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_151)
{
    // 11489 0061;	
    // (ëíâ) TIRHUTA LETTER VOCALIC L	[2BFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11489, 0x0061 };
    uint32_t const ces[9] = { 0x2BFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_152)
{
    // 11489 0041;	
    // (ëíâ) TIRHUTA LETTER VOCALIC L	[2BFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11489, 0x0041 };
    uint32_t const ces[9] = { 0x2BFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_153)
{
    // 11489 0062;	
    // (ëíâ) TIRHUTA LETTER VOCALIC L	[2BFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11489, 0x0062 };
    uint32_t const ces[9] = { 0x2BFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_154)
{
    // 1148A 0021;	
    // (ëíä) TIRHUTA LETTER VOCALIC LL	[2BFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148A, 0x0021 };
    uint32_t const ces[9] = { 0x2BFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_155)
{
    // 1148A 003F;	
    // (ëíä) TIRHUTA LETTER VOCALIC LL	[2BFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148A, 0x003F };
    uint32_t const ces[9] = { 0x2BFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_156)
{
    // 1148A 0061;	
    // (ëíä) TIRHUTA LETTER VOCALIC LL	[2BFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148A, 0x0061 };
    uint32_t const ces[9] = { 0x2BFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_157)
{
    // 1148A 0041;	
    // (ëíä) TIRHUTA LETTER VOCALIC LL	[2BFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1148A, 0x0041 };
    uint32_t const ces[9] = { 0x2BFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_158)
{
    // 1148A 0062;	
    // (ëíä) TIRHUTA LETTER VOCALIC LL	[2BFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148A, 0x0062 };
    uint32_t const ces[9] = { 0x2BFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_159)
{
    // 1148B 0021;	
    // (ëíã) TIRHUTA LETTER E	[2BFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148B, 0x0021 };
    uint32_t const ces[9] = { 0x2BFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_160)
{
    // 1148B 003F;	
    // (ëíã) TIRHUTA LETTER E	[2BFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148B, 0x003F };
    uint32_t const ces[9] = { 0x2BFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_161)
{
    // 1148B 0061;	
    // (ëíã) TIRHUTA LETTER E	[2BFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148B, 0x0061 };
    uint32_t const ces[9] = { 0x2BFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_162)
{
    // 1148B 0041;	
    // (ëíã) TIRHUTA LETTER E	[2BFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1148B, 0x0041 };
    uint32_t const ces[9] = { 0x2BFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_163)
{
    // 1148B 0062;	
    // (ëíã) TIRHUTA LETTER E	[2BFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148B, 0x0062 };
    uint32_t const ces[9] = { 0x2BFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_164)
{
    // 1148C 0021;	
    // (ëíå) TIRHUTA LETTER AI	[2BFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148C, 0x0021 };
    uint32_t const ces[9] = { 0x2BFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_165)
{
    // 1148C 003F;	
    // (ëíå) TIRHUTA LETTER AI	[2BFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148C, 0x003F };
    uint32_t const ces[9] = { 0x2BFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_166)
{
    // 1148C 0061;	
    // (ëíå) TIRHUTA LETTER AI	[2BFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148C, 0x0061 };
    uint32_t const ces[9] = { 0x2BFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_167)
{
    // 1148C 0041;	
    // (ëíå) TIRHUTA LETTER AI	[2BFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1148C, 0x0041 };
    uint32_t const ces[9] = { 0x2BFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_168)
{
    // 1148C 0062;	
    // (ëíå) TIRHUTA LETTER AI	[2BFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148C, 0x0062 };
    uint32_t const ces[9] = { 0x2BFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_169)
{
    // 1148D 0021;	
    // (ëíç) TIRHUTA LETTER O	[2BFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148D, 0x0021 };
    uint32_t const ces[9] = { 0x2BFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_170)
{
    // 1148D 003F;	
    // (ëíç) TIRHUTA LETTER O	[2BFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148D, 0x003F };
    uint32_t const ces[9] = { 0x2BFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_171)
{
    // 1148D 0061;	
    // (ëíç) TIRHUTA LETTER O	[2BFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148D, 0x0061 };
    uint32_t const ces[9] = { 0x2BFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_172)
{
    // 1148D 0041;	
    // (ëíç) TIRHUTA LETTER O	[2BFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1148D, 0x0041 };
    uint32_t const ces[9] = { 0x2BFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_173)
{
    // 1148D 0062;	
    // (ëíç) TIRHUTA LETTER O	[2BFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148D, 0x0062 };
    uint32_t const ces[9] = { 0x2BFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_174)
{
    // 1148E 0021;	
    // (ëíé) TIRHUTA LETTER AU	[2C00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148E, 0x0021 };
    uint32_t const ces[9] = { 0x2C00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_175)
{
    // 1148E 003F;	
    // (ëíé) TIRHUTA LETTER AU	[2C00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148E, 0x003F };
    uint32_t const ces[9] = { 0x2C00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_176)
{
    // 1148E 0061;	
    // (ëíé) TIRHUTA LETTER AU	[2C00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148E, 0x0061 };
    uint32_t const ces[9] = { 0x2C00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_177)
{
    // 1148E 0041;	
    // (ëíé) TIRHUTA LETTER AU	[2C00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1148E, 0x0041 };
    uint32_t const ces[9] = { 0x2C00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_178)
{
    // 1148E 0062;	
    // (ëíé) TIRHUTA LETTER AU	[2C00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148E, 0x0062 };
    uint32_t const ces[9] = { 0x2C00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_179)
{
    // 1148F 0021;	
    // (ëíè) TIRHUTA LETTER KA	[2C01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148F, 0x0021 };
    uint32_t const ces[9] = { 0x2C01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_180)
{
    // 1148F 003F;	
    // (ëíè) TIRHUTA LETTER KA	[2C01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148F, 0x003F };
    uint32_t const ces[9] = { 0x2C01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_181)
{
    // 1148F 0061;	
    // (ëíè) TIRHUTA LETTER KA	[2C01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148F, 0x0061 };
    uint32_t const ces[9] = { 0x2C01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_182)
{
    // 1148F 0041;	
    // (ëíè) TIRHUTA LETTER KA	[2C01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1148F, 0x0041 };
    uint32_t const ces[9] = { 0x2C01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_183)
{
    // 1148F 0062;	
    // (ëíè) TIRHUTA LETTER KA	[2C01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1148F, 0x0062 };
    uint32_t const ces[9] = { 0x2C01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_184)
{
    // 11490 0021;	
    // (ëíê) TIRHUTA LETTER KHA	[2C02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11490, 0x0021 };
    uint32_t const ces[9] = { 0x2C02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_185)
{
    // 11490 003F;	
    // (ëíê) TIRHUTA LETTER KHA	[2C02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11490, 0x003F };
    uint32_t const ces[9] = { 0x2C02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_186)
{
    // 11490 0061;	
    // (ëíê) TIRHUTA LETTER KHA	[2C02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11490, 0x0061 };
    uint32_t const ces[9] = { 0x2C02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_187)
{
    // 11490 0041;	
    // (ëíê) TIRHUTA LETTER KHA	[2C02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11490, 0x0041 };
    uint32_t const ces[9] = { 0x2C02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_188)
{
    // 11490 0062;	
    // (ëíê) TIRHUTA LETTER KHA	[2C02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11490, 0x0062 };
    uint32_t const ces[9] = { 0x2C02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_189)
{
    // 11491 0021;	
    // (ëíë) TIRHUTA LETTER GA	[2C03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11491, 0x0021 };
    uint32_t const ces[9] = { 0x2C03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_190)
{
    // 11491 003F;	
    // (ëíë) TIRHUTA LETTER GA	[2C03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11491, 0x003F };
    uint32_t const ces[9] = { 0x2C03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_191)
{
    // 11491 0061;	
    // (ëíë) TIRHUTA LETTER GA	[2C03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11491, 0x0061 };
    uint32_t const ces[9] = { 0x2C03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_192)
{
    // 11491 0041;	
    // (ëíë) TIRHUTA LETTER GA	[2C03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11491, 0x0041 };
    uint32_t const ces[9] = { 0x2C03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_193)
{
    // 11491 0062;	
    // (ëíë) TIRHUTA LETTER GA	[2C03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11491, 0x0062 };
    uint32_t const ces[9] = { 0x2C03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_194)
{
    // 11492 0021;	
    // (ëíí) TIRHUTA LETTER GHA	[2C04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11492, 0x0021 };
    uint32_t const ces[9] = { 0x2C04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_195)
{
    // 11492 003F;	
    // (ëíí) TIRHUTA LETTER GHA	[2C04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11492, 0x003F };
    uint32_t const ces[9] = { 0x2C04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_196)
{
    // 11492 0061;	
    // (ëíí) TIRHUTA LETTER GHA	[2C04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11492, 0x0061 };
    uint32_t const ces[9] = { 0x2C04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_197)
{
    // 11492 0041;	
    // (ëíí) TIRHUTA LETTER GHA	[2C04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11492, 0x0041 };
    uint32_t const ces[9] = { 0x2C04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_198)
{
    // 11492 0062;	
    // (ëíí) TIRHUTA LETTER GHA	[2C04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11492, 0x0062 };
    uint32_t const ces[9] = { 0x2C04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_199)
{
    // 11493 0021;	
    // (ëíì) TIRHUTA LETTER NGA	[2C05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11493, 0x0021 };
    uint32_t const ces[9] = { 0x2C05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_200)
{
    // 11493 003F;	
    // (ëíì) TIRHUTA LETTER NGA	[2C05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11493, 0x003F };
    uint32_t const ces[9] = { 0x2C05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_201)
{
    // 11493 0061;	
    // (ëíì) TIRHUTA LETTER NGA	[2C05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11493, 0x0061 };
    uint32_t const ces[9] = { 0x2C05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_202)
{
    // 11493 0041;	
    // (ëíì) TIRHUTA LETTER NGA	[2C05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11493, 0x0041 };
    uint32_t const ces[9] = { 0x2C05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_203)
{
    // 11493 0062;	
    // (ëíì) TIRHUTA LETTER NGA	[2C05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11493, 0x0062 };
    uint32_t const ces[9] = { 0x2C05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_204)
{
    // 11494 0021;	
    // (ëíî) TIRHUTA LETTER CA	[2C06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11494, 0x0021 };
    uint32_t const ces[9] = { 0x2C06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_205)
{
    // 11494 003F;	
    // (ëíî) TIRHUTA LETTER CA	[2C06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11494, 0x003F };
    uint32_t const ces[9] = { 0x2C06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_206)
{
    // 11494 0061;	
    // (ëíî) TIRHUTA LETTER CA	[2C06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11494, 0x0061 };
    uint32_t const ces[9] = { 0x2C06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_207)
{
    // 11494 0041;	
    // (ëíî) TIRHUTA LETTER CA	[2C06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11494, 0x0041 };
    uint32_t const ces[9] = { 0x2C06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_208)
{
    // 11494 0062;	
    // (ëíî) TIRHUTA LETTER CA	[2C06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11494, 0x0062 };
    uint32_t const ces[9] = { 0x2C06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_209)
{
    // 11495 0021;	
    // (ëíï) TIRHUTA LETTER CHA	[2C07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11495, 0x0021 };
    uint32_t const ces[9] = { 0x2C07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_210)
{
    // 11495 003F;	
    // (ëíï) TIRHUTA LETTER CHA	[2C07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11495, 0x003F };
    uint32_t const ces[9] = { 0x2C07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_211)
{
    // 11495 0061;	
    // (ëíï) TIRHUTA LETTER CHA	[2C07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11495, 0x0061 };
    uint32_t const ces[9] = { 0x2C07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_212)
{
    // 11495 0041;	
    // (ëíï) TIRHUTA LETTER CHA	[2C07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11495, 0x0041 };
    uint32_t const ces[9] = { 0x2C07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_213)
{
    // 11495 0062;	
    // (ëíï) TIRHUTA LETTER CHA	[2C07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11495, 0x0062 };
    uint32_t const ces[9] = { 0x2C07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_214)
{
    // 11496 0021;	
    // (ëíñ) TIRHUTA LETTER JA	[2C08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11496, 0x0021 };
    uint32_t const ces[9] = { 0x2C08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_215)
{
    // 11496 003F;	
    // (ëíñ) TIRHUTA LETTER JA	[2C08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11496, 0x003F };
    uint32_t const ces[9] = { 0x2C08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_216)
{
    // 11496 0061;	
    // (ëíñ) TIRHUTA LETTER JA	[2C08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11496, 0x0061 };
    uint32_t const ces[9] = { 0x2C08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_217)
{
    // 11496 0041;	
    // (ëíñ) TIRHUTA LETTER JA	[2C08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11496, 0x0041 };
    uint32_t const ces[9] = { 0x2C08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_218)
{
    // 11496 0062;	
    // (ëíñ) TIRHUTA LETTER JA	[2C08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11496, 0x0062 };
    uint32_t const ces[9] = { 0x2C08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_219)
{
    // 11497 0021;	
    // (ëíó) TIRHUTA LETTER JHA	[2C09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11497, 0x0021 };
    uint32_t const ces[9] = { 0x2C09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_220)
{
    // 11497 003F;	
    // (ëíó) TIRHUTA LETTER JHA	[2C09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11497, 0x003F };
    uint32_t const ces[9] = { 0x2C09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_221)
{
    // 11497 0061;	
    // (ëíó) TIRHUTA LETTER JHA	[2C09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11497, 0x0061 };
    uint32_t const ces[9] = { 0x2C09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_222)
{
    // 11497 0041;	
    // (ëíó) TIRHUTA LETTER JHA	[2C09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11497, 0x0041 };
    uint32_t const ces[9] = { 0x2C09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_223)
{
    // 11497 0062;	
    // (ëíó) TIRHUTA LETTER JHA	[2C09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11497, 0x0062 };
    uint32_t const ces[9] = { 0x2C09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_224)
{
    // 11498 0021;	
    // (ëíò) TIRHUTA LETTER NYA	[2C0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11498, 0x0021 };
    uint32_t const ces[9] = { 0x2C0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_225)
{
    // 11498 003F;	
    // (ëíò) TIRHUTA LETTER NYA	[2C0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11498, 0x003F };
    uint32_t const ces[9] = { 0x2C0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_226)
{
    // 11498 0061;	
    // (ëíò) TIRHUTA LETTER NYA	[2C0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11498, 0x0061 };
    uint32_t const ces[9] = { 0x2C0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_227)
{
    // 11498 0041;	
    // (ëíò) TIRHUTA LETTER NYA	[2C0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11498, 0x0041 };
    uint32_t const ces[9] = { 0x2C0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_228)
{
    // 11498 0062;	
    // (ëíò) TIRHUTA LETTER NYA	[2C0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11498, 0x0062 };
    uint32_t const ces[9] = { 0x2C0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_229)
{
    // 11499 0021;	
    // (ëíô) TIRHUTA LETTER TTA	[2C0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11499, 0x0021 };
    uint32_t const ces[9] = { 0x2C0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_230)
{
    // 11499 003F;	
    // (ëíô) TIRHUTA LETTER TTA	[2C0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11499, 0x003F };
    uint32_t const ces[9] = { 0x2C0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_231)
{
    // 11499 0061;	
    // (ëíô) TIRHUTA LETTER TTA	[2C0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11499, 0x0061 };
    uint32_t const ces[9] = { 0x2C0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_232)
{
    // 11499 0041;	
    // (ëíô) TIRHUTA LETTER TTA	[2C0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11499, 0x0041 };
    uint32_t const ces[9] = { 0x2C0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_233)
{
    // 11499 0062;	
    // (ëíô) TIRHUTA LETTER TTA	[2C0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11499, 0x0062 };
    uint32_t const ces[9] = { 0x2C0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_234)
{
    // 1149A 0021;	
    // (ëíö) TIRHUTA LETTER TTHA	[2C0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149A, 0x0021 };
    uint32_t const ces[9] = { 0x2C0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_235)
{
    // 1149A 003F;	
    // (ëíö) TIRHUTA LETTER TTHA	[2C0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149A, 0x003F };
    uint32_t const ces[9] = { 0x2C0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_236)
{
    // 1149A 0061;	
    // (ëíö) TIRHUTA LETTER TTHA	[2C0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149A, 0x0061 };
    uint32_t const ces[9] = { 0x2C0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_237)
{
    // 1149A 0041;	
    // (ëíö) TIRHUTA LETTER TTHA	[2C0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1149A, 0x0041 };
    uint32_t const ces[9] = { 0x2C0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_238)
{
    // 1149A 0062;	
    // (ëíö) TIRHUTA LETTER TTHA	[2C0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149A, 0x0062 };
    uint32_t const ces[9] = { 0x2C0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_239)
{
    // 1149B 0021;	
    // (ëíõ) TIRHUTA LETTER DDA	[2C0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149B, 0x0021 };
    uint32_t const ces[9] = { 0x2C0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_240)
{
    // 1149B 003F;	
    // (ëíõ) TIRHUTA LETTER DDA	[2C0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149B, 0x003F };
    uint32_t const ces[9] = { 0x2C0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_241)
{
    // 1149B 0061;	
    // (ëíõ) TIRHUTA LETTER DDA	[2C0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149B, 0x0061 };
    uint32_t const ces[9] = { 0x2C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_242)
{
    // 1149B 0041;	
    // (ëíõ) TIRHUTA LETTER DDA	[2C0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1149B, 0x0041 };
    uint32_t const ces[9] = { 0x2C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_243)
{
    // 1149B 0062;	
    // (ëíõ) TIRHUTA LETTER DDA	[2C0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149B, 0x0062 };
    uint32_t const ces[9] = { 0x2C0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_244)
{
    // 1149C 0021;	
    // (ëíú) TIRHUTA LETTER DDHA	[2C0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149C, 0x0021 };
    uint32_t const ces[9] = { 0x2C0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_245)
{
    // 1149C 003F;	
    // (ëíú) TIRHUTA LETTER DDHA	[2C0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149C, 0x003F };
    uint32_t const ces[9] = { 0x2C0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_246)
{
    // 1149C 0061;	
    // (ëíú) TIRHUTA LETTER DDHA	[2C0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149C, 0x0061 };
    uint32_t const ces[9] = { 0x2C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_247)
{
    // 1149C 0041;	
    // (ëíú) TIRHUTA LETTER DDHA	[2C0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1149C, 0x0041 };
    uint32_t const ces[9] = { 0x2C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_248)
{
    // 1149C 0062;	
    // (ëíú) TIRHUTA LETTER DDHA	[2C0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149C, 0x0062 };
    uint32_t const ces[9] = { 0x2C0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_249)
{
    // 1149D 0021;	
    // (ëíù) TIRHUTA LETTER NNA	[2C0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149D, 0x0021 };
    uint32_t const ces[9] = { 0x2C0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_250)
{
    // 1149D 003F;	
    // (ëíù) TIRHUTA LETTER NNA	[2C0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149D, 0x003F };
    uint32_t const ces[9] = { 0x2C0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_251)
{
    // 1149D 0061;	
    // (ëíù) TIRHUTA LETTER NNA	[2C0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149D, 0x0061 };
    uint32_t const ces[9] = { 0x2C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_252)
{
    // 1149D 0041;	
    // (ëíù) TIRHUTA LETTER NNA	[2C0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1149D, 0x0041 };
    uint32_t const ces[9] = { 0x2C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_253)
{
    // 1149D 0062;	
    // (ëíù) TIRHUTA LETTER NNA	[2C0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149D, 0x0062 };
    uint32_t const ces[9] = { 0x2C0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_254)
{
    // 1149E 0021;	
    // (ëíû) TIRHUTA LETTER TA	[2C10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149E, 0x0021 };
    uint32_t const ces[9] = { 0x2C10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_255)
{
    // 1149E 003F;	
    // (ëíû) TIRHUTA LETTER TA	[2C10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149E, 0x003F };
    uint32_t const ces[9] = { 0x2C10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_256)
{
    // 1149E 0061;	
    // (ëíû) TIRHUTA LETTER TA	[2C10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149E, 0x0061 };
    uint32_t const ces[9] = { 0x2C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_257)
{
    // 1149E 0041;	
    // (ëíû) TIRHUTA LETTER TA	[2C10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1149E, 0x0041 };
    uint32_t const ces[9] = { 0x2C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_258)
{
    // 1149E 0062;	
    // (ëíû) TIRHUTA LETTER TA	[2C10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149E, 0x0062 };
    uint32_t const ces[9] = { 0x2C10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_259)
{
    // 1149F 0021;	
    // (ëíü) TIRHUTA LETTER THA	[2C11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149F, 0x0021 };
    uint32_t const ces[9] = { 0x2C11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_260)
{
    // 1149F 003F;	
    // (ëíü) TIRHUTA LETTER THA	[2C11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149F, 0x003F };
    uint32_t const ces[9] = { 0x2C11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_261)
{
    // 1149F 0061;	
    // (ëíü) TIRHUTA LETTER THA	[2C11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149F, 0x0061 };
    uint32_t const ces[9] = { 0x2C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_262)
{
    // 1149F 0041;	
    // (ëíü) TIRHUTA LETTER THA	[2C11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1149F, 0x0041 };
    uint32_t const ces[9] = { 0x2C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_263)
{
    // 1149F 0062;	
    // (ëíü) TIRHUTA LETTER THA	[2C11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1149F, 0x0062 };
    uint32_t const ces[9] = { 0x2C11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_264)
{
    // 114A0 0021;	
    // (ëí†) TIRHUTA LETTER DA	[2C12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A0, 0x0021 };
    uint32_t const ces[9] = { 0x2C12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_265)
{
    // 114A0 003F;	
    // (ëí†) TIRHUTA LETTER DA	[2C12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A0, 0x003F };
    uint32_t const ces[9] = { 0x2C12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_266)
{
    // 114A0 0061;	
    // (ëí†) TIRHUTA LETTER DA	[2C12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A0, 0x0061 };
    uint32_t const ces[9] = { 0x2C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_267)
{
    // 114A0 0041;	
    // (ëí†) TIRHUTA LETTER DA	[2C12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A0, 0x0041 };
    uint32_t const ces[9] = { 0x2C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_268)
{
    // 114A0 0062;	
    // (ëí†) TIRHUTA LETTER DA	[2C12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A0, 0x0062 };
    uint32_t const ces[9] = { 0x2C12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_269)
{
    // 114A1 0021;	
    // (ëí°) TIRHUTA LETTER DHA	[2C13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A1, 0x0021 };
    uint32_t const ces[9] = { 0x2C13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_270)
{
    // 114A1 003F;	
    // (ëí°) TIRHUTA LETTER DHA	[2C13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A1, 0x003F };
    uint32_t const ces[9] = { 0x2C13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_271)
{
    // 114A1 0061;	
    // (ëí°) TIRHUTA LETTER DHA	[2C13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A1, 0x0061 };
    uint32_t const ces[9] = { 0x2C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_272)
{
    // 114A1 0041;	
    // (ëí°) TIRHUTA LETTER DHA	[2C13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A1, 0x0041 };
    uint32_t const ces[9] = { 0x2C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_273)
{
    // 114A1 0062;	
    // (ëí°) TIRHUTA LETTER DHA	[2C13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A1, 0x0062 };
    uint32_t const ces[9] = { 0x2C13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_274)
{
    // 114A2 0021;	
    // (ëí¢) TIRHUTA LETTER NA	[2C14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A2, 0x0021 };
    uint32_t const ces[9] = { 0x2C14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_275)
{
    // 114A2 003F;	
    // (ëí¢) TIRHUTA LETTER NA	[2C14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A2, 0x003F };
    uint32_t const ces[9] = { 0x2C14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_276)
{
    // 114A2 0061;	
    // (ëí¢) TIRHUTA LETTER NA	[2C14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A2, 0x0061 };
    uint32_t const ces[9] = { 0x2C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_277)
{
    // 114A2 0041;	
    // (ëí¢) TIRHUTA LETTER NA	[2C14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A2, 0x0041 };
    uint32_t const ces[9] = { 0x2C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_278)
{
    // 114A2 0062;	
    // (ëí¢) TIRHUTA LETTER NA	[2C14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A2, 0x0062 };
    uint32_t const ces[9] = { 0x2C14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_279)
{
    // 114A3 0021;	
    // (ëí£) TIRHUTA LETTER PA	[2C15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A3, 0x0021 };
    uint32_t const ces[9] = { 0x2C15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_280)
{
    // 114A3 003F;	
    // (ëí£) TIRHUTA LETTER PA	[2C15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A3, 0x003F };
    uint32_t const ces[9] = { 0x2C15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_281)
{
    // 114A3 0061;	
    // (ëí£) TIRHUTA LETTER PA	[2C15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A3, 0x0061 };
    uint32_t const ces[9] = { 0x2C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_282)
{
    // 114A3 0041;	
    // (ëí£) TIRHUTA LETTER PA	[2C15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A3, 0x0041 };
    uint32_t const ces[9] = { 0x2C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_283)
{
    // 114A3 0062;	
    // (ëí£) TIRHUTA LETTER PA	[2C15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A3, 0x0062 };
    uint32_t const ces[9] = { 0x2C15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_284)
{
    // 114A4 0021;	
    // (ëí§) TIRHUTA LETTER PHA	[2C16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A4, 0x0021 };
    uint32_t const ces[9] = { 0x2C16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_285)
{
    // 114A4 003F;	
    // (ëí§) TIRHUTA LETTER PHA	[2C16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A4, 0x003F };
    uint32_t const ces[9] = { 0x2C16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_286)
{
    // 114A4 0061;	
    // (ëí§) TIRHUTA LETTER PHA	[2C16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A4, 0x0061 };
    uint32_t const ces[9] = { 0x2C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_287)
{
    // 114A4 0041;	
    // (ëí§) TIRHUTA LETTER PHA	[2C16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A4, 0x0041 };
    uint32_t const ces[9] = { 0x2C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_288)
{
    // 114A4 0062;	
    // (ëí§) TIRHUTA LETTER PHA	[2C16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A4, 0x0062 };
    uint32_t const ces[9] = { 0x2C16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_289)
{
    // 114A5 0021;	
    // (ëí•) TIRHUTA LETTER BA	[2C17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A5, 0x0021 };
    uint32_t const ces[9] = { 0x2C17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_290)
{
    // 114A5 003F;	
    // (ëí•) TIRHUTA LETTER BA	[2C17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A5, 0x003F };
    uint32_t const ces[9] = { 0x2C17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_291)
{
    // 114A5 0061;	
    // (ëí•) TIRHUTA LETTER BA	[2C17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A5, 0x0061 };
    uint32_t const ces[9] = { 0x2C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_292)
{
    // 114A5 0041;	
    // (ëí•) TIRHUTA LETTER BA	[2C17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A5, 0x0041 };
    uint32_t const ces[9] = { 0x2C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_293)
{
    // 114A5 0062;	
    // (ëí•) TIRHUTA LETTER BA	[2C17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A5, 0x0062 };
    uint32_t const ces[9] = { 0x2C17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_294)
{
    // 114A6 0021;	
    // (ëí¶) TIRHUTA LETTER BHA	[2C18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A6, 0x0021 };
    uint32_t const ces[9] = { 0x2C18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_295)
{
    // 114A6 003F;	
    // (ëí¶) TIRHUTA LETTER BHA	[2C18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A6, 0x003F };
    uint32_t const ces[9] = { 0x2C18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_296)
{
    // 114A6 0061;	
    // (ëí¶) TIRHUTA LETTER BHA	[2C18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A6, 0x0061 };
    uint32_t const ces[9] = { 0x2C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_297)
{
    // 114A6 0041;	
    // (ëí¶) TIRHUTA LETTER BHA	[2C18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A6, 0x0041 };
    uint32_t const ces[9] = { 0x2C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_298)
{
    // 114A6 0062;	
    // (ëí¶) TIRHUTA LETTER BHA	[2C18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A6, 0x0062 };
    uint32_t const ces[9] = { 0x2C18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_299)
{
    // 114A7 0021;	
    // (ëíß) TIRHUTA LETTER MA	[2C19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A7, 0x0021 };
    uint32_t const ces[9] = { 0x2C19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_300)
{
    // 114A7 003F;	
    // (ëíß) TIRHUTA LETTER MA	[2C19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A7, 0x003F };
    uint32_t const ces[9] = { 0x2C19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_301)
{
    // 114A7 0061;	
    // (ëíß) TIRHUTA LETTER MA	[2C19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A7, 0x0061 };
    uint32_t const ces[9] = { 0x2C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_302)
{
    // 114A7 0041;	
    // (ëíß) TIRHUTA LETTER MA	[2C19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A7, 0x0041 };
    uint32_t const ces[9] = { 0x2C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_303)
{
    // 114A7 0062;	
    // (ëíß) TIRHUTA LETTER MA	[2C19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A7, 0x0062 };
    uint32_t const ces[9] = { 0x2C19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_304)
{
    // 114A8 0021;	
    // (ëí®) TIRHUTA LETTER YA	[2C1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A8, 0x0021 };
    uint32_t const ces[9] = { 0x2C1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_305)
{
    // 114A8 003F;	
    // (ëí®) TIRHUTA LETTER YA	[2C1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A8, 0x003F };
    uint32_t const ces[9] = { 0x2C1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_306)
{
    // 114A8 0061;	
    // (ëí®) TIRHUTA LETTER YA	[2C1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A8, 0x0061 };
    uint32_t const ces[9] = { 0x2C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_307)
{
    // 114A8 0041;	
    // (ëí®) TIRHUTA LETTER YA	[2C1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A8, 0x0041 };
    uint32_t const ces[9] = { 0x2C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_308)
{
    // 114A8 0062;	
    // (ëí®) TIRHUTA LETTER YA	[2C1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A8, 0x0062 };
    uint32_t const ces[9] = { 0x2C1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_309)
{
    // 114A9 0021;	
    // (ëí©) TIRHUTA LETTER RA	[2C1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A9, 0x0021 };
    uint32_t const ces[9] = { 0x2C1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_310)
{
    // 114A9 003F;	
    // (ëí©) TIRHUTA LETTER RA	[2C1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A9, 0x003F };
    uint32_t const ces[9] = { 0x2C1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_311)
{
    // 114A9 0061;	
    // (ëí©) TIRHUTA LETTER RA	[2C1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A9, 0x0061 };
    uint32_t const ces[9] = { 0x2C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_312)
{
    // 114A9 0041;	
    // (ëí©) TIRHUTA LETTER RA	[2C1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114A9, 0x0041 };
    uint32_t const ces[9] = { 0x2C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_313)
{
    // 114A9 0062;	
    // (ëí©) TIRHUTA LETTER RA	[2C1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114A9, 0x0062 };
    uint32_t const ces[9] = { 0x2C1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_314)
{
    // 114AA 0021;	
    // (ëí™) TIRHUTA LETTER LA	[2C1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AA, 0x0021 };
    uint32_t const ces[9] = { 0x2C1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_315)
{
    // 114AA 003F;	
    // (ëí™) TIRHUTA LETTER LA	[2C1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AA, 0x003F };
    uint32_t const ces[9] = { 0x2C1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_316)
{
    // 114AA 0061;	
    // (ëí™) TIRHUTA LETTER LA	[2C1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AA, 0x0061 };
    uint32_t const ces[9] = { 0x2C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_317)
{
    // 114AA 0041;	
    // (ëí™) TIRHUTA LETTER LA	[2C1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114AA, 0x0041 };
    uint32_t const ces[9] = { 0x2C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_318)
{
    // 114AA 0062;	
    // (ëí™) TIRHUTA LETTER LA	[2C1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AA, 0x0062 };
    uint32_t const ces[9] = { 0x2C1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_319)
{
    // 114AB 0021;	
    // (ëí´) TIRHUTA LETTER VA	[2C1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AB, 0x0021 };
    uint32_t const ces[9] = { 0x2C1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_320)
{
    // 114AB 003F;	
    // (ëí´) TIRHUTA LETTER VA	[2C1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AB, 0x003F };
    uint32_t const ces[9] = { 0x2C1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_321)
{
    // 114AB 0061;	
    // (ëí´) TIRHUTA LETTER VA	[2C1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AB, 0x0061 };
    uint32_t const ces[9] = { 0x2C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_322)
{
    // 114AB 0041;	
    // (ëí´) TIRHUTA LETTER VA	[2C1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114AB, 0x0041 };
    uint32_t const ces[9] = { 0x2C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_323)
{
    // 114AB 0062;	
    // (ëí´) TIRHUTA LETTER VA	[2C1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AB, 0x0062 };
    uint32_t const ces[9] = { 0x2C1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_324)
{
    // 114AC 0021;	
    // (ëí¨) TIRHUTA LETTER SHA	[2C1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AC, 0x0021 };
    uint32_t const ces[9] = { 0x2C1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_325)
{
    // 114AC 003F;	
    // (ëí¨) TIRHUTA LETTER SHA	[2C1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AC, 0x003F };
    uint32_t const ces[9] = { 0x2C1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_326)
{
    // 114AC 0061;	
    // (ëí¨) TIRHUTA LETTER SHA	[2C1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AC, 0x0061 };
    uint32_t const ces[9] = { 0x2C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_327)
{
    // 114AC 0041;	
    // (ëí¨) TIRHUTA LETTER SHA	[2C1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114AC, 0x0041 };
    uint32_t const ces[9] = { 0x2C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_328)
{
    // 114AC 0062;	
    // (ëí¨) TIRHUTA LETTER SHA	[2C1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AC, 0x0062 };
    uint32_t const ces[9] = { 0x2C1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_329)
{
    // 114AD 0021;	
    // (ëí≠) TIRHUTA LETTER SSA	[2C1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AD, 0x0021 };
    uint32_t const ces[9] = { 0x2C1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_330)
{
    // 114AD 003F;	
    // (ëí≠) TIRHUTA LETTER SSA	[2C1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AD, 0x003F };
    uint32_t const ces[9] = { 0x2C1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_331)
{
    // 114AD 0061;	
    // (ëí≠) TIRHUTA LETTER SSA	[2C1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AD, 0x0061 };
    uint32_t const ces[9] = { 0x2C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_332)
{
    // 114AD 0041;	
    // (ëí≠) TIRHUTA LETTER SSA	[2C1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114AD, 0x0041 };
    uint32_t const ces[9] = { 0x2C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_333)
{
    // 114AD 0062;	
    // (ëí≠) TIRHUTA LETTER SSA	[2C1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AD, 0x0062 };
    uint32_t const ces[9] = { 0x2C1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_334)
{
    // 114AE 0021;	
    // (ëíÆ) TIRHUTA LETTER SA	[2C20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AE, 0x0021 };
    uint32_t const ces[9] = { 0x2C20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_335)
{
    // 114AE 003F;	
    // (ëíÆ) TIRHUTA LETTER SA	[2C20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AE, 0x003F };
    uint32_t const ces[9] = { 0x2C20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_336)
{
    // 114AE 0061;	
    // (ëíÆ) TIRHUTA LETTER SA	[2C20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AE, 0x0061 };
    uint32_t const ces[9] = { 0x2C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_337)
{
    // 114AE 0041;	
    // (ëíÆ) TIRHUTA LETTER SA	[2C20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114AE, 0x0041 };
    uint32_t const ces[9] = { 0x2C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_338)
{
    // 114AE 0062;	
    // (ëíÆ) TIRHUTA LETTER SA	[2C20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AE, 0x0062 };
    uint32_t const ces[9] = { 0x2C20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_339)
{
    // 114AF 0021;	
    // (ëíØ) TIRHUTA LETTER HA	[2C21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AF, 0x0021 };
    uint32_t const ces[9] = { 0x2C21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_340)
{
    // 114AF 003F;	
    // (ëíØ) TIRHUTA LETTER HA	[2C21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AF, 0x003F };
    uint32_t const ces[9] = { 0x2C21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_341)
{
    // 114AF 0061;	
    // (ëíØ) TIRHUTA LETTER HA	[2C21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AF, 0x0061 };
    uint32_t const ces[9] = { 0x2C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_342)
{
    // 114AF 0041;	
    // (ëíØ) TIRHUTA LETTER HA	[2C21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114AF, 0x0041 };
    uint32_t const ces[9] = { 0x2C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_343)
{
    // 114AF 0062;	
    // (ëíØ) TIRHUTA LETTER HA	[2C21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114AF, 0x0062 };
    uint32_t const ces[9] = { 0x2C21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_344)
{
    // 114C4 0021;	
    // (ëìÑ) TIRHUTA SIGN AVAGRAHA	[2C22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C4, 0x0021 };
    uint32_t const ces[9] = { 0x2C22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_345)
{
    // 114C4 003F;	
    // (ëìÑ) TIRHUTA SIGN AVAGRAHA	[2C22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C4, 0x003F };
    uint32_t const ces[9] = { 0x2C22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_346)
{
    // 114C4 0061;	
    // (ëìÑ) TIRHUTA SIGN AVAGRAHA	[2C22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C4, 0x0061 };
    uint32_t const ces[9] = { 0x2C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_347)
{
    // 114C4 0041;	
    // (ëìÑ) TIRHUTA SIGN AVAGRAHA	[2C22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114C4, 0x0041 };
    uint32_t const ces[9] = { 0x2C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_348)
{
    // 114C4 0062;	
    // (ëìÑ) TIRHUTA SIGN AVAGRAHA	[2C22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C4, 0x0062 };
    uint32_t const ces[9] = { 0x2C22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_349)
{
    // 114C5 0021;	
    // (ëìÖ) TIRHUTA GVANG	[2C23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C5, 0x0021 };
    uint32_t const ces[9] = { 0x2C23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_350)
{
    // 114C5 003F;	
    // (ëìÖ) TIRHUTA GVANG	[2C23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C5, 0x003F };
    uint32_t const ces[9] = { 0x2C23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_351)
{
    // 114C5 0061;	
    // (ëìÖ) TIRHUTA GVANG	[2C23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C5, 0x0061 };
    uint32_t const ces[9] = { 0x2C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_352)
{
    // 114C5 0041;	
    // (ëìÖ) TIRHUTA GVANG	[2C23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114C5, 0x0041 };
    uint32_t const ces[9] = { 0x2C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_353)
{
    // 114C5 0062;	
    // (ëìÖ) TIRHUTA GVANG	[2C23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C5, 0x0062 };
    uint32_t const ces[9] = { 0x2C23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_354)
{
    // 114B0 0021;	
    // (ëí∞) TIRHUTA VOWEL SIGN AA	[2C24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B0, 0x0021 };
    uint32_t const ces[9] = { 0x2C24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_355)
{
    // 114B0 003F;	
    // (ëí∞) TIRHUTA VOWEL SIGN AA	[2C24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B0, 0x003F };
    uint32_t const ces[9] = { 0x2C24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_356)
{
    // 114B0 0061;	
    // (ëí∞) TIRHUTA VOWEL SIGN AA	[2C24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B0, 0x0061 };
    uint32_t const ces[9] = { 0x2C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_357)
{
    // 114B0 0041;	
    // (ëí∞) TIRHUTA VOWEL SIGN AA	[2C24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B0, 0x0041 };
    uint32_t const ces[9] = { 0x2C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_358)
{
    // 114B0 0062;	
    // (ëí∞) TIRHUTA VOWEL SIGN AA	[2C24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B0, 0x0062 };
    uint32_t const ces[9] = { 0x2C24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_359)
{
    // 114B1 0021;	
    // (ëí±) TIRHUTA VOWEL SIGN I	[2C25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B1, 0x0021 };
    uint32_t const ces[9] = { 0x2C25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_360)
{
    // 114B1 003F;	
    // (ëí±) TIRHUTA VOWEL SIGN I	[2C25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B1, 0x003F };
    uint32_t const ces[9] = { 0x2C25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_361)
{
    // 114B1 0061;	
    // (ëí±) TIRHUTA VOWEL SIGN I	[2C25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B1, 0x0061 };
    uint32_t const ces[9] = { 0x2C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_362)
{
    // 114B1 0041;	
    // (ëí±) TIRHUTA VOWEL SIGN I	[2C25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B1, 0x0041 };
    uint32_t const ces[9] = { 0x2C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_363)
{
    // 114B1 0062;	
    // (ëí±) TIRHUTA VOWEL SIGN I	[2C25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B1, 0x0062 };
    uint32_t const ces[9] = { 0x2C25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_364)
{
    // 114B2 0021;	
    // (ëí≤) TIRHUTA VOWEL SIGN II	[2C26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B2, 0x0021 };
    uint32_t const ces[9] = { 0x2C26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_365)
{
    // 114B2 003F;	
    // (ëí≤) TIRHUTA VOWEL SIGN II	[2C26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B2, 0x003F };
    uint32_t const ces[9] = { 0x2C26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_366)
{
    // 114B2 0061;	
    // (ëí≤) TIRHUTA VOWEL SIGN II	[2C26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B2, 0x0061 };
    uint32_t const ces[9] = { 0x2C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_367)
{
    // 114B2 0041;	
    // (ëí≤) TIRHUTA VOWEL SIGN II	[2C26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B2, 0x0041 };
    uint32_t const ces[9] = { 0x2C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_368)
{
    // 114B2 0062;	
    // (ëí≤) TIRHUTA VOWEL SIGN II	[2C26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B2, 0x0062 };
    uint32_t const ces[9] = { 0x2C26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_369)
{
    // 114B3 0021;	
    // (ëí≥) TIRHUTA VOWEL SIGN U	[2C27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B3, 0x0021 };
    uint32_t const ces[9] = { 0x2C27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_370)
{
    // 114B3 003F;	
    // (ëí≥) TIRHUTA VOWEL SIGN U	[2C27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B3, 0x003F };
    uint32_t const ces[9] = { 0x2C27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_371)
{
    // 114B3 0061;	
    // (ëí≥) TIRHUTA VOWEL SIGN U	[2C27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B3, 0x0061 };
    uint32_t const ces[9] = { 0x2C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_372)
{
    // 114B3 0041;	
    // (ëí≥) TIRHUTA VOWEL SIGN U	[2C27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B3, 0x0041 };
    uint32_t const ces[9] = { 0x2C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_373)
{
    // 114B3 0062;	
    // (ëí≥) TIRHUTA VOWEL SIGN U	[2C27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B3, 0x0062 };
    uint32_t const ces[9] = { 0x2C27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_374)
{
    // 114B4 0021;	
    // (ëí¥) TIRHUTA VOWEL SIGN UU	[2C28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B4, 0x0021 };
    uint32_t const ces[9] = { 0x2C28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_375)
{
    // 114B4 003F;	
    // (ëí¥) TIRHUTA VOWEL SIGN UU	[2C28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B4, 0x003F };
    uint32_t const ces[9] = { 0x2C28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_376)
{
    // 114B4 0061;	
    // (ëí¥) TIRHUTA VOWEL SIGN UU	[2C28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B4, 0x0061 };
    uint32_t const ces[9] = { 0x2C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_377)
{
    // 114B4 0041;	
    // (ëí¥) TIRHUTA VOWEL SIGN UU	[2C28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B4, 0x0041 };
    uint32_t const ces[9] = { 0x2C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_378)
{
    // 114B4 0062;	
    // (ëí¥) TIRHUTA VOWEL SIGN UU	[2C28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B4, 0x0062 };
    uint32_t const ces[9] = { 0x2C28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_379)
{
    // 114B5 0021;	
    // (ëíµ) TIRHUTA VOWEL SIGN VOCALIC R	[2C29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B5, 0x0021 };
    uint32_t const ces[9] = { 0x2C29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_380)
{
    // 114B5 003F;	
    // (ëíµ) TIRHUTA VOWEL SIGN VOCALIC R	[2C29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B5, 0x003F };
    uint32_t const ces[9] = { 0x2C29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_381)
{
    // 114B5 0061;	
    // (ëíµ) TIRHUTA VOWEL SIGN VOCALIC R	[2C29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B5, 0x0061 };
    uint32_t const ces[9] = { 0x2C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_382)
{
    // 114B5 0041;	
    // (ëíµ) TIRHUTA VOWEL SIGN VOCALIC R	[2C29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B5, 0x0041 };
    uint32_t const ces[9] = { 0x2C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_383)
{
    // 114B5 0062;	
    // (ëíµ) TIRHUTA VOWEL SIGN VOCALIC R	[2C29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B5, 0x0062 };
    uint32_t const ces[9] = { 0x2C29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_384)
{
    // 114B6 0021;	
    // (ëí∂) TIRHUTA VOWEL SIGN VOCALIC RR	[2C2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B6, 0x0021 };
    uint32_t const ces[9] = { 0x2C2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_385)
{
    // 114B6 003F;	
    // (ëí∂) TIRHUTA VOWEL SIGN VOCALIC RR	[2C2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B6, 0x003F };
    uint32_t const ces[9] = { 0x2C2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_386)
{
    // 114B6 0061;	
    // (ëí∂) TIRHUTA VOWEL SIGN VOCALIC RR	[2C2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B6, 0x0061 };
    uint32_t const ces[9] = { 0x2C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_387)
{
    // 114B6 0041;	
    // (ëí∂) TIRHUTA VOWEL SIGN VOCALIC RR	[2C2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B6, 0x0041 };
    uint32_t const ces[9] = { 0x2C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_388)
{
    // 114B6 0062;	
    // (ëí∂) TIRHUTA VOWEL SIGN VOCALIC RR	[2C2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B6, 0x0062 };
    uint32_t const ces[9] = { 0x2C2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_389)
{
    // 114B7 0021;	
    // (ëí∑) TIRHUTA VOWEL SIGN VOCALIC L	[2C2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B7, 0x0021 };
    uint32_t const ces[9] = { 0x2C2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_390)
{
    // 114B7 003F;	
    // (ëí∑) TIRHUTA VOWEL SIGN VOCALIC L	[2C2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B7, 0x003F };
    uint32_t const ces[9] = { 0x2C2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_391)
{
    // 114B7 0061;	
    // (ëí∑) TIRHUTA VOWEL SIGN VOCALIC L	[2C2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B7, 0x0061 };
    uint32_t const ces[9] = { 0x2C2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_392)
{
    // 114B7 0041;	
    // (ëí∑) TIRHUTA VOWEL SIGN VOCALIC L	[2C2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B7, 0x0041 };
    uint32_t const ces[9] = { 0x2C2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_393)
{
    // 114B7 0062;	
    // (ëí∑) TIRHUTA VOWEL SIGN VOCALIC L	[2C2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B7, 0x0062 };
    uint32_t const ces[9] = { 0x2C2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_394)
{
    // 114B8 0021;	
    // (ëí∏) TIRHUTA VOWEL SIGN VOCALIC LL	[2C2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B8, 0x0021 };
    uint32_t const ces[9] = { 0x2C2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_395)
{
    // 114B8 003F;	
    // (ëí∏) TIRHUTA VOWEL SIGN VOCALIC LL	[2C2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B8, 0x003F };
    uint32_t const ces[9] = { 0x2C2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_396)
{
    // 114B8 0061;	
    // (ëí∏) TIRHUTA VOWEL SIGN VOCALIC LL	[2C2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B8, 0x0061 };
    uint32_t const ces[9] = { 0x2C2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_397)
{
    // 114B8 0041;	
    // (ëí∏) TIRHUTA VOWEL SIGN VOCALIC LL	[2C2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B8, 0x0041 };
    uint32_t const ces[9] = { 0x2C2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_398)
{
    // 114B8 0062;	
    // (ëí∏) TIRHUTA VOWEL SIGN VOCALIC LL	[2C2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B8, 0x0062 };
    uint32_t const ces[9] = { 0x2C2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_399)
{
    // 114B9 0021;	
    // (ëíπ) TIRHUTA VOWEL SIGN E	[2C2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B9, 0x0021 };
    uint32_t const ces[9] = { 0x2C2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_400)
{
    // 114B9 003F;	
    // (ëíπ) TIRHUTA VOWEL SIGN E	[2C2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B9, 0x003F };
    uint32_t const ces[9] = { 0x2C2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_401)
{
    // 114B9 0061;	
    // (ëíπ) TIRHUTA VOWEL SIGN E	[2C2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B9, 0x0061 };
    uint32_t const ces[9] = { 0x2C2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_402)
{
    // 114B9 0041;	
    // (ëíπ) TIRHUTA VOWEL SIGN E	[2C2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114B9, 0x0041 };
    uint32_t const ces[9] = { 0x2C2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_403)
{
    // 114B9 0062;	
    // (ëíπ) TIRHUTA VOWEL SIGN E	[2C2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114B9, 0x0062 };
    uint32_t const ces[9] = { 0x2C2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_404)
{
    // 114B9 0001 114B0 0061;	
    // (ëíπ'\u0001'ëí∞) TIRHUTA VOWEL SIGN E, <START OF HEADING>, TIRHUTA VOWEL SIGN AA	[2C2D 2C24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x0001, 0x114B0, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_405)
{
    // 114B9 0591 114B0 0061;	
    // (ëíπ÷ëëí∞) TIRHUTA VOWEL SIGN E, HEBREW ACCENT ETNAHTA, TIRHUTA VOWEL SIGN AA	[2C2D 2C24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x0591, 0x114B0, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_406)
{
    // 114B9 1D165 114B0 0061;	
    // (ëíπùÖ•ëí∞) TIRHUTA VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, TIRHUTA VOWEL SIGN AA	[2C2D 2C24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x1D165, 0x114B0, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_407)
{
    // 114B9 0001 114BA 0061;	
    // (ëíπ'\u0001'ëí∫) TIRHUTA VOWEL SIGN E, <START OF HEADING>, TIRHUTA VOWEL SIGN SHORT E	[2C2D 2C2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x0001, 0x114BA, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_408)
{
    // 114B9 0591 114BA 0061;	
    // (ëíπ÷ëëí∫) TIRHUTA VOWEL SIGN E, HEBREW ACCENT ETNAHTA, TIRHUTA VOWEL SIGN SHORT E	[2C2D 2C2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x0591, 0x114BA, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_409)
{
    // 114B9 1D165 114BA 0061;	
    // (ëíπùÖ•ëí∫) TIRHUTA VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, TIRHUTA VOWEL SIGN SHORT E	[2C2D 2C2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x1D165, 0x114BA, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_410)
{
    // 114B9 0001 114BD 0061;	
    // (ëíπ'\u0001'ëíΩ) TIRHUTA VOWEL SIGN E, <START OF HEADING>, TIRHUTA VOWEL SIGN SHORT O	[2C2D 2C31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x0001, 0x114BD, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_411)
{
    // 114B9 0591 114BD 0061;	
    // (ëíπ÷ëëíΩ) TIRHUTA VOWEL SIGN E, HEBREW ACCENT ETNAHTA, TIRHUTA VOWEL SIGN SHORT O	[2C2D 2C31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x0591, 0x114BD, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_412)
{
    // 114B9 1D165 114BD 0061;	
    // (ëíπùÖ•ëíΩ) TIRHUTA VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, TIRHUTA VOWEL SIGN SHORT O	[2C2D 2C31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x114B9, 0x1D165, 0x114BD, 0x0061 };
    uint32_t const ces[12] = { 0x2C2D, 0x2C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_413)
{
    // 114BA 0021;	
    // (ëí∫) TIRHUTA VOWEL SIGN SHORT E	[2C2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BA, 0x0021 };
    uint32_t const ces[9] = { 0x2C2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_414)
{
    // 114BA 003F;	
    // (ëí∫) TIRHUTA VOWEL SIGN SHORT E	[2C2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BA, 0x003F };
    uint32_t const ces[9] = { 0x2C2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_415)
{
    // 114BA 0061;	
    // (ëí∫) TIRHUTA VOWEL SIGN SHORT E	[2C2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BA, 0x0061 };
    uint32_t const ces[9] = { 0x2C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_416)
{
    // 114BA 0041;	
    // (ëí∫) TIRHUTA VOWEL SIGN SHORT E	[2C2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114BA, 0x0041 };
    uint32_t const ces[9] = { 0x2C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_417)
{
    // 114BA 0062;	
    // (ëí∫) TIRHUTA VOWEL SIGN SHORT E	[2C2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BA, 0x0062 };
    uint32_t const ces[9] = { 0x2C2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_418)
{
    // 114B9 114BA 0021;	
    // (ëíª) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT E	[2C2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114BA, 0x0021 };
    uint32_t const ces[9] = { 0x2C2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_419)
{
    // 114BB 0021;	
    // (ëíª) TIRHUTA VOWEL SIGN AI	[2C2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BB, 0x0021 };
    uint32_t const ces[9] = { 0x2C2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_420)
{
    // 114B9 114BA 003F;	
    // (ëíª) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT E	[2C2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114BA, 0x003F };
    uint32_t const ces[9] = { 0x2C2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_421)
{
    // 114BB 003F;	
    // (ëíª) TIRHUTA VOWEL SIGN AI	[2C2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BB, 0x003F };
    uint32_t const ces[9] = { 0x2C2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_422)
{
    // 114B9 114BA 0061;	
    // (ëíª) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT E	[2C2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114BA, 0x0061 };
    uint32_t const ces[9] = { 0x2C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_423)
{
    // 114BB 0061;	
    // (ëíª) TIRHUTA VOWEL SIGN AI	[2C2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BB, 0x0061 };
    uint32_t const ces[9] = { 0x2C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_424)
{
    // 114B9 114BA 0041;	
    // (ëíª) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT E	[2C2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x114B9, 0x114BA, 0x0041 };
    uint32_t const ces[9] = { 0x2C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_425)
{
    // 114BB 0041;	
    // (ëíª) TIRHUTA VOWEL SIGN AI	[2C2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114BB, 0x0041 };
    uint32_t const ces[9] = { 0x2C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_426)
{
    // 114B9 114BA 0062;	
    // (ëíª) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT E	[2C2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114BA, 0x0062 };
    uint32_t const ces[9] = { 0x2C2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_427)
{
    // 114BB 0062;	
    // (ëíª) TIRHUTA VOWEL SIGN AI	[2C2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BB, 0x0062 };
    uint32_t const ces[9] = { 0x2C2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_428)
{
    // 114B9 114B0 0021;	
    // (ëíº) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN AA	[2C30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114B0, 0x0021 };
    uint32_t const ces[9] = { 0x2C30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_429)
{
    // 114BC 0021;	
    // (ëíº) TIRHUTA VOWEL SIGN O	[2C30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BC, 0x0021 };
    uint32_t const ces[9] = { 0x2C30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_430)
{
    // 114B9 114B0 003F;	
    // (ëíº) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN AA	[2C30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114B0, 0x003F };
    uint32_t const ces[9] = { 0x2C30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_431)
{
    // 114BC 003F;	
    // (ëíº) TIRHUTA VOWEL SIGN O	[2C30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BC, 0x003F };
    uint32_t const ces[9] = { 0x2C30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_432)
{
    // 114B9 114B0 0061;	
    // (ëíº) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN AA	[2C30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114B0, 0x0061 };
    uint32_t const ces[9] = { 0x2C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_433)
{
    // 114BC 0061;	
    // (ëíº) TIRHUTA VOWEL SIGN O	[2C30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BC, 0x0061 };
    uint32_t const ces[9] = { 0x2C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_434)
{
    // 114B9 114B0 0041;	
    // (ëíº) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN AA	[2C30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x114B9, 0x114B0, 0x0041 };
    uint32_t const ces[9] = { 0x2C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_435)
{
    // 114BC 0041;	
    // (ëíº) TIRHUTA VOWEL SIGN O	[2C30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114BC, 0x0041 };
    uint32_t const ces[9] = { 0x2C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_436)
{
    // 114B9 114B0 0062;	
    // (ëíº) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN AA	[2C30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114B0, 0x0062 };
    uint32_t const ces[9] = { 0x2C30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_437)
{
    // 114BC 0062;	
    // (ëíº) TIRHUTA VOWEL SIGN O	[2C30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BC, 0x0062 };
    uint32_t const ces[9] = { 0x2C30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_438)
{
    // 114BD 0021;	
    // (ëíΩ) TIRHUTA VOWEL SIGN SHORT O	[2C31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BD, 0x0021 };
    uint32_t const ces[9] = { 0x2C31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_439)
{
    // 114BD 003F;	
    // (ëíΩ) TIRHUTA VOWEL SIGN SHORT O	[2C31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BD, 0x003F };
    uint32_t const ces[9] = { 0x2C31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_440)
{
    // 114BD 0061;	
    // (ëíΩ) TIRHUTA VOWEL SIGN SHORT O	[2C31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BD, 0x0061 };
    uint32_t const ces[9] = { 0x2C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_441)
{
    // 114BD 0041;	
    // (ëíΩ) TIRHUTA VOWEL SIGN SHORT O	[2C31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114BD, 0x0041 };
    uint32_t const ces[9] = { 0x2C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_442)
{
    // 114BD 0062;	
    // (ëíΩ) TIRHUTA VOWEL SIGN SHORT O	[2C31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BD, 0x0062 };
    uint32_t const ces[9] = { 0x2C31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_443)
{
    // 114B9 114BD 0021;	
    // (ëíæ) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT O	[2C32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114BD, 0x0021 };
    uint32_t const ces[9] = { 0x2C32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_444)
{
    // 114BE 0021;	
    // (ëíæ) TIRHUTA VOWEL SIGN AU	[2C32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BE, 0x0021 };
    uint32_t const ces[9] = { 0x2C32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_445)
{
    // 114B9 114BD 003F;	
    // (ëíæ) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT O	[2C32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114BD, 0x003F };
    uint32_t const ces[9] = { 0x2C32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_446)
{
    // 114BE 003F;	
    // (ëíæ) TIRHUTA VOWEL SIGN AU	[2C32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BE, 0x003F };
    uint32_t const ces[9] = { 0x2C32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_447)
{
    // 114B9 114BD 0061;	
    // (ëíæ) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT O	[2C32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114BD, 0x0061 };
    uint32_t const ces[9] = { 0x2C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_448)
{
    // 114BE 0061;	
    // (ëíæ) TIRHUTA VOWEL SIGN AU	[2C32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BE, 0x0061 };
    uint32_t const ces[9] = { 0x2C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_449)
{
    // 114B9 114BD 0041;	
    // (ëíæ) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT O	[2C32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x114B9, 0x114BD, 0x0041 };
    uint32_t const ces[9] = { 0x2C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_450)
{
    // 114BE 0041;	
    // (ëíæ) TIRHUTA VOWEL SIGN AU	[2C32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114BE, 0x0041 };
    uint32_t const ces[9] = { 0x2C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_451)
{
    // 114B9 114BD 0062;	
    // (ëíæ) TIRHUTA VOWEL SIGN E, TIRHUTA VOWEL SIGN SHORT O	[2C32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x114B9, 0x114BD, 0x0062 };
    uint32_t const ces[9] = { 0x2C32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_452)
{
    // 114BE 0062;	
    // (ëíæ) TIRHUTA VOWEL SIGN AU	[2C32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BE, 0x0062 };
    uint32_t const ces[9] = { 0x2C32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_453)
{
    // 0334 114C2;	
    // (ëìÇ) TIRHUTA SIGN VIRAMA	[2C33 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x114C2 };
    uint32_t const ces[8] = { 0x2C33, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_454)
{
    // 114C2 0334;	
    // (ëìÇ) TIRHUTA SIGN VIRAMA	[2C33 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C2, 0x0334 };
    uint32_t const ces[8] = { 0x2C33, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_455)
{
    // 114C2 0021;	
    // (ëìÇ) TIRHUTA SIGN VIRAMA	[2C33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C2, 0x0021 };
    uint32_t const ces[9] = { 0x2C33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_456)
{
    // 114C2 003F;	
    // (ëìÇ) TIRHUTA SIGN VIRAMA	[2C33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C2, 0x003F };
    uint32_t const ces[9] = { 0x2C33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_457)
{
    // 114C2 0061;	
    // (ëìÇ) TIRHUTA SIGN VIRAMA	[2C33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C2, 0x0061 };
    uint32_t const ces[9] = { 0x2C33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_458)
{
    // 114C2 0041;	
    // (ëìÇ) TIRHUTA SIGN VIRAMA	[2C33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114C2, 0x0041 };
    uint32_t const ces[9] = { 0x2C33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_459)
{
    // 114C2 0062;	
    // (ëìÇ) TIRHUTA SIGN VIRAMA	[2C33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C2, 0x0062 };
    uint32_t const ces[9] = { 0x2C33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_460)
{
    // 11580 0021;	
    // (ëñÄ) SIDDHAM LETTER A	[2C34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11580, 0x0021 };
    uint32_t const ces[9] = { 0x2C34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_461)
{
    // 11580 003F;	
    // (ëñÄ) SIDDHAM LETTER A	[2C34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11580, 0x003F };
    uint32_t const ces[9] = { 0x2C34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_462)
{
    // 11580 0061;	
    // (ëñÄ) SIDDHAM LETTER A	[2C34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11580, 0x0061 };
    uint32_t const ces[9] = { 0x2C34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_463)
{
    // 11580 0041;	
    // (ëñÄ) SIDDHAM LETTER A	[2C34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11580, 0x0041 };
    uint32_t const ces[9] = { 0x2C34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_464)
{
    // 11580 0062;	
    // (ëñÄ) SIDDHAM LETTER A	[2C34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11580, 0x0062 };
    uint32_t const ces[9] = { 0x2C34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_465)
{
    // 11581 0021;	
    // (ëñÅ) SIDDHAM LETTER AA	[2C35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11581, 0x0021 };
    uint32_t const ces[9] = { 0x2C35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_466)
{
    // 11581 003F;	
    // (ëñÅ) SIDDHAM LETTER AA	[2C35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11581, 0x003F };
    uint32_t const ces[9] = { 0x2C35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_467)
{
    // 11581 0061;	
    // (ëñÅ) SIDDHAM LETTER AA	[2C35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11581, 0x0061 };
    uint32_t const ces[9] = { 0x2C35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_468)
{
    // 11581 0041;	
    // (ëñÅ) SIDDHAM LETTER AA	[2C35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11581, 0x0041 };
    uint32_t const ces[9] = { 0x2C35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_469)
{
    // 11581 0062;	
    // (ëñÅ) SIDDHAM LETTER AA	[2C35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11581, 0x0062 };
    uint32_t const ces[9] = { 0x2C35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_470)
{
    // 11582 0021;	
    // (ëñÇ) SIDDHAM LETTER I	[2C36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11582, 0x0021 };
    uint32_t const ces[9] = { 0x2C36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_471)
{
    // 115D8 0021;	
    // (ëóò) SIDDHAM LETTER THREE-CIRCLE ALTERNATE I	[2C36 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115D8, 0x0021 };
    uint32_t const ces[11] = { 0x2C36, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_472)
{
    // 115D9 0021;	
    // (ëóô) SIDDHAM LETTER TWO-CIRCLE ALTERNATE I	[2C36 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115D9, 0x0021 };
    uint32_t const ces[11] = { 0x2C36, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_473)
{
    // 11582 003F;	
    // (ëñÇ) SIDDHAM LETTER I	[2C36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11582, 0x003F };
    uint32_t const ces[9] = { 0x2C36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_474)
{
    // 115D8 003F;	
    // (ëóò) SIDDHAM LETTER THREE-CIRCLE ALTERNATE I	[2C36 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115D8, 0x003F };
    uint32_t const ces[11] = { 0x2C36, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_475)
{
    // 115D9 003F;	
    // (ëóô) SIDDHAM LETTER TWO-CIRCLE ALTERNATE I	[2C36 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115D9, 0x003F };
    uint32_t const ces[11] = { 0x2C36, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_476)
{
    // 11582 0061;	
    // (ëñÇ) SIDDHAM LETTER I	[2C36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11582, 0x0061 };
    uint32_t const ces[9] = { 0x2C36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_477)
{
    // 11582 0041;	
    // (ëñÇ) SIDDHAM LETTER I	[2C36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11582, 0x0041 };
    uint32_t const ces[9] = { 0x2C36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_478)
{
    // 115D8 0061;	
    // (ëóò) SIDDHAM LETTER THREE-CIRCLE ALTERNATE I	[2C36 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115D8, 0x0061 };
    uint32_t const ces[11] = { 0x2C36, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_479)
{
    // 115D8 0041;	
    // (ëóò) SIDDHAM LETTER THREE-CIRCLE ALTERNATE I	[2C36 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x115D8, 0x0041 };
    uint32_t const ces[11] = { 0x2C36, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_480)
{
    // 115D9 0061;	
    // (ëóô) SIDDHAM LETTER TWO-CIRCLE ALTERNATE I	[2C36 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115D9, 0x0061 };
    uint32_t const ces[11] = { 0x2C36, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_481)
{
    // 115D9 0041;	
    // (ëóô) SIDDHAM LETTER TWO-CIRCLE ALTERNATE I	[2C36 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x115D9, 0x0041 };
    uint32_t const ces[11] = { 0x2C36, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_482)
{
    // 11582 0062;	
    // (ëñÇ) SIDDHAM LETTER I	[2C36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11582, 0x0062 };
    uint32_t const ces[9] = { 0x2C36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_483)
{
    // 115D8 0062;	
    // (ëóò) SIDDHAM LETTER THREE-CIRCLE ALTERNATE I	[2C36 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115D8, 0x0062 };
    uint32_t const ces[11] = { 0x2C36, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_484)
{
    // 115D9 0062;	
    // (ëóô) SIDDHAM LETTER TWO-CIRCLE ALTERNATE I	[2C36 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115D9, 0x0062 };
    uint32_t const ces[11] = { 0x2C36, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_485)
{
    // 11583 0021;	
    // (ëñÉ) SIDDHAM LETTER II	[2C37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11583, 0x0021 };
    uint32_t const ces[9] = { 0x2C37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_486)
{
    // 115DA 0021;	
    // (ëóö) SIDDHAM LETTER TWO-CIRCLE ALTERNATE II	[2C37 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DA, 0x0021 };
    uint32_t const ces[11] = { 0x2C37, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_487)
{
    // 11583 003F;	
    // (ëñÉ) SIDDHAM LETTER II	[2C37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11583, 0x003F };
    uint32_t const ces[9] = { 0x2C37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_488)
{
    // 115DA 003F;	
    // (ëóö) SIDDHAM LETTER TWO-CIRCLE ALTERNATE II	[2C37 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DA, 0x003F };
    uint32_t const ces[11] = { 0x2C37, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_489)
{
    // 11583 0061;	
    // (ëñÉ) SIDDHAM LETTER II	[2C37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11583, 0x0061 };
    uint32_t const ces[9] = { 0x2C37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_490)
{
    // 11583 0041;	
    // (ëñÉ) SIDDHAM LETTER II	[2C37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11583, 0x0041 };
    uint32_t const ces[9] = { 0x2C37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_491)
{
    // 115DA 0061;	
    // (ëóö) SIDDHAM LETTER TWO-CIRCLE ALTERNATE II	[2C37 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DA, 0x0061 };
    uint32_t const ces[11] = { 0x2C37, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_492)
{
    // 115DA 0041;	
    // (ëóö) SIDDHAM LETTER TWO-CIRCLE ALTERNATE II	[2C37 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x115DA, 0x0041 };
    uint32_t const ces[11] = { 0x2C37, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_493)
{
    // 11583 0062;	
    // (ëñÉ) SIDDHAM LETTER II	[2C37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11583, 0x0062 };
    uint32_t const ces[9] = { 0x2C37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_494)
{
    // 115DA 0062;	
    // (ëóö) SIDDHAM LETTER TWO-CIRCLE ALTERNATE II	[2C37 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DA, 0x0062 };
    uint32_t const ces[11] = { 0x2C37, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_495)
{
    // 11584 0021;	
    // (ëñÑ) SIDDHAM LETTER U	[2C38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11584, 0x0021 };
    uint32_t const ces[9] = { 0x2C38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_496)
{
    // 115DB 0021;	
    // (ëóõ) SIDDHAM LETTER ALTERNATE U	[2C38 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DB, 0x0021 };
    uint32_t const ces[11] = { 0x2C38, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_497)
{
    // 11584 003F;	
    // (ëñÑ) SIDDHAM LETTER U	[2C38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11584, 0x003F };
    uint32_t const ces[9] = { 0x2C38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_498)
{
    // 115DB 003F;	
    // (ëóõ) SIDDHAM LETTER ALTERNATE U	[2C38 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DB, 0x003F };
    uint32_t const ces[11] = { 0x2C38, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_179_499)
{
    // 11584 0061;	
    // (ëñÑ) SIDDHAM LETTER U	[2C38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11584, 0x0061 };
    uint32_t const ces[9] = { 0x2C38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

