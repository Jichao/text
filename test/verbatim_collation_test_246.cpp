// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_246_000)
{
    uint32_t const cps[2] = { 0xD7F7, 0x0062 };

    // D7F7 0062;	
    // (ퟷ) HANGUL JONGSEONG CIEUC-PIEUP	[3E6C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F7 0062;	
    // (ퟷ) HANGUL JONGSEONG CIEUC-PIEUP	[3E6C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_001)
{
    uint32_t const cps[2] = { 0xD7F8, 0x0021 };

    // D7F8 0021;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F8 0021;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E6D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_002)
{
    uint32_t const cps[2] = { 0xD7F8, 0x003F };

    // D7F8 003F;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F8 003F;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E6D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_003)
{
    uint32_t const cps[2] = { 0xD7F8, 0x0061 };

    // D7F8 0061;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F8 0061;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_004)
{
    uint32_t const cps[2] = { 0xD7F8, 0x0041 };

    // D7F8 0041;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F8 0041;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_005)
{
    uint32_t const cps[2] = { 0xD7F8, 0x0062 };

    // D7F8 0062;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F8 0062;	
    // (ퟸ) HANGUL JONGSEONG CIEUC-SSANGPIEUP	[3E6D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_006)
{
    uint32_t const cps[2] = { 0xD7F9, 0x0021 };

    // D7F9 0021;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F9 0021;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E6E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_007)
{
    uint32_t const cps[2] = { 0xD7F9, 0x003F };

    // D7F9 003F;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F9 003F;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E6E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_008)
{
    uint32_t const cps[2] = { 0xD7F9, 0x0061 };

    // D7F9 0061;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F9 0061;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_009)
{
    uint32_t const cps[2] = { 0xD7F9, 0x0041 };

    // D7F9 0041;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F9 0041;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_010)
{
    uint32_t const cps[2] = { 0xD7F9, 0x0062 };

    // D7F9 0062;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7F9 0062;	
    // (ퟹ) HANGUL JONGSEONG SSANGCIEUC	[3E6E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_011)
{
    uint32_t const cps[2] = { 0xD7FA, 0x0021 };

    // D7FA 0021;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FA 0021;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E6F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_012)
{
    uint32_t const cps[2] = { 0xD7FA, 0x003F };

    // D7FA 003F;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FA 003F;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E6F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_013)
{
    uint32_t const cps[2] = { 0xD7FA, 0x0061 };

    // D7FA 0061;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FA 0061;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_014)
{
    uint32_t const cps[2] = { 0xD7FA, 0x0041 };

    // D7FA 0041;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FA 0041;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_015)
{
    uint32_t const cps[2] = { 0xD7FA, 0x0062 };

    // D7FA 0062;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FA 0062;	
    // (ퟺ) HANGUL JONGSEONG PHIEUPH-SIOS	[3E6F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_016)
{
    uint32_t const cps[2] = { 0xD7FB, 0x0021 };

    // D7FB 0021;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FB 0021;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E70, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_017)
{
    uint32_t const cps[2] = { 0xD7FB, 0x003F };

    // D7FB 003F;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FB 003F;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E70, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_018)
{
    uint32_t const cps[2] = { 0xD7FB, 0x0061 };

    // D7FB 0061;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FB 0061;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_019)
{
    uint32_t const cps[2] = { 0xD7FB, 0x0041 };

    // D7FB 0041;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FB 0041;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_020)
{
    uint32_t const cps[2] = { 0xD7FB, 0x0062 };

    // D7FB 0062;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // D7FB 0062;	
    // (ퟻ) HANGUL JONGSEONG PHIEUPH-THIEUTH	[3E70 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_021)
{
    uint32_t const cps[2] = { 0x3041, 0x0021 };

    // 3041 0021;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 0261 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3041 0021;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 | 0020 | 000D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_022)
{
    uint32_t const cps[2] = { 0x3042, 0x0021 };

    // 3042 0021;	
    // (あ) HIRAGANA LETTER A	[3E71 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3042 0021;	
    // (あ) HIRAGANA LETTER A	[3E71 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_023)
{
    uint32_t const cps[2] = { 0x30A1, 0x0021 };

    // 30A1 0021;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A1 0021;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_024)
{
    uint32_t const cps[2] = { 0xFF67, 0x0021 };

    // FF67 0021;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 0261 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF67 0021;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 | 0020 | 0010 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_025)
{
    uint32_t const cps[2] = { 0x30A2, 0x0021 };

    // 30A2 0021;	
    // (ア) KATAKANA LETTER A	[3E71 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A2 0021;	
    // (ア) KATAKANA LETTER A	[3E71 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_026)
{
    uint32_t const cps[2] = { 0xFF71, 0x0021 };

    // FF71 0021;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF71 0021;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_027)
{
    uint32_t const cps[2] = { 0x32D0, 0x0021 };

    // 32D0 0021;	
    // (㋐) CIRCLED KATAKANA A	[3E71 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D0 0021;	
    // (㋐) CIRCLED KATAKANA A	[3E71 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_028)
{
    uint32_t const cps[2] = { 0x3041, 0x003F };

    // 3041 003F;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 0267 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3041 003F;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 | 0020 | 000D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_029)
{
    uint32_t const cps[2] = { 0x3042, 0x003F };

    // 3042 003F;	
    // (あ) HIRAGANA LETTER A	[3E71 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3042 003F;	
    // (あ) HIRAGANA LETTER A	[3E71 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_030)
{
    uint32_t const cps[2] = { 0x30A1, 0x003F };

    // 30A1 003F;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A1 003F;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_031)
{
    uint32_t const cps[2] = { 0xFF67, 0x003F };

    // FF67 003F;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 0267 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF67 003F;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 | 0020 | 0010 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_032)
{
    uint32_t const cps[2] = { 0x30A2, 0x003F };

    // 30A2 003F;	
    // (ア) KATAKANA LETTER A	[3E71 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A2 003F;	
    // (ア) KATAKANA LETTER A	[3E71 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_033)
{
    uint32_t const cps[2] = { 0xFF71, 0x003F };

    // FF71 003F;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF71 003F;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_034)
{
    uint32_t const cps[2] = { 0x32D0, 0x003F };

    // 32D0 003F;	
    // (㋐) CIRCLED KATAKANA A	[3E71 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D0 003F;	
    // (㋐) CIRCLED KATAKANA A	[3E71 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E71, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_035)
{
    uint32_t const cps[2] = { 0x3303, 0x0021 };

    // 3303 0021;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E71, 0x1C73, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3303 0021;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x3E71, 0x1C73, 0x3E9A, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_036)
{
    uint32_t const cps[2] = { 0x3303, 0x003F };

    // 3303 003F;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E71, 0x1C73, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3303 003F;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x3E71, 0x1C73, 0x3E9A, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_037)
{
    uint32_t const cps[2] = { 0x3303, 0x0061 };

    // 3303 0061;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E71, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3303 0061;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E71, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_038)
{
    uint32_t const cps[2] = { 0x3303, 0x0041 };

    // 3303 0041;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E71, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3303 0041;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E71, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_039)
{
    uint32_t const cps[2] = { 0x3303, 0x0062 };

    // 3303 0062;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E71, 0x1C73, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3303 0062;	
    // (㌃) SQUARE AARU	[3E71 1C73 3E9A 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E71, 0x1C73, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_040)
{
    uint32_t const cps[2] = { 0x3041, 0x0061 };

    // 3041 0061;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3041 0061;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_041)
{
    uint32_t const cps[2] = { 0x3041, 0x0041 };

    // 3041 0041;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 000D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3041 0041;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 000D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_042)
{
    uint32_t const cps[2] = { 0x3042, 0x0061 };

    // 3042 0061;	
    // (あ) HIRAGANA LETTER A	[3E71 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3042 0061;	
    // (あ) HIRAGANA LETTER A	[3E71 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_043)
{
    uint32_t const cps[2] = { 0x3042, 0x0041 };

    // 3042 0041;	
    // (あ) HIRAGANA LETTER A	[3E71 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3042 0041;	
    // (あ) HIRAGANA LETTER A	[3E71 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_044)
{
    uint32_t const cps[2] = { 0x30A1, 0x0061 };

    // 30A1 0061;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A1 0061;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_045)
{
    uint32_t const cps[2] = { 0x30A1, 0x0041 };

    // 30A1 0041;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A1 0041;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_046)
{
    uint32_t const cps[2] = { 0xFF67, 0x0061 };

    // FF67 0061;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF67 0061;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_047)
{
    uint32_t const cps[2] = { 0xFF67, 0x0041 };

    // FF67 0041;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 0010 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF67 0041;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 1CAD | 0020 0020 | 0010 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_048)
{
    uint32_t const cps[2] = { 0x30A2, 0x0061 };

    // 30A2 0061;	
    // (ア) KATAKANA LETTER A	[3E71 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A2 0061;	
    // (ア) KATAKANA LETTER A	[3E71 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_049)
{
    uint32_t const cps[2] = { 0x30A2, 0x0041 };

    // 30A2 0041;	
    // (ア) KATAKANA LETTER A	[3E71 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A2 0041;	
    // (ア) KATAKANA LETTER A	[3E71 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_050)
{
    uint32_t const cps[2] = { 0xFF71, 0x0061 };

    // FF71 0061;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF71 0061;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_051)
{
    uint32_t const cps[2] = { 0xFF71, 0x0041 };

    // FF71 0041;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF71 0041;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_052)
{
    uint32_t const cps[2] = { 0x32D0, 0x0061 };

    // 32D0 0061;	
    // (㋐) CIRCLED KATAKANA A	[3E71 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D0 0061;	
    // (㋐) CIRCLED KATAKANA A	[3E71 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_053)
{
    uint32_t const cps[2] = { 0x32D0, 0x0041 };

    // 32D0 0041;	
    // (㋐) CIRCLED KATAKANA A	[3E71 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D0 0041;	
    // (㋐) CIRCLED KATAKANA A	[3E71 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_054)
{
    uint32_t const cps[2] = { 0x3041, 0x0062 };

    // 3041 0062;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 1CC6 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3041 0062;	
    // (ぁ) HIRAGANA LETTER SMALL A	[3E71 1CC6 | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_055)
{
    uint32_t const cps[2] = { 0x3042, 0x0062 };

    // 3042 0062;	
    // (あ) HIRAGANA LETTER A	[3E71 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3042 0062;	
    // (あ) HIRAGANA LETTER A	[3E71 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_056)
{
    uint32_t const cps[2] = { 0x30A1, 0x0062 };

    // 30A1 0062;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A1 0062;	
    // (ァ) KATAKANA LETTER SMALL A	[3E71 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_057)
{
    uint32_t const cps[2] = { 0xFF67, 0x0062 };

    // FF67 0062;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 1CC6 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF67 0062;	
    // (ｧ) HALFWIDTH KATAKANA LETTER SMALL A	[3E71 1CC6 | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_058)
{
    uint32_t const cps[2] = { 0x30A2, 0x0062 };

    // 30A2 0062;	
    // (ア) KATAKANA LETTER A	[3E71 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A2 0062;	
    // (ア) KATAKANA LETTER A	[3E71 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_059)
{
    uint32_t const cps[2] = { 0xFF71, 0x0062 };

    // FF71 0062;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF71 0062;	
    // (ｱ) HALFWIDTH KATAKANA LETTER A	[3E71 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_060)
{
    uint32_t const cps[2] = { 0x32D0, 0x0062 };

    // 32D0 0062;	
    // (㋐) CIRCLED KATAKANA A	[3E71 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D0 0062;	
    // (㋐) CIRCLED KATAKANA A	[3E71 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_061)
{
    uint32_t const cps[2] = { 0x3300, 0x0021 };

    // 3300 0021;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 0261 | 0020 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3300 0021;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 | 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[24] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_062)
{
    uint32_t const cps[2] = { 0x3300, 0x003F };

    // 3300 003F;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 0267 | 0020 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3300 003F;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 | 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[24] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_063)
{
    uint32_t const cps[2] = { 0x3300, 0x0061 };

    // 3300 0061;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 1CAD | 0020 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3300 0061;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 1CAD | 0020 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_064)
{
    uint32_t const cps[2] = { 0x3300, 0x0041 };

    // 3300 0041;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 1CAD | 0020 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3300 0041;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 1CAD | 0020 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_065)
{
    uint32_t const cps[2] = { 0x3300, 0x0062 };

    // 3300 0062;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 1CC6 | 0020 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3300 0062;	
    // (㌀) SQUARE APAATO	[3E71 3E8B 1C73 3E85 1CC6 | 0020 0020 0038 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E71, 0x3E8B, 0x1C73, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_066)
{
    uint32_t const cps[2] = { 0x3301, 0x0021 };

    // 3301 0021;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3301 0021;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[21] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_067)
{
    uint32_t const cps[2] = { 0x3301, 0x003F };

    // 3301 003F;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3301 003F;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[21] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_068)
{
    uint32_t const cps[2] = { 0x3301, 0x0061 };

    // 3301 0061;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3301 0061;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_069)
{
    uint32_t const cps[2] = { 0x3301, 0x0041 };

    // 3301 0041;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3301 0041;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_070)
{
    uint32_t const cps[2] = { 0x3301, 0x0062 };

    // 3301 0062;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3301 0062;	
    // (㌁) SQUARE ARUHUA	[3E71 3E9A 3E8D 3E71 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E71, 0x3E9A, 0x3E8D, 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_071)
{
    uint32_t const cps[2] = { 0x3302, 0x0021 };

    // 3302 0021;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 0261 | 0020 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3302 0021;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 | 0020 0020 0020 0038 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[24] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_072)
{
    uint32_t const cps[2] = { 0x3302, 0x003F };

    // 3302 003F;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 0267 | 0020 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3302 003F;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 | 0020 0020 0020 0038 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[24] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_073)
{
    uint32_t const cps[2] = { 0x3302, 0x0061 };

    // 3302 0061;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 1CAD | 0020 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3302 0061;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 1CAD | 0020 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_074)
{
    uint32_t const cps[2] = { 0x3302, 0x0041 };

    // 3302 0041;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 1CAD | 0020 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3302 0041;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 1CAD | 0020 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_075)
{
    uint32_t const cps[2] = { 0x3302, 0x0062 };

    // 3302 0062;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 1CC6 | 0020 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3302 0062;	
    // (㌂) SQUARE ANPEA	[3E71 3EA1 3E8E 3E71 1CC6 | 0020 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E71, 0x3EA1, 0x3E8E, 0x3E71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_076)
{
    uint32_t const cps[2] = { 0x3043, 0x0021 };

    // 3043 0021;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 0261 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3043 0021;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 | 0020 | 000D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_077)
{
    uint32_t const cps[2] = { 0x3044, 0x0021 };

    // 3044 0021;	
    // (い) HIRAGANA LETTER I	[3E72 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3044 0021;	
    // (い) HIRAGANA LETTER I	[3E72 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_078)
{
    uint32_t const cps[2] = { 0x30A3, 0x0021 };

    // 30A3 0021;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A3 0021;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_079)
{
    uint32_t const cps[2] = { 0xFF68, 0x0021 };

    // FF68 0021;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 0261 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF68 0021;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 | 0020 | 0010 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_080)
{
    uint32_t const cps[2] = { 0x30A4, 0x0021 };

    // 30A4 0021;	
    // (イ) KATAKANA LETTER I	[3E72 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A4 0021;	
    // (イ) KATAKANA LETTER I	[3E72 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_081)
{
    uint32_t const cps[2] = { 0xFF72, 0x0021 };

    // FF72 0021;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF72 0021;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_082)
{
    uint32_t const cps[2] = { 0x32D1, 0x0021 };

    // 32D1 0021;	
    // (㋑) CIRCLED KATAKANA I	[3E72 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D1 0021;	
    // (㋑) CIRCLED KATAKANA I	[3E72 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_083)
{
    uint32_t const cps[2] = { 0x3043, 0x003F };

    // 3043 003F;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 0267 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3043 003F;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 | 0020 | 000D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_084)
{
    uint32_t const cps[2] = { 0x3044, 0x003F };

    // 3044 003F;	
    // (い) HIRAGANA LETTER I	[3E72 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3044 003F;	
    // (い) HIRAGANA LETTER I	[3E72 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_085)
{
    uint32_t const cps[2] = { 0x30A3, 0x003F };

    // 30A3 003F;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A3 003F;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_086)
{
    uint32_t const cps[2] = { 0xFF68, 0x003F };

    // FF68 003F;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 0267 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF68 003F;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 | 0020 | 0010 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_087)
{
    uint32_t const cps[2] = { 0x30A4, 0x003F };

    // 30A4 003F;	
    // (イ) KATAKANA LETTER I	[3E72 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A4 003F;	
    // (イ) KATAKANA LETTER I	[3E72 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_088)
{
    uint32_t const cps[2] = { 0xFF72, 0x003F };

    // FF72 003F;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF72 003F;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_089)
{
    uint32_t const cps[2] = { 0x32D1, 0x003F };

    // 32D1 003F;	
    // (㋑) CIRCLED KATAKANA I	[3E72 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D1 003F;	
    // (㋑) CIRCLED KATAKANA I	[3E72 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E72, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_090)
{
    uint32_t const cps[2] = { 0x3043, 0x0061 };

    // 3043 0061;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3043 0061;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_091)
{
    uint32_t const cps[2] = { 0x3043, 0x0041 };

    // 3043 0041;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 000D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3043 0041;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 000D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_092)
{
    uint32_t const cps[2] = { 0x3044, 0x0061 };

    // 3044 0061;	
    // (い) HIRAGANA LETTER I	[3E72 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3044 0061;	
    // (い) HIRAGANA LETTER I	[3E72 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_093)
{
    uint32_t const cps[2] = { 0x3044, 0x0041 };

    // 3044 0041;	
    // (い) HIRAGANA LETTER I	[3E72 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3044 0041;	
    // (い) HIRAGANA LETTER I	[3E72 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_094)
{
    uint32_t const cps[2] = { 0x30A3, 0x0061 };

    // 30A3 0061;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A3 0061;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_095)
{
    uint32_t const cps[2] = { 0x30A3, 0x0041 };

    // 30A3 0041;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A3 0041;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_096)
{
    uint32_t const cps[2] = { 0xFF68, 0x0061 };

    // FF68 0061;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF68 0061;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_097)
{
    uint32_t const cps[2] = { 0xFF68, 0x0041 };

    // FF68 0041;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 0010 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF68 0041;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 1CAD | 0020 0020 | 0010 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_098)
{
    uint32_t const cps[2] = { 0x30A4, 0x0061 };

    // 30A4 0061;	
    // (イ) KATAKANA LETTER I	[3E72 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A4 0061;	
    // (イ) KATAKANA LETTER I	[3E72 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_099)
{
    uint32_t const cps[2] = { 0x30A4, 0x0041 };

    // 30A4 0041;	
    // (イ) KATAKANA LETTER I	[3E72 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A4 0041;	
    // (イ) KATAKANA LETTER I	[3E72 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_100)
{
    uint32_t const cps[2] = { 0xFF72, 0x0061 };

    // FF72 0061;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF72 0061;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_101)
{
    uint32_t const cps[2] = { 0xFF72, 0x0041 };

    // FF72 0041;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF72 0041;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_102)
{
    uint32_t const cps[2] = { 0x32D1, 0x0061 };

    // 32D1 0061;	
    // (㋑) CIRCLED KATAKANA I	[3E72 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D1 0061;	
    // (㋑) CIRCLED KATAKANA I	[3E72 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_103)
{
    uint32_t const cps[2] = { 0x32D1, 0x0041 };

    // 32D1 0041;	
    // (㋑) CIRCLED KATAKANA I	[3E72 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D1 0041;	
    // (㋑) CIRCLED KATAKANA I	[3E72 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_104)
{
    uint32_t const cps[2] = { 0x3043, 0x0062 };

    // 3043 0062;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 1CC6 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3043 0062;	
    // (ぃ) HIRAGANA LETTER SMALL I	[3E72 1CC6 | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_105)
{
    uint32_t const cps[2] = { 0x3044, 0x0062 };

    // 3044 0062;	
    // (い) HIRAGANA LETTER I	[3E72 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3044 0062;	
    // (い) HIRAGANA LETTER I	[3E72 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_106)
{
    uint32_t const cps[2] = { 0x30A3, 0x0062 };

    // 30A3 0062;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A3 0062;	
    // (ィ) KATAKANA LETTER SMALL I	[3E72 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_107)
{
    uint32_t const cps[2] = { 0xFF68, 0x0062 };

    // FF68 0062;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 1CC6 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF68 0062;	
    // (ｨ) HALFWIDTH KATAKANA LETTER SMALL I	[3E72 1CC6 | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_108)
{
    uint32_t const cps[2] = { 0x30A4, 0x0062 };

    // 30A4 0062;	
    // (イ) KATAKANA LETTER I	[3E72 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A4 0062;	
    // (イ) KATAKANA LETTER I	[3E72 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_109)
{
    uint32_t const cps[2] = { 0xFF72, 0x0062 };

    // FF72 0062;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF72 0062;	
    // (ｲ) HALFWIDTH KATAKANA LETTER I	[3E72 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_110)
{
    uint32_t const cps[2] = { 0x32D1, 0x0062 };

    // 32D1 0062;	
    // (㋑) CIRCLED KATAKANA I	[3E72 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D1 0062;	
    // (㋑) CIRCLED KATAKANA I	[3E72 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_111)
{
    uint32_t const cps[2] = { 0x3304, 0x0021 };

    // 3304 0021;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 0261 | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3304 0021;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 | 0020 0020 0020 0020 0037 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[24] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_112)
{
    uint32_t const cps[2] = { 0x3304, 0x003F };

    // 3304 003F;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 0267 | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3304 003F;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 | 0020 0020 0020 0020 0037 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[24] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_113)
{
    uint32_t const cps[2] = { 0x3304, 0x0061 };

    // 3304 0061;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 1CAD | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3304 0061;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 1CAD | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_114)
{
    uint32_t const cps[2] = { 0x3304, 0x0041 };

    // 3304 0041;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 1CAD | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3304 0041;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 1CAD | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_115)
{
    uint32_t const cps[2] = { 0x3304, 0x0062 };

    // 3304 0062;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 1CC6 | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[20] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3304 0062;	
    // (㌄) SQUARE ININGU	[3E72 3E87 3EA1 3E79 1CC6 | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[27] = { 0x3E72, 0x3E87, 0x3EA1, 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_116)
{
    uint32_t const cps[2] = { 0x3305, 0x0021 };

    // 3305 0021;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E72, 0x3EA1, 0x3E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3305 0021;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x3E72, 0x3EA1, 0x3E82, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_117)
{
    uint32_t const cps[2] = { 0x3305, 0x003F };

    // 3305 003F;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E72, 0x3EA1, 0x3E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3305 003F;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x3E72, 0x3EA1, 0x3E82, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_118)
{
    uint32_t const cps[2] = { 0x3305, 0x0061 };

    // 3305 0061;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E72, 0x3EA1, 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3305 0061;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E72, 0x3EA1, 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_119)
{
    uint32_t const cps[2] = { 0x3305, 0x0041 };

    // 3305 0041;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E72, 0x3EA1, 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3305 0041;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E72, 0x3EA1, 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_120)
{
    uint32_t const cps[2] = { 0x3305, 0x0062 };

    // 3305 0062;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E72, 0x3EA1, 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3305 0062;	
    // (㌅) SQUARE INTI	[3E72 3EA1 3E82 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E72, 0x3EA1, 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_121)
{
    uint32_t const cps[3] = { 0x3046, 0x0334, 0x3099 };

    // 3046 0334 3099;	
    // (う̴) HIRAGANA LETTER U, COMBINING TILDE OVERLAY	[3E73 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3046 0334 3099;	
    // (う̴) HIRAGANA LETTER U, COMBINING TILDE OVERLAY	[3E73 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_122)
{
    uint32_t const cps[3] = { 0x3046, 0x3099, 0x0334 };

    // 3046 3099 0334;	
    // (ゔ) HIRAGANA LETTER U, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E73 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3046 3099 0334;	
    // (ゔ) HIRAGANA LETTER U, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E73 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_123)
{
    uint32_t const cps[2] = { 0x3094, 0x0334 };

    // 3094 0334;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3094 0334;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_124)
{
    uint32_t const cps[3] = { 0x30A6, 0x0334, 0x3099 };

    // 30A6 0334 3099;	
    // (ウ̴) KATAKANA LETTER U, COMBINING TILDE OVERLAY	[3E73 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A6 0334 3099;	
    // (ウ̴) KATAKANA LETTER U, COMBINING TILDE OVERLAY	[3E73 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_125)
{
    uint32_t const cps[3] = { 0x30A6, 0x3099, 0x0334 };

    // 30A6 3099 0334;	
    // (ヴ) KATAKANA LETTER U, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E73 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A6 3099 0334;	
    // (ヴ) KATAKANA LETTER U, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E73 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_126)
{
    uint32_t const cps[2] = { 0x30F4, 0x0334 };

    // 30F4 0334;	
    // (ヴ) KATAKANA LETTER VU	[3E73 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F4 0334;	
    // (ヴ) KATAKANA LETTER VU	[3E73 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E73, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_127)
{
    uint32_t const cps[2] = { 0x3045, 0x0021 };

    // 3045 0021;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 0261 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3045 0021;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 | 0020 | 000D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_128)
{
    uint32_t const cps[2] = { 0x3046, 0x0021 };

    // 3046 0021;	
    // (う) HIRAGANA LETTER U	[3E73 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3046 0021;	
    // (う) HIRAGANA LETTER U	[3E73 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_129)
{
    uint32_t const cps[2] = { 0x30A5, 0x0021 };

    // 30A5 0021;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A5 0021;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_130)
{
    uint32_t const cps[2] = { 0xFF69, 0x0021 };

    // FF69 0021;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 0261 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF69 0021;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 | 0020 | 0010 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_131)
{
    uint32_t const cps[2] = { 0x30A6, 0x0021 };

    // 30A6 0021;	
    // (ウ) KATAKANA LETTER U	[3E73 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A6 0021;	
    // (ウ) KATAKANA LETTER U	[3E73 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_132)
{
    uint32_t const cps[2] = { 0xFF73, 0x0021 };

    // FF73 0021;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF73 0021;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_133)
{
    uint32_t const cps[2] = { 0x32D2, 0x0021 };

    // 32D2 0021;	
    // (㋒) CIRCLED KATAKANA U	[3E73 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D2 0021;	
    // (㋒) CIRCLED KATAKANA U	[3E73 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_134)
{
    uint32_t const cps[2] = { 0x3094, 0x0021 };

    // 3094 0021;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3094 0021;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_135)
{
    uint32_t const cps[2] = { 0x30F4, 0x0021 };

    // 30F4 0021;	
    // (ヴ) KATAKANA LETTER VU	[3E73 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F4 0021;	
    // (ヴ) KATAKANA LETTER VU	[3E73 | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_136)
{
    uint32_t const cps[2] = { 0x3045, 0x003F };

    // 3045 003F;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 0267 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3045 003F;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 | 0020 | 000D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_137)
{
    uint32_t const cps[2] = { 0x3046, 0x003F };

    // 3046 003F;	
    // (う) HIRAGANA LETTER U	[3E73 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3046 003F;	
    // (う) HIRAGANA LETTER U	[3E73 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_138)
{
    uint32_t const cps[2] = { 0x30A5, 0x003F };

    // 30A5 003F;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A5 003F;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_139)
{
    uint32_t const cps[2] = { 0xFF69, 0x003F };

    // FF69 003F;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 0267 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF69 003F;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 | 0020 | 0010 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_140)
{
    uint32_t const cps[2] = { 0x30A6, 0x003F };

    // 30A6 003F;	
    // (ウ) KATAKANA LETTER U	[3E73 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A6 003F;	
    // (ウ) KATAKANA LETTER U	[3E73 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_141)
{
    uint32_t const cps[2] = { 0xFF73, 0x003F };

    // FF73 003F;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF73 003F;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_142)
{
    uint32_t const cps[2] = { 0x32D2, 0x003F };

    // 32D2 003F;	
    // (㋒) CIRCLED KATAKANA U	[3E73 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D2 003F;	
    // (㋒) CIRCLED KATAKANA U	[3E73 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E73, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_143)
{
    uint32_t const cps[2] = { 0x3094, 0x003F };

    // 3094 003F;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3094 003F;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_144)
{
    uint32_t const cps[2] = { 0x30F4, 0x003F };

    // 30F4 003F;	
    // (ヴ) KATAKANA LETTER VU	[3E73 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F4 003F;	
    // (ヴ) KATAKANA LETTER VU	[3E73 | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_145)
{
    uint32_t const cps[2] = { 0x3045, 0x0061 };

    // 3045 0061;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3045 0061;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_146)
{
    uint32_t const cps[2] = { 0x3045, 0x0041 };

    // 3045 0041;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 000D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3045 0041;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 000D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_147)
{
    uint32_t const cps[2] = { 0x3046, 0x0061 };

    // 3046 0061;	
    // (う) HIRAGANA LETTER U	[3E73 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3046 0061;	
    // (う) HIRAGANA LETTER U	[3E73 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_148)
{
    uint32_t const cps[2] = { 0x3046, 0x0041 };

    // 3046 0041;	
    // (う) HIRAGANA LETTER U	[3E73 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3046 0041;	
    // (う) HIRAGANA LETTER U	[3E73 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_149)
{
    uint32_t const cps[2] = { 0x30A5, 0x0061 };

    // 30A5 0061;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A5 0061;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_150)
{
    uint32_t const cps[2] = { 0x30A5, 0x0041 };

    // 30A5 0041;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A5 0041;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_151)
{
    uint32_t const cps[2] = { 0xFF69, 0x0061 };

    // FF69 0061;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF69 0061;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_152)
{
    uint32_t const cps[2] = { 0xFF69, 0x0041 };

    // FF69 0041;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 0010 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF69 0041;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 1CAD | 0020 0020 | 0010 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_153)
{
    uint32_t const cps[2] = { 0x30A6, 0x0061 };

    // 30A6 0061;	
    // (ウ) KATAKANA LETTER U	[3E73 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A6 0061;	
    // (ウ) KATAKANA LETTER U	[3E73 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_154)
{
    uint32_t const cps[2] = { 0x30A6, 0x0041 };

    // 30A6 0041;	
    // (ウ) KATAKANA LETTER U	[3E73 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A6 0041;	
    // (ウ) KATAKANA LETTER U	[3E73 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_155)
{
    uint32_t const cps[2] = { 0xFF73, 0x0061 };

    // FF73 0061;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF73 0061;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_156)
{
    uint32_t const cps[2] = { 0xFF73, 0x0041 };

    // FF73 0041;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF73 0041;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_157)
{
    uint32_t const cps[2] = { 0x32D2, 0x0061 };

    // 32D2 0061;	
    // (㋒) CIRCLED KATAKANA U	[3E73 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D2 0061;	
    // (㋒) CIRCLED KATAKANA U	[3E73 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_158)
{
    uint32_t const cps[2] = { 0x32D2, 0x0041 };

    // 32D2 0041;	
    // (㋒) CIRCLED KATAKANA U	[3E73 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D2 0041;	
    // (㋒) CIRCLED KATAKANA U	[3E73 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_159)
{
    uint32_t const cps[2] = { 0x3094, 0x0061 };

    // 3094 0061;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3094 0061;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_160)
{
    uint32_t const cps[2] = { 0x3094, 0x0041 };

    // 3094 0041;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3094 0041;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_161)
{
    uint32_t const cps[2] = { 0x30F4, 0x0061 };

    // 30F4 0061;	
    // (ヴ) KATAKANA LETTER VU	[3E73 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F4 0061;	
    // (ヴ) KATAKANA LETTER VU	[3E73 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_162)
{
    uint32_t const cps[2] = { 0x30F4, 0x0041 };

    // 30F4 0041;	
    // (ヴ) KATAKANA LETTER VU	[3E73 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F4 0041;	
    // (ヴ) KATAKANA LETTER VU	[3E73 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_163)
{
    uint32_t const cps[2] = { 0x3045, 0x0062 };

    // 3045 0062;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 1CC6 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3045 0062;	
    // (ぅ) HIRAGANA LETTER SMALL U	[3E73 1CC6 | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_164)
{
    uint32_t const cps[2] = { 0x3046, 0x0062 };

    // 3046 0062;	
    // (う) HIRAGANA LETTER U	[3E73 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3046 0062;	
    // (う) HIRAGANA LETTER U	[3E73 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_165)
{
    uint32_t const cps[2] = { 0x30A5, 0x0062 };

    // 30A5 0062;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A5 0062;	
    // (ゥ) KATAKANA LETTER SMALL U	[3E73 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_166)
{
    uint32_t const cps[2] = { 0xFF69, 0x0062 };

    // FF69 0062;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 1CC6 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF69 0062;	
    // (ｩ) HALFWIDTH KATAKANA LETTER SMALL U	[3E73 1CC6 | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_167)
{
    uint32_t const cps[2] = { 0x30A6, 0x0062 };

    // 30A6 0062;	
    // (ウ) KATAKANA LETTER U	[3E73 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A6 0062;	
    // (ウ) KATAKANA LETTER U	[3E73 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_168)
{
    uint32_t const cps[2] = { 0xFF73, 0x0062 };

    // FF73 0062;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF73 0062;	
    // (ｳ) HALFWIDTH KATAKANA LETTER U	[3E73 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_169)
{
    uint32_t const cps[2] = { 0x32D2, 0x0062 };

    // 32D2 0062;	
    // (㋒) CIRCLED KATAKANA U	[3E73 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D2 0062;	
    // (㋒) CIRCLED KATAKANA U	[3E73 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_170)
{
    uint32_t const cps[2] = { 0x3094, 0x0062 };

    // 3094 0062;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3094 0062;	
    // (ゔ) HIRAGANA LETTER VU	[3E73 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_171)
{
    uint32_t const cps[2] = { 0x30F4, 0x0062 };

    // 30F4 0062;	
    // (ヴ) KATAKANA LETTER VU	[3E73 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F4 0062;	
    // (ヴ) KATAKANA LETTER VU	[3E73 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E73, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_172)
{
    uint32_t const cps[2] = { 0x3306, 0x0021 };

    // 3306 0021;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E73, 0x3E76, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3306 0021;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x3E73, 0x3E76, 0x3EA1, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_173)
{
    uint32_t const cps[2] = { 0x3306, 0x003F };

    // 3306 003F;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E73, 0x3E76, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3306 003F;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x3E73, 0x3E76, 0x3EA1, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_174)
{
    uint32_t const cps[2] = { 0x3306, 0x0061 };

    // 3306 0061;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E73, 0x3E76, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3306 0061;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E73, 0x3E76, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_175)
{
    uint32_t const cps[2] = { 0x3306, 0x0041 };

    // 3306 0041;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E73, 0x3E76, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3306 0041;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E73, 0x3E76, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_176)
{
    uint32_t const cps[2] = { 0x3306, 0x0062 };

    // 3306 0062;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E73, 0x3E76, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3306 0062;	
    // (㌆) SQUARE UON	[3E73 3E76 3EA1 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E73, 0x3E76, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_177)
{
    uint32_t const cps[2] = { 0x1B000, 0x0021 };

    // 1B000 0021;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B000 0021;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E74, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_178)
{
    uint32_t const cps[2] = { 0x1B000, 0x003F };

    // 1B000 003F;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B000 003F;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E74, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_179)
{
    uint32_t const cps[2] = { 0x1B000, 0x0061 };

    // 1B000 0061;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B000 0061;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_180)
{
    uint32_t const cps[2] = { 0x1B000, 0x0041 };

    // 1B000 0041;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B000 0041;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_181)
{
    uint32_t const cps[2] = { 0x1B000, 0x0062 };

    // 1B000 0062;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B000 0062;	
    // (𛀀) KATAKANA LETTER ARCHAIC E	[3E74 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_182)
{
    uint32_t const cps[2] = { 0x3047, 0x0021 };

    // 3047 0021;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 0261 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3047 0021;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 | 0020 | 000D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_183)
{
    uint32_t const cps[2] = { 0x3048, 0x0021 };

    // 3048 0021;	
    // (え) HIRAGANA LETTER E	[3E75 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3048 0021;	
    // (え) HIRAGANA LETTER E	[3E75 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_184)
{
    uint32_t const cps[2] = { 0x30A7, 0x0021 };

    // 30A7 0021;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A7 0021;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_185)
{
    uint32_t const cps[2] = { 0xFF6A, 0x0021 };

    // FF6A 0021;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 0261 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6A 0021;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 | 0020 | 0010 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_186)
{
    uint32_t const cps[2] = { 0x30A8, 0x0021 };

    // 30A8 0021;	
    // (エ) KATAKANA LETTER E	[3E75 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A8 0021;	
    // (エ) KATAKANA LETTER E	[3E75 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_187)
{
    uint32_t const cps[2] = { 0xFF74, 0x0021 };

    // FF74 0021;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF74 0021;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_188)
{
    uint32_t const cps[2] = { 0x32D3, 0x0021 };

    // 32D3 0021;	
    // (㋓) CIRCLED KATAKANA E	[3E75 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D3 0021;	
    // (㋓) CIRCLED KATAKANA E	[3E75 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_189)
{
    uint32_t const cps[2] = { 0x3047, 0x003F };

    // 3047 003F;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 0267 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3047 003F;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 | 0020 | 000D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_190)
{
    uint32_t const cps[2] = { 0x3048, 0x003F };

    // 3048 003F;	
    // (え) HIRAGANA LETTER E	[3E75 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3048 003F;	
    // (え) HIRAGANA LETTER E	[3E75 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_191)
{
    uint32_t const cps[2] = { 0x30A7, 0x003F };

    // 30A7 003F;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A7 003F;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_192)
{
    uint32_t const cps[2] = { 0xFF6A, 0x003F };

    // FF6A 003F;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 0267 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6A 003F;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 | 0020 | 0010 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_193)
{
    uint32_t const cps[2] = { 0x30A8, 0x003F };

    // 30A8 003F;	
    // (エ) KATAKANA LETTER E	[3E75 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A8 003F;	
    // (エ) KATAKANA LETTER E	[3E75 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_194)
{
    uint32_t const cps[2] = { 0xFF74, 0x003F };

    // FF74 003F;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF74 003F;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_195)
{
    uint32_t const cps[2] = { 0x32D3, 0x003F };

    // 32D3 003F;	
    // (㋓) CIRCLED KATAKANA E	[3E75 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D3 003F;	
    // (㋓) CIRCLED KATAKANA E	[3E75 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E75, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_196)
{
    uint32_t const cps[2] = { 0x3308, 0x0021 };

    // 3308 0021;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3308 0021;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[21] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_197)
{
    uint32_t const cps[2] = { 0x3308, 0x003F };

    // 3308 003F;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3308 003F;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[21] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_198)
{
    uint32_t const cps[2] = { 0x3308, 0x0061 };

    // 3308 0061;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3308 0061;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_199)
{
    uint32_t const cps[2] = { 0x3308, 0x0041 };

    // 3308 0041;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3308 0041;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_200)
{
    uint32_t const cps[2] = { 0x3308, 0x0062 };

    // 3308 0062;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3308 0062;	
    // (㌈) SQUARE EEKAA	[3E75 1C73 3E77 1C73 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E75, 0x1C73, 0x3E77, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_201)
{
    uint32_t const cps[2] = { 0x3047, 0x0061 };

    // 3047 0061;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3047 0061;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_202)
{
    uint32_t const cps[2] = { 0x3047, 0x0041 };

    // 3047 0041;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 000D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3047 0041;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 000D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_203)
{
    uint32_t const cps[2] = { 0x3048, 0x0061 };

    // 3048 0061;	
    // (え) HIRAGANA LETTER E	[3E75 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3048 0061;	
    // (え) HIRAGANA LETTER E	[3E75 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_204)
{
    uint32_t const cps[2] = { 0x3048, 0x0041 };

    // 3048 0041;	
    // (え) HIRAGANA LETTER E	[3E75 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3048 0041;	
    // (え) HIRAGANA LETTER E	[3E75 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_205)
{
    uint32_t const cps[2] = { 0x30A7, 0x0061 };

    // 30A7 0061;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A7 0061;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_206)
{
    uint32_t const cps[2] = { 0x30A7, 0x0041 };

    // 30A7 0041;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A7 0041;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_207)
{
    uint32_t const cps[2] = { 0xFF6A, 0x0061 };

    // FF6A 0061;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6A 0061;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_208)
{
    uint32_t const cps[2] = { 0xFF6A, 0x0041 };

    // FF6A 0041;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 0010 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6A 0041;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 1CAD | 0020 0020 | 0010 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_209)
{
    uint32_t const cps[2] = { 0x30A8, 0x0061 };

    // 30A8 0061;	
    // (エ) KATAKANA LETTER E	[3E75 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A8 0061;	
    // (エ) KATAKANA LETTER E	[3E75 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_210)
{
    uint32_t const cps[2] = { 0x30A8, 0x0041 };

    // 30A8 0041;	
    // (エ) KATAKANA LETTER E	[3E75 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A8 0041;	
    // (エ) KATAKANA LETTER E	[3E75 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_211)
{
    uint32_t const cps[2] = { 0xFF74, 0x0061 };

    // FF74 0061;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF74 0061;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_212)
{
    uint32_t const cps[2] = { 0xFF74, 0x0041 };

    // FF74 0041;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF74 0041;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_213)
{
    uint32_t const cps[2] = { 0x32D3, 0x0061 };

    // 32D3 0061;	
    // (㋓) CIRCLED KATAKANA E	[3E75 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D3 0061;	
    // (㋓) CIRCLED KATAKANA E	[3E75 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_214)
{
    uint32_t const cps[2] = { 0x32D3, 0x0041 };

    // 32D3 0041;	
    // (㋓) CIRCLED KATAKANA E	[3E75 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D3 0041;	
    // (㋓) CIRCLED KATAKANA E	[3E75 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_215)
{
    uint32_t const cps[2] = { 0x3047, 0x0062 };

    // 3047 0062;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 1CC6 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3047 0062;	
    // (ぇ) HIRAGANA LETTER SMALL E	[3E75 1CC6 | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_216)
{
    uint32_t const cps[2] = { 0x3048, 0x0062 };

    // 3048 0062;	
    // (え) HIRAGANA LETTER E	[3E75 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3048 0062;	
    // (え) HIRAGANA LETTER E	[3E75 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_217)
{
    uint32_t const cps[2] = { 0x30A7, 0x0062 };

    // 30A7 0062;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A7 0062;	
    // (ェ) KATAKANA LETTER SMALL E	[3E75 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_218)
{
    uint32_t const cps[2] = { 0xFF6A, 0x0062 };

    // FF6A 0062;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 1CC6 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6A 0062;	
    // (ｪ) HALFWIDTH KATAKANA LETTER SMALL E	[3E75 1CC6 | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_219)
{
    uint32_t const cps[2] = { 0x30A8, 0x0062 };

    // 30A8 0062;	
    // (エ) KATAKANA LETTER E	[3E75 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A8 0062;	
    // (エ) KATAKANA LETTER E	[3E75 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_220)
{
    uint32_t const cps[2] = { 0xFF74, 0x0062 };

    // FF74 0062;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF74 0062;	
    // (ｴ) HALFWIDTH KATAKANA LETTER E	[3E75 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_221)
{
    uint32_t const cps[2] = { 0x32D3, 0x0062 };

    // 32D3 0062;	
    // (㋓) CIRCLED KATAKANA E	[3E75 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D3 0062;	
    // (㋓) CIRCLED KATAKANA E	[3E75 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_222)
{
    uint32_t const cps[2] = { 0x3307, 0x0021 };

    // 3307 0021;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 0261 | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3307 0021;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 | 0020 0020 0020 0020 0020 0037 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[28] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_223)
{
    uint32_t const cps[2] = { 0x3307, 0x003F };

    // 3307 003F;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 0267 | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3307 003F;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 | 0020 0020 0020 0020 0020 0037 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[28] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_224)
{
    uint32_t const cps[2] = { 0x3307, 0x0061 };

    // 3307 0061;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 1CAD | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3307 0061;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 1CAD | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_225)
{
    uint32_t const cps[2] = { 0x3307, 0x0041 };

    // 3307 0041;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 1CAD | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3307 0041;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 1CAD | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_226)
{
    uint32_t const cps[2] = { 0x3307, 0x0062 };

    // 3307 0062;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 1CC6 | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3307 0062;	
    // (㌇) SQUARE ESUKUUDO	[3E75 3E7E 3E79 1C73 3E85 1CC6 | 0020 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E75, 0x3E7E, 0x3E79, 0x1C73, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_227)
{
    uint32_t const cps[2] = { 0x3049, 0x0021 };

    // 3049 0021;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 0261 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3049 0021;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 | 0020 | 000D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_228)
{
    uint32_t const cps[2] = { 0x304A, 0x0021 };

    // 304A 0021;	
    // (お) HIRAGANA LETTER O	[3E76 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304A 0021;	
    // (お) HIRAGANA LETTER O	[3E76 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_229)
{
    uint32_t const cps[2] = { 0x30A9, 0x0021 };

    // 30A9 0021;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A9 0021;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_230)
{
    uint32_t const cps[2] = { 0xFF6B, 0x0021 };

    // FF6B 0021;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 0261 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6B 0021;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 | 0020 | 0010 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_231)
{
    uint32_t const cps[2] = { 0x30AA, 0x0021 };

    // 30AA 0021;	
    // (オ) KATAKANA LETTER O	[3E76 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AA 0021;	
    // (オ) KATAKANA LETTER O	[3E76 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_232)
{
    uint32_t const cps[2] = { 0xFF75, 0x0021 };

    // FF75 0021;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF75 0021;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_233)
{
    uint32_t const cps[2] = { 0x32D4, 0x0021 };

    // 32D4 0021;	
    // (㋔) CIRCLED KATAKANA O	[3E76 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D4 0021;	
    // (㋔) CIRCLED KATAKANA O	[3E76 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_234)
{
    uint32_t const cps[2] = { 0x3049, 0x003F };

    // 3049 003F;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 0267 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3049 003F;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 | 0020 | 000D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_235)
{
    uint32_t const cps[2] = { 0x304A, 0x003F };

    // 304A 003F;	
    // (お) HIRAGANA LETTER O	[3E76 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304A 003F;	
    // (お) HIRAGANA LETTER O	[3E76 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_236)
{
    uint32_t const cps[2] = { 0x30A9, 0x003F };

    // 30A9 003F;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A9 003F;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_237)
{
    uint32_t const cps[2] = { 0xFF6B, 0x003F };

    // FF6B 003F;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 0267 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6B 003F;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 | 0020 | 0010 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x0010, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_238)
{
    uint32_t const cps[2] = { 0x30AA, 0x003F };

    // 30AA 003F;	
    // (オ) KATAKANA LETTER O	[3E76 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AA 003F;	
    // (オ) KATAKANA LETTER O	[3E76 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_239)
{
    uint32_t const cps[2] = { 0xFF75, 0x003F };

    // FF75 003F;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF75 003F;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_240)
{
    uint32_t const cps[2] = { 0x32D4, 0x003F };

    // 32D4 003F;	
    // (㋔) CIRCLED KATAKANA O	[3E76 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D4 003F;	
    // (㋔) CIRCLED KATAKANA O	[3E76 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E76, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_241)
{
    uint32_t const cps[2] = { 0x330A, 0x0021 };

    // 330A 0021;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x1C73, 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330A 0021;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x3E76, 0x1C73, 0x3E92, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_242)
{
    uint32_t const cps[2] = { 0x330A, 0x003F };

    // 330A 003F;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x1C73, 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330A 003F;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x3E76, 0x1C73, 0x3E92, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_243)
{
    uint32_t const cps[2] = { 0x330A, 0x0061 };

    // 330A 0061;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x1C73, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330A 0061;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E76, 0x1C73, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_244)
{
    uint32_t const cps[2] = { 0x330A, 0x0041 };

    // 330A 0041;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x1C73, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330A 0041;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E76, 0x1C73, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_245)
{
    uint32_t const cps[2] = { 0x330A, 0x0062 };

    // 330A 0062;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x1C73, 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330A 0062;	
    // (㌊) SQUARE OOMU	[3E76 1C73 3E92 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E76, 0x1C73, 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_246)
{
    uint32_t const cps[2] = { 0x3049, 0x0061 };

    // 3049 0061;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3049 0061;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_247)
{
    uint32_t const cps[2] = { 0x3049, 0x0041 };

    // 3049 0041;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 000D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3049 0041;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 000D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_248)
{
    uint32_t const cps[2] = { 0x304A, 0x0061 };

    // 304A 0061;	
    // (お) HIRAGANA LETTER O	[3E76 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304A 0061;	
    // (お) HIRAGANA LETTER O	[3E76 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_249)
{
    uint32_t const cps[2] = { 0x304A, 0x0041 };

    // 304A 0041;	
    // (お) HIRAGANA LETTER O	[3E76 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304A 0041;	
    // (お) HIRAGANA LETTER O	[3E76 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_250)
{
    uint32_t const cps[2] = { 0x30A9, 0x0061 };

    // 30A9 0061;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A9 0061;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_251)
{
    uint32_t const cps[2] = { 0x30A9, 0x0041 };

    // 30A9 0041;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A9 0041;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_252)
{
    uint32_t const cps[2] = { 0xFF6B, 0x0061 };

    // FF6B 0061;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6B 0061;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_253)
{
    uint32_t const cps[2] = { 0xFF6B, 0x0041 };

    // FF6B 0041;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 0010 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6B 0041;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 1CAD | 0020 0020 | 0010 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_254)
{
    uint32_t const cps[2] = { 0x30AA, 0x0061 };

    // 30AA 0061;	
    // (オ) KATAKANA LETTER O	[3E76 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AA 0061;	
    // (オ) KATAKANA LETTER O	[3E76 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_255)
{
    uint32_t const cps[2] = { 0x30AA, 0x0041 };

    // 30AA 0041;	
    // (オ) KATAKANA LETTER O	[3E76 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AA 0041;	
    // (オ) KATAKANA LETTER O	[3E76 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_256)
{
    uint32_t const cps[2] = { 0xFF75, 0x0061 };

    // FF75 0061;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF75 0061;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_257)
{
    uint32_t const cps[2] = { 0xFF75, 0x0041 };

    // FF75 0041;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF75 0041;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_258)
{
    uint32_t const cps[2] = { 0x32D4, 0x0061 };

    // 32D4 0061;	
    // (㋔) CIRCLED KATAKANA O	[3E76 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D4 0061;	
    // (㋔) CIRCLED KATAKANA O	[3E76 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_259)
{
    uint32_t const cps[2] = { 0x32D4, 0x0041 };

    // 32D4 0041;	
    // (㋔) CIRCLED KATAKANA O	[3E76 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D4 0041;	
    // (㋔) CIRCLED KATAKANA O	[3E76 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_260)
{
    uint32_t const cps[2] = { 0x3049, 0x0062 };

    // 3049 0062;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 1CC6 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3049 0062;	
    // (ぉ) HIRAGANA LETTER SMALL O	[3E76 1CC6 | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_261)
{
    uint32_t const cps[2] = { 0x304A, 0x0062 };

    // 304A 0062;	
    // (お) HIRAGANA LETTER O	[3E76 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304A 0062;	
    // (お) HIRAGANA LETTER O	[3E76 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_262)
{
    uint32_t const cps[2] = { 0x30A9, 0x0062 };

    // 30A9 0062;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30A9 0062;	
    // (ォ) KATAKANA LETTER SMALL O	[3E76 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_263)
{
    uint32_t const cps[2] = { 0xFF6B, 0x0062 };

    // FF6B 0062;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 1CC6 | 0020 0020 | 0010 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF6B 0062;	
    // (ｫ) HALFWIDTH KATAKANA LETTER SMALL O	[3E76 1CC6 | 0020 0020 | 0010 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_264)
{
    uint32_t const cps[2] = { 0x30AA, 0x0062 };

    // 30AA 0062;	
    // (オ) KATAKANA LETTER O	[3E76 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AA 0062;	
    // (オ) KATAKANA LETTER O	[3E76 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_265)
{
    uint32_t const cps[2] = { 0xFF75, 0x0062 };

    // FF75 0062;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF75 0062;	
    // (ｵ) HALFWIDTH KATAKANA LETTER O	[3E76 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_266)
{
    uint32_t const cps[2] = { 0x32D4, 0x0062 };

    // 32D4 0062;	
    // (㋔) CIRCLED KATAKANA O	[3E76 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D4 0062;	
    // (㋔) CIRCLED KATAKANA O	[3E76 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_267)
{
    uint32_t const cps[2] = { 0x3309, 0x0021 };

    // 3309 0021;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x3EA1, 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3309 0021;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x3E76, 0x3EA1, 0x3E7E, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_268)
{
    uint32_t const cps[2] = { 0x3309, 0x003F };

    // 3309 003F;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x3EA1, 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3309 003F;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x3E76, 0x3EA1, 0x3E7E, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_269)
{
    uint32_t const cps[2] = { 0x3309, 0x0061 };

    // 3309 0061;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x3EA1, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3309 0061;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E76, 0x3EA1, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_270)
{
    uint32_t const cps[2] = { 0x3309, 0x0041 };

    // 3309 0041;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x3EA1, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3309 0041;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E76, 0x3EA1, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_271)
{
    uint32_t const cps[2] = { 0x3309, 0x0062 };

    // 3309 0062;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E76, 0x3EA1, 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3309 0062;	
    // (㌉) SQUARE ONSU	[3E76 3EA1 3E7E 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E76, 0x3EA1, 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_272)
{
    uint32_t const cps[3] = { 0x304B, 0x0334, 0x3099 };

    // 304B 0334 3099;	
    // (か̴) HIRAGANA LETTER KA, COMBINING TILDE OVERLAY	[3E77 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304B 0334 3099;	
    // (か̴) HIRAGANA LETTER KA, COMBINING TILDE OVERLAY	[3E77 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_273)
{
    uint32_t const cps[3] = { 0x304B, 0x3099, 0x0334 };

    // 304B 3099 0334;	
    // (が) HIRAGANA LETTER KA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E77 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304B 3099 0334;	
    // (が) HIRAGANA LETTER KA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E77 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_274)
{
    uint32_t const cps[2] = { 0x304C, 0x0334 };

    // 304C 0334;	
    // (が) HIRAGANA LETTER GA	[3E77 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304C 0334;	
    // (が) HIRAGANA LETTER GA	[3E77 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_275)
{
    uint32_t const cps[3] = { 0x30AB, 0x0334, 0x3099 };

    // 30AB 0334 3099;	
    // (カ̴) KATAKANA LETTER KA, COMBINING TILDE OVERLAY	[3E77 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AB 0334 3099;	
    // (カ̴) KATAKANA LETTER KA, COMBINING TILDE OVERLAY	[3E77 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_276)
{
    uint32_t const cps[3] = { 0x30AB, 0x3099, 0x0334 };

    // 30AB 3099 0334;	
    // (ガ) KATAKANA LETTER KA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E77 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AB 3099 0334;	
    // (ガ) KATAKANA LETTER KA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E77 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_277)
{
    uint32_t const cps[2] = { 0x30AC, 0x0334 };

    // 30AC 0334;	
    // (ガ) KATAKANA LETTER GA	[3E77 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AC 0334;	
    // (ガ) KATAKANA LETTER GA	[3E77 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E77, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_278)
{
    uint32_t const cps[2] = { 0x3095, 0x0021 };

    // 3095 0021;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 0261 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3095 0021;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 | 0020 | 000D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_279)
{
    uint32_t const cps[2] = { 0x304B, 0x0021 };

    // 304B 0021;	
    // (か) HIRAGANA LETTER KA	[3E77 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304B 0021;	
    // (か) HIRAGANA LETTER KA	[3E77 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_280)
{
    uint32_t const cps[2] = { 0x30F5, 0x0021 };

    // 30F5 0021;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F5 0021;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_281)
{
    uint32_t const cps[2] = { 0x30AB, 0x0021 };

    // 30AB 0021;	
    // (カ) KATAKANA LETTER KA	[3E77 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AB 0021;	
    // (カ) KATAKANA LETTER KA	[3E77 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_282)
{
    uint32_t const cps[2] = { 0xFF76, 0x0021 };

    // FF76 0021;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF76 0021;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_283)
{
    uint32_t const cps[2] = { 0x32D5, 0x0021 };

    // 32D5 0021;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D5 0021;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_284)
{
    uint32_t const cps[2] = { 0x304C, 0x0021 };

    // 304C 0021;	
    // (が) HIRAGANA LETTER GA	[3E77 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304C 0021;	
    // (が) HIRAGANA LETTER GA	[3E77 | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_285)
{
    uint32_t const cps[2] = { 0x30AC, 0x0021 };

    // 30AC 0021;	
    // (ガ) KATAKANA LETTER GA	[3E77 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AC 0021;	
    // (ガ) KATAKANA LETTER GA	[3E77 | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_286)
{
    uint32_t const cps[2] = { 0x3095, 0x003F };

    // 3095 003F;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 0267 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3095 003F;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 | 0020 | 000D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_287)
{
    uint32_t const cps[2] = { 0x304B, 0x003F };

    // 304B 003F;	
    // (か) HIRAGANA LETTER KA	[3E77 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304B 003F;	
    // (か) HIRAGANA LETTER KA	[3E77 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_288)
{
    uint32_t const cps[2] = { 0x30F5, 0x003F };

    // 30F5 003F;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F5 003F;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_289)
{
    uint32_t const cps[2] = { 0x30AB, 0x003F };

    // 30AB 003F;	
    // (カ) KATAKANA LETTER KA	[3E77 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AB 003F;	
    // (カ) KATAKANA LETTER KA	[3E77 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_290)
{
    uint32_t const cps[2] = { 0xFF76, 0x003F };

    // FF76 003F;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF76 003F;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_291)
{
    uint32_t const cps[2] = { 0x32D5, 0x003F };

    // 32D5 003F;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D5 003F;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E77, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_292)
{
    uint32_t const cps[2] = { 0x304C, 0x003F };

    // 304C 003F;	
    // (が) HIRAGANA LETTER GA	[3E77 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304C 003F;	
    // (が) HIRAGANA LETTER GA	[3E77 | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_293)
{
    uint32_t const cps[2] = { 0x30AC, 0x003F };

    // 30AC 003F;	
    // (ガ) KATAKANA LETTER GA	[3E77 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AC 003F;	
    // (ガ) KATAKANA LETTER GA	[3E77 | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_294)
{
    uint32_t const cps[2] = { 0x3095, 0x0061 };

    // 3095 0061;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 1CAD | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3095 0061;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 1CAD | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_295)
{
    uint32_t const cps[2] = { 0x3095, 0x0041 };

    // 3095 0041;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 1CAD | 0020 0020 | 000D 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3095 0041;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 1CAD | 0020 0020 | 000D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_296)
{
    uint32_t const cps[2] = { 0x304B, 0x0061 };

    // 304B 0061;	
    // (か) HIRAGANA LETTER KA	[3E77 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304B 0061;	
    // (か) HIRAGANA LETTER KA	[3E77 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_297)
{
    uint32_t const cps[2] = { 0x304B, 0x0041 };

    // 304B 0041;	
    // (か) HIRAGANA LETTER KA	[3E77 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304B 0041;	
    // (か) HIRAGANA LETTER KA	[3E77 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_298)
{
    uint32_t const cps[2] = { 0x30F5, 0x0061 };

    // 30F5 0061;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F5 0061;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_299)
{
    uint32_t const cps[2] = { 0x30F5, 0x0041 };

    // 30F5 0041;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F5 0041;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_300)
{
    uint32_t const cps[2] = { 0x30AB, 0x0061 };

    // 30AB 0061;	
    // (カ) KATAKANA LETTER KA	[3E77 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AB 0061;	
    // (カ) KATAKANA LETTER KA	[3E77 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_301)
{
    uint32_t const cps[2] = { 0x30AB, 0x0041 };

    // 30AB 0041;	
    // (カ) KATAKANA LETTER KA	[3E77 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AB 0041;	
    // (カ) KATAKANA LETTER KA	[3E77 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_302)
{
    uint32_t const cps[2] = { 0xFF76, 0x0061 };

    // FF76 0061;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF76 0061;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_303)
{
    uint32_t const cps[2] = { 0xFF76, 0x0041 };

    // FF76 0041;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF76 0041;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_304)
{
    uint32_t const cps[2] = { 0x32D5, 0x0061 };

    // 32D5 0061;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D5 0061;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_305)
{
    uint32_t const cps[2] = { 0x32D5, 0x0041 };

    // 32D5 0041;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D5 0041;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_306)
{
    uint32_t const cps[2] = { 0x304C, 0x0061 };

    // 304C 0061;	
    // (が) HIRAGANA LETTER GA	[3E77 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304C 0061;	
    // (が) HIRAGANA LETTER GA	[3E77 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_307)
{
    uint32_t const cps[2] = { 0x304C, 0x0041 };

    // 304C 0041;	
    // (が) HIRAGANA LETTER GA	[3E77 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304C 0041;	
    // (が) HIRAGANA LETTER GA	[3E77 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_308)
{
    uint32_t const cps[2] = { 0x30AC, 0x0061 };

    // 30AC 0061;	
    // (ガ) KATAKANA LETTER GA	[3E77 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AC 0061;	
    // (ガ) KATAKANA LETTER GA	[3E77 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_309)
{
    uint32_t const cps[2] = { 0x30AC, 0x0041 };

    // 30AC 0041;	
    // (ガ) KATAKANA LETTER GA	[3E77 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AC 0041;	
    // (ガ) KATAKANA LETTER GA	[3E77 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_310)
{
    uint32_t const cps[2] = { 0x3095, 0x0062 };

    // 3095 0062;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 1CC6 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3095 0062;	
    // (ゕ) HIRAGANA LETTER SMALL KA	[3E77 1CC6 | 0020 0020 | 000D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_311)
{
    uint32_t const cps[2] = { 0x304B, 0x0062 };

    // 304B 0062;	
    // (か) HIRAGANA LETTER KA	[3E77 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304B 0062;	
    // (か) HIRAGANA LETTER KA	[3E77 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_312)
{
    uint32_t const cps[2] = { 0x30F5, 0x0062 };

    // 30F5 0062;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F5 0062;	
    // (ヵ) KATAKANA LETTER SMALL KA	[3E77 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_313)
{
    uint32_t const cps[2] = { 0x30AB, 0x0062 };

    // 30AB 0062;	
    // (カ) KATAKANA LETTER KA	[3E77 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AB 0062;	
    // (カ) KATAKANA LETTER KA	[3E77 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_314)
{
    uint32_t const cps[2] = { 0xFF76, 0x0062 };

    // FF76 0062;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF76 0062;	
    // (ｶ) HALFWIDTH KATAKANA LETTER KA	[3E77 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_315)
{
    uint32_t const cps[2] = { 0x32D5, 0x0062 };

    // 32D5 0062;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D5 0062;	
    // (㋕) CIRCLED KATAKANA KA	[3E77 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_316)
{
    uint32_t const cps[2] = { 0x304C, 0x0062 };

    // 304C 0062;	
    // (が) HIRAGANA LETTER GA	[3E77 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304C 0062;	
    // (が) HIRAGANA LETTER GA	[3E77 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_317)
{
    uint32_t const cps[2] = { 0x30AC, 0x0062 };

    // 30AC 0062;	
    // (ガ) KATAKANA LETTER GA	[3E77 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AC 0062;	
    // (ガ) KATAKANA LETTER GA	[3E77 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_318)
{
    uint32_t const cps[2] = { 0x330B, 0x0021 };

    // 330B 0021;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E77, 0x3E72, 0x3E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330B 0021;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[17] = { 0x3E77, 0x3E72, 0x3E99, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_319)
{
    uint32_t const cps[2] = { 0x330B, 0x003F };

    // 330B 003F;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E77, 0x3E72, 0x3E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330B 003F;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[17] = { 0x3E77, 0x3E72, 0x3E99, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_320)
{
    uint32_t const cps[2] = { 0x330B, 0x0061 };

    // 330B 0061;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E77, 0x3E72, 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330B 0061;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E77, 0x3E72, 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_321)
{
    uint32_t const cps[2] = { 0x330B, 0x0041 };

    // 330B 0041;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E77, 0x3E72, 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330B 0041;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E77, 0x3E72, 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_322)
{
    uint32_t const cps[2] = { 0x330B, 0x0062 };

    // 330B 0062;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x3E77, 0x3E72, 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330B 0062;	
    // (㌋) SQUARE KAIRI	[3E77 3E72 3E99 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[20] = { 0x3E77, 0x3E72, 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_323)
{
    uint32_t const cps[2] = { 0x330C, 0x0021 };

    // 330C 0021;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330C 0021;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[21] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_324)
{
    uint32_t const cps[2] = { 0x330C, 0x003F };

    // 330C 003F;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330C 003F;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[21] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_325)
{
    uint32_t const cps[2] = { 0x330C, 0x0061 };

    // 330C 0061;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330C 0061;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_326)
{
    uint32_t const cps[2] = { 0x330C, 0x0041 };

    // 330C 0041;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330C 0041;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_327)
{
    uint32_t const cps[2] = { 0x330C, 0x0062 };

    // 330C 0062;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330C 0062;	
    // (㌌) SQUARE KARATTO	[3E77 3E98 3E83 3E85 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E77, 0x3E98, 0x3E83, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_328)
{
    uint32_t const cps[2] = { 0x330D, 0x0021 };

    // 330D 0021;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330D 0021;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[21] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_329)
{
    uint32_t const cps[2] = { 0x330D, 0x003F };

    // 330D 003F;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330D 003F;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[21] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_330)
{
    uint32_t const cps[2] = { 0x330D, 0x0061 };

    // 330D 0061;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330D 0061;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_331)
{
    uint32_t const cps[2] = { 0x330D, 0x0041 };

    // 330D 0041;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330D 0041;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_332)
{
    uint32_t const cps[2] = { 0x330D, 0x0062 };

    // 330D 0062;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330D 0062;	
    // (㌍) SQUARE KARORII	[3E77 3E9C 3E99 1C73 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E77, 0x3E9C, 0x3E99, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_333)
{
    uint32_t const cps[2] = { 0x330E, 0x0021 };

    // 330E 0021;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 0261 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3E9C, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330E 0021;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[20] = { 0x3E77, 0x3E9C, 0x3EA1, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_334)
{
    uint32_t const cps[2] = { 0x330E, 0x003F };

    // 330E 003F;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 0267 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3E9C, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330E 003F;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[20] = { 0x3E77, 0x3E9C, 0x3EA1, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_335)
{
    uint32_t const cps[2] = { 0x330E, 0x0061 };

    // 330E 0061;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3E9C, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330E 0061;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E77, 0x3E9C, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_336)
{
    uint32_t const cps[2] = { 0x330E, 0x0041 };

    // 330E 0041;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3E9C, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330E 0041;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E77, 0x3E9C, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_337)
{
    uint32_t const cps[2] = { 0x330E, 0x0062 };

    // 330E 0062;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3E9C, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330E 0062;	
    // (㌎) SQUARE GARON	[3E77 3E9C 3EA1 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E77, 0x3E9C, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_338)
{
    uint32_t const cps[2] = { 0x330F, 0x0021 };

    // 330F 0021;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 0261 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3EA1, 0x3E90, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330F 0021;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[20] = { 0x3E77, 0x3EA1, 0x3E90, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_339)
{
    uint32_t const cps[2] = { 0x330F, 0x003F };

    // 330F 003F;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 0267 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3EA1, 0x3E90, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330F 003F;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[20] = { 0x3E77, 0x3EA1, 0x3E90, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_340)
{
    uint32_t const cps[2] = { 0x330F, 0x0061 };

    // 330F 0061;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3EA1, 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330F 0061;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E77, 0x3EA1, 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_341)
{
    uint32_t const cps[2] = { 0x330F, 0x0041 };

    // 330F 0041;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3EA1, 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330F 0041;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E77, 0x3EA1, 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_342)
{
    uint32_t const cps[2] = { 0x330F, 0x0062 };

    // 330F 0062;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E77, 0x3EA1, 0x3E90, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 330F 0062;	
    // (㌏) SQUARE GANMA	[3E77 3EA1 3E90 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E77, 0x3EA1, 0x3E90, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_343)
{
    uint32_t const cps[3] = { 0x304D, 0x0334, 0x3099 };

    // 304D 0334 3099;	
    // (き̴) HIRAGANA LETTER KI, COMBINING TILDE OVERLAY	[3E78 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304D 0334 3099;	
    // (き̴) HIRAGANA LETTER KI, COMBINING TILDE OVERLAY	[3E78 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_344)
{
    uint32_t const cps[3] = { 0x304D, 0x3099, 0x0334 };

    // 304D 3099 0334;	
    // (ぎ) HIRAGANA LETTER KI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E78 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304D 3099 0334;	
    // (ぎ) HIRAGANA LETTER KI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E78 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_345)
{
    uint32_t const cps[2] = { 0x304E, 0x0334 };

    // 304E 0334;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304E 0334;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_346)
{
    uint32_t const cps[3] = { 0x30AD, 0x0334, 0x3099 };

    // 30AD 0334 3099;	
    // (キ̴) KATAKANA LETTER KI, COMBINING TILDE OVERLAY	[3E78 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AD 0334 3099;	
    // (キ̴) KATAKANA LETTER KI, COMBINING TILDE OVERLAY	[3E78 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_347)
{
    uint32_t const cps[3] = { 0x30AD, 0x3099, 0x0334 };

    // 30AD 3099 0334;	
    // (ギ) KATAKANA LETTER KI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E78 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AD 3099 0334;	
    // (ギ) KATAKANA LETTER KI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E78 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_348)
{
    uint32_t const cps[2] = { 0x30AE, 0x0334 };

    // 30AE 0334;	
    // (ギ) KATAKANA LETTER GI	[3E78 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AE 0334;	
    // (ギ) KATAKANA LETTER GI	[3E78 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E78, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_349)
{
    uint32_t const cps[2] = { 0x304D, 0x0021 };

    // 304D 0021;	
    // (き) HIRAGANA LETTER KI	[3E78 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304D 0021;	
    // (き) HIRAGANA LETTER KI	[3E78 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E78, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_350)
{
    uint32_t const cps[2] = { 0x30AD, 0x0021 };

    // 30AD 0021;	
    // (キ) KATAKANA LETTER KI	[3E78 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AD 0021;	
    // (キ) KATAKANA LETTER KI	[3E78 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E78, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_351)
{
    uint32_t const cps[2] = { 0xFF77, 0x0021 };

    // FF77 0021;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF77 0021;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E78, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_352)
{
    uint32_t const cps[2] = { 0x32D6, 0x0021 };

    // 32D6 0021;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D6 0021;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E78, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_353)
{
    uint32_t const cps[2] = { 0x304E, 0x0021 };

    // 304E 0021;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304E 0021;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_354)
{
    uint32_t const cps[2] = { 0x30AE, 0x0021 };

    // 30AE 0021;	
    // (ギ) KATAKANA LETTER GI	[3E78 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AE 0021;	
    // (ギ) KATAKANA LETTER GI	[3E78 | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_355)
{
    uint32_t const cps[2] = { 0x304D, 0x003F };

    // 304D 003F;	
    // (き) HIRAGANA LETTER KI	[3E78 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304D 003F;	
    // (き) HIRAGANA LETTER KI	[3E78 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E78, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_356)
{
    uint32_t const cps[2] = { 0x30AD, 0x003F };

    // 30AD 003F;	
    // (キ) KATAKANA LETTER KI	[3E78 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AD 003F;	
    // (キ) KATAKANA LETTER KI	[3E78 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E78, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_357)
{
    uint32_t const cps[2] = { 0xFF77, 0x003F };

    // FF77 003F;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF77 003F;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E78, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_358)
{
    uint32_t const cps[2] = { 0x32D6, 0x003F };

    // 32D6 003F;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D6 003F;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E78, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_359)
{
    uint32_t const cps[2] = { 0x304E, 0x003F };

    // 304E 003F;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304E 003F;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_360)
{
    uint32_t const cps[2] = { 0x30AE, 0x003F };

    // 30AE 003F;	
    // (ギ) KATAKANA LETTER GI	[3E78 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AE 003F;	
    // (ギ) KATAKANA LETTER GI	[3E78 | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_361)
{
    uint32_t const cps[2] = { 0x304D, 0x0061 };

    // 304D 0061;	
    // (き) HIRAGANA LETTER KI	[3E78 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304D 0061;	
    // (き) HIRAGANA LETTER KI	[3E78 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_362)
{
    uint32_t const cps[2] = { 0x304D, 0x0041 };

    // 304D 0041;	
    // (き) HIRAGANA LETTER KI	[3E78 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304D 0041;	
    // (き) HIRAGANA LETTER KI	[3E78 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_363)
{
    uint32_t const cps[2] = { 0x30AD, 0x0061 };

    // 30AD 0061;	
    // (キ) KATAKANA LETTER KI	[3E78 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AD 0061;	
    // (キ) KATAKANA LETTER KI	[3E78 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_364)
{
    uint32_t const cps[2] = { 0x30AD, 0x0041 };

    // 30AD 0041;	
    // (キ) KATAKANA LETTER KI	[3E78 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AD 0041;	
    // (キ) KATAKANA LETTER KI	[3E78 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_365)
{
    uint32_t const cps[2] = { 0xFF77, 0x0061 };

    // FF77 0061;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF77 0061;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_366)
{
    uint32_t const cps[2] = { 0xFF77, 0x0041 };

    // FF77 0041;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF77 0041;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_367)
{
    uint32_t const cps[2] = { 0x32D6, 0x0061 };

    // 32D6 0061;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D6 0061;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_368)
{
    uint32_t const cps[2] = { 0x32D6, 0x0041 };

    // 32D6 0041;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D6 0041;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_369)
{
    uint32_t const cps[2] = { 0x304E, 0x0061 };

    // 304E 0061;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304E 0061;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_370)
{
    uint32_t const cps[2] = { 0x304E, 0x0041 };

    // 304E 0041;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304E 0041;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_371)
{
    uint32_t const cps[2] = { 0x30AE, 0x0061 };

    // 30AE 0061;	
    // (ギ) KATAKANA LETTER GI	[3E78 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AE 0061;	
    // (ギ) KATAKANA LETTER GI	[3E78 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_372)
{
    uint32_t const cps[2] = { 0x30AE, 0x0041 };

    // 30AE 0041;	
    // (ギ) KATAKANA LETTER GI	[3E78 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AE 0041;	
    // (ギ) KATAKANA LETTER GI	[3E78 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E78, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_373)
{
    uint32_t const cps[2] = { 0x304D, 0x0062 };

    // 304D 0062;	
    // (き) HIRAGANA LETTER KI	[3E78 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304D 0062;	
    // (き) HIRAGANA LETTER KI	[3E78 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_374)
{
    uint32_t const cps[2] = { 0x30AD, 0x0062 };

    // 30AD 0062;	
    // (キ) KATAKANA LETTER KI	[3E78 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AD 0062;	
    // (キ) KATAKANA LETTER KI	[3E78 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_375)
{
    uint32_t const cps[2] = { 0xFF77, 0x0062 };

    // FF77 0062;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF77 0062;	
    // (ｷ) HALFWIDTH KATAKANA LETTER KI	[3E78 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_376)
{
    uint32_t const cps[2] = { 0x32D6, 0x0062 };

    // 32D6 0062;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D6 0062;	
    // (㋖) CIRCLED KATAKANA KI	[3E78 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_377)
{
    uint32_t const cps[2] = { 0x304E, 0x0062 };

    // 304E 0062;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304E 0062;	
    // (ぎ) HIRAGANA LETTER GI	[3E78 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_378)
{
    uint32_t const cps[2] = { 0x30AE, 0x0062 };

    // 30AE 0062;	
    // (ギ) KATAKANA LETTER GI	[3E78 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AE 0062;	
    // (ギ) KATAKANA LETTER GI	[3E78 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E78, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_379)
{
    uint32_t const cps[2] = { 0x3310, 0x0021 };

    // 3310 0021;	
    // (㌐) SQUARE GIGA	[3E78 3E77 0261 | 0020 0037 0020 0037 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E78, 0x3E77, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3310 0021;	
    // (㌐) SQUARE GIGA	[3E78 3E77 | 0020 0037 0020 0037 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[19] = { 0x3E78, 0x3E77, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_380)
{
    uint32_t const cps[2] = { 0x3310, 0x003F };

    // 3310 003F;	
    // (㌐) SQUARE GIGA	[3E78 3E77 0267 | 0020 0037 0020 0037 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E78, 0x3E77, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3310 003F;	
    // (㌐) SQUARE GIGA	[3E78 3E77 | 0020 0037 0020 0037 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[19] = { 0x3E78, 0x3E77, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_381)
{
    uint32_t const cps[2] = { 0x3310, 0x0061 };

    // 3310 0061;	
    // (㌐) SQUARE GIGA	[3E78 3E77 1CAD | 0020 0037 0020 0037 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E78, 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3310 0061;	
    // (㌐) SQUARE GIGA	[3E78 3E77 1CAD | 0020 0037 0020 0037 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E78, 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_382)
{
    uint32_t const cps[2] = { 0x3310, 0x0041 };

    // 3310 0041;	
    // (㌐) SQUARE GIGA	[3E78 3E77 1CAD | 0020 0037 0020 0037 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E78, 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3310 0041;	
    // (㌐) SQUARE GIGA	[3E78 3E77 1CAD | 0020 0037 0020 0037 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E78, 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_383)
{
    uint32_t const cps[2] = { 0x3310, 0x0062 };

    // 3310 0062;	
    // (㌐) SQUARE GIGA	[3E78 3E77 1CC6 | 0020 0037 0020 0037 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[16] = { 0x3E78, 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3310 0062;	
    // (㌐) SQUARE GIGA	[3E78 3E77 1CC6 | 0020 0037 0020 0037 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[22] = { 0x3E78, 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_384)
{
    uint32_t const cps[2] = { 0x3311, 0x0021 };

    // 3311 0021;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 0261 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E78, 0x3E87, 0x1C73, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3311 0021;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[20] = { 0x3E78, 0x3E87, 0x1C73, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_385)
{
    uint32_t const cps[2] = { 0x3311, 0x003F };

    // 3311 003F;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 0267 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E78, 0x3E87, 0x1C73, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3311 003F;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[20] = { 0x3E78, 0x3E87, 0x1C73, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_386)
{
    uint32_t const cps[2] = { 0x3311, 0x0061 };

    // 3311 0061;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E78, 0x3E87, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3311 0061;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E78, 0x3E87, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_387)
{
    uint32_t const cps[2] = { 0x3311, 0x0041 };

    // 3311 0041;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E78, 0x3E87, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3311 0041;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E78, 0x3E87, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_388)
{
    uint32_t const cps[2] = { 0x3311, 0x0062 };

    // 3311 0062;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E78, 0x3E87, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3311 0062;	
    // (㌑) SQUARE GINII	[3E78 3E87 1C73 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E78, 0x3E87, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_389)
{
    uint32_t const cps[2] = { 0x3312, 0x0021 };

    // 3312 0021;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3312 0021;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[21] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_390)
{
    uint32_t const cps[2] = { 0x3312, 0x003F };

    // 3312 003F;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3312 003F;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[21] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_391)
{
    uint32_t const cps[2] = { 0x3312, 0x0061 };

    // 3312 0061;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3312 0061;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_392)
{
    uint32_t const cps[2] = { 0x3312, 0x0041 };

    // 3312 0041;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3312 0041;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_393)
{
    uint32_t const cps[2] = { 0x3312, 0x0062 };

    // 3312 0062;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3312 0062;	
    // (㌒) SQUARE KYURII	[3E78 3E96 3E99 1C73 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E78, 0x3E96, 0x3E99, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_394)
{
    uint32_t const cps[2] = { 0x3313, 0x0021 };

    // 3313 0021;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 0261 | 0020 0037 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3313 0021;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 | 0020 0037 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[27] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_395)
{
    uint32_t const cps[2] = { 0x3313, 0x003F };

    // 3313 003F;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 0267 | 0020 0037 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3313 003F;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 | 0020 0037 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[27] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 27);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 27))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_396)
{
    uint32_t const cps[2] = { 0x3313, 0x0061 };

    // 3313 0061;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 1CAD | 0020 0037 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3313 0061;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 1CAD | 0020 0037 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_397)
{
    uint32_t const cps[2] = { 0x3313, 0x0041 };

    // 3313 0041;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 1CAD | 0020 0037 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3313 0041;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 1CAD | 0020 0037 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_398)
{
    uint32_t const cps[2] = { 0x3313, 0x0062 };

    // 3313 0062;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 1CC6 | 0020 0037 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[22] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3313 0062;	
    // (㌓) SQUARE GIRUDAA	[3E78 3E9A 3E81 1C73 1CC6 | 0020 0037 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[30] = { 0x3E78, 0x3E9A, 0x3E81, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 30);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 30))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_399)
{
    uint32_t const cps[2] = { 0x3314, 0x0021 };

    // 3314 0021;	
    // (㌔) SQUARE KIRO	[3E78 3E9C 0261 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x3E78, 0x3E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3314 0021;	
    // (㌔) SQUARE KIRO	[3E78 3E9C | 0020 0020 | 001C 001C | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[13] = { 0x3E78, 0x3E9C, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_400)
{
    uint32_t const cps[2] = { 0x3314, 0x003F };

    // 3314 003F;	
    // (㌔) SQUARE KIRO	[3E78 3E9C 0267 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x3E78, 0x3E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3314 003F;	
    // (㌔) SQUARE KIRO	[3E78 3E9C | 0020 0020 | 001C 001C | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[13] = { 0x3E78, 0x3E9C, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_401)
{
    uint32_t const cps[2] = { 0x3314, 0x0061 };

    // 3314 0061;	
    // (㌔) SQUARE KIRO	[3E78 3E9C 1CAD | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x3E78, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3314 0061;	
    // (㌔) SQUARE KIRO	[3E78 3E9C 1CAD | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x3E78, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_402)
{
    uint32_t const cps[2] = { 0x3314, 0x0041 };

    // 3314 0041;	
    // (㌔) SQUARE KIRO	[3E78 3E9C 1CAD | 0020 0020 0020 | 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[12] = { 0x3E78, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3314 0041;	
    // (㌔) SQUARE KIRO	[3E78 3E9C 1CAD | 0020 0020 0020 | 001C 001C 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x3E78, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_403)
{
    uint32_t const cps[2] = { 0x3314, 0x0062 };

    // 3314 0062;	
    // (㌔) SQUARE KIRO	[3E78 3E9C 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[12] = { 0x3E78, 0x3E9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3314 0062;	
    // (㌔) SQUARE KIRO	[3E78 3E9C 1CC6 | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x3E78, 0x3E9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_404)
{
    uint32_t const cps[2] = { 0x3315, 0x0021 };

    // 3315 0021;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 0261 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3315 0021;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[28] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_405)
{
    uint32_t const cps[2] = { 0x3315, 0x003F };

    // 3315 003F;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 0267 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3315 003F;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[28] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_406)
{
    uint32_t const cps[2] = { 0x3315, 0x0061 };

    // 3315 0061;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3315 0061;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_407)
{
    uint32_t const cps[2] = { 0x3315, 0x0041 };

    // 3315 0041;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3315 0041;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_408)
{
    uint32_t const cps[2] = { 0x3315, 0x0062 };

    // 3315 0062;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 1CC6 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3315 0062;	
    // (㌕) SQUARE KIROGURAMU	[3E78 3E9C 3E79 3E98 3E92 1CC6 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E78, 0x3E9C, 0x3E79, 0x3E98, 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_409)
{
    uint32_t const cps[2] = { 0x3316, 0x0021 };

    // 3316 0021;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A 0261 | 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[24] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3316 0021;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[29] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 29);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 29))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_410)
{
    uint32_t const cps[2] = { 0x3316, 0x003F };

    // 3316 003F;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A 0267 | 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[24] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3316 003F;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[29] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 29);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 29))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_411)
{
    uint32_t const cps[2] = { 0x3316, 0x0061 };

    // 3316 0061;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A 1CAD | 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[24] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3316 0061;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A 1CAD | 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[32] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 32);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 32))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_412)
{
    uint32_t const cps[2] = { 0x3316, 0x0041 };

    // 3316 0041;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A 1CAD | 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[24] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3316 0041;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A 1CAD | 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[32] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 32);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 32))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_413)
{
    uint32_t const cps[2] = { 0x3316, 0x0062 };

    // 3316 0062;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A 1CC6 | 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[24] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3316 0062;	
    // (㌖) SQUARE KIROMEETORU	[3E78 3E9C 3E93 1C73 3E85 3E9A 1CC6 | 0020 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[32] = { 0x3E78, 0x3E9C, 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 32);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 32))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_414)
{
    uint32_t const cps[2] = { 0x3317, 0x0021 };

    // 3317 0021;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 0261 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[21] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3317 0021;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[25] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 25);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 25))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_415)
{
    uint32_t const cps[2] = { 0x3317, 0x003F };

    // 3317 003F;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 0267 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[21] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3317 003F;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[25] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 25);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 25))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_416)
{
    uint32_t const cps[2] = { 0x3317, 0x0061 };

    // 3317 0061;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[21] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3317 0061;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[28] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_417)
{
    uint32_t const cps[2] = { 0x3317, 0x0041 };

    // 3317 0041;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[21] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3317 0041;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[28] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_418)
{
    uint32_t const cps[2] = { 0x3317, 0x0062 };

    // 3317 0062;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 1CC6 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[21] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3317 0062;	
    // (㌗) SQUARE KIROWATTO	[3E78 3E9C 3E9D 3E83 3E85 1CC6 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[28] = { 0x3E78, 0x3E9C, 0x3E9D, 0x3E83, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_419)
{
    uint32_t const cps[3] = { 0x304F, 0x0334, 0x3099 };

    // 304F 0334 3099;	
    // (く̴) HIRAGANA LETTER KU, COMBINING TILDE OVERLAY	[3E79 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304F 0334 3099;	
    // (く̴) HIRAGANA LETTER KU, COMBINING TILDE OVERLAY	[3E79 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_420)
{
    uint32_t const cps[3] = { 0x304F, 0x3099, 0x0334 };

    // 304F 3099 0334;	
    // (ぐ) HIRAGANA LETTER KU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E79 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304F 3099 0334;	
    // (ぐ) HIRAGANA LETTER KU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E79 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_421)
{
    uint32_t const cps[2] = { 0x3050, 0x0334 };

    // 3050 0334;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3050 0334;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_422)
{
    uint32_t const cps[3] = { 0x30AF, 0x0334, 0x3099 };

    // 30AF 0334 3099;	
    // (ク̴) KATAKANA LETTER KU, COMBINING TILDE OVERLAY	[3E79 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AF 0334 3099;	
    // (ク̴) KATAKANA LETTER KU, COMBINING TILDE OVERLAY	[3E79 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_423)
{
    uint32_t const cps[3] = { 0x30AF, 0x3099, 0x0334 };

    // 30AF 3099 0334;	
    // (グ) KATAKANA LETTER KU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E79 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AF 3099 0334;	
    // (グ) KATAKANA LETTER KU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E79 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_424)
{
    uint32_t const cps[2] = { 0x30B0, 0x0334 };

    // 30B0 0334;	
    // (グ) KATAKANA LETTER GU	[3E79 | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B0 0334;	
    // (グ) KATAKANA LETTER GU	[3E79 | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E79, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_425)
{
    uint32_t const cps[2] = { 0x304F, 0x0021 };

    // 304F 0021;	
    // (く) HIRAGANA LETTER KU	[3E79 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304F 0021;	
    // (く) HIRAGANA LETTER KU	[3E79 | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_426)
{
    uint32_t const cps[2] = { 0x31F0, 0x0021 };

    // 31F0 0021;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F0 0021;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_427)
{
    uint32_t const cps[2] = { 0x30AF, 0x0021 };

    // 30AF 0021;	
    // (ク) KATAKANA LETTER KU	[3E79 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AF 0021;	
    // (ク) KATAKANA LETTER KU	[3E79 | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_428)
{
    uint32_t const cps[2] = { 0xFF78, 0x0021 };

    // FF78 0021;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF78 0021;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_429)
{
    uint32_t const cps[2] = { 0x32D7, 0x0021 };

    // 32D7 0021;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D7 0021;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_430)
{
    uint32_t const cps[2] = { 0x3050, 0x0021 };

    // 3050 0021;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3050 0021;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_431)
{
    uint32_t const cps[2] = { 0x30B0, 0x0021 };

    // 30B0 0021;	
    // (グ) KATAKANA LETTER GU	[3E79 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B0 0021;	
    // (グ) KATAKANA LETTER GU	[3E79 | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_432)
{
    uint32_t const cps[2] = { 0x304F, 0x003F };

    // 304F 003F;	
    // (く) HIRAGANA LETTER KU	[3E79 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304F 003F;	
    // (く) HIRAGANA LETTER KU	[3E79 | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_433)
{
    uint32_t const cps[2] = { 0x31F0, 0x003F };

    // 31F0 003F;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F0 003F;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_434)
{
    uint32_t const cps[2] = { 0x30AF, 0x003F };

    // 30AF 003F;	
    // (ク) KATAKANA LETTER KU	[3E79 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AF 003F;	
    // (ク) KATAKANA LETTER KU	[3E79 | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_435)
{
    uint32_t const cps[2] = { 0xFF78, 0x003F };

    // FF78 003F;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF78 003F;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_436)
{
    uint32_t const cps[2] = { 0x32D7, 0x003F };

    // 32D7 003F;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D7 003F;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E79, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_437)
{
    uint32_t const cps[2] = { 0x3050, 0x003F };

    // 3050 003F;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 0267 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3050 003F;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 | 0020 0037 | 000E 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_438)
{
    uint32_t const cps[2] = { 0x30B0, 0x003F };

    // 30B0 003F;	
    // (グ) KATAKANA LETTER GU	[3E79 0267 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B0 003F;	
    // (グ) KATAKANA LETTER GU	[3E79 | 0020 0037 | 0011 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_439)
{
    uint32_t const cps[2] = { 0x304F, 0x0061 };

    // 304F 0061;	
    // (く) HIRAGANA LETTER KU	[3E79 1CAD | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304F 0061;	
    // (く) HIRAGANA LETTER KU	[3E79 1CAD | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_440)
{
    uint32_t const cps[2] = { 0x304F, 0x0041 };

    // 304F 0041;	
    // (く) HIRAGANA LETTER KU	[3E79 1CAD | 0020 0020 | 000E 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304F 0041;	
    // (く) HIRAGANA LETTER KU	[3E79 1CAD | 0020 0020 | 000E 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_441)
{
    uint32_t const cps[2] = { 0x31F0, 0x0061 };

    // 31F0 0061;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F0 0061;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 1CAD | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_442)
{
    uint32_t const cps[2] = { 0x31F0, 0x0041 };

    // 31F0 0041;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F0 0041;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 1CAD | 0020 0020 | 000F 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_443)
{
    uint32_t const cps[2] = { 0x30AF, 0x0061 };

    // 30AF 0061;	
    // (ク) KATAKANA LETTER KU	[3E79 1CAD | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AF 0061;	
    // (ク) KATAKANA LETTER KU	[3E79 1CAD | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_444)
{
    uint32_t const cps[2] = { 0x30AF, 0x0041 };

    // 30AF 0041;	
    // (ク) KATAKANA LETTER KU	[3E79 1CAD | 0020 0020 | 0011 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AF 0041;	
    // (ク) KATAKANA LETTER KU	[3E79 1CAD | 0020 0020 | 0011 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_445)
{
    uint32_t const cps[2] = { 0xFF78, 0x0061 };

    // FF78 0061;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 1CAD | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF78 0061;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 1CAD | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_446)
{
    uint32_t const cps[2] = { 0xFF78, 0x0041 };

    // FF78 0041;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 1CAD | 0020 0020 | 0012 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF78 0041;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 1CAD | 0020 0020 | 0012 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_447)
{
    uint32_t const cps[2] = { 0x32D7, 0x0061 };

    // 32D7 0061;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 1CAD | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D7 0061;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 1CAD | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_448)
{
    uint32_t const cps[2] = { 0x32D7, 0x0041 };

    // 32D7 0041;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 1CAD | 0020 0020 | 0013 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D7 0041;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 1CAD | 0020 0020 | 0013 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_449)
{
    uint32_t const cps[2] = { 0x3050, 0x0061 };

    // 3050 0061;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 1CAD | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3050 0061;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 1CAD | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_450)
{
    uint32_t const cps[2] = { 0x3050, 0x0041 };

    // 3050 0041;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 1CAD | 0020 0037 0020 | 000E 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3050 0041;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 1CAD | 0020 0037 0020 | 000E 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_451)
{
    uint32_t const cps[2] = { 0x30B0, 0x0061 };

    // 30B0 0061;	
    // (グ) KATAKANA LETTER GU	[3E79 1CAD | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B0 0061;	
    // (グ) KATAKANA LETTER GU	[3E79 1CAD | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_452)
{
    uint32_t const cps[2] = { 0x30B0, 0x0041 };

    // 30B0 0041;	
    // (グ) KATAKANA LETTER GU	[3E79 1CAD | 0020 0037 0020 | 0011 0002 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B0 0041;	
    // (グ) KATAKANA LETTER GU	[3E79 1CAD | 0020 0037 0020 | 0011 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_453)
{
    uint32_t const cps[2] = { 0x304F, 0x0062 };

    // 304F 0062;	
    // (く) HIRAGANA LETTER KU	[3E79 1CC6 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 304F 0062;	
    // (く) HIRAGANA LETTER KU	[3E79 1CC6 | 0020 0020 | 000E 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_454)
{
    uint32_t const cps[2] = { 0x31F0, 0x0062 };

    // 31F0 0062;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 31F0 0062;	
    // (ㇰ) KATAKANA LETTER SMALL KU	[3E79 1CC6 | 0020 0020 | 000F 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_455)
{
    uint32_t const cps[2] = { 0x30AF, 0x0062 };

    // 30AF 0062;	
    // (ク) KATAKANA LETTER KU	[3E79 1CC6 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30AF 0062;	
    // (ク) KATAKANA LETTER KU	[3E79 1CC6 | 0020 0020 | 0011 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_456)
{
    uint32_t const cps[2] = { 0xFF78, 0x0062 };

    // FF78 0062;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 1CC6 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF78 0062;	
    // (ｸ) HALFWIDTH KATAKANA LETTER KU	[3E79 1CC6 | 0020 0020 | 0012 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_457)
{
    uint32_t const cps[2] = { 0x32D7, 0x0062 };

    // 32D7 0062;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 1CC6 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D7 0062;	
    // (㋗) CIRCLED KATAKANA KU	[3E79 1CC6 | 0020 0020 | 0013 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_458)
{
    uint32_t const cps[2] = { 0x3050, 0x0062 };

    // 3050 0062;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3050 0062;	
    // (ぐ) HIRAGANA LETTER GU	[3E79 1CC6 | 0020 0037 0020 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_459)
{
    uint32_t const cps[2] = { 0x30B0, 0x0062 };

    // 30B0 0062;	
    // (グ) KATAKANA LETTER GU	[3E79 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B0 0062;	
    // (グ) KATAKANA LETTER GU	[3E79 1CC6 | 0020 0037 0020 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_460)
{
    uint32_t const cps[2] = { 0x3318, 0x0021 };

    // 3318 0021;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 0261 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E79, 0x3E98, 0x3E92, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3318 0021;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[20] = { 0x3E79, 0x3E98, 0x3E92, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_461)
{
    uint32_t const cps[2] = { 0x3318, 0x003F };

    // 3318 003F;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 0267 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E79, 0x3E98, 0x3E92, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3318 003F;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 | 0020 0037 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[20] = { 0x3E79, 0x3E98, 0x3E92, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_462)
{
    uint32_t const cps[2] = { 0x3318, 0x0061 };

    // 3318 0061;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E79, 0x3E98, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3318 0061;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E79, 0x3E98, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_463)
{
    uint32_t const cps[2] = { 0x3318, 0x0041 };

    // 3318 0041;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E79, 0x3E98, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3318 0041;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E79, 0x3E98, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_464)
{
    uint32_t const cps[2] = { 0x3318, 0x0062 };

    // 3318 0062;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x3E79, 0x3E98, 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3318 0062;	
    // (㌘) SQUARE GURAMU	[3E79 3E98 3E92 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[23] = { 0x3E79, 0x3E98, 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_465)
{
    uint32_t const cps[2] = { 0x3319, 0x0021 };

    // 3319 0021;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 0261 | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3319 0021;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[28] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_466)
{
    uint32_t const cps[2] = { 0x3319, 0x003F };

    // 3319 003F;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 0267 | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3319 003F;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 | 0020 0037 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[28] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_467)
{
    uint32_t const cps[2] = { 0x3319, 0x0061 };

    // 3319 0061;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 1CAD | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3319 0061;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 1CAD | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_468)
{
    uint32_t const cps[2] = { 0x3319, 0x0041 };

    // 3319 0041;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 1CAD | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3319 0041;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 1CAD | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_469)
{
    uint32_t const cps[2] = { 0x3319, 0x0062 };

    // 3319 0062;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 1CC6 | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3319 0062;	
    // (㌙) SQUARE GURAMUTON	[3E79 3E98 3E92 3E85 3EA1 1CC6 | 0020 0037 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E79, 0x3E98, 0x3E92, 0x3E85, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_470)
{
    uint32_t const cps[2] = { 0x331A, 0x0021 };

    // 331A 0021;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C 0261 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331A 0021;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[28] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_471)
{
    uint32_t const cps[2] = { 0x331A, 0x003F };

    // 331A 003F;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C 0267 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331A 003F;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C | FFFF FFFF FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[28] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 28);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 28))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_472)
{
    uint32_t const cps[2] = { 0x331A, 0x0061 };

    // 331A 0061;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331A 0061;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_473)
{
    uint32_t const cps[2] = { 0x331A, 0x0041 };

    // 331A 0041;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331A 0041;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_474)
{
    uint32_t const cps[2] = { 0x331A, 0x0062 };

    // 331A 0062;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C 1CC6 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331A 0062;	
    // (㌚) SQUARE KURUZEIRO	[3E79 3E9A 3E7F 3E72 3E9C 1CC6 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[31] = { 0x3E79, 0x3E9A, 0x3E7F, 0x3E72, 0x3E9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 31);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 31))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_475)
{
    uint32_t const cps[2] = { 0x331B, 0x0021 };

    // 331B 0021;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331B 0021;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[21] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_476)
{
    uint32_t const cps[2] = { 0x331B, 0x003F };

    // 331B 003F;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331B 003F;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 | 0020 0020 0020 0020 | 001C 001C 001C 001C | FFFF FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[21] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_477)
{
    uint32_t const cps[2] = { 0x331B, 0x0061 };

    // 331B 0061;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331B 0061;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_478)
{
    uint32_t const cps[2] = { 0x331B, 0x0041 };

    // 331B 0041;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331B 0041;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_479)
{
    uint32_t const cps[2] = { 0x331B, 0x0062 };

    // 331B 0062;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[18] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 331B 0062;	
    // (㌛) SQUARE KUROONE	[3E79 3E9C 1C73 3E89 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[24] = { 0x3E79, 0x3E9C, 0x1C73, 0x3E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 24);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 24))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_480)
{
    uint32_t const cps[3] = { 0x3051, 0x0334, 0x3099 };

    // 3051 0334 3099;	
    // (け̴) HIRAGANA LETTER KE, COMBINING TILDE OVERLAY	[3E7A | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3051 0334 3099;	
    // (け̴) HIRAGANA LETTER KE, COMBINING TILDE OVERLAY	[3E7A | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_481)
{
    uint32_t const cps[3] = { 0x3051, 0x3099, 0x0334 };

    // 3051 3099 0334;	
    // (げ) HIRAGANA LETTER KE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7A | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3051 3099 0334;	
    // (げ) HIRAGANA LETTER KE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7A | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_482)
{
    uint32_t const cps[2] = { 0x3052, 0x0334 };

    // 3052 0334;	
    // (げ) HIRAGANA LETTER GE	[3E7A | 0020 004A 0037 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3052 0334;	
    // (げ) HIRAGANA LETTER GE	[3E7A | 0020 004A 0037 | 000E 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_483)
{
    uint32_t const cps[3] = { 0x30B1, 0x0334, 0x3099 };

    // 30B1 0334 3099;	
    // (ケ̴) KATAKANA LETTER KE, COMBINING TILDE OVERLAY	[3E7A | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B1 0334 3099;	
    // (ケ̴) KATAKANA LETTER KE, COMBINING TILDE OVERLAY	[3E7A | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_484)
{
    uint32_t const cps[3] = { 0x30B1, 0x3099, 0x0334 };

    // 30B1 3099 0334;	
    // (ゲ) KATAKANA LETTER KE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7A | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B1 3099 0334;	
    // (ゲ) KATAKANA LETTER KE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7A | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_485)
{
    uint32_t const cps[2] = { 0x30B2, 0x0334 };

    // 30B2 0334;	
    // (ゲ) KATAKANA LETTER GE	[3E7A | 0020 004A 0037 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B2 0334;	
    // (ゲ) KATAKANA LETTER GE	[3E7A | 0020 004A 0037 | 0011 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x3E7A, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_486)
{
    uint32_t const cps[2] = { 0x3096, 0x0021 };

    // 3096 0021;	
    // (ゖ) HIRAGANA LETTER SMALL KE	[3E7A 0261 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3096 0021;	
    // (ゖ) HIRAGANA LETTER SMALL KE	[3E7A | 0020 | 000D | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_487)
{
    uint32_t const cps[2] = { 0x3051, 0x0021 };

    // 3051 0021;	
    // (け) HIRAGANA LETTER KE	[3E7A 0261 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3051 0021;	
    // (け) HIRAGANA LETTER KE	[3E7A | 0020 | 000E | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_488)
{
    uint32_t const cps[2] = { 0x30F6, 0x0021 };

    // 30F6 0021;	
    // (ヶ) KATAKANA LETTER SMALL KE	[3E7A 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F6 0021;	
    // (ヶ) KATAKANA LETTER SMALL KE	[3E7A | 0020 | 000F | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_489)
{
    uint32_t const cps[2] = { 0x30B1, 0x0021 };

    // 30B1 0021;	
    // (ケ) KATAKANA LETTER KE	[3E7A 0261 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B1 0021;	
    // (ケ) KATAKANA LETTER KE	[3E7A | 0020 | 0011 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_490)
{
    uint32_t const cps[2] = { 0xFF79, 0x0021 };

    // FF79 0021;	
    // (ｹ) HALFWIDTH KATAKANA LETTER KE	[3E7A 0261 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF79 0021;	
    // (ｹ) HALFWIDTH KATAKANA LETTER KE	[3E7A | 0020 | 0012 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_491)
{
    uint32_t const cps[2] = { 0x32D8, 0x0021 };

    // 32D8 0021;	
    // (㋘) CIRCLED KATAKANA KE	[3E7A 0261 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D8 0021;	
    // (㋘) CIRCLED KATAKANA KE	[3E7A | 0020 | 0013 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_492)
{
    uint32_t const cps[2] = { 0x3052, 0x0021 };

    // 3052 0021;	
    // (げ) HIRAGANA LETTER GE	[3E7A 0261 | 0020 0037 0020 | 000E 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E7A, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3052 0021;	
    // (げ) HIRAGANA LETTER GE	[3E7A | 0020 0037 | 000E 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E7A, 0x0000, 0x0020, 0x0037, 0x0000, 0x000E, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_493)
{
    uint32_t const cps[2] = { 0x30B2, 0x0021 };

    // 30B2 0021;	
    // (ゲ) KATAKANA LETTER GE	[3E7A 0261 | 0020 0037 0020 | 0011 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x3E7A, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B2 0021;	
    // (ゲ) KATAKANA LETTER GE	[3E7A | 0020 0037 | 0011 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x3E7A, 0x0000, 0x0020, 0x0037, 0x0000, 0x0011, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_494)
{
    uint32_t const cps[2] = { 0x3096, 0x003F };

    // 3096 003F;	
    // (ゖ) HIRAGANA LETTER SMALL KE	[3E7A 0267 | 0020 0020 | 000D 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3096 003F;	
    // (ゖ) HIRAGANA LETTER SMALL KE	[3E7A | 0020 | 000D | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x000D, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_495)
{
    uint32_t const cps[2] = { 0x3051, 0x003F };

    // 3051 003F;	
    // (け) HIRAGANA LETTER KE	[3E7A 0267 | 0020 0020 | 000E 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3051 003F;	
    // (け) HIRAGANA LETTER KE	[3E7A | 0020 | 000E | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x000E, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_496)
{
    uint32_t const cps[2] = { 0x30F6, 0x003F };

    // 30F6 003F;	
    // (ヶ) KATAKANA LETTER SMALL KE	[3E7A 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30F6 003F;	
    // (ヶ) KATAKANA LETTER SMALL KE	[3E7A | 0020 | 000F | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x000F, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_497)
{
    uint32_t const cps[2] = { 0x30B1, 0x003F };

    // 30B1 003F;	
    // (ケ) KATAKANA LETTER KE	[3E7A 0267 | 0020 0020 | 0011 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 30B1 003F;	
    // (ケ) KATAKANA LETTER KE	[3E7A | 0020 | 0011 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x0011, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_498)
{
    uint32_t const cps[2] = { 0xFF79, 0x003F };

    // FF79 003F;	
    // (ｹ) HALFWIDTH KATAKANA LETTER KE	[3E7A 0267 | 0020 0020 | 0012 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF79 003F;	
    // (ｹ) HALFWIDTH KATAKANA LETTER KE	[3E7A | 0020 | 0012 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x0012, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_246_499)
{
    uint32_t const cps[2] = { 0x32D8, 0x003F };

    // 32D8 003F;	
    // (㋘) CIRCLED KATAKANA KE	[3E7A 0267 | 0020 0020 | 0013 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3E7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 32D8 003F;	
    // (㋘) CIRCLED KATAKANA KE	[3E7A | 0020 | 0013 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3E7A, 0x0000, 0x0020, 0x0000, 0x0013, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

