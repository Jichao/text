// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_338_000)
{
    // 385E 003F;	
    // (㡞) CJK UNIFIED IDEOGRAPH-385E	[FB80 B85E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x385E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB85E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_001)
{
    // 385E 0061;	
    // (㡞) CJK UNIFIED IDEOGRAPH-385E	[FB80 B85E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x385E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB85E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_002)
{
    // 385E 0041;	
    // (㡞) CJK UNIFIED IDEOGRAPH-385E	[FB80 B85E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x385E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB85E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_003)
{
    // 385E 0062;	
    // (㡞) CJK UNIFIED IDEOGRAPH-385E	[FB80 B85E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x385E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB85E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_004)
{
    // 385F 0021;	
    // (㡟) CJK UNIFIED IDEOGRAPH-385F	[FB80 B85F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x385F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB85F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_005)
{
    // 385F 003F;	
    // (㡟) CJK UNIFIED IDEOGRAPH-385F	[FB80 B85F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x385F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB85F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_006)
{
    // 385F 0061;	
    // (㡟) CJK UNIFIED IDEOGRAPH-385F	[FB80 B85F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x385F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB85F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_007)
{
    // 385F 0041;	
    // (㡟) CJK UNIFIED IDEOGRAPH-385F	[FB80 B85F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x385F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB85F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_008)
{
    // 385F 0062;	
    // (㡟) CJK UNIFIED IDEOGRAPH-385F	[FB80 B85F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x385F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB85F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_009)
{
    // 3860 0021;	
    // (㡠) CJK UNIFIED IDEOGRAPH-3860	[FB80 B860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3860, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_010)
{
    // 3860 003F;	
    // (㡠) CJK UNIFIED IDEOGRAPH-3860	[FB80 B860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3860, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_011)
{
    // 3860 0061;	
    // (㡠) CJK UNIFIED IDEOGRAPH-3860	[FB80 B860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3860, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_012)
{
    // 3860 0041;	
    // (㡠) CJK UNIFIED IDEOGRAPH-3860	[FB80 B860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3860, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_013)
{
    // 3860 0062;	
    // (㡠) CJK UNIFIED IDEOGRAPH-3860	[FB80 B860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3860, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_014)
{
    // 3861 0021;	
    // (㡡) CJK UNIFIED IDEOGRAPH-3861	[FB80 B861 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3861, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB861, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_015)
{
    // 3861 003F;	
    // (㡡) CJK UNIFIED IDEOGRAPH-3861	[FB80 B861 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3861, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB861, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_016)
{
    // 3861 0061;	
    // (㡡) CJK UNIFIED IDEOGRAPH-3861	[FB80 B861 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3861, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_017)
{
    // 3861 0041;	
    // (㡡) CJK UNIFIED IDEOGRAPH-3861	[FB80 B861 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3861, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_018)
{
    // 3861 0062;	
    // (㡡) CJK UNIFIED IDEOGRAPH-3861	[FB80 B861 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3861, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB861, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_019)
{
    // 3862 0021;	
    // (㡢) CJK UNIFIED IDEOGRAPH-3862	[FB80 B862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3862, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_020)
{
    // 2F888 0021;	
    // (㡢) CJK COMPATIBILITY IDEOGRAPH-2F888	[FB80 B862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F888, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_021)
{
    // 3862 003F;	
    // (㡢) CJK UNIFIED IDEOGRAPH-3862	[FB80 B862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3862, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_022)
{
    // 2F888 003F;	
    // (㡢) CJK COMPATIBILITY IDEOGRAPH-2F888	[FB80 B862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F888, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_023)
{
    // 3862 0061;	
    // (㡢) CJK UNIFIED IDEOGRAPH-3862	[FB80 B862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3862, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_024)
{
    // 2F888 0061;	
    // (㡢) CJK COMPATIBILITY IDEOGRAPH-2F888	[FB80 B862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F888, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_025)
{
    // 3862 0041;	
    // (㡢) CJK UNIFIED IDEOGRAPH-3862	[FB80 B862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3862, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_026)
{
    // 2F888 0041;	
    // (㡢) CJK COMPATIBILITY IDEOGRAPH-2F888	[FB80 B862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F888, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_027)
{
    // 3862 0062;	
    // (㡢) CJK UNIFIED IDEOGRAPH-3862	[FB80 B862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3862, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_028)
{
    // 2F888 0062;	
    // (㡢) CJK COMPATIBILITY IDEOGRAPH-2F888	[FB80 B862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F888, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_029)
{
    // 3863 0021;	
    // (㡣) CJK UNIFIED IDEOGRAPH-3863	[FB80 B863 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3863, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_030)
{
    // 3863 003F;	
    // (㡣) CJK UNIFIED IDEOGRAPH-3863	[FB80 B863 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3863, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_031)
{
    // 3863 0061;	
    // (㡣) CJK UNIFIED IDEOGRAPH-3863	[FB80 B863 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3863, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_032)
{
    // 3863 0041;	
    // (㡣) CJK UNIFIED IDEOGRAPH-3863	[FB80 B863 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3863, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_033)
{
    // 3863 0062;	
    // (㡣) CJK UNIFIED IDEOGRAPH-3863	[FB80 B863 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3863, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_034)
{
    // 3864 0021;	
    // (㡤) CJK UNIFIED IDEOGRAPH-3864	[FB80 B864 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3864, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB864, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_035)
{
    // 3864 003F;	
    // (㡤) CJK UNIFIED IDEOGRAPH-3864	[FB80 B864 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3864, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB864, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_036)
{
    // 3864 0061;	
    // (㡤) CJK UNIFIED IDEOGRAPH-3864	[FB80 B864 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3864, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_037)
{
    // 3864 0041;	
    // (㡤) CJK UNIFIED IDEOGRAPH-3864	[FB80 B864 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3864, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_038)
{
    // 3864 0062;	
    // (㡤) CJK UNIFIED IDEOGRAPH-3864	[FB80 B864 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3864, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB864, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_039)
{
    // 3865 0021;	
    // (㡥) CJK UNIFIED IDEOGRAPH-3865	[FB80 B865 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3865, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB865, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_040)
{
    // 3865 003F;	
    // (㡥) CJK UNIFIED IDEOGRAPH-3865	[FB80 B865 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3865, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB865, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_041)
{
    // 3865 0061;	
    // (㡥) CJK UNIFIED IDEOGRAPH-3865	[FB80 B865 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3865, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_042)
{
    // 3865 0041;	
    // (㡥) CJK UNIFIED IDEOGRAPH-3865	[FB80 B865 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3865, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_043)
{
    // 3865 0062;	
    // (㡥) CJK UNIFIED IDEOGRAPH-3865	[FB80 B865 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3865, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB865, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_044)
{
    // 3866 0021;	
    // (㡦) CJK UNIFIED IDEOGRAPH-3866	[FB80 B866 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3866, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB866, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_045)
{
    // 3866 003F;	
    // (㡦) CJK UNIFIED IDEOGRAPH-3866	[FB80 B866 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3866, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB866, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_046)
{
    // 3866 0061;	
    // (㡦) CJK UNIFIED IDEOGRAPH-3866	[FB80 B866 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3866, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_047)
{
    // 3866 0041;	
    // (㡦) CJK UNIFIED IDEOGRAPH-3866	[FB80 B866 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3866, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_048)
{
    // 3866 0062;	
    // (㡦) CJK UNIFIED IDEOGRAPH-3866	[FB80 B866 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3866, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB866, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_049)
{
    // 3867 0021;	
    // (㡧) CJK UNIFIED IDEOGRAPH-3867	[FB80 B867 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3867, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB867, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_050)
{
    // 3867 003F;	
    // (㡧) CJK UNIFIED IDEOGRAPH-3867	[FB80 B867 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3867, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB867, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_051)
{
    // 3867 0061;	
    // (㡧) CJK UNIFIED IDEOGRAPH-3867	[FB80 B867 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3867, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_052)
{
    // 3867 0041;	
    // (㡧) CJK UNIFIED IDEOGRAPH-3867	[FB80 B867 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3867, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_053)
{
    // 3867 0062;	
    // (㡧) CJK UNIFIED IDEOGRAPH-3867	[FB80 B867 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3867, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB867, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_054)
{
    // 3868 0021;	
    // (㡨) CJK UNIFIED IDEOGRAPH-3868	[FB80 B868 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3868, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB868, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_055)
{
    // 3868 003F;	
    // (㡨) CJK UNIFIED IDEOGRAPH-3868	[FB80 B868 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3868, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB868, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_056)
{
    // 3868 0061;	
    // (㡨) CJK UNIFIED IDEOGRAPH-3868	[FB80 B868 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3868, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_057)
{
    // 3868 0041;	
    // (㡨) CJK UNIFIED IDEOGRAPH-3868	[FB80 B868 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3868, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_058)
{
    // 3868 0062;	
    // (㡨) CJK UNIFIED IDEOGRAPH-3868	[FB80 B868 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3868, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB868, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_059)
{
    // 3869 0021;	
    // (㡩) CJK UNIFIED IDEOGRAPH-3869	[FB80 B869 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3869, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB869, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_060)
{
    // 3869 003F;	
    // (㡩) CJK UNIFIED IDEOGRAPH-3869	[FB80 B869 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3869, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB869, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_061)
{
    // 3869 0061;	
    // (㡩) CJK UNIFIED IDEOGRAPH-3869	[FB80 B869 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3869, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_062)
{
    // 3869 0041;	
    // (㡩) CJK UNIFIED IDEOGRAPH-3869	[FB80 B869 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3869, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_063)
{
    // 3869 0062;	
    // (㡩) CJK UNIFIED IDEOGRAPH-3869	[FB80 B869 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3869, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB869, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_064)
{
    // 386A 0021;	
    // (㡪) CJK UNIFIED IDEOGRAPH-386A	[FB80 B86A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB86A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_065)
{
    // 386A 003F;	
    // (㡪) CJK UNIFIED IDEOGRAPH-386A	[FB80 B86A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB86A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_066)
{
    // 386A 0061;	
    // (㡪) CJK UNIFIED IDEOGRAPH-386A	[FB80 B86A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB86A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_067)
{
    // 386A 0041;	
    // (㡪) CJK UNIFIED IDEOGRAPH-386A	[FB80 B86A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x386A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB86A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_068)
{
    // 386A 0062;	
    // (㡪) CJK UNIFIED IDEOGRAPH-386A	[FB80 B86A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB86A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_069)
{
    // 386B 0021;	
    // (㡫) CJK UNIFIED IDEOGRAPH-386B	[FB80 B86B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB86B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_070)
{
    // 386B 003F;	
    // (㡫) CJK UNIFIED IDEOGRAPH-386B	[FB80 B86B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB86B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_071)
{
    // 386B 0061;	
    // (㡫) CJK UNIFIED IDEOGRAPH-386B	[FB80 B86B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB86B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_072)
{
    // 386B 0041;	
    // (㡫) CJK UNIFIED IDEOGRAPH-386B	[FB80 B86B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x386B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB86B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_073)
{
    // 386B 0062;	
    // (㡫) CJK UNIFIED IDEOGRAPH-386B	[FB80 B86B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB86B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_074)
{
    // 386C 0021;	
    // (㡬) CJK UNIFIED IDEOGRAPH-386C	[FB80 B86C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB86C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_075)
{
    // 386C 003F;	
    // (㡬) CJK UNIFIED IDEOGRAPH-386C	[FB80 B86C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB86C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_076)
{
    // 386C 0061;	
    // (㡬) CJK UNIFIED IDEOGRAPH-386C	[FB80 B86C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB86C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_077)
{
    // 386C 0041;	
    // (㡬) CJK UNIFIED IDEOGRAPH-386C	[FB80 B86C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x386C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB86C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_078)
{
    // 386C 0062;	
    // (㡬) CJK UNIFIED IDEOGRAPH-386C	[FB80 B86C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB86C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_079)
{
    // 386D 0021;	
    // (㡭) CJK UNIFIED IDEOGRAPH-386D	[FB80 B86D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB86D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_080)
{
    // 386D 003F;	
    // (㡭) CJK UNIFIED IDEOGRAPH-386D	[FB80 B86D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB86D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_081)
{
    // 386D 0061;	
    // (㡭) CJK UNIFIED IDEOGRAPH-386D	[FB80 B86D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB86D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_082)
{
    // 386D 0041;	
    // (㡭) CJK UNIFIED IDEOGRAPH-386D	[FB80 B86D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x386D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB86D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_083)
{
    // 386D 0062;	
    // (㡭) CJK UNIFIED IDEOGRAPH-386D	[FB80 B86D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB86D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_084)
{
    // 386E 0021;	
    // (㡮) CJK UNIFIED IDEOGRAPH-386E	[FB80 B86E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB86E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_085)
{
    // 386E 003F;	
    // (㡮) CJK UNIFIED IDEOGRAPH-386E	[FB80 B86E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB86E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_086)
{
    // 386E 0061;	
    // (㡮) CJK UNIFIED IDEOGRAPH-386E	[FB80 B86E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB86E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_087)
{
    // 386E 0041;	
    // (㡮) CJK UNIFIED IDEOGRAPH-386E	[FB80 B86E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x386E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB86E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_088)
{
    // 386E 0062;	
    // (㡮) CJK UNIFIED IDEOGRAPH-386E	[FB80 B86E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB86E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_089)
{
    // 386F 0021;	
    // (㡯) CJK UNIFIED IDEOGRAPH-386F	[FB80 B86F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB86F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_090)
{
    // 386F 003F;	
    // (㡯) CJK UNIFIED IDEOGRAPH-386F	[FB80 B86F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB86F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_091)
{
    // 386F 0061;	
    // (㡯) CJK UNIFIED IDEOGRAPH-386F	[FB80 B86F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB86F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_092)
{
    // 386F 0041;	
    // (㡯) CJK UNIFIED IDEOGRAPH-386F	[FB80 B86F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x386F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB86F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_093)
{
    // 386F 0062;	
    // (㡯) CJK UNIFIED IDEOGRAPH-386F	[FB80 B86F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x386F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB86F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_094)
{
    // 3870 0021;	
    // (㡰) CJK UNIFIED IDEOGRAPH-3870	[FB80 B870 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3870, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB870, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_095)
{
    // 3870 003F;	
    // (㡰) CJK UNIFIED IDEOGRAPH-3870	[FB80 B870 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3870, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB870, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_096)
{
    // 3870 0061;	
    // (㡰) CJK UNIFIED IDEOGRAPH-3870	[FB80 B870 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3870, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_097)
{
    // 3870 0041;	
    // (㡰) CJK UNIFIED IDEOGRAPH-3870	[FB80 B870 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3870, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_098)
{
    // 3870 0062;	
    // (㡰) CJK UNIFIED IDEOGRAPH-3870	[FB80 B870 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3870, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB870, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_099)
{
    // 3871 0021;	
    // (㡱) CJK UNIFIED IDEOGRAPH-3871	[FB80 B871 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3871, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB871, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_100)
{
    // 3871 003F;	
    // (㡱) CJK UNIFIED IDEOGRAPH-3871	[FB80 B871 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3871, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB871, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_101)
{
    // 3871 0061;	
    // (㡱) CJK UNIFIED IDEOGRAPH-3871	[FB80 B871 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3871, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_102)
{
    // 3871 0041;	
    // (㡱) CJK UNIFIED IDEOGRAPH-3871	[FB80 B871 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3871, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_103)
{
    // 3871 0062;	
    // (㡱) CJK UNIFIED IDEOGRAPH-3871	[FB80 B871 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3871, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB871, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_104)
{
    // 3872 0021;	
    // (㡲) CJK UNIFIED IDEOGRAPH-3872	[FB80 B872 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3872, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB872, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_105)
{
    // 3872 003F;	
    // (㡲) CJK UNIFIED IDEOGRAPH-3872	[FB80 B872 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3872, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB872, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_106)
{
    // 3872 0061;	
    // (㡲) CJK UNIFIED IDEOGRAPH-3872	[FB80 B872 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3872, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_107)
{
    // 3872 0041;	
    // (㡲) CJK UNIFIED IDEOGRAPH-3872	[FB80 B872 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3872, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_108)
{
    // 3872 0062;	
    // (㡲) CJK UNIFIED IDEOGRAPH-3872	[FB80 B872 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3872, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB872, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_109)
{
    // 3873 0021;	
    // (㡳) CJK UNIFIED IDEOGRAPH-3873	[FB80 B873 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3873, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB873, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_110)
{
    // 3873 003F;	
    // (㡳) CJK UNIFIED IDEOGRAPH-3873	[FB80 B873 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3873, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB873, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_111)
{
    // 3873 0061;	
    // (㡳) CJK UNIFIED IDEOGRAPH-3873	[FB80 B873 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3873, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_112)
{
    // 3873 0041;	
    // (㡳) CJK UNIFIED IDEOGRAPH-3873	[FB80 B873 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3873, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_113)
{
    // 3873 0062;	
    // (㡳) CJK UNIFIED IDEOGRAPH-3873	[FB80 B873 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3873, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB873, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_114)
{
    // 3874 0021;	
    // (㡴) CJK UNIFIED IDEOGRAPH-3874	[FB80 B874 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3874, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB874, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_115)
{
    // 3874 003F;	
    // (㡴) CJK UNIFIED IDEOGRAPH-3874	[FB80 B874 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3874, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB874, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_116)
{
    // 3874 0061;	
    // (㡴) CJK UNIFIED IDEOGRAPH-3874	[FB80 B874 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3874, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_117)
{
    // 3874 0041;	
    // (㡴) CJK UNIFIED IDEOGRAPH-3874	[FB80 B874 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3874, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_118)
{
    // 3874 0062;	
    // (㡴) CJK UNIFIED IDEOGRAPH-3874	[FB80 B874 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3874, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB874, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_119)
{
    // 3875 0021;	
    // (㡵) CJK UNIFIED IDEOGRAPH-3875	[FB80 B875 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3875, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB875, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_120)
{
    // 3875 003F;	
    // (㡵) CJK UNIFIED IDEOGRAPH-3875	[FB80 B875 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3875, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB875, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_121)
{
    // 3875 0061;	
    // (㡵) CJK UNIFIED IDEOGRAPH-3875	[FB80 B875 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3875, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_122)
{
    // 3875 0041;	
    // (㡵) CJK UNIFIED IDEOGRAPH-3875	[FB80 B875 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3875, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_123)
{
    // 3875 0062;	
    // (㡵) CJK UNIFIED IDEOGRAPH-3875	[FB80 B875 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3875, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB875, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_124)
{
    // 3876 0021;	
    // (㡶) CJK UNIFIED IDEOGRAPH-3876	[FB80 B876 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3876, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB876, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_125)
{
    // 3876 003F;	
    // (㡶) CJK UNIFIED IDEOGRAPH-3876	[FB80 B876 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3876, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB876, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_126)
{
    // 3876 0061;	
    // (㡶) CJK UNIFIED IDEOGRAPH-3876	[FB80 B876 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3876, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_127)
{
    // 3876 0041;	
    // (㡶) CJK UNIFIED IDEOGRAPH-3876	[FB80 B876 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3876, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_128)
{
    // 3876 0062;	
    // (㡶) CJK UNIFIED IDEOGRAPH-3876	[FB80 B876 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3876, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB876, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_129)
{
    // 3877 0021;	
    // (㡷) CJK UNIFIED IDEOGRAPH-3877	[FB80 B877 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3877, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB877, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_130)
{
    // 3877 003F;	
    // (㡷) CJK UNIFIED IDEOGRAPH-3877	[FB80 B877 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3877, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB877, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_131)
{
    // 3877 0061;	
    // (㡷) CJK UNIFIED IDEOGRAPH-3877	[FB80 B877 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3877, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_132)
{
    // 3877 0041;	
    // (㡷) CJK UNIFIED IDEOGRAPH-3877	[FB80 B877 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3877, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_133)
{
    // 3877 0062;	
    // (㡷) CJK UNIFIED IDEOGRAPH-3877	[FB80 B877 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3877, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB877, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_134)
{
    // 3878 0021;	
    // (㡸) CJK UNIFIED IDEOGRAPH-3878	[FB80 B878 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3878, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB878, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_135)
{
    // 3878 003F;	
    // (㡸) CJK UNIFIED IDEOGRAPH-3878	[FB80 B878 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3878, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB878, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_136)
{
    // 3878 0061;	
    // (㡸) CJK UNIFIED IDEOGRAPH-3878	[FB80 B878 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3878, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_137)
{
    // 3878 0041;	
    // (㡸) CJK UNIFIED IDEOGRAPH-3878	[FB80 B878 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3878, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_138)
{
    // 3878 0062;	
    // (㡸) CJK UNIFIED IDEOGRAPH-3878	[FB80 B878 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3878, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB878, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_139)
{
    // 3879 0021;	
    // (㡹) CJK UNIFIED IDEOGRAPH-3879	[FB80 B879 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3879, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB879, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_140)
{
    // 3879 003F;	
    // (㡹) CJK UNIFIED IDEOGRAPH-3879	[FB80 B879 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3879, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB879, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_141)
{
    // 3879 0061;	
    // (㡹) CJK UNIFIED IDEOGRAPH-3879	[FB80 B879 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3879, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_142)
{
    // 3879 0041;	
    // (㡹) CJK UNIFIED IDEOGRAPH-3879	[FB80 B879 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3879, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_143)
{
    // 3879 0062;	
    // (㡹) CJK UNIFIED IDEOGRAPH-3879	[FB80 B879 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3879, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB879, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_144)
{
    // 387A 0021;	
    // (㡺) CJK UNIFIED IDEOGRAPH-387A	[FB80 B87A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB87A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_145)
{
    // 387A 003F;	
    // (㡺) CJK UNIFIED IDEOGRAPH-387A	[FB80 B87A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB87A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_146)
{
    // 387A 0061;	
    // (㡺) CJK UNIFIED IDEOGRAPH-387A	[FB80 B87A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB87A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_147)
{
    // 387A 0041;	
    // (㡺) CJK UNIFIED IDEOGRAPH-387A	[FB80 B87A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x387A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB87A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_148)
{
    // 387A 0062;	
    // (㡺) CJK UNIFIED IDEOGRAPH-387A	[FB80 B87A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB87A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_149)
{
    // 387B 0021;	
    // (㡻) CJK UNIFIED IDEOGRAPH-387B	[FB80 B87B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB87B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_150)
{
    // 387B 003F;	
    // (㡻) CJK UNIFIED IDEOGRAPH-387B	[FB80 B87B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB87B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_151)
{
    // 387B 0061;	
    // (㡻) CJK UNIFIED IDEOGRAPH-387B	[FB80 B87B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB87B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_152)
{
    // 387B 0041;	
    // (㡻) CJK UNIFIED IDEOGRAPH-387B	[FB80 B87B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x387B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB87B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_153)
{
    // 387B 0062;	
    // (㡻) CJK UNIFIED IDEOGRAPH-387B	[FB80 B87B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB87B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_154)
{
    // 387C 0021;	
    // (㡼) CJK UNIFIED IDEOGRAPH-387C	[FB80 B87C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_155)
{
    // 2F88A 0021;	
    // (㡼) CJK COMPATIBILITY IDEOGRAPH-2F88A	[FB80 B87C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_156)
{
    // 387C 003F;	
    // (㡼) CJK UNIFIED IDEOGRAPH-387C	[FB80 B87C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_157)
{
    // 2F88A 003F;	
    // (㡼) CJK COMPATIBILITY IDEOGRAPH-2F88A	[FB80 B87C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_158)
{
    // 387C 0061;	
    // (㡼) CJK UNIFIED IDEOGRAPH-387C	[FB80 B87C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_159)
{
    // 2F88A 0061;	
    // (㡼) CJK COMPATIBILITY IDEOGRAPH-2F88A	[FB80 B87C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_160)
{
    // 387C 0041;	
    // (㡼) CJK UNIFIED IDEOGRAPH-387C	[FB80 B87C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x387C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_161)
{
    // 2F88A 0041;	
    // (㡼) CJK COMPATIBILITY IDEOGRAPH-2F88A	[FB80 B87C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F88A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_162)
{
    // 387C 0062;	
    // (㡼) CJK UNIFIED IDEOGRAPH-387C	[FB80 B87C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_163)
{
    // 2F88A 0062;	
    // (㡼) CJK COMPATIBILITY IDEOGRAPH-2F88A	[FB80 B87C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F88A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB87C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_164)
{
    // 387D 0021;	
    // (㡽) CJK UNIFIED IDEOGRAPH-387D	[FB80 B87D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB87D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_165)
{
    // 387D 003F;	
    // (㡽) CJK UNIFIED IDEOGRAPH-387D	[FB80 B87D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB87D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_166)
{
    // 387D 0061;	
    // (㡽) CJK UNIFIED IDEOGRAPH-387D	[FB80 B87D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB87D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_167)
{
    // 387D 0041;	
    // (㡽) CJK UNIFIED IDEOGRAPH-387D	[FB80 B87D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x387D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB87D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_168)
{
    // 387D 0062;	
    // (㡽) CJK UNIFIED IDEOGRAPH-387D	[FB80 B87D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB87D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_169)
{
    // 387E 0021;	
    // (㡾) CJK UNIFIED IDEOGRAPH-387E	[FB80 B87E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB87E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_170)
{
    // 387E 003F;	
    // (㡾) CJK UNIFIED IDEOGRAPH-387E	[FB80 B87E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB87E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_171)
{
    // 387E 0061;	
    // (㡾) CJK UNIFIED IDEOGRAPH-387E	[FB80 B87E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB87E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_172)
{
    // 387E 0041;	
    // (㡾) CJK UNIFIED IDEOGRAPH-387E	[FB80 B87E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x387E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB87E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_173)
{
    // 387E 0062;	
    // (㡾) CJK UNIFIED IDEOGRAPH-387E	[FB80 B87E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB87E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_174)
{
    // 387F 0021;	
    // (㡿) CJK UNIFIED IDEOGRAPH-387F	[FB80 B87F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB87F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_175)
{
    // 387F 003F;	
    // (㡿) CJK UNIFIED IDEOGRAPH-387F	[FB80 B87F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB87F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_176)
{
    // 387F 0061;	
    // (㡿) CJK UNIFIED IDEOGRAPH-387F	[FB80 B87F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB87F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_177)
{
    // 387F 0041;	
    // (㡿) CJK UNIFIED IDEOGRAPH-387F	[FB80 B87F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x387F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB87F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_178)
{
    // 387F 0062;	
    // (㡿) CJK UNIFIED IDEOGRAPH-387F	[FB80 B87F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x387F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB87F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_179)
{
    // 3880 0021;	
    // (㢀) CJK UNIFIED IDEOGRAPH-3880	[FB80 B880 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3880, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB880, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_180)
{
    // 3880 003F;	
    // (㢀) CJK UNIFIED IDEOGRAPH-3880	[FB80 B880 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3880, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB880, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_181)
{
    // 3880 0061;	
    // (㢀) CJK UNIFIED IDEOGRAPH-3880	[FB80 B880 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3880, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_182)
{
    // 3880 0041;	
    // (㢀) CJK UNIFIED IDEOGRAPH-3880	[FB80 B880 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3880, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_183)
{
    // 3880 0062;	
    // (㢀) CJK UNIFIED IDEOGRAPH-3880	[FB80 B880 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3880, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB880, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_184)
{
    // 3881 0021;	
    // (㢁) CJK UNIFIED IDEOGRAPH-3881	[FB80 B881 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3881, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB881, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_185)
{
    // 3881 003F;	
    // (㢁) CJK UNIFIED IDEOGRAPH-3881	[FB80 B881 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3881, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB881, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_186)
{
    // 3881 0061;	
    // (㢁) CJK UNIFIED IDEOGRAPH-3881	[FB80 B881 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3881, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_187)
{
    // 3881 0041;	
    // (㢁) CJK UNIFIED IDEOGRAPH-3881	[FB80 B881 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3881, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_188)
{
    // 3881 0062;	
    // (㢁) CJK UNIFIED IDEOGRAPH-3881	[FB80 B881 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3881, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB881, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_189)
{
    // 3882 0021;	
    // (㢂) CJK UNIFIED IDEOGRAPH-3882	[FB80 B882 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3882, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB882, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_190)
{
    // 3882 003F;	
    // (㢂) CJK UNIFIED IDEOGRAPH-3882	[FB80 B882 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3882, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB882, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_191)
{
    // 3882 0061;	
    // (㢂) CJK UNIFIED IDEOGRAPH-3882	[FB80 B882 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3882, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_192)
{
    // 3882 0041;	
    // (㢂) CJK UNIFIED IDEOGRAPH-3882	[FB80 B882 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3882, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_193)
{
    // 3882 0062;	
    // (㢂) CJK UNIFIED IDEOGRAPH-3882	[FB80 B882 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3882, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB882, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_194)
{
    // 3883 0021;	
    // (㢃) CJK UNIFIED IDEOGRAPH-3883	[FB80 B883 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3883, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB883, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_195)
{
    // 3883 003F;	
    // (㢃) CJK UNIFIED IDEOGRAPH-3883	[FB80 B883 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3883, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB883, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_196)
{
    // 3883 0061;	
    // (㢃) CJK UNIFIED IDEOGRAPH-3883	[FB80 B883 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3883, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_197)
{
    // 3883 0041;	
    // (㢃) CJK UNIFIED IDEOGRAPH-3883	[FB80 B883 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3883, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_198)
{
    // 3883 0062;	
    // (㢃) CJK UNIFIED IDEOGRAPH-3883	[FB80 B883 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3883, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB883, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_199)
{
    // 3884 0021;	
    // (㢄) CJK UNIFIED IDEOGRAPH-3884	[FB80 B884 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3884, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB884, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_200)
{
    // 3884 003F;	
    // (㢄) CJK UNIFIED IDEOGRAPH-3884	[FB80 B884 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3884, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB884, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_201)
{
    // 3884 0061;	
    // (㢄) CJK UNIFIED IDEOGRAPH-3884	[FB80 B884 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3884, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_202)
{
    // 3884 0041;	
    // (㢄) CJK UNIFIED IDEOGRAPH-3884	[FB80 B884 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3884, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_203)
{
    // 3884 0062;	
    // (㢄) CJK UNIFIED IDEOGRAPH-3884	[FB80 B884 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3884, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB884, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_204)
{
    // 3885 0021;	
    // (㢅) CJK UNIFIED IDEOGRAPH-3885	[FB80 B885 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3885, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB885, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_205)
{
    // 3885 003F;	
    // (㢅) CJK UNIFIED IDEOGRAPH-3885	[FB80 B885 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3885, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB885, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_206)
{
    // 3885 0061;	
    // (㢅) CJK UNIFIED IDEOGRAPH-3885	[FB80 B885 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3885, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_207)
{
    // 3885 0041;	
    // (㢅) CJK UNIFIED IDEOGRAPH-3885	[FB80 B885 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3885, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_208)
{
    // 3885 0062;	
    // (㢅) CJK UNIFIED IDEOGRAPH-3885	[FB80 B885 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3885, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB885, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_209)
{
    // 3886 0021;	
    // (㢆) CJK UNIFIED IDEOGRAPH-3886	[FB80 B886 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3886, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB886, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_210)
{
    // 3886 003F;	
    // (㢆) CJK UNIFIED IDEOGRAPH-3886	[FB80 B886 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3886, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB886, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_211)
{
    // 3886 0061;	
    // (㢆) CJK UNIFIED IDEOGRAPH-3886	[FB80 B886 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3886, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_212)
{
    // 3886 0041;	
    // (㢆) CJK UNIFIED IDEOGRAPH-3886	[FB80 B886 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3886, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_213)
{
    // 3886 0062;	
    // (㢆) CJK UNIFIED IDEOGRAPH-3886	[FB80 B886 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3886, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB886, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_214)
{
    // 3887 0021;	
    // (㢇) CJK UNIFIED IDEOGRAPH-3887	[FB80 B887 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3887, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB887, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_215)
{
    // 3887 003F;	
    // (㢇) CJK UNIFIED IDEOGRAPH-3887	[FB80 B887 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3887, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB887, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_216)
{
    // 3887 0061;	
    // (㢇) CJK UNIFIED IDEOGRAPH-3887	[FB80 B887 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3887, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_217)
{
    // 3887 0041;	
    // (㢇) CJK UNIFIED IDEOGRAPH-3887	[FB80 B887 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3887, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_218)
{
    // 3887 0062;	
    // (㢇) CJK UNIFIED IDEOGRAPH-3887	[FB80 B887 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3887, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB887, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_219)
{
    // 3888 0021;	
    // (㢈) CJK UNIFIED IDEOGRAPH-3888	[FB80 B888 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3888, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB888, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_220)
{
    // 3888 003F;	
    // (㢈) CJK UNIFIED IDEOGRAPH-3888	[FB80 B888 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3888, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB888, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_221)
{
    // 3888 0061;	
    // (㢈) CJK UNIFIED IDEOGRAPH-3888	[FB80 B888 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3888, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_222)
{
    // 3888 0041;	
    // (㢈) CJK UNIFIED IDEOGRAPH-3888	[FB80 B888 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3888, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_223)
{
    // 3888 0062;	
    // (㢈) CJK UNIFIED IDEOGRAPH-3888	[FB80 B888 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3888, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB888, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_224)
{
    // 3889 0021;	
    // (㢉) CJK UNIFIED IDEOGRAPH-3889	[FB80 B889 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3889, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB889, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_225)
{
    // 3889 003F;	
    // (㢉) CJK UNIFIED IDEOGRAPH-3889	[FB80 B889 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3889, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB889, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_226)
{
    // 3889 0061;	
    // (㢉) CJK UNIFIED IDEOGRAPH-3889	[FB80 B889 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3889, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_227)
{
    // 3889 0041;	
    // (㢉) CJK UNIFIED IDEOGRAPH-3889	[FB80 B889 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3889, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_228)
{
    // 3889 0062;	
    // (㢉) CJK UNIFIED IDEOGRAPH-3889	[FB80 B889 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3889, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB889, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_229)
{
    // 388A 0021;	
    // (㢊) CJK UNIFIED IDEOGRAPH-388A	[FB80 B88A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB88A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_230)
{
    // 388A 003F;	
    // (㢊) CJK UNIFIED IDEOGRAPH-388A	[FB80 B88A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB88A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_231)
{
    // 388A 0061;	
    // (㢊) CJK UNIFIED IDEOGRAPH-388A	[FB80 B88A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB88A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_232)
{
    // 388A 0041;	
    // (㢊) CJK UNIFIED IDEOGRAPH-388A	[FB80 B88A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x388A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB88A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_233)
{
    // 388A 0062;	
    // (㢊) CJK UNIFIED IDEOGRAPH-388A	[FB80 B88A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB88A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_234)
{
    // 388B 0021;	
    // (㢋) CJK UNIFIED IDEOGRAPH-388B	[FB80 B88B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB88B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_235)
{
    // 388B 003F;	
    // (㢋) CJK UNIFIED IDEOGRAPH-388B	[FB80 B88B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB88B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_236)
{
    // 388B 0061;	
    // (㢋) CJK UNIFIED IDEOGRAPH-388B	[FB80 B88B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB88B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_237)
{
    // 388B 0041;	
    // (㢋) CJK UNIFIED IDEOGRAPH-388B	[FB80 B88B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x388B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB88B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_238)
{
    // 388B 0062;	
    // (㢋) CJK UNIFIED IDEOGRAPH-388B	[FB80 B88B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB88B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_239)
{
    // 388C 0021;	
    // (㢌) CJK UNIFIED IDEOGRAPH-388C	[FB80 B88C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB88C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_240)
{
    // 388C 003F;	
    // (㢌) CJK UNIFIED IDEOGRAPH-388C	[FB80 B88C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB88C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_241)
{
    // 388C 0061;	
    // (㢌) CJK UNIFIED IDEOGRAPH-388C	[FB80 B88C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB88C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_242)
{
    // 388C 0041;	
    // (㢌) CJK UNIFIED IDEOGRAPH-388C	[FB80 B88C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x388C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB88C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_243)
{
    // 388C 0062;	
    // (㢌) CJK UNIFIED IDEOGRAPH-388C	[FB80 B88C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB88C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_244)
{
    // 388D 0021;	
    // (㢍) CJK UNIFIED IDEOGRAPH-388D	[FB80 B88D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB88D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_245)
{
    // 388D 003F;	
    // (㢍) CJK UNIFIED IDEOGRAPH-388D	[FB80 B88D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB88D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_246)
{
    // 388D 0061;	
    // (㢍) CJK UNIFIED IDEOGRAPH-388D	[FB80 B88D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB88D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_247)
{
    // 388D 0041;	
    // (㢍) CJK UNIFIED IDEOGRAPH-388D	[FB80 B88D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x388D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB88D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_248)
{
    // 388D 0062;	
    // (㢍) CJK UNIFIED IDEOGRAPH-388D	[FB80 B88D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB88D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_249)
{
    // 388E 0021;	
    // (㢎) CJK UNIFIED IDEOGRAPH-388E	[FB80 B88E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB88E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_250)
{
    // 388E 003F;	
    // (㢎) CJK UNIFIED IDEOGRAPH-388E	[FB80 B88E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB88E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_251)
{
    // 388E 0061;	
    // (㢎) CJK UNIFIED IDEOGRAPH-388E	[FB80 B88E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB88E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_252)
{
    // 388E 0041;	
    // (㢎) CJK UNIFIED IDEOGRAPH-388E	[FB80 B88E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x388E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB88E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_253)
{
    // 388E 0062;	
    // (㢎) CJK UNIFIED IDEOGRAPH-388E	[FB80 B88E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB88E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_254)
{
    // 388F 0021;	
    // (㢏) CJK UNIFIED IDEOGRAPH-388F	[FB80 B88F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB88F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_255)
{
    // 388F 003F;	
    // (㢏) CJK UNIFIED IDEOGRAPH-388F	[FB80 B88F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB88F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_256)
{
    // 388F 0061;	
    // (㢏) CJK UNIFIED IDEOGRAPH-388F	[FB80 B88F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB88F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_257)
{
    // 388F 0041;	
    // (㢏) CJK UNIFIED IDEOGRAPH-388F	[FB80 B88F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x388F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB88F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_258)
{
    // 388F 0062;	
    // (㢏) CJK UNIFIED IDEOGRAPH-388F	[FB80 B88F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x388F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB88F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_259)
{
    // 3890 0021;	
    // (㢐) CJK UNIFIED IDEOGRAPH-3890	[FB80 B890 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3890, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB890, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_260)
{
    // 3890 003F;	
    // (㢐) CJK UNIFIED IDEOGRAPH-3890	[FB80 B890 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3890, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB890, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_261)
{
    // 3890 0061;	
    // (㢐) CJK UNIFIED IDEOGRAPH-3890	[FB80 B890 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3890, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_262)
{
    // 3890 0041;	
    // (㢐) CJK UNIFIED IDEOGRAPH-3890	[FB80 B890 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3890, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB890, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_263)
{
    // 3890 0062;	
    // (㢐) CJK UNIFIED IDEOGRAPH-3890	[FB80 B890 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3890, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB890, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_264)
{
    // 3891 0021;	
    // (㢑) CJK UNIFIED IDEOGRAPH-3891	[FB80 B891 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3891, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB891, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_265)
{
    // 3891 003F;	
    // (㢑) CJK UNIFIED IDEOGRAPH-3891	[FB80 B891 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3891, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB891, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_266)
{
    // 3891 0061;	
    // (㢑) CJK UNIFIED IDEOGRAPH-3891	[FB80 B891 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3891, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_267)
{
    // 3891 0041;	
    // (㢑) CJK UNIFIED IDEOGRAPH-3891	[FB80 B891 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3891, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB891, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_268)
{
    // 3891 0062;	
    // (㢑) CJK UNIFIED IDEOGRAPH-3891	[FB80 B891 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3891, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB891, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_269)
{
    // 3892 0021;	
    // (㢒) CJK UNIFIED IDEOGRAPH-3892	[FB80 B892 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3892, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB892, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_270)
{
    // 3892 003F;	
    // (㢒) CJK UNIFIED IDEOGRAPH-3892	[FB80 B892 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3892, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB892, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_271)
{
    // 3892 0061;	
    // (㢒) CJK UNIFIED IDEOGRAPH-3892	[FB80 B892 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3892, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_272)
{
    // 3892 0041;	
    // (㢒) CJK UNIFIED IDEOGRAPH-3892	[FB80 B892 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3892, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB892, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_273)
{
    // 3892 0062;	
    // (㢒) CJK UNIFIED IDEOGRAPH-3892	[FB80 B892 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3892, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB892, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_274)
{
    // 3893 0021;	
    // (㢓) CJK UNIFIED IDEOGRAPH-3893	[FB80 B893 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3893, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB893, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_275)
{
    // 3893 003F;	
    // (㢓) CJK UNIFIED IDEOGRAPH-3893	[FB80 B893 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3893, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB893, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_276)
{
    // 3893 0061;	
    // (㢓) CJK UNIFIED IDEOGRAPH-3893	[FB80 B893 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3893, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_277)
{
    // 3893 0041;	
    // (㢓) CJK UNIFIED IDEOGRAPH-3893	[FB80 B893 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3893, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB893, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_278)
{
    // 3893 0062;	
    // (㢓) CJK UNIFIED IDEOGRAPH-3893	[FB80 B893 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3893, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB893, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_279)
{
    // 3894 0021;	
    // (㢔) CJK UNIFIED IDEOGRAPH-3894	[FB80 B894 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3894, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB894, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_280)
{
    // 3894 003F;	
    // (㢔) CJK UNIFIED IDEOGRAPH-3894	[FB80 B894 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3894, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB894, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_281)
{
    // 3894 0061;	
    // (㢔) CJK UNIFIED IDEOGRAPH-3894	[FB80 B894 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3894, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_282)
{
    // 3894 0041;	
    // (㢔) CJK UNIFIED IDEOGRAPH-3894	[FB80 B894 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3894, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB894, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_283)
{
    // 3894 0062;	
    // (㢔) CJK UNIFIED IDEOGRAPH-3894	[FB80 B894 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3894, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB894, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_284)
{
    // 3895 0021;	
    // (㢕) CJK UNIFIED IDEOGRAPH-3895	[FB80 B895 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3895, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB895, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_285)
{
    // 3895 003F;	
    // (㢕) CJK UNIFIED IDEOGRAPH-3895	[FB80 B895 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3895, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB895, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_286)
{
    // 3895 0061;	
    // (㢕) CJK UNIFIED IDEOGRAPH-3895	[FB80 B895 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3895, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_287)
{
    // 3895 0041;	
    // (㢕) CJK UNIFIED IDEOGRAPH-3895	[FB80 B895 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3895, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB895, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_288)
{
    // 3895 0062;	
    // (㢕) CJK UNIFIED IDEOGRAPH-3895	[FB80 B895 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3895, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB895, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_289)
{
    // 3896 0021;	
    // (㢖) CJK UNIFIED IDEOGRAPH-3896	[FB80 B896 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3896, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB896, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_290)
{
    // 3896 003F;	
    // (㢖) CJK UNIFIED IDEOGRAPH-3896	[FB80 B896 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3896, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB896, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_291)
{
    // 3896 0061;	
    // (㢖) CJK UNIFIED IDEOGRAPH-3896	[FB80 B896 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3896, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_292)
{
    // 3896 0041;	
    // (㢖) CJK UNIFIED IDEOGRAPH-3896	[FB80 B896 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3896, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB896, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_293)
{
    // 3896 0062;	
    // (㢖) CJK UNIFIED IDEOGRAPH-3896	[FB80 B896 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3896, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB896, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_294)
{
    // 3897 0021;	
    // (㢗) CJK UNIFIED IDEOGRAPH-3897	[FB80 B897 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3897, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB897, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_295)
{
    // 3897 003F;	
    // (㢗) CJK UNIFIED IDEOGRAPH-3897	[FB80 B897 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3897, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB897, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_296)
{
    // 3897 0061;	
    // (㢗) CJK UNIFIED IDEOGRAPH-3897	[FB80 B897 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3897, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_297)
{
    // 3897 0041;	
    // (㢗) CJK UNIFIED IDEOGRAPH-3897	[FB80 B897 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3897, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB897, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_298)
{
    // 3897 0062;	
    // (㢗) CJK UNIFIED IDEOGRAPH-3897	[FB80 B897 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3897, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB897, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_299)
{
    // 3898 0021;	
    // (㢘) CJK UNIFIED IDEOGRAPH-3898	[FB80 B898 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3898, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB898, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_300)
{
    // 3898 003F;	
    // (㢘) CJK UNIFIED IDEOGRAPH-3898	[FB80 B898 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3898, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB898, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_301)
{
    // 3898 0061;	
    // (㢘) CJK UNIFIED IDEOGRAPH-3898	[FB80 B898 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3898, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_302)
{
    // 3898 0041;	
    // (㢘) CJK UNIFIED IDEOGRAPH-3898	[FB80 B898 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3898, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB898, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_303)
{
    // 3898 0062;	
    // (㢘) CJK UNIFIED IDEOGRAPH-3898	[FB80 B898 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3898, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB898, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_304)
{
    // 3899 0021;	
    // (㢙) CJK UNIFIED IDEOGRAPH-3899	[FB80 B899 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3899, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB899, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_305)
{
    // 3899 003F;	
    // (㢙) CJK UNIFIED IDEOGRAPH-3899	[FB80 B899 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3899, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB899, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_306)
{
    // 3899 0061;	
    // (㢙) CJK UNIFIED IDEOGRAPH-3899	[FB80 B899 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3899, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_307)
{
    // 3899 0041;	
    // (㢙) CJK UNIFIED IDEOGRAPH-3899	[FB80 B899 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3899, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB899, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_308)
{
    // 3899 0062;	
    // (㢙) CJK UNIFIED IDEOGRAPH-3899	[FB80 B899 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3899, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB899, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_309)
{
    // 389A 0021;	
    // (㢚) CJK UNIFIED IDEOGRAPH-389A	[FB80 B89A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB89A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_310)
{
    // 389A 003F;	
    // (㢚) CJK UNIFIED IDEOGRAPH-389A	[FB80 B89A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB89A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_311)
{
    // 389A 0061;	
    // (㢚) CJK UNIFIED IDEOGRAPH-389A	[FB80 B89A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB89A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_312)
{
    // 389A 0041;	
    // (㢚) CJK UNIFIED IDEOGRAPH-389A	[FB80 B89A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x389A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB89A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_313)
{
    // 389A 0062;	
    // (㢚) CJK UNIFIED IDEOGRAPH-389A	[FB80 B89A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB89A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_314)
{
    // 389B 0021;	
    // (㢛) CJK UNIFIED IDEOGRAPH-389B	[FB80 B89B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB89B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_315)
{
    // 389B 003F;	
    // (㢛) CJK UNIFIED IDEOGRAPH-389B	[FB80 B89B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB89B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_316)
{
    // 389B 0061;	
    // (㢛) CJK UNIFIED IDEOGRAPH-389B	[FB80 B89B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB89B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_317)
{
    // 389B 0041;	
    // (㢛) CJK UNIFIED IDEOGRAPH-389B	[FB80 B89B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x389B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB89B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_318)
{
    // 389B 0062;	
    // (㢛) CJK UNIFIED IDEOGRAPH-389B	[FB80 B89B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB89B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_319)
{
    // 389C 0021;	
    // (㢜) CJK UNIFIED IDEOGRAPH-389C	[FB80 B89C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB89C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_320)
{
    // 389C 003F;	
    // (㢜) CJK UNIFIED IDEOGRAPH-389C	[FB80 B89C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB89C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_321)
{
    // 389C 0061;	
    // (㢜) CJK UNIFIED IDEOGRAPH-389C	[FB80 B89C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB89C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_322)
{
    // 389C 0041;	
    // (㢜) CJK UNIFIED IDEOGRAPH-389C	[FB80 B89C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x389C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB89C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_323)
{
    // 389C 0062;	
    // (㢜) CJK UNIFIED IDEOGRAPH-389C	[FB80 B89C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB89C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_324)
{
    // 389D 0021;	
    // (㢝) CJK UNIFIED IDEOGRAPH-389D	[FB80 B89D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB89D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_325)
{
    // 389D 003F;	
    // (㢝) CJK UNIFIED IDEOGRAPH-389D	[FB80 B89D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB89D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_326)
{
    // 389D 0061;	
    // (㢝) CJK UNIFIED IDEOGRAPH-389D	[FB80 B89D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB89D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_327)
{
    // 389D 0041;	
    // (㢝) CJK UNIFIED IDEOGRAPH-389D	[FB80 B89D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x389D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB89D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_328)
{
    // 389D 0062;	
    // (㢝) CJK UNIFIED IDEOGRAPH-389D	[FB80 B89D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB89D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_329)
{
    // 389E 0021;	
    // (㢞) CJK UNIFIED IDEOGRAPH-389E	[FB80 B89E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB89E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_330)
{
    // 389E 003F;	
    // (㢞) CJK UNIFIED IDEOGRAPH-389E	[FB80 B89E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB89E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_331)
{
    // 389E 0061;	
    // (㢞) CJK UNIFIED IDEOGRAPH-389E	[FB80 B89E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB89E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_332)
{
    // 389E 0041;	
    // (㢞) CJK UNIFIED IDEOGRAPH-389E	[FB80 B89E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x389E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB89E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_333)
{
    // 389E 0062;	
    // (㢞) CJK UNIFIED IDEOGRAPH-389E	[FB80 B89E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB89E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_334)
{
    // 389F 0021;	
    // (㢟) CJK UNIFIED IDEOGRAPH-389F	[FB80 B89F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB89F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_335)
{
    // 389F 003F;	
    // (㢟) CJK UNIFIED IDEOGRAPH-389F	[FB80 B89F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB89F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_336)
{
    // 389F 0061;	
    // (㢟) CJK UNIFIED IDEOGRAPH-389F	[FB80 B89F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB89F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_337)
{
    // 389F 0041;	
    // (㢟) CJK UNIFIED IDEOGRAPH-389F	[FB80 B89F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x389F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB89F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_338)
{
    // 389F 0062;	
    // (㢟) CJK UNIFIED IDEOGRAPH-389F	[FB80 B89F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x389F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB89F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_339)
{
    // 38A0 0021;	
    // (㢠) CJK UNIFIED IDEOGRAPH-38A0	[FB80 B8A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_340)
{
    // 38A0 003F;	
    // (㢠) CJK UNIFIED IDEOGRAPH-38A0	[FB80 B8A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_341)
{
    // 38A0 0061;	
    // (㢠) CJK UNIFIED IDEOGRAPH-38A0	[FB80 B8A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_342)
{
    // 38A0 0041;	
    // (㢠) CJK UNIFIED IDEOGRAPH-38A0	[FB80 B8A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_343)
{
    // 38A0 0062;	
    // (㢠) CJK UNIFIED IDEOGRAPH-38A0	[FB80 B8A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_344)
{
    // 38A1 0021;	
    // (㢡) CJK UNIFIED IDEOGRAPH-38A1	[FB80 B8A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_345)
{
    // 38A1 003F;	
    // (㢡) CJK UNIFIED IDEOGRAPH-38A1	[FB80 B8A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_346)
{
    // 38A1 0061;	
    // (㢡) CJK UNIFIED IDEOGRAPH-38A1	[FB80 B8A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_347)
{
    // 38A1 0041;	
    // (㢡) CJK UNIFIED IDEOGRAPH-38A1	[FB80 B8A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_348)
{
    // 38A1 0062;	
    // (㢡) CJK UNIFIED IDEOGRAPH-38A1	[FB80 B8A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_349)
{
    // 38A2 0021;	
    // (㢢) CJK UNIFIED IDEOGRAPH-38A2	[FB80 B8A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_350)
{
    // 38A2 003F;	
    // (㢢) CJK UNIFIED IDEOGRAPH-38A2	[FB80 B8A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_351)
{
    // 38A2 0061;	
    // (㢢) CJK UNIFIED IDEOGRAPH-38A2	[FB80 B8A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_352)
{
    // 38A2 0041;	
    // (㢢) CJK UNIFIED IDEOGRAPH-38A2	[FB80 B8A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_353)
{
    // 38A2 0062;	
    // (㢢) CJK UNIFIED IDEOGRAPH-38A2	[FB80 B8A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_354)
{
    // 38A3 0021;	
    // (㢣) CJK UNIFIED IDEOGRAPH-38A3	[FB80 B8A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_355)
{
    // 38A3 003F;	
    // (㢣) CJK UNIFIED IDEOGRAPH-38A3	[FB80 B8A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_356)
{
    // 38A3 0061;	
    // (㢣) CJK UNIFIED IDEOGRAPH-38A3	[FB80 B8A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_357)
{
    // 38A3 0041;	
    // (㢣) CJK UNIFIED IDEOGRAPH-38A3	[FB80 B8A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_358)
{
    // 38A3 0062;	
    // (㢣) CJK UNIFIED IDEOGRAPH-38A3	[FB80 B8A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_359)
{
    // 38A4 0021;	
    // (㢤) CJK UNIFIED IDEOGRAPH-38A4	[FB80 B8A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_360)
{
    // 38A4 003F;	
    // (㢤) CJK UNIFIED IDEOGRAPH-38A4	[FB80 B8A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_361)
{
    // 38A4 0061;	
    // (㢤) CJK UNIFIED IDEOGRAPH-38A4	[FB80 B8A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_362)
{
    // 38A4 0041;	
    // (㢤) CJK UNIFIED IDEOGRAPH-38A4	[FB80 B8A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_363)
{
    // 38A4 0062;	
    // (㢤) CJK UNIFIED IDEOGRAPH-38A4	[FB80 B8A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_364)
{
    // 38A5 0021;	
    // (㢥) CJK UNIFIED IDEOGRAPH-38A5	[FB80 B8A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_365)
{
    // 38A5 003F;	
    // (㢥) CJK UNIFIED IDEOGRAPH-38A5	[FB80 B8A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_366)
{
    // 38A5 0061;	
    // (㢥) CJK UNIFIED IDEOGRAPH-38A5	[FB80 B8A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_367)
{
    // 38A5 0041;	
    // (㢥) CJK UNIFIED IDEOGRAPH-38A5	[FB80 B8A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_368)
{
    // 38A5 0062;	
    // (㢥) CJK UNIFIED IDEOGRAPH-38A5	[FB80 B8A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_369)
{
    // 38A6 0021;	
    // (㢦) CJK UNIFIED IDEOGRAPH-38A6	[FB80 B8A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_370)
{
    // 38A6 003F;	
    // (㢦) CJK UNIFIED IDEOGRAPH-38A6	[FB80 B8A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_371)
{
    // 38A6 0061;	
    // (㢦) CJK UNIFIED IDEOGRAPH-38A6	[FB80 B8A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_372)
{
    // 38A6 0041;	
    // (㢦) CJK UNIFIED IDEOGRAPH-38A6	[FB80 B8A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_373)
{
    // 38A6 0062;	
    // (㢦) CJK UNIFIED IDEOGRAPH-38A6	[FB80 B8A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_374)
{
    // 38A7 0021;	
    // (㢧) CJK UNIFIED IDEOGRAPH-38A7	[FB80 B8A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_375)
{
    // 38A7 003F;	
    // (㢧) CJK UNIFIED IDEOGRAPH-38A7	[FB80 B8A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_376)
{
    // 38A7 0061;	
    // (㢧) CJK UNIFIED IDEOGRAPH-38A7	[FB80 B8A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_377)
{
    // 38A7 0041;	
    // (㢧) CJK UNIFIED IDEOGRAPH-38A7	[FB80 B8A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_378)
{
    // 38A7 0062;	
    // (㢧) CJK UNIFIED IDEOGRAPH-38A7	[FB80 B8A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_379)
{
    // 38A8 0021;	
    // (㢨) CJK UNIFIED IDEOGRAPH-38A8	[FB80 B8A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_380)
{
    // 38A8 003F;	
    // (㢨) CJK UNIFIED IDEOGRAPH-38A8	[FB80 B8A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_381)
{
    // 38A8 0061;	
    // (㢨) CJK UNIFIED IDEOGRAPH-38A8	[FB80 B8A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_382)
{
    // 38A8 0041;	
    // (㢨) CJK UNIFIED IDEOGRAPH-38A8	[FB80 B8A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_383)
{
    // 38A8 0062;	
    // (㢨) CJK UNIFIED IDEOGRAPH-38A8	[FB80 B8A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_384)
{
    // 38A9 0021;	
    // (㢩) CJK UNIFIED IDEOGRAPH-38A9	[FB80 B8A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_385)
{
    // 38A9 003F;	
    // (㢩) CJK UNIFIED IDEOGRAPH-38A9	[FB80 B8A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_386)
{
    // 38A9 0061;	
    // (㢩) CJK UNIFIED IDEOGRAPH-38A9	[FB80 B8A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_387)
{
    // 38A9 0041;	
    // (㢩) CJK UNIFIED IDEOGRAPH-38A9	[FB80 B8A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_388)
{
    // 38A9 0062;	
    // (㢩) CJK UNIFIED IDEOGRAPH-38A9	[FB80 B8A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_389)
{
    // 38AA 0021;	
    // (㢪) CJK UNIFIED IDEOGRAPH-38AA	[FB80 B8AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_390)
{
    // 38AA 003F;	
    // (㢪) CJK UNIFIED IDEOGRAPH-38AA	[FB80 B8AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_391)
{
    // 38AA 0061;	
    // (㢪) CJK UNIFIED IDEOGRAPH-38AA	[FB80 B8AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_392)
{
    // 38AA 0041;	
    // (㢪) CJK UNIFIED IDEOGRAPH-38AA	[FB80 B8AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_393)
{
    // 38AA 0062;	
    // (㢪) CJK UNIFIED IDEOGRAPH-38AA	[FB80 B8AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_394)
{
    // 38AB 0021;	
    // (㢫) CJK UNIFIED IDEOGRAPH-38AB	[FB80 B8AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_395)
{
    // 38AB 003F;	
    // (㢫) CJK UNIFIED IDEOGRAPH-38AB	[FB80 B8AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_396)
{
    // 38AB 0061;	
    // (㢫) CJK UNIFIED IDEOGRAPH-38AB	[FB80 B8AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_397)
{
    // 38AB 0041;	
    // (㢫) CJK UNIFIED IDEOGRAPH-38AB	[FB80 B8AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_398)
{
    // 38AB 0062;	
    // (㢫) CJK UNIFIED IDEOGRAPH-38AB	[FB80 B8AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_399)
{
    // 38AC 0021;	
    // (㢬) CJK UNIFIED IDEOGRAPH-38AC	[FB80 B8AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_400)
{
    // 38AC 003F;	
    // (㢬) CJK UNIFIED IDEOGRAPH-38AC	[FB80 B8AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_401)
{
    // 38AC 0061;	
    // (㢬) CJK UNIFIED IDEOGRAPH-38AC	[FB80 B8AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_402)
{
    // 38AC 0041;	
    // (㢬) CJK UNIFIED IDEOGRAPH-38AC	[FB80 B8AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_403)
{
    // 38AC 0062;	
    // (㢬) CJK UNIFIED IDEOGRAPH-38AC	[FB80 B8AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_404)
{
    // 38AD 0021;	
    // (㢭) CJK UNIFIED IDEOGRAPH-38AD	[FB80 B8AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_405)
{
    // 38AD 003F;	
    // (㢭) CJK UNIFIED IDEOGRAPH-38AD	[FB80 B8AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_406)
{
    // 38AD 0061;	
    // (㢭) CJK UNIFIED IDEOGRAPH-38AD	[FB80 B8AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_407)
{
    // 38AD 0041;	
    // (㢭) CJK UNIFIED IDEOGRAPH-38AD	[FB80 B8AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_408)
{
    // 38AD 0062;	
    // (㢭) CJK UNIFIED IDEOGRAPH-38AD	[FB80 B8AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_409)
{
    // 38AE 0021;	
    // (㢮) CJK UNIFIED IDEOGRAPH-38AE	[FB80 B8AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_410)
{
    // 38AE 003F;	
    // (㢮) CJK UNIFIED IDEOGRAPH-38AE	[FB80 B8AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_411)
{
    // 38AE 0061;	
    // (㢮) CJK UNIFIED IDEOGRAPH-38AE	[FB80 B8AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_412)
{
    // 38AE 0041;	
    // (㢮) CJK UNIFIED IDEOGRAPH-38AE	[FB80 B8AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_413)
{
    // 38AE 0062;	
    // (㢮) CJK UNIFIED IDEOGRAPH-38AE	[FB80 B8AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_414)
{
    // 38AF 0021;	
    // (㢯) CJK UNIFIED IDEOGRAPH-38AF	[FB80 B8AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_415)
{
    // 38AF 003F;	
    // (㢯) CJK UNIFIED IDEOGRAPH-38AF	[FB80 B8AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_416)
{
    // 38AF 0061;	
    // (㢯) CJK UNIFIED IDEOGRAPH-38AF	[FB80 B8AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_417)
{
    // 38AF 0041;	
    // (㢯) CJK UNIFIED IDEOGRAPH-38AF	[FB80 B8AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_418)
{
    // 38AF 0062;	
    // (㢯) CJK UNIFIED IDEOGRAPH-38AF	[FB80 B8AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_419)
{
    // 38B0 0021;	
    // (㢰) CJK UNIFIED IDEOGRAPH-38B0	[FB80 B8B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_420)
{
    // 38B0 003F;	
    // (㢰) CJK UNIFIED IDEOGRAPH-38B0	[FB80 B8B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_421)
{
    // 38B0 0061;	
    // (㢰) CJK UNIFIED IDEOGRAPH-38B0	[FB80 B8B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_422)
{
    // 38B0 0041;	
    // (㢰) CJK UNIFIED IDEOGRAPH-38B0	[FB80 B8B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_423)
{
    // 38B0 0062;	
    // (㢰) CJK UNIFIED IDEOGRAPH-38B0	[FB80 B8B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_424)
{
    // 38B1 0021;	
    // (㢱) CJK UNIFIED IDEOGRAPH-38B1	[FB80 B8B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_425)
{
    // 38B1 003F;	
    // (㢱) CJK UNIFIED IDEOGRAPH-38B1	[FB80 B8B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_426)
{
    // 38B1 0061;	
    // (㢱) CJK UNIFIED IDEOGRAPH-38B1	[FB80 B8B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_427)
{
    // 38B1 0041;	
    // (㢱) CJK UNIFIED IDEOGRAPH-38B1	[FB80 B8B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_428)
{
    // 38B1 0062;	
    // (㢱) CJK UNIFIED IDEOGRAPH-38B1	[FB80 B8B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_429)
{
    // 38B2 0021;	
    // (㢲) CJK UNIFIED IDEOGRAPH-38B2	[FB80 B8B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_430)
{
    // 38B2 003F;	
    // (㢲) CJK UNIFIED IDEOGRAPH-38B2	[FB80 B8B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_431)
{
    // 38B2 0061;	
    // (㢲) CJK UNIFIED IDEOGRAPH-38B2	[FB80 B8B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_432)
{
    // 38B2 0041;	
    // (㢲) CJK UNIFIED IDEOGRAPH-38B2	[FB80 B8B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_433)
{
    // 38B2 0062;	
    // (㢲) CJK UNIFIED IDEOGRAPH-38B2	[FB80 B8B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_434)
{
    // 38B3 0021;	
    // (㢳) CJK UNIFIED IDEOGRAPH-38B3	[FB80 B8B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_435)
{
    // 38B3 003F;	
    // (㢳) CJK UNIFIED IDEOGRAPH-38B3	[FB80 B8B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_436)
{
    // 38B3 0061;	
    // (㢳) CJK UNIFIED IDEOGRAPH-38B3	[FB80 B8B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_437)
{
    // 38B3 0041;	
    // (㢳) CJK UNIFIED IDEOGRAPH-38B3	[FB80 B8B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_438)
{
    // 38B3 0062;	
    // (㢳) CJK UNIFIED IDEOGRAPH-38B3	[FB80 B8B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_439)
{
    // 38B4 0021;	
    // (㢴) CJK UNIFIED IDEOGRAPH-38B4	[FB80 B8B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_440)
{
    // 38B4 003F;	
    // (㢴) CJK UNIFIED IDEOGRAPH-38B4	[FB80 B8B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_441)
{
    // 38B4 0061;	
    // (㢴) CJK UNIFIED IDEOGRAPH-38B4	[FB80 B8B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_442)
{
    // 38B4 0041;	
    // (㢴) CJK UNIFIED IDEOGRAPH-38B4	[FB80 B8B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_443)
{
    // 38B4 0062;	
    // (㢴) CJK UNIFIED IDEOGRAPH-38B4	[FB80 B8B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_444)
{
    // 38B5 0021;	
    // (㢵) CJK UNIFIED IDEOGRAPH-38B5	[FB80 B8B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_445)
{
    // 38B5 003F;	
    // (㢵) CJK UNIFIED IDEOGRAPH-38B5	[FB80 B8B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_446)
{
    // 38B5 0061;	
    // (㢵) CJK UNIFIED IDEOGRAPH-38B5	[FB80 B8B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_447)
{
    // 38B5 0041;	
    // (㢵) CJK UNIFIED IDEOGRAPH-38B5	[FB80 B8B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_448)
{
    // 38B5 0062;	
    // (㢵) CJK UNIFIED IDEOGRAPH-38B5	[FB80 B8B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_449)
{
    // 38B6 0021;	
    // (㢶) CJK UNIFIED IDEOGRAPH-38B6	[FB80 B8B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_450)
{
    // 38B6 003F;	
    // (㢶) CJK UNIFIED IDEOGRAPH-38B6	[FB80 B8B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_451)
{
    // 38B6 0061;	
    // (㢶) CJK UNIFIED IDEOGRAPH-38B6	[FB80 B8B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_452)
{
    // 38B6 0041;	
    // (㢶) CJK UNIFIED IDEOGRAPH-38B6	[FB80 B8B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_453)
{
    // 38B6 0062;	
    // (㢶) CJK UNIFIED IDEOGRAPH-38B6	[FB80 B8B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_454)
{
    // 38B7 0021;	
    // (㢷) CJK UNIFIED IDEOGRAPH-38B7	[FB80 B8B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_455)
{
    // 38B7 003F;	
    // (㢷) CJK UNIFIED IDEOGRAPH-38B7	[FB80 B8B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_456)
{
    // 38B7 0061;	
    // (㢷) CJK UNIFIED IDEOGRAPH-38B7	[FB80 B8B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_457)
{
    // 38B7 0041;	
    // (㢷) CJK UNIFIED IDEOGRAPH-38B7	[FB80 B8B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_458)
{
    // 38B7 0062;	
    // (㢷) CJK UNIFIED IDEOGRAPH-38B7	[FB80 B8B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_459)
{
    // 38B8 0021;	
    // (㢸) CJK UNIFIED IDEOGRAPH-38B8	[FB80 B8B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_460)
{
    // 38B8 003F;	
    // (㢸) CJK UNIFIED IDEOGRAPH-38B8	[FB80 B8B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_461)
{
    // 38B8 0061;	
    // (㢸) CJK UNIFIED IDEOGRAPH-38B8	[FB80 B8B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_462)
{
    // 38B8 0041;	
    // (㢸) CJK UNIFIED IDEOGRAPH-38B8	[FB80 B8B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_463)
{
    // 38B8 0062;	
    // (㢸) CJK UNIFIED IDEOGRAPH-38B8	[FB80 B8B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_464)
{
    // 38B9 0021;	
    // (㢹) CJK UNIFIED IDEOGRAPH-38B9	[FB80 B8B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_465)
{
    // 38B9 003F;	
    // (㢹) CJK UNIFIED IDEOGRAPH-38B9	[FB80 B8B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_466)
{
    // 38B9 0061;	
    // (㢹) CJK UNIFIED IDEOGRAPH-38B9	[FB80 B8B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_467)
{
    // 38B9 0041;	
    // (㢹) CJK UNIFIED IDEOGRAPH-38B9	[FB80 B8B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_468)
{
    // 38B9 0062;	
    // (㢹) CJK UNIFIED IDEOGRAPH-38B9	[FB80 B8B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_469)
{
    // 38BA 0021;	
    // (㢺) CJK UNIFIED IDEOGRAPH-38BA	[FB80 B8BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_470)
{
    // 38BA 003F;	
    // (㢺) CJK UNIFIED IDEOGRAPH-38BA	[FB80 B8BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_471)
{
    // 38BA 0061;	
    // (㢺) CJK UNIFIED IDEOGRAPH-38BA	[FB80 B8BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_472)
{
    // 38BA 0041;	
    // (㢺) CJK UNIFIED IDEOGRAPH-38BA	[FB80 B8BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_473)
{
    // 38BA 0062;	
    // (㢺) CJK UNIFIED IDEOGRAPH-38BA	[FB80 B8BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_474)
{
    // 38BB 0021;	
    // (㢻) CJK UNIFIED IDEOGRAPH-38BB	[FB80 B8BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_475)
{
    // 38BB 003F;	
    // (㢻) CJK UNIFIED IDEOGRAPH-38BB	[FB80 B8BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_476)
{
    // 38BB 0061;	
    // (㢻) CJK UNIFIED IDEOGRAPH-38BB	[FB80 B8BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_477)
{
    // 38BB 0041;	
    // (㢻) CJK UNIFIED IDEOGRAPH-38BB	[FB80 B8BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_478)
{
    // 38BB 0062;	
    // (㢻) CJK UNIFIED IDEOGRAPH-38BB	[FB80 B8BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_479)
{
    // 38BC 0021;	
    // (㢼) CJK UNIFIED IDEOGRAPH-38BC	[FB80 B8BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_480)
{
    // 38BC 003F;	
    // (㢼) CJK UNIFIED IDEOGRAPH-38BC	[FB80 B8BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_481)
{
    // 38BC 0061;	
    // (㢼) CJK UNIFIED IDEOGRAPH-38BC	[FB80 B8BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_482)
{
    // 38BC 0041;	
    // (㢼) CJK UNIFIED IDEOGRAPH-38BC	[FB80 B8BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_483)
{
    // 38BC 0062;	
    // (㢼) CJK UNIFIED IDEOGRAPH-38BC	[FB80 B8BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_484)
{
    // 38BD 0021;	
    // (㢽) CJK UNIFIED IDEOGRAPH-38BD	[FB80 B8BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_485)
{
    // 38BD 003F;	
    // (㢽) CJK UNIFIED IDEOGRAPH-38BD	[FB80 B8BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_486)
{
    // 38BD 0061;	
    // (㢽) CJK UNIFIED IDEOGRAPH-38BD	[FB80 B8BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_487)
{
    // 38BD 0041;	
    // (㢽) CJK UNIFIED IDEOGRAPH-38BD	[FB80 B8BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_488)
{
    // 38BD 0062;	
    // (㢽) CJK UNIFIED IDEOGRAPH-38BD	[FB80 B8BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_489)
{
    // 38BE 0021;	
    // (㢾) CJK UNIFIED IDEOGRAPH-38BE	[FB80 B8BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_490)
{
    // 38BE 003F;	
    // (㢾) CJK UNIFIED IDEOGRAPH-38BE	[FB80 B8BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_491)
{
    // 38BE 0061;	
    // (㢾) CJK UNIFIED IDEOGRAPH-38BE	[FB80 B8BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_492)
{
    // 38BE 0041;	
    // (㢾) CJK UNIFIED IDEOGRAPH-38BE	[FB80 B8BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_493)
{
    // 38BE 0062;	
    // (㢾) CJK UNIFIED IDEOGRAPH-38BE	[FB80 B8BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_494)
{
    // 38BF 0021;	
    // (㢿) CJK UNIFIED IDEOGRAPH-38BF	[FB80 B8BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_495)
{
    // 38BF 003F;	
    // (㢿) CJK UNIFIED IDEOGRAPH-38BF	[FB80 B8BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB8BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_496)
{
    // 38BF 0061;	
    // (㢿) CJK UNIFIED IDEOGRAPH-38BF	[FB80 B8BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_497)
{
    // 38BF 0041;	
    // (㢿) CJK UNIFIED IDEOGRAPH-38BF	[FB80 B8BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x38BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_498)
{
    // 38BF 0062;	
    // (㢿) CJK UNIFIED IDEOGRAPH-38BF	[FB80 B8BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB8BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_338_499)
{
    // 38C0 0021;	
    // (㣀) CJK UNIFIED IDEOGRAPH-38C0	[FB80 B8C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x38C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB8C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

