// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_092_000)
{
    // A46A  ; [.445D.0020.0002] 
    // YI SYLLABLE XOP

    uint32_t const cps[1] = { 0xa46a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x445d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_001)
{
    // A46B  ; [.445E.0020.0002] 
    // YI SYLLABLE XYT

    uint32_t const cps[1] = { 0xa46b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x445e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_002)
{
    // A46C  ; [.445F.0020.0002] 
    // YI SYLLABLE XYX

    uint32_t const cps[1] = { 0xa46c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x445f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_003)
{
    // A46D  ; [.4460.0020.0002] 
    // YI SYLLABLE XY

    uint32_t const cps[1] = { 0xa46d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4460), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_004)
{
    // A46E  ; [.4461.0020.0002] 
    // YI SYLLABLE XYP

    uint32_t const cps[1] = { 0xa46e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4461), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_005)
{
    // A46F  ; [.4462.0020.0002] 
    // YI SYLLABLE XYRX

    uint32_t const cps[1] = { 0xa46f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4462), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_006)
{
    // A470  ; [.4463.0020.0002] 
    // YI SYLLABLE XYR

    uint32_t const cps[1] = { 0xa470 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4463), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_007)
{
    // A471  ; [.4464.0020.0002] 
    // YI SYLLABLE YIT

    uint32_t const cps[1] = { 0xa471 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4464), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_008)
{
    // A472  ; [.4465.0020.0002] 
    // YI SYLLABLE YIX

    uint32_t const cps[1] = { 0xa472 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4465), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_009)
{
    // A473  ; [.4466.0020.0002] 
    // YI SYLLABLE YI

    uint32_t const cps[1] = { 0xa473 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4466), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_010)
{
    // A474  ; [.4467.0020.0002] 
    // YI SYLLABLE YIP

    uint32_t const cps[1] = { 0xa474 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4467), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_011)
{
    // A475  ; [.4468.0020.0002] 
    // YI SYLLABLE YIET

    uint32_t const cps[1] = { 0xa475 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4468), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_012)
{
    // A476  ; [.4469.0020.0002] 
    // YI SYLLABLE YIEX

    uint32_t const cps[1] = { 0xa476 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4469), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_013)
{
    // A477  ; [.446A.0020.0002] 
    // YI SYLLABLE YIE

    uint32_t const cps[1] = { 0xa477 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x446a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_014)
{
    // A478  ; [.446B.0020.0002] 
    // YI SYLLABLE YIEP

    uint32_t const cps[1] = { 0xa478 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x446b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_015)
{
    // A479  ; [.446C.0020.0002] 
    // YI SYLLABLE YUOT

    uint32_t const cps[1] = { 0xa479 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x446c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_016)
{
    // A47A  ; [.446D.0020.0002] 
    // YI SYLLABLE YUOX

    uint32_t const cps[1] = { 0xa47a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x446d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_017)
{
    // A47B  ; [.446E.0020.0002] 
    // YI SYLLABLE YUO

    uint32_t const cps[1] = { 0xa47b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x446e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_018)
{
    // A47C  ; [.446F.0020.0002] 
    // YI SYLLABLE YUOP

    uint32_t const cps[1] = { 0xa47c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x446f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_019)
{
    // A47D  ; [.4470.0020.0002] 
    // YI SYLLABLE YOT

    uint32_t const cps[1] = { 0xa47d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4470), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_020)
{
    // A47E  ; [.4471.0020.0002] 
    // YI SYLLABLE YOX

    uint32_t const cps[1] = { 0xa47e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4471), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_021)
{
    // A47F  ; [.4472.0020.0002] 
    // YI SYLLABLE YO

    uint32_t const cps[1] = { 0xa47f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4472), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_022)
{
    // A480  ; [.4473.0020.0002] 
    // YI SYLLABLE YOP

    uint32_t const cps[1] = { 0xa480 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4473), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_023)
{
    // A481  ; [.4474.0020.0002] 
    // YI SYLLABLE YUT

    uint32_t const cps[1] = { 0xa481 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4474), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_024)
{
    // A482  ; [.4475.0020.0002] 
    // YI SYLLABLE YUX

    uint32_t const cps[1] = { 0xa482 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4475), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_025)
{
    // A483  ; [.4476.0020.0002] 
    // YI SYLLABLE YU

    uint32_t const cps[1] = { 0xa483 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4476), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_026)
{
    // A484  ; [.4477.0020.0002] 
    // YI SYLLABLE YUP

    uint32_t const cps[1] = { 0xa484 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4477), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_027)
{
    // A485  ; [.4478.0020.0002] 
    // YI SYLLABLE YURX

    uint32_t const cps[1] = { 0xa485 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4478), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_028)
{
    // A486  ; [.4479.0020.0002] 
    // YI SYLLABLE YUR

    uint32_t const cps[1] = { 0xa486 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4479), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_029)
{
    // A487  ; [.447A.0020.0002] 
    // YI SYLLABLE YYT

    uint32_t const cps[1] = { 0xa487 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x447a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_030)
{
    // A488  ; [.447B.0020.0002] 
    // YI SYLLABLE YYX

    uint32_t const cps[1] = { 0xa488 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x447b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_031)
{
    // A489  ; [.447C.0020.0002] 
    // YI SYLLABLE YY

    uint32_t const cps[1] = { 0xa489 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x447c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_032)
{
    // A48A  ; [.447D.0020.0002] 
    // YI SYLLABLE YYP

    uint32_t const cps[1] = { 0xa48a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x447d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_033)
{
    // A48B  ; [.447E.0020.0002] 
    // YI SYLLABLE YYRX

    uint32_t const cps[1] = { 0xa48b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x447e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_034)
{
    // A48C  ; [.447F.0020.0002] 
    // YI SYLLABLE YYR

    uint32_t const cps[1] = { 0xa48c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x447f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_035)
{
    // A490  ; [*0F59.0020.0002] 
    // YI RADICAL QOT

    uint32_t const cps[1] = { 0xa490 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_036)
{
    // A491  ; [*0F5A.0020.0002] 
    // YI RADICAL LI

    uint32_t const cps[1] = { 0xa491 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_037)
{
    // A492  ; [*0F5B.0020.0002] 
    // YI RADICAL KIT

    uint32_t const cps[1] = { 0xa492 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_038)
{
    // A493  ; [*0F5C.0020.0002] 
    // YI RADICAL NYIP

    uint32_t const cps[1] = { 0xa493 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_039)
{
    // A494  ; [*0F5D.0020.0002] 
    // YI RADICAL CYP

    uint32_t const cps[1] = { 0xa494 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_040)
{
    // A495  ; [*0F5E.0020.0002] 
    // YI RADICAL SSI

    uint32_t const cps[1] = { 0xa495 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_041)
{
    // A496  ; [*0F5F.0020.0002] 
    // YI RADICAL GGOP

    uint32_t const cps[1] = { 0xa496 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_042)
{
    // A497  ; [*0F60.0020.0002] 
    // YI RADICAL GEP

    uint32_t const cps[1] = { 0xa497 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_043)
{
    // A498  ; [*0F61.0020.0002] 
    // YI RADICAL MI

    uint32_t const cps[1] = { 0xa498 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_044)
{
    // A499  ; [*0F62.0020.0002] 
    // YI RADICAL HXIT

    uint32_t const cps[1] = { 0xa499 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_045)
{
    // A49A  ; [*0F63.0020.0002] 
    // YI RADICAL LYR

    uint32_t const cps[1] = { 0xa49a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_046)
{
    // A49B  ; [*0F64.0020.0002] 
    // YI RADICAL BBUT

    uint32_t const cps[1] = { 0xa49b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_047)
{
    // A49C  ; [*0F65.0020.0002] 
    // YI RADICAL MOP

    uint32_t const cps[1] = { 0xa49c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_048)
{
    // A49D  ; [*0F66.0020.0002] 
    // YI RADICAL YO

    uint32_t const cps[1] = { 0xa49d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_049)
{
    // A49E  ; [*0F67.0020.0002] 
    // YI RADICAL PUT

    uint32_t const cps[1] = { 0xa49e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_050)
{
    // A49F  ; [*0F68.0020.0002] 
    // YI RADICAL HXUO

    uint32_t const cps[1] = { 0xa49f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_051)
{
    // A4A0  ; [*0F69.0020.0002] 
    // YI RADICAL TAT

    uint32_t const cps[1] = { 0xa4a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_052)
{
    // A4A1  ; [*0F6A.0020.0002] 
    // YI RADICAL GA

    uint32_t const cps[1] = { 0xa4a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_053)
{
    // A4A2  ; [*0F6B.0020.0002] 
    // YI RADICAL ZUP

    uint32_t const cps[1] = { 0xa4a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_054)
{
    // A4A3  ; [*0F6C.0020.0002] 
    // YI RADICAL CYT

    uint32_t const cps[1] = { 0xa4a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_055)
{
    // A4A4  ; [*0F6D.0020.0002] 
    // YI RADICAL DDUR

    uint32_t const cps[1] = { 0xa4a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_056)
{
    // A4A5  ; [*0F6E.0020.0002] 
    // YI RADICAL BUR

    uint32_t const cps[1] = { 0xa4a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_057)
{
    // A4A6  ; [*0F6F.0020.0002] 
    // YI RADICAL GGUO

    uint32_t const cps[1] = { 0xa4a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_058)
{
    // A4A7  ; [*0F70.0020.0002] 
    // YI RADICAL NYOP

    uint32_t const cps[1] = { 0xa4a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_059)
{
    // A4A8  ; [*0F71.0020.0002] 
    // YI RADICAL TU

    uint32_t const cps[1] = { 0xa4a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_060)
{
    // A4A9  ; [*0F72.0020.0002] 
    // YI RADICAL OP

    uint32_t const cps[1] = { 0xa4a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_061)
{
    // A4AA  ; [*0F73.0020.0002] 
    // YI RADICAL JJUT

    uint32_t const cps[1] = { 0xa4aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_062)
{
    // A4AB  ; [*0F74.0020.0002] 
    // YI RADICAL ZOT

    uint32_t const cps[1] = { 0xa4ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_063)
{
    // A4AC  ; [*0F75.0020.0002] 
    // YI RADICAL PYT

    uint32_t const cps[1] = { 0xa4ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_064)
{
    // A4AD  ; [*0F76.0020.0002] 
    // YI RADICAL HMO

    uint32_t const cps[1] = { 0xa4ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_065)
{
    // A4AE  ; [*0F77.0020.0002] 
    // YI RADICAL YIT

    uint32_t const cps[1] = { 0xa4ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_066)
{
    // A4AF  ; [*0F78.0020.0002] 
    // YI RADICAL VUR

    uint32_t const cps[1] = { 0xa4af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_067)
{
    // A4B0  ; [*0F79.0020.0002] 
    // YI RADICAL SHY

    uint32_t const cps[1] = { 0xa4b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_068)
{
    // A4B1  ; [*0F7A.0020.0002] 
    // YI RADICAL VEP

    uint32_t const cps[1] = { 0xa4b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_069)
{
    // A4B2  ; [*0F7B.0020.0002] 
    // YI RADICAL ZA

    uint32_t const cps[1] = { 0xa4b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_070)
{
    // A4B3  ; [*0F7C.0020.0002] 
    // YI RADICAL JO

    uint32_t const cps[1] = { 0xa4b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_071)
{
    // A4B4  ; [*0F7D.0020.0002] 
    // YI RADICAL NZUP

    uint32_t const cps[1] = { 0xa4b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_072)
{
    // A4B5  ; [*0F7E.0020.0002] 
    // YI RADICAL JJY

    uint32_t const cps[1] = { 0xa4b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_073)
{
    // A4B6  ; [*0F7F.0020.0002] 
    // YI RADICAL GOT

    uint32_t const cps[1] = { 0xa4b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_074)
{
    // A4B7  ; [*0F80.0020.0002] 
    // YI RADICAL JJIE

    uint32_t const cps[1] = { 0xa4b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_075)
{
    // A4B8  ; [*0F81.0020.0002] 
    // YI RADICAL WO

    uint32_t const cps[1] = { 0xa4b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_076)
{
    // A4B9  ; [*0F82.0020.0002] 
    // YI RADICAL DU

    uint32_t const cps[1] = { 0xa4b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_077)
{
    // A4BA  ; [*0F83.0020.0002] 
    // YI RADICAL SHUR

    uint32_t const cps[1] = { 0xa4ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_078)
{
    // A4BB  ; [*0F84.0020.0002] 
    // YI RADICAL LIE

    uint32_t const cps[1] = { 0xa4bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_079)
{
    // A4BC  ; [*0F85.0020.0002] 
    // YI RADICAL CY

    uint32_t const cps[1] = { 0xa4bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_080)
{
    // A4BD  ; [*0F86.0020.0002] 
    // YI RADICAL CUOP

    uint32_t const cps[1] = { 0xa4bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_081)
{
    // A4BE  ; [*0F87.0020.0002] 
    // YI RADICAL CIP

    uint32_t const cps[1] = { 0xa4be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_082)
{
    // A4BF  ; [*0F88.0020.0002] 
    // YI RADICAL HXOP

    uint32_t const cps[1] = { 0xa4bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_083)
{
    // A4C0  ; [*0F89.0020.0002] 
    // YI RADICAL SHAT

    uint32_t const cps[1] = { 0xa4c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_084)
{
    // A4C1  ; [*0F8A.0020.0002] 
    // YI RADICAL ZUR

    uint32_t const cps[1] = { 0xa4c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_085)
{
    // A4C2  ; [*0F8B.0020.0002] 
    // YI RADICAL SHOP

    uint32_t const cps[1] = { 0xa4c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_086)
{
    // A4C3  ; [*0F8C.0020.0002] 
    // YI RADICAL CHE

    uint32_t const cps[1] = { 0xa4c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_087)
{
    // A4C4  ; [*0F8D.0020.0002] 
    // YI RADICAL ZZIET

    uint32_t const cps[1] = { 0xa4c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_088)
{
    // A4C5  ; [*0F8E.0020.0002] 
    // YI RADICAL NBIE

    uint32_t const cps[1] = { 0xa4c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_089)
{
    // A4C6  ; [*0F8F.0020.0002] 
    // YI RADICAL KE

    uint32_t const cps[1] = { 0xa4c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_090)
{
    // A4D0  ; [.4486.0020.0002] 
    // LISU LETTER BA

    uint32_t const cps[1] = { 0xa4d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4486), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_091)
{
    // A4D1  ; [.4487.0020.0002] 
    // LISU LETTER PA

    uint32_t const cps[1] = { 0xa4d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4487), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_092)
{
    // A4D2  ; [.4488.0020.0002] 
    // LISU LETTER PHA

    uint32_t const cps[1] = { 0xa4d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4488), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_093)
{
    // A4D3  ; [.4489.0020.0002] 
    // LISU LETTER DA

    uint32_t const cps[1] = { 0xa4d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4489), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_094)
{
    // A4D4  ; [.448A.0020.0002] 
    // LISU LETTER TA

    uint32_t const cps[1] = { 0xa4d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x448a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_095)
{
    // A4D5  ; [.448B.0020.0002] 
    // LISU LETTER THA

    uint32_t const cps[1] = { 0xa4d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x448b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_096)
{
    // A4D6  ; [.448C.0020.0002] 
    // LISU LETTER GA

    uint32_t const cps[1] = { 0xa4d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x448c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_097)
{
    // A4D7  ; [.448D.0020.0002] 
    // LISU LETTER KA

    uint32_t const cps[1] = { 0xa4d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x448d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_098)
{
    // A4D8  ; [.448E.0020.0002] 
    // LISU LETTER KHA

    uint32_t const cps[1] = { 0xa4d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x448e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_099)
{
    // A4D9  ; [.448F.0020.0002] 
    // LISU LETTER JA

    uint32_t const cps[1] = { 0xa4d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x448f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_100)
{
    // A4DA  ; [.4490.0020.0002] 
    // LISU LETTER CA

    uint32_t const cps[1] = { 0xa4da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4490), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_101)
{
    // A4DB  ; [.4491.0020.0002] 
    // LISU LETTER CHA

    uint32_t const cps[1] = { 0xa4db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4491), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_102)
{
    // A4DC  ; [.4492.0020.0002] 
    // LISU LETTER DZA

    uint32_t const cps[1] = { 0xa4dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4492), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_103)
{
    // A4DD  ; [.4493.0020.0002] 
    // LISU LETTER TSA

    uint32_t const cps[1] = { 0xa4dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4493), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_104)
{
    // A4DE  ; [.4494.0020.0002] 
    // LISU LETTER TSHA

    uint32_t const cps[1] = { 0xa4de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4494), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_105)
{
    // A4DF  ; [.4495.0020.0002] 
    // LISU LETTER MA

    uint32_t const cps[1] = { 0xa4df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4495), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_106)
{
    // A4E0  ; [.4496.0020.0002] 
    // LISU LETTER NA

    uint32_t const cps[1] = { 0xa4e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4496), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_107)
{
    // A4E1  ; [.4497.0020.0002] 
    // LISU LETTER LA

    uint32_t const cps[1] = { 0xa4e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4497), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_108)
{
    // A4E2  ; [.4498.0020.0002] 
    // LISU LETTER SA

    uint32_t const cps[1] = { 0xa4e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4498), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_109)
{
    // A4E3  ; [.4499.0020.0002] 
    // LISU LETTER ZHA

    uint32_t const cps[1] = { 0xa4e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4499), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_110)
{
    // A4E4  ; [.449A.0020.0002] 
    // LISU LETTER ZA

    uint32_t const cps[1] = { 0xa4e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x449a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_111)
{
    // A4E5  ; [.449B.0020.0002] 
    // LISU LETTER NGA

    uint32_t const cps[1] = { 0xa4e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x449b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_112)
{
    // A4E6  ; [.449C.0020.0002] 
    // LISU LETTER HA

    uint32_t const cps[1] = { 0xa4e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x449c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_113)
{
    // A4E7  ; [.449D.0020.0002] 
    // LISU LETTER XA

    uint32_t const cps[1] = { 0xa4e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x449d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_114)
{
    // A4E8  ; [.449E.0020.0002] 
    // LISU LETTER HHA

    uint32_t const cps[1] = { 0xa4e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x449e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_115)
{
    // A4E9  ; [.449F.0020.0002] 
    // LISU LETTER FA

    uint32_t const cps[1] = { 0xa4e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x449f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_116)
{
    // A4EA  ; [.44A2.0020.0002] 
    // LISU LETTER WA

    uint32_t const cps[1] = { 0xa4ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_117)
{
    // A4EB  ; [.44A0.0020.0002] 
    // LISU LETTER SHA

    uint32_t const cps[1] = { 0xa4eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_118)
{
    // A4EC  ; [.44A3.0020.0002] 
    // LISU LETTER YA

    uint32_t const cps[1] = { 0xa4ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_119)
{
    // A4ED  ; [.44A1.0020.0002] 
    // LISU LETTER GHA

    uint32_t const cps[1] = { 0xa4ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_120)
{
    // A4EE  ; [.44A4.0020.0002] 
    // LISU LETTER A

    uint32_t const cps[1] = { 0xa4ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_121)
{
    // A4EF  ; [.44A5.0020.0002] 
    // LISU LETTER AE

    uint32_t const cps[1] = { 0xa4ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_122)
{
    // A4F0  ; [.44A6.0020.0002] 
    // LISU LETTER E

    uint32_t const cps[1] = { 0xa4f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_123)
{
    // A4F1  ; [.44A7.0020.0002] 
    // LISU LETTER EU

    uint32_t const cps[1] = { 0xa4f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_124)
{
    // A4F2  ; [.44A8.0020.0002] 
    // LISU LETTER I

    uint32_t const cps[1] = { 0xa4f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_125)
{
    // A4F3  ; [.44A9.0020.0002] 
    // LISU LETTER O

    uint32_t const cps[1] = { 0xa4f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_126)
{
    // A4F4  ; [.44AA.0020.0002] 
    // LISU LETTER U

    uint32_t const cps[1] = { 0xa4f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_127)
{
    // A4F5  ; [.44AB.0020.0002] 
    // LISU LETTER UE

    uint32_t const cps[1] = { 0xa4f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_128)
{
    // A4F6  ; [.44AC.0020.0002] 
    // LISU LETTER UH

    uint32_t const cps[1] = { 0xa4f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_129)
{
    // A4F7  ; [.44AD.0020.0002] 
    // LISU LETTER OE

    uint32_t const cps[1] = { 0xa4f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_130)
{
    // A4F8  ; [.4480.0020.0002] 
    // LISU LETTER TONE MYA TI

    uint32_t const cps[1] = { 0xa4f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4480), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_131)
{
    // A4F9  ; [.4481.0020.0002] 
    // LISU LETTER TONE NA PO

    uint32_t const cps[1] = { 0xa4f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4481), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_132)
{
    // A4FA  ; [.4482.0020.0002] 
    // LISU LETTER TONE MYA CYA

    uint32_t const cps[1] = { 0xa4fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4482), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_133)
{
    // A4FB  ; [.4483.0020.0002] 
    // LISU LETTER TONE MYA BO

    uint32_t const cps[1] = { 0xa4fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4483), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_134)
{
    // A4FC  ; [.4485.0020.0002] 
    // LISU LETTER TONE MYA NA

    uint32_t const cps[1] = { 0xa4fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4485), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_135)
{
    // A4FD  ; [.4484.0020.0002] 
    // LISU LETTER TONE MYA JEU

    uint32_t const cps[1] = { 0xa4fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4484), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_136)
{
    // A4FE  ; [*022E.0020.0002] 
    // LISU PUNCTUATION COMMA

    uint32_t const cps[1] = { 0xa4fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x22e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_137)
{
    // A4FF  ; [*0286.0020.0002] 
    // LISU PUNCTUATION FULL STOP

    uint32_t const cps[1] = { 0xa4ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x286), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_138)
{
    // A500  ; [.3871.0020.0002] 
    // VAI SYLLABLE EE

    uint32_t const cps[1] = { 0xa500 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3871), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_139)
{
    // A501  ; [.3872.0020.0002] 
    // VAI SYLLABLE EEN

    uint32_t const cps[1] = { 0xa501 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3872), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_140)
{
    // A502  ; [.3873.0020.0002] 
    // VAI SYLLABLE HEE

    uint32_t const cps[1] = { 0xa502 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3873), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_141)
{
    // A503  ; [.3874.0020.0002] 
    // VAI SYLLABLE WEE

    uint32_t const cps[1] = { 0xa503 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3874), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_142)
{
    // A504  ; [.3875.0020.0002] 
    // VAI SYLLABLE WEEN

    uint32_t const cps[1] = { 0xa504 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3875), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_143)
{
    // A505  ; [.3876.0020.0002] 
    // VAI SYLLABLE PEE

    uint32_t const cps[1] = { 0xa505 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3876), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_144)
{
    // A506  ; [.3877.0020.0002] 
    // VAI SYLLABLE BHEE

    uint32_t const cps[1] = { 0xa506 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3877), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_145)
{
    // A507  ; [.3878.0020.0002] 
    // VAI SYLLABLE BEE

    uint32_t const cps[1] = { 0xa507 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3878), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_146)
{
    // A508  ; [.3879.0020.0002] 
    // VAI SYLLABLE MBEE

    uint32_t const cps[1] = { 0xa508 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3879), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_147)
{
    // A509  ; [.387A.0020.0002] 
    // VAI SYLLABLE KPEE

    uint32_t const cps[1] = { 0xa509 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x387a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_148)
{
    // A50A  ; [.387B.0020.0002] 
    // VAI SYLLABLE MGBEE

    uint32_t const cps[1] = { 0xa50a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x387b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_092_149)
{
    // A50B  ; [.387C.0020.0002] 
    // VAI SYLLABLE GBEE

    uint32_t const cps[1] = { 0xa50b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x387c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

