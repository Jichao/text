// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_361_000)
{
    // 413B 003F;	
    // (䄻) CJK UNIFIED IDEOGRAPH-413B	[FB80 C13B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC13B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_001)
{
    // 413B 0061;	
    // (䄻) CJK UNIFIED IDEOGRAPH-413B	[FB80 C13B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC13B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_002)
{
    // 413B 0041;	
    // (䄻) CJK UNIFIED IDEOGRAPH-413B	[FB80 C13B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x413B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC13B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_003)
{
    // 413B 0062;	
    // (䄻) CJK UNIFIED IDEOGRAPH-413B	[FB80 C13B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC13B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_004)
{
    // 413C 0021;	
    // (䄼) CJK UNIFIED IDEOGRAPH-413C	[FB80 C13C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC13C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_005)
{
    // 413C 003F;	
    // (䄼) CJK UNIFIED IDEOGRAPH-413C	[FB80 C13C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC13C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_006)
{
    // 413C 0061;	
    // (䄼) CJK UNIFIED IDEOGRAPH-413C	[FB80 C13C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC13C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_007)
{
    // 413C 0041;	
    // (䄼) CJK UNIFIED IDEOGRAPH-413C	[FB80 C13C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x413C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC13C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_008)
{
    // 413C 0062;	
    // (䄼) CJK UNIFIED IDEOGRAPH-413C	[FB80 C13C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC13C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_009)
{
    // 413D 0021;	
    // (䄽) CJK UNIFIED IDEOGRAPH-413D	[FB80 C13D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC13D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_010)
{
    // 413D 003F;	
    // (䄽) CJK UNIFIED IDEOGRAPH-413D	[FB80 C13D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC13D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_011)
{
    // 413D 0061;	
    // (䄽) CJK UNIFIED IDEOGRAPH-413D	[FB80 C13D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC13D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_012)
{
    // 413D 0041;	
    // (䄽) CJK UNIFIED IDEOGRAPH-413D	[FB80 C13D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x413D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC13D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_013)
{
    // 413D 0062;	
    // (䄽) CJK UNIFIED IDEOGRAPH-413D	[FB80 C13D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC13D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_014)
{
    // 413E 0021;	
    // (䄾) CJK UNIFIED IDEOGRAPH-413E	[FB80 C13E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC13E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_015)
{
    // 413E 003F;	
    // (䄾) CJK UNIFIED IDEOGRAPH-413E	[FB80 C13E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC13E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_016)
{
    // 413E 0061;	
    // (䄾) CJK UNIFIED IDEOGRAPH-413E	[FB80 C13E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC13E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_017)
{
    // 413E 0041;	
    // (䄾) CJK UNIFIED IDEOGRAPH-413E	[FB80 C13E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x413E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC13E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_018)
{
    // 413E 0062;	
    // (䄾) CJK UNIFIED IDEOGRAPH-413E	[FB80 C13E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC13E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_019)
{
    // 413F 0021;	
    // (䄿) CJK UNIFIED IDEOGRAPH-413F	[FB80 C13F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC13F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_020)
{
    // 413F 003F;	
    // (䄿) CJK UNIFIED IDEOGRAPH-413F	[FB80 C13F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC13F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_021)
{
    // 413F 0061;	
    // (䄿) CJK UNIFIED IDEOGRAPH-413F	[FB80 C13F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC13F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_022)
{
    // 413F 0041;	
    // (䄿) CJK UNIFIED IDEOGRAPH-413F	[FB80 C13F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x413F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC13F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_023)
{
    // 413F 0062;	
    // (䄿) CJK UNIFIED IDEOGRAPH-413F	[FB80 C13F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x413F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC13F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_024)
{
    // 4140 0021;	
    // (䅀) CJK UNIFIED IDEOGRAPH-4140	[FB80 C140 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4140, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC140, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_025)
{
    // 4140 003F;	
    // (䅀) CJK UNIFIED IDEOGRAPH-4140	[FB80 C140 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4140, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC140, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_026)
{
    // 4140 0061;	
    // (䅀) CJK UNIFIED IDEOGRAPH-4140	[FB80 C140 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4140, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_027)
{
    // 4140 0041;	
    // (䅀) CJK UNIFIED IDEOGRAPH-4140	[FB80 C140 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4140, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_028)
{
    // 4140 0062;	
    // (䅀) CJK UNIFIED IDEOGRAPH-4140	[FB80 C140 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4140, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC140, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_029)
{
    // 4141 0021;	
    // (䅁) CJK UNIFIED IDEOGRAPH-4141	[FB80 C141 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4141, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC141, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_030)
{
    // 4141 003F;	
    // (䅁) CJK UNIFIED IDEOGRAPH-4141	[FB80 C141 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4141, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC141, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_031)
{
    // 4141 0061;	
    // (䅁) CJK UNIFIED IDEOGRAPH-4141	[FB80 C141 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4141, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC141, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_032)
{
    // 4141 0041;	
    // (䅁) CJK UNIFIED IDEOGRAPH-4141	[FB80 C141 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4141, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC141, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_033)
{
    // 4141 0062;	
    // (䅁) CJK UNIFIED IDEOGRAPH-4141	[FB80 C141 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4141, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC141, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_034)
{
    // 4142 0021;	
    // (䅂) CJK UNIFIED IDEOGRAPH-4142	[FB80 C142 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4142, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC142, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_035)
{
    // 4142 003F;	
    // (䅂) CJK UNIFIED IDEOGRAPH-4142	[FB80 C142 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4142, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC142, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_036)
{
    // 4142 0061;	
    // (䅂) CJK UNIFIED IDEOGRAPH-4142	[FB80 C142 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4142, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC142, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_037)
{
    // 4142 0041;	
    // (䅂) CJK UNIFIED IDEOGRAPH-4142	[FB80 C142 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4142, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC142, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_038)
{
    // 4142 0062;	
    // (䅂) CJK UNIFIED IDEOGRAPH-4142	[FB80 C142 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4142, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC142, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_039)
{
    // 4143 0021;	
    // (䅃) CJK UNIFIED IDEOGRAPH-4143	[FB80 C143 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4143, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC143, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_040)
{
    // 4143 003F;	
    // (䅃) CJK UNIFIED IDEOGRAPH-4143	[FB80 C143 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4143, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC143, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_041)
{
    // 4143 0061;	
    // (䅃) CJK UNIFIED IDEOGRAPH-4143	[FB80 C143 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4143, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC143, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_042)
{
    // 4143 0041;	
    // (䅃) CJK UNIFIED IDEOGRAPH-4143	[FB80 C143 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4143, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC143, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_043)
{
    // 4143 0062;	
    // (䅃) CJK UNIFIED IDEOGRAPH-4143	[FB80 C143 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4143, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC143, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_044)
{
    // 4144 0021;	
    // (䅄) CJK UNIFIED IDEOGRAPH-4144	[FB80 C144 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4144, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC144, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_045)
{
    // 4144 003F;	
    // (䅄) CJK UNIFIED IDEOGRAPH-4144	[FB80 C144 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4144, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC144, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_046)
{
    // 4144 0061;	
    // (䅄) CJK UNIFIED IDEOGRAPH-4144	[FB80 C144 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4144, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_047)
{
    // 4144 0041;	
    // (䅄) CJK UNIFIED IDEOGRAPH-4144	[FB80 C144 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4144, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC144, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_048)
{
    // 4144 0062;	
    // (䅄) CJK UNIFIED IDEOGRAPH-4144	[FB80 C144 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4144, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC144, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_049)
{
    // 4145 0021;	
    // (䅅) CJK UNIFIED IDEOGRAPH-4145	[FB80 C145 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4145, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC145, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_050)
{
    // 4145 003F;	
    // (䅅) CJK UNIFIED IDEOGRAPH-4145	[FB80 C145 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4145, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC145, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_051)
{
    // 4145 0061;	
    // (䅅) CJK UNIFIED IDEOGRAPH-4145	[FB80 C145 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4145, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_052)
{
    // 4145 0041;	
    // (䅅) CJK UNIFIED IDEOGRAPH-4145	[FB80 C145 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4145, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_053)
{
    // 4145 0062;	
    // (䅅) CJK UNIFIED IDEOGRAPH-4145	[FB80 C145 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4145, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC145, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_054)
{
    // 4146 0021;	
    // (䅆) CJK UNIFIED IDEOGRAPH-4146	[FB80 C146 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4146, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC146, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_055)
{
    // 4146 003F;	
    // (䅆) CJK UNIFIED IDEOGRAPH-4146	[FB80 C146 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4146, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC146, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_056)
{
    // 4146 0061;	
    // (䅆) CJK UNIFIED IDEOGRAPH-4146	[FB80 C146 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4146, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC146, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_057)
{
    // 4146 0041;	
    // (䅆) CJK UNIFIED IDEOGRAPH-4146	[FB80 C146 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4146, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC146, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_058)
{
    // 4146 0062;	
    // (䅆) CJK UNIFIED IDEOGRAPH-4146	[FB80 C146 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4146, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC146, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_059)
{
    // 4147 0021;	
    // (䅇) CJK UNIFIED IDEOGRAPH-4147	[FB80 C147 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4147, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC147, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_060)
{
    // 4147 003F;	
    // (䅇) CJK UNIFIED IDEOGRAPH-4147	[FB80 C147 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4147, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC147, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_061)
{
    // 4147 0061;	
    // (䅇) CJK UNIFIED IDEOGRAPH-4147	[FB80 C147 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4147, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC147, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_062)
{
    // 4147 0041;	
    // (䅇) CJK UNIFIED IDEOGRAPH-4147	[FB80 C147 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4147, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC147, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_063)
{
    // 4147 0062;	
    // (䅇) CJK UNIFIED IDEOGRAPH-4147	[FB80 C147 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4147, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC147, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_064)
{
    // 4148 0021;	
    // (䅈) CJK UNIFIED IDEOGRAPH-4148	[FB80 C148 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4148, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC148, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_065)
{
    // 4148 003F;	
    // (䅈) CJK UNIFIED IDEOGRAPH-4148	[FB80 C148 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4148, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC148, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_066)
{
    // 4148 0061;	
    // (䅈) CJK UNIFIED IDEOGRAPH-4148	[FB80 C148 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4148, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_067)
{
    // 4148 0041;	
    // (䅈) CJK UNIFIED IDEOGRAPH-4148	[FB80 C148 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4148, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC148, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_068)
{
    // 4148 0062;	
    // (䅈) CJK UNIFIED IDEOGRAPH-4148	[FB80 C148 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4148, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC148, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_069)
{
    // 4149 0021;	
    // (䅉) CJK UNIFIED IDEOGRAPH-4149	[FB80 C149 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4149, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC149, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_070)
{
    // 4149 003F;	
    // (䅉) CJK UNIFIED IDEOGRAPH-4149	[FB80 C149 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4149, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC149, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_071)
{
    // 4149 0061;	
    // (䅉) CJK UNIFIED IDEOGRAPH-4149	[FB80 C149 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4149, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_072)
{
    // 4149 0041;	
    // (䅉) CJK UNIFIED IDEOGRAPH-4149	[FB80 C149 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4149, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC149, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_073)
{
    // 4149 0062;	
    // (䅉) CJK UNIFIED IDEOGRAPH-4149	[FB80 C149 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4149, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC149, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_074)
{
    // 414A 0021;	
    // (䅊) CJK UNIFIED IDEOGRAPH-414A	[FB80 C14A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC14A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_075)
{
    // 414A 003F;	
    // (䅊) CJK UNIFIED IDEOGRAPH-414A	[FB80 C14A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC14A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_076)
{
    // 414A 0061;	
    // (䅊) CJK UNIFIED IDEOGRAPH-414A	[FB80 C14A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC14A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_077)
{
    // 414A 0041;	
    // (䅊) CJK UNIFIED IDEOGRAPH-414A	[FB80 C14A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x414A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC14A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_078)
{
    // 414A 0062;	
    // (䅊) CJK UNIFIED IDEOGRAPH-414A	[FB80 C14A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC14A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_079)
{
    // 414B 0021;	
    // (䅋) CJK UNIFIED IDEOGRAPH-414B	[FB80 C14B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC14B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_080)
{
    // 414B 003F;	
    // (䅋) CJK UNIFIED IDEOGRAPH-414B	[FB80 C14B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC14B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_081)
{
    // 414B 0061;	
    // (䅋) CJK UNIFIED IDEOGRAPH-414B	[FB80 C14B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC14B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_082)
{
    // 414B 0041;	
    // (䅋) CJK UNIFIED IDEOGRAPH-414B	[FB80 C14B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x414B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC14B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_083)
{
    // 414B 0062;	
    // (䅋) CJK UNIFIED IDEOGRAPH-414B	[FB80 C14B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC14B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_084)
{
    // 414C 0021;	
    // (䅌) CJK UNIFIED IDEOGRAPH-414C	[FB80 C14C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC14C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_085)
{
    // 414C 003F;	
    // (䅌) CJK UNIFIED IDEOGRAPH-414C	[FB80 C14C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC14C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_086)
{
    // 414C 0061;	
    // (䅌) CJK UNIFIED IDEOGRAPH-414C	[FB80 C14C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC14C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_087)
{
    // 414C 0041;	
    // (䅌) CJK UNIFIED IDEOGRAPH-414C	[FB80 C14C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x414C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC14C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_088)
{
    // 414C 0062;	
    // (䅌) CJK UNIFIED IDEOGRAPH-414C	[FB80 C14C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC14C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_089)
{
    // 414D 0021;	
    // (䅍) CJK UNIFIED IDEOGRAPH-414D	[FB80 C14D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC14D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_090)
{
    // 414D 003F;	
    // (䅍) CJK UNIFIED IDEOGRAPH-414D	[FB80 C14D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC14D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_091)
{
    // 414D 0061;	
    // (䅍) CJK UNIFIED IDEOGRAPH-414D	[FB80 C14D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC14D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_092)
{
    // 414D 0041;	
    // (䅍) CJK UNIFIED IDEOGRAPH-414D	[FB80 C14D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x414D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC14D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_093)
{
    // 414D 0062;	
    // (䅍) CJK UNIFIED IDEOGRAPH-414D	[FB80 C14D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC14D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_094)
{
    // 414E 0021;	
    // (䅎) CJK UNIFIED IDEOGRAPH-414E	[FB80 C14E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC14E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_095)
{
    // 414E 003F;	
    // (䅎) CJK UNIFIED IDEOGRAPH-414E	[FB80 C14E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC14E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_096)
{
    // 414E 0061;	
    // (䅎) CJK UNIFIED IDEOGRAPH-414E	[FB80 C14E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC14E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_097)
{
    // 414E 0041;	
    // (䅎) CJK UNIFIED IDEOGRAPH-414E	[FB80 C14E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x414E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC14E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_098)
{
    // 414E 0062;	
    // (䅎) CJK UNIFIED IDEOGRAPH-414E	[FB80 C14E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC14E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_099)
{
    // 414F 0021;	
    // (䅏) CJK UNIFIED IDEOGRAPH-414F	[FB80 C14F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC14F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_100)
{
    // 414F 003F;	
    // (䅏) CJK UNIFIED IDEOGRAPH-414F	[FB80 C14F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC14F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_101)
{
    // 414F 0061;	
    // (䅏) CJK UNIFIED IDEOGRAPH-414F	[FB80 C14F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC14F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_102)
{
    // 414F 0041;	
    // (䅏) CJK UNIFIED IDEOGRAPH-414F	[FB80 C14F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x414F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC14F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_103)
{
    // 414F 0062;	
    // (䅏) CJK UNIFIED IDEOGRAPH-414F	[FB80 C14F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x414F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC14F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_104)
{
    // 4150 0021;	
    // (䅐) CJK UNIFIED IDEOGRAPH-4150	[FB80 C150 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4150, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC150, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_105)
{
    // 4150 003F;	
    // (䅐) CJK UNIFIED IDEOGRAPH-4150	[FB80 C150 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4150, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC150, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_106)
{
    // 4150 0061;	
    // (䅐) CJK UNIFIED IDEOGRAPH-4150	[FB80 C150 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4150, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC150, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_107)
{
    // 4150 0041;	
    // (䅐) CJK UNIFIED IDEOGRAPH-4150	[FB80 C150 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4150, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC150, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_108)
{
    // 4150 0062;	
    // (䅐) CJK UNIFIED IDEOGRAPH-4150	[FB80 C150 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4150, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC150, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_109)
{
    // 4151 0021;	
    // (䅑) CJK UNIFIED IDEOGRAPH-4151	[FB80 C151 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4151, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC151, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_110)
{
    // 4151 003F;	
    // (䅑) CJK UNIFIED IDEOGRAPH-4151	[FB80 C151 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4151, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC151, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_111)
{
    // 4151 0061;	
    // (䅑) CJK UNIFIED IDEOGRAPH-4151	[FB80 C151 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4151, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC151, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_112)
{
    // 4151 0041;	
    // (䅑) CJK UNIFIED IDEOGRAPH-4151	[FB80 C151 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4151, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC151, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_113)
{
    // 4151 0062;	
    // (䅑) CJK UNIFIED IDEOGRAPH-4151	[FB80 C151 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4151, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC151, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_114)
{
    // 4152 0021;	
    // (䅒) CJK UNIFIED IDEOGRAPH-4152	[FB80 C152 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4152, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC152, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_115)
{
    // 4152 003F;	
    // (䅒) CJK UNIFIED IDEOGRAPH-4152	[FB80 C152 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4152, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC152, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_116)
{
    // 4152 0061;	
    // (䅒) CJK UNIFIED IDEOGRAPH-4152	[FB80 C152 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4152, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC152, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_117)
{
    // 4152 0041;	
    // (䅒) CJK UNIFIED IDEOGRAPH-4152	[FB80 C152 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4152, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC152, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_118)
{
    // 4152 0062;	
    // (䅒) CJK UNIFIED IDEOGRAPH-4152	[FB80 C152 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4152, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC152, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_119)
{
    // 4153 0021;	
    // (䅓) CJK UNIFIED IDEOGRAPH-4153	[FB80 C153 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4153, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC153, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_120)
{
    // 4153 003F;	
    // (䅓) CJK UNIFIED IDEOGRAPH-4153	[FB80 C153 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4153, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC153, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_121)
{
    // 4153 0061;	
    // (䅓) CJK UNIFIED IDEOGRAPH-4153	[FB80 C153 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4153, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC153, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_122)
{
    // 4153 0041;	
    // (䅓) CJK UNIFIED IDEOGRAPH-4153	[FB80 C153 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4153, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC153, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_123)
{
    // 4153 0062;	
    // (䅓) CJK UNIFIED IDEOGRAPH-4153	[FB80 C153 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4153, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC153, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_124)
{
    // 4154 0021;	
    // (䅔) CJK UNIFIED IDEOGRAPH-4154	[FB80 C154 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4154, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC154, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_125)
{
    // 4154 003F;	
    // (䅔) CJK UNIFIED IDEOGRAPH-4154	[FB80 C154 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4154, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC154, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_126)
{
    // 4154 0061;	
    // (䅔) CJK UNIFIED IDEOGRAPH-4154	[FB80 C154 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4154, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_127)
{
    // 4154 0041;	
    // (䅔) CJK UNIFIED IDEOGRAPH-4154	[FB80 C154 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4154, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_128)
{
    // 4154 0062;	
    // (䅔) CJK UNIFIED IDEOGRAPH-4154	[FB80 C154 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4154, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC154, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_129)
{
    // 4155 0021;	
    // (䅕) CJK UNIFIED IDEOGRAPH-4155	[FB80 C155 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4155, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC155, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_130)
{
    // 4155 003F;	
    // (䅕) CJK UNIFIED IDEOGRAPH-4155	[FB80 C155 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4155, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC155, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_131)
{
    // 4155 0061;	
    // (䅕) CJK UNIFIED IDEOGRAPH-4155	[FB80 C155 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4155, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC155, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_132)
{
    // 4155 0041;	
    // (䅕) CJK UNIFIED IDEOGRAPH-4155	[FB80 C155 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4155, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC155, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_133)
{
    // 4155 0062;	
    // (䅕) CJK UNIFIED IDEOGRAPH-4155	[FB80 C155 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4155, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC155, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_134)
{
    // 4156 0021;	
    // (䅖) CJK UNIFIED IDEOGRAPH-4156	[FB80 C156 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4156, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC156, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_135)
{
    // 4156 003F;	
    // (䅖) CJK UNIFIED IDEOGRAPH-4156	[FB80 C156 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4156, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC156, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_136)
{
    // 4156 0061;	
    // (䅖) CJK UNIFIED IDEOGRAPH-4156	[FB80 C156 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4156, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC156, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_137)
{
    // 4156 0041;	
    // (䅖) CJK UNIFIED IDEOGRAPH-4156	[FB80 C156 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4156, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC156, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_138)
{
    // 4156 0062;	
    // (䅖) CJK UNIFIED IDEOGRAPH-4156	[FB80 C156 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4156, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC156, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_139)
{
    // 4157 0021;	
    // (䅗) CJK UNIFIED IDEOGRAPH-4157	[FB80 C157 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4157, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC157, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_140)
{
    // 4157 003F;	
    // (䅗) CJK UNIFIED IDEOGRAPH-4157	[FB80 C157 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4157, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC157, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_141)
{
    // 4157 0061;	
    // (䅗) CJK UNIFIED IDEOGRAPH-4157	[FB80 C157 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4157, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC157, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_142)
{
    // 4157 0041;	
    // (䅗) CJK UNIFIED IDEOGRAPH-4157	[FB80 C157 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4157, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC157, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_143)
{
    // 4157 0062;	
    // (䅗) CJK UNIFIED IDEOGRAPH-4157	[FB80 C157 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4157, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC157, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_144)
{
    // 4158 0021;	
    // (䅘) CJK UNIFIED IDEOGRAPH-4158	[FB80 C158 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4158, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC158, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_145)
{
    // 4158 003F;	
    // (䅘) CJK UNIFIED IDEOGRAPH-4158	[FB80 C158 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4158, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC158, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_146)
{
    // 4158 0061;	
    // (䅘) CJK UNIFIED IDEOGRAPH-4158	[FB80 C158 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4158, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC158, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_147)
{
    // 4158 0041;	
    // (䅘) CJK UNIFIED IDEOGRAPH-4158	[FB80 C158 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4158, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC158, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_148)
{
    // 4158 0062;	
    // (䅘) CJK UNIFIED IDEOGRAPH-4158	[FB80 C158 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4158, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC158, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_149)
{
    // 4159 0021;	
    // (䅙) CJK UNIFIED IDEOGRAPH-4159	[FB80 C159 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4159, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC159, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_150)
{
    // 4159 003F;	
    // (䅙) CJK UNIFIED IDEOGRAPH-4159	[FB80 C159 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4159, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC159, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_151)
{
    // 4159 0061;	
    // (䅙) CJK UNIFIED IDEOGRAPH-4159	[FB80 C159 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4159, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC159, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_152)
{
    // 4159 0041;	
    // (䅙) CJK UNIFIED IDEOGRAPH-4159	[FB80 C159 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4159, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC159, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_153)
{
    // 4159 0062;	
    // (䅙) CJK UNIFIED IDEOGRAPH-4159	[FB80 C159 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4159, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC159, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_154)
{
    // 415A 0021;	
    // (䅚) CJK UNIFIED IDEOGRAPH-415A	[FB80 C15A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC15A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_155)
{
    // 415A 003F;	
    // (䅚) CJK UNIFIED IDEOGRAPH-415A	[FB80 C15A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC15A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_156)
{
    // 415A 0061;	
    // (䅚) CJK UNIFIED IDEOGRAPH-415A	[FB80 C15A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC15A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_157)
{
    // 415A 0041;	
    // (䅚) CJK UNIFIED IDEOGRAPH-415A	[FB80 C15A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x415A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC15A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_158)
{
    // 415A 0062;	
    // (䅚) CJK UNIFIED IDEOGRAPH-415A	[FB80 C15A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC15A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_159)
{
    // 415B 0021;	
    // (䅛) CJK UNIFIED IDEOGRAPH-415B	[FB80 C15B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC15B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_160)
{
    // 415B 003F;	
    // (䅛) CJK UNIFIED IDEOGRAPH-415B	[FB80 C15B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC15B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_161)
{
    // 415B 0061;	
    // (䅛) CJK UNIFIED IDEOGRAPH-415B	[FB80 C15B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC15B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_162)
{
    // 415B 0041;	
    // (䅛) CJK UNIFIED IDEOGRAPH-415B	[FB80 C15B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x415B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC15B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_163)
{
    // 415B 0062;	
    // (䅛) CJK UNIFIED IDEOGRAPH-415B	[FB80 C15B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC15B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_164)
{
    // 415C 0021;	
    // (䅜) CJK UNIFIED IDEOGRAPH-415C	[FB80 C15C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC15C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_165)
{
    // 415C 003F;	
    // (䅜) CJK UNIFIED IDEOGRAPH-415C	[FB80 C15C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC15C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_166)
{
    // 415C 0061;	
    // (䅜) CJK UNIFIED IDEOGRAPH-415C	[FB80 C15C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC15C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_167)
{
    // 415C 0041;	
    // (䅜) CJK UNIFIED IDEOGRAPH-415C	[FB80 C15C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x415C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC15C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_168)
{
    // 415C 0062;	
    // (䅜) CJK UNIFIED IDEOGRAPH-415C	[FB80 C15C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC15C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_169)
{
    // 415D 0021;	
    // (䅝) CJK UNIFIED IDEOGRAPH-415D	[FB80 C15D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC15D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_170)
{
    // 415D 003F;	
    // (䅝) CJK UNIFIED IDEOGRAPH-415D	[FB80 C15D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC15D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_171)
{
    // 415D 0061;	
    // (䅝) CJK UNIFIED IDEOGRAPH-415D	[FB80 C15D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC15D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_172)
{
    // 415D 0041;	
    // (䅝) CJK UNIFIED IDEOGRAPH-415D	[FB80 C15D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x415D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC15D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_173)
{
    // 415D 0062;	
    // (䅝) CJK UNIFIED IDEOGRAPH-415D	[FB80 C15D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC15D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_174)
{
    // 415E 0021;	
    // (䅞) CJK UNIFIED IDEOGRAPH-415E	[FB80 C15E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC15E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_175)
{
    // 415E 003F;	
    // (䅞) CJK UNIFIED IDEOGRAPH-415E	[FB80 C15E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC15E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_176)
{
    // 415E 0061;	
    // (䅞) CJK UNIFIED IDEOGRAPH-415E	[FB80 C15E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC15E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_177)
{
    // 415E 0041;	
    // (䅞) CJK UNIFIED IDEOGRAPH-415E	[FB80 C15E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x415E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC15E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_178)
{
    // 415E 0062;	
    // (䅞) CJK UNIFIED IDEOGRAPH-415E	[FB80 C15E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC15E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_179)
{
    // 415F 0021;	
    // (䅟) CJK UNIFIED IDEOGRAPH-415F	[FB80 C15F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC15F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_180)
{
    // 415F 003F;	
    // (䅟) CJK UNIFIED IDEOGRAPH-415F	[FB80 C15F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC15F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_181)
{
    // 415F 0061;	
    // (䅟) CJK UNIFIED IDEOGRAPH-415F	[FB80 C15F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC15F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_182)
{
    // 415F 0041;	
    // (䅟) CJK UNIFIED IDEOGRAPH-415F	[FB80 C15F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x415F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC15F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_183)
{
    // 415F 0062;	
    // (䅟) CJK UNIFIED IDEOGRAPH-415F	[FB80 C15F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x415F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC15F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_184)
{
    // 4160 0021;	
    // (䅠) CJK UNIFIED IDEOGRAPH-4160	[FB80 C160 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4160, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC160, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_185)
{
    // 4160 003F;	
    // (䅠) CJK UNIFIED IDEOGRAPH-4160	[FB80 C160 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4160, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC160, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_186)
{
    // 4160 0061;	
    // (䅠) CJK UNIFIED IDEOGRAPH-4160	[FB80 C160 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4160, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_187)
{
    // 4160 0041;	
    // (䅠) CJK UNIFIED IDEOGRAPH-4160	[FB80 C160 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4160, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC160, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_188)
{
    // 4160 0062;	
    // (䅠) CJK UNIFIED IDEOGRAPH-4160	[FB80 C160 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4160, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC160, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_189)
{
    // 4161 0021;	
    // (䅡) CJK UNIFIED IDEOGRAPH-4161	[FB80 C161 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4161, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC161, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_190)
{
    // 4161 003F;	
    // (䅡) CJK UNIFIED IDEOGRAPH-4161	[FB80 C161 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4161, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC161, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_191)
{
    // 4161 0061;	
    // (䅡) CJK UNIFIED IDEOGRAPH-4161	[FB80 C161 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4161, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC161, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_192)
{
    // 4161 0041;	
    // (䅡) CJK UNIFIED IDEOGRAPH-4161	[FB80 C161 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4161, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC161, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_193)
{
    // 4161 0062;	
    // (䅡) CJK UNIFIED IDEOGRAPH-4161	[FB80 C161 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4161, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC161, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_194)
{
    // 4162 0021;	
    // (䅢) CJK UNIFIED IDEOGRAPH-4162	[FB80 C162 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4162, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC162, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_195)
{
    // 4162 003F;	
    // (䅢) CJK UNIFIED IDEOGRAPH-4162	[FB80 C162 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4162, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC162, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_196)
{
    // 4162 0061;	
    // (䅢) CJK UNIFIED IDEOGRAPH-4162	[FB80 C162 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4162, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC162, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_197)
{
    // 4162 0041;	
    // (䅢) CJK UNIFIED IDEOGRAPH-4162	[FB80 C162 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4162, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC162, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_198)
{
    // 4162 0062;	
    // (䅢) CJK UNIFIED IDEOGRAPH-4162	[FB80 C162 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4162, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC162, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_199)
{
    // 4163 0021;	
    // (䅣) CJK UNIFIED IDEOGRAPH-4163	[FB80 C163 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4163, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC163, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_200)
{
    // 4163 003F;	
    // (䅣) CJK UNIFIED IDEOGRAPH-4163	[FB80 C163 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4163, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC163, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_201)
{
    // 4163 0061;	
    // (䅣) CJK UNIFIED IDEOGRAPH-4163	[FB80 C163 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4163, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC163, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_202)
{
    // 4163 0041;	
    // (䅣) CJK UNIFIED IDEOGRAPH-4163	[FB80 C163 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4163, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC163, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_203)
{
    // 4163 0062;	
    // (䅣) CJK UNIFIED IDEOGRAPH-4163	[FB80 C163 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4163, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC163, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_204)
{
    // 4164 0021;	
    // (䅤) CJK UNIFIED IDEOGRAPH-4164	[FB80 C164 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4164, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC164, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_205)
{
    // 4164 003F;	
    // (䅤) CJK UNIFIED IDEOGRAPH-4164	[FB80 C164 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4164, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC164, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_206)
{
    // 4164 0061;	
    // (䅤) CJK UNIFIED IDEOGRAPH-4164	[FB80 C164 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4164, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_207)
{
    // 4164 0041;	
    // (䅤) CJK UNIFIED IDEOGRAPH-4164	[FB80 C164 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4164, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_208)
{
    // 4164 0062;	
    // (䅤) CJK UNIFIED IDEOGRAPH-4164	[FB80 C164 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4164, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC164, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_209)
{
    // 4165 0021;	
    // (䅥) CJK UNIFIED IDEOGRAPH-4165	[FB80 C165 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4165, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC165, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_210)
{
    // 4165 003F;	
    // (䅥) CJK UNIFIED IDEOGRAPH-4165	[FB80 C165 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4165, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC165, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_211)
{
    // 4165 0061;	
    // (䅥) CJK UNIFIED IDEOGRAPH-4165	[FB80 C165 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4165, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_212)
{
    // 4165 0041;	
    // (䅥) CJK UNIFIED IDEOGRAPH-4165	[FB80 C165 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4165, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_213)
{
    // 4165 0062;	
    // (䅥) CJK UNIFIED IDEOGRAPH-4165	[FB80 C165 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4165, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC165, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_214)
{
    // 4166 0021;	
    // (䅦) CJK UNIFIED IDEOGRAPH-4166	[FB80 C166 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4166, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC166, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_215)
{
    // 4166 003F;	
    // (䅦) CJK UNIFIED IDEOGRAPH-4166	[FB80 C166 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4166, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC166, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_216)
{
    // 4166 0061;	
    // (䅦) CJK UNIFIED IDEOGRAPH-4166	[FB80 C166 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4166, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC166, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_217)
{
    // 4166 0041;	
    // (䅦) CJK UNIFIED IDEOGRAPH-4166	[FB80 C166 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4166, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC166, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_218)
{
    // 4166 0062;	
    // (䅦) CJK UNIFIED IDEOGRAPH-4166	[FB80 C166 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4166, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC166, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_219)
{
    // 4167 0021;	
    // (䅧) CJK UNIFIED IDEOGRAPH-4167	[FB80 C167 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4167, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC167, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_220)
{
    // 4167 003F;	
    // (䅧) CJK UNIFIED IDEOGRAPH-4167	[FB80 C167 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4167, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC167, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_221)
{
    // 4167 0061;	
    // (䅧) CJK UNIFIED IDEOGRAPH-4167	[FB80 C167 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4167, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_222)
{
    // 4167 0041;	
    // (䅧) CJK UNIFIED IDEOGRAPH-4167	[FB80 C167 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4167, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_223)
{
    // 4167 0062;	
    // (䅧) CJK UNIFIED IDEOGRAPH-4167	[FB80 C167 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4167, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC167, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_224)
{
    // 4168 0021;	
    // (䅨) CJK UNIFIED IDEOGRAPH-4168	[FB80 C168 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4168, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC168, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_225)
{
    // 4168 003F;	
    // (䅨) CJK UNIFIED IDEOGRAPH-4168	[FB80 C168 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4168, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC168, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_226)
{
    // 4168 0061;	
    // (䅨) CJK UNIFIED IDEOGRAPH-4168	[FB80 C168 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4168, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_227)
{
    // 4168 0041;	
    // (䅨) CJK UNIFIED IDEOGRAPH-4168	[FB80 C168 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4168, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_228)
{
    // 4168 0062;	
    // (䅨) CJK UNIFIED IDEOGRAPH-4168	[FB80 C168 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4168, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC168, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_229)
{
    // 4169 0021;	
    // (䅩) CJK UNIFIED IDEOGRAPH-4169	[FB80 C169 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4169, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC169, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_230)
{
    // 4169 003F;	
    // (䅩) CJK UNIFIED IDEOGRAPH-4169	[FB80 C169 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4169, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC169, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_231)
{
    // 4169 0061;	
    // (䅩) CJK UNIFIED IDEOGRAPH-4169	[FB80 C169 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4169, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_232)
{
    // 4169 0041;	
    // (䅩) CJK UNIFIED IDEOGRAPH-4169	[FB80 C169 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4169, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_233)
{
    // 4169 0062;	
    // (䅩) CJK UNIFIED IDEOGRAPH-4169	[FB80 C169 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4169, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC169, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_234)
{
    // 416A 0021;	
    // (䅪) CJK UNIFIED IDEOGRAPH-416A	[FB80 C16A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC16A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_235)
{
    // 416A 003F;	
    // (䅪) CJK UNIFIED IDEOGRAPH-416A	[FB80 C16A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC16A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_236)
{
    // 416A 0061;	
    // (䅪) CJK UNIFIED IDEOGRAPH-416A	[FB80 C16A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC16A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_237)
{
    // 416A 0041;	
    // (䅪) CJK UNIFIED IDEOGRAPH-416A	[FB80 C16A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x416A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC16A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_238)
{
    // 416A 0062;	
    // (䅪) CJK UNIFIED IDEOGRAPH-416A	[FB80 C16A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC16A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_239)
{
    // 416B 0021;	
    // (䅫) CJK UNIFIED IDEOGRAPH-416B	[FB80 C16B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC16B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_240)
{
    // 416B 003F;	
    // (䅫) CJK UNIFIED IDEOGRAPH-416B	[FB80 C16B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC16B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_241)
{
    // 416B 0061;	
    // (䅫) CJK UNIFIED IDEOGRAPH-416B	[FB80 C16B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC16B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_242)
{
    // 416B 0041;	
    // (䅫) CJK UNIFIED IDEOGRAPH-416B	[FB80 C16B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x416B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC16B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_243)
{
    // 416B 0062;	
    // (䅫) CJK UNIFIED IDEOGRAPH-416B	[FB80 C16B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC16B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_244)
{
    // 416C 0021;	
    // (䅬) CJK UNIFIED IDEOGRAPH-416C	[FB80 C16C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC16C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_245)
{
    // 416C 003F;	
    // (䅬) CJK UNIFIED IDEOGRAPH-416C	[FB80 C16C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC16C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_246)
{
    // 416C 0061;	
    // (䅬) CJK UNIFIED IDEOGRAPH-416C	[FB80 C16C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC16C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_247)
{
    // 416C 0041;	
    // (䅬) CJK UNIFIED IDEOGRAPH-416C	[FB80 C16C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x416C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC16C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_248)
{
    // 416C 0062;	
    // (䅬) CJK UNIFIED IDEOGRAPH-416C	[FB80 C16C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC16C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_249)
{
    // 416D 0021;	
    // (䅭) CJK UNIFIED IDEOGRAPH-416D	[FB80 C16D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC16D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_250)
{
    // 416D 003F;	
    // (䅭) CJK UNIFIED IDEOGRAPH-416D	[FB80 C16D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC16D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_251)
{
    // 416D 0061;	
    // (䅭) CJK UNIFIED IDEOGRAPH-416D	[FB80 C16D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC16D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_252)
{
    // 416D 0041;	
    // (䅭) CJK UNIFIED IDEOGRAPH-416D	[FB80 C16D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x416D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC16D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_253)
{
    // 416D 0062;	
    // (䅭) CJK UNIFIED IDEOGRAPH-416D	[FB80 C16D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC16D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_254)
{
    // 416E 0021;	
    // (䅮) CJK UNIFIED IDEOGRAPH-416E	[FB80 C16E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC16E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_255)
{
    // 416E 003F;	
    // (䅮) CJK UNIFIED IDEOGRAPH-416E	[FB80 C16E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC16E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_256)
{
    // 416E 0061;	
    // (䅮) CJK UNIFIED IDEOGRAPH-416E	[FB80 C16E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC16E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_257)
{
    // 416E 0041;	
    // (䅮) CJK UNIFIED IDEOGRAPH-416E	[FB80 C16E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x416E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC16E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_258)
{
    // 416E 0062;	
    // (䅮) CJK UNIFIED IDEOGRAPH-416E	[FB80 C16E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC16E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_259)
{
    // 416F 0021;	
    // (䅯) CJK UNIFIED IDEOGRAPH-416F	[FB80 C16F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC16F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_260)
{
    // 416F 003F;	
    // (䅯) CJK UNIFIED IDEOGRAPH-416F	[FB80 C16F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC16F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_261)
{
    // 416F 0061;	
    // (䅯) CJK UNIFIED IDEOGRAPH-416F	[FB80 C16F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC16F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_262)
{
    // 416F 0041;	
    // (䅯) CJK UNIFIED IDEOGRAPH-416F	[FB80 C16F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x416F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC16F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_263)
{
    // 416F 0062;	
    // (䅯) CJK UNIFIED IDEOGRAPH-416F	[FB80 C16F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x416F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC16F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_264)
{
    // 4170 0021;	
    // (䅰) CJK UNIFIED IDEOGRAPH-4170	[FB80 C170 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4170, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC170, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_265)
{
    // 4170 003F;	
    // (䅰) CJK UNIFIED IDEOGRAPH-4170	[FB80 C170 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4170, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC170, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_266)
{
    // 4170 0061;	
    // (䅰) CJK UNIFIED IDEOGRAPH-4170	[FB80 C170 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4170, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC170, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_267)
{
    // 4170 0041;	
    // (䅰) CJK UNIFIED IDEOGRAPH-4170	[FB80 C170 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4170, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC170, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_268)
{
    // 4170 0062;	
    // (䅰) CJK UNIFIED IDEOGRAPH-4170	[FB80 C170 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4170, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC170, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_269)
{
    // 4171 0021;	
    // (䅱) CJK UNIFIED IDEOGRAPH-4171	[FB80 C171 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4171, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC171, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_270)
{
    // 4171 003F;	
    // (䅱) CJK UNIFIED IDEOGRAPH-4171	[FB80 C171 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4171, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC171, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_271)
{
    // 4171 0061;	
    // (䅱) CJK UNIFIED IDEOGRAPH-4171	[FB80 C171 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4171, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_272)
{
    // 4171 0041;	
    // (䅱) CJK UNIFIED IDEOGRAPH-4171	[FB80 C171 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4171, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC171, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_273)
{
    // 4171 0062;	
    // (䅱) CJK UNIFIED IDEOGRAPH-4171	[FB80 C171 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4171, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC171, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_274)
{
    // 4172 0021;	
    // (䅲) CJK UNIFIED IDEOGRAPH-4172	[FB80 C172 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4172, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC172, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_275)
{
    // 4172 003F;	
    // (䅲) CJK UNIFIED IDEOGRAPH-4172	[FB80 C172 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4172, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC172, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_276)
{
    // 4172 0061;	
    // (䅲) CJK UNIFIED IDEOGRAPH-4172	[FB80 C172 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4172, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_277)
{
    // 4172 0041;	
    // (䅲) CJK UNIFIED IDEOGRAPH-4172	[FB80 C172 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4172, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC172, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_278)
{
    // 4172 0062;	
    // (䅲) CJK UNIFIED IDEOGRAPH-4172	[FB80 C172 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4172, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC172, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_279)
{
    // 4173 0021;	
    // (䅳) CJK UNIFIED IDEOGRAPH-4173	[FB80 C173 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4173, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC173, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_280)
{
    // 4173 003F;	
    // (䅳) CJK UNIFIED IDEOGRAPH-4173	[FB80 C173 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4173, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC173, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_281)
{
    // 4173 0061;	
    // (䅳) CJK UNIFIED IDEOGRAPH-4173	[FB80 C173 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4173, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC173, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_282)
{
    // 4173 0041;	
    // (䅳) CJK UNIFIED IDEOGRAPH-4173	[FB80 C173 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4173, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC173, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_283)
{
    // 4173 0062;	
    // (䅳) CJK UNIFIED IDEOGRAPH-4173	[FB80 C173 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4173, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC173, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_284)
{
    // 4174 0021;	
    // (䅴) CJK UNIFIED IDEOGRAPH-4174	[FB80 C174 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4174, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC174, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_285)
{
    // 4174 003F;	
    // (䅴) CJK UNIFIED IDEOGRAPH-4174	[FB80 C174 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4174, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC174, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_286)
{
    // 4174 0061;	
    // (䅴) CJK UNIFIED IDEOGRAPH-4174	[FB80 C174 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4174, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC174, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_287)
{
    // 4174 0041;	
    // (䅴) CJK UNIFIED IDEOGRAPH-4174	[FB80 C174 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4174, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC174, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_288)
{
    // 4174 0062;	
    // (䅴) CJK UNIFIED IDEOGRAPH-4174	[FB80 C174 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4174, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC174, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_289)
{
    // 4175 0021;	
    // (䅵) CJK UNIFIED IDEOGRAPH-4175	[FB80 C175 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4175, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC175, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_290)
{
    // 4175 003F;	
    // (䅵) CJK UNIFIED IDEOGRAPH-4175	[FB80 C175 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4175, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC175, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_291)
{
    // 4175 0061;	
    // (䅵) CJK UNIFIED IDEOGRAPH-4175	[FB80 C175 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4175, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC175, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_292)
{
    // 4175 0041;	
    // (䅵) CJK UNIFIED IDEOGRAPH-4175	[FB80 C175 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4175, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC175, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_293)
{
    // 4175 0062;	
    // (䅵) CJK UNIFIED IDEOGRAPH-4175	[FB80 C175 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4175, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC175, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_294)
{
    // 4176 0021;	
    // (䅶) CJK UNIFIED IDEOGRAPH-4176	[FB80 C176 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4176, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC176, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_295)
{
    // 4176 003F;	
    // (䅶) CJK UNIFIED IDEOGRAPH-4176	[FB80 C176 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4176, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC176, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_296)
{
    // 4176 0061;	
    // (䅶) CJK UNIFIED IDEOGRAPH-4176	[FB80 C176 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4176, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC176, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_297)
{
    // 4176 0041;	
    // (䅶) CJK UNIFIED IDEOGRAPH-4176	[FB80 C176 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4176, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC176, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_298)
{
    // 4176 0062;	
    // (䅶) CJK UNIFIED IDEOGRAPH-4176	[FB80 C176 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4176, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC176, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_299)
{
    // 4177 0021;	
    // (䅷) CJK UNIFIED IDEOGRAPH-4177	[FB80 C177 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4177, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC177, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_300)
{
    // 4177 003F;	
    // (䅷) CJK UNIFIED IDEOGRAPH-4177	[FB80 C177 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4177, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC177, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_301)
{
    // 4177 0061;	
    // (䅷) CJK UNIFIED IDEOGRAPH-4177	[FB80 C177 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4177, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_302)
{
    // 4177 0041;	
    // (䅷) CJK UNIFIED IDEOGRAPH-4177	[FB80 C177 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4177, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_303)
{
    // 4177 0062;	
    // (䅷) CJK UNIFIED IDEOGRAPH-4177	[FB80 C177 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4177, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC177, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_304)
{
    // 4178 0021;	
    // (䅸) CJK UNIFIED IDEOGRAPH-4178	[FB80 C178 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4178, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC178, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_305)
{
    // 4178 003F;	
    // (䅸) CJK UNIFIED IDEOGRAPH-4178	[FB80 C178 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4178, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC178, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_306)
{
    // 4178 0061;	
    // (䅸) CJK UNIFIED IDEOGRAPH-4178	[FB80 C178 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4178, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC178, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_307)
{
    // 4178 0041;	
    // (䅸) CJK UNIFIED IDEOGRAPH-4178	[FB80 C178 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4178, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC178, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_308)
{
    // 4178 0062;	
    // (䅸) CJK UNIFIED IDEOGRAPH-4178	[FB80 C178 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4178, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC178, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_309)
{
    // 4179 0021;	
    // (䅹) CJK UNIFIED IDEOGRAPH-4179	[FB80 C179 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4179, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC179, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_310)
{
    // 4179 003F;	
    // (䅹) CJK UNIFIED IDEOGRAPH-4179	[FB80 C179 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4179, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC179, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_311)
{
    // 4179 0061;	
    // (䅹) CJK UNIFIED IDEOGRAPH-4179	[FB80 C179 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4179, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC179, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_312)
{
    // 4179 0041;	
    // (䅹) CJK UNIFIED IDEOGRAPH-4179	[FB80 C179 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4179, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC179, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_313)
{
    // 4179 0062;	
    // (䅹) CJK UNIFIED IDEOGRAPH-4179	[FB80 C179 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4179, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC179, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_314)
{
    // 417A 0021;	
    // (䅺) CJK UNIFIED IDEOGRAPH-417A	[FB80 C17A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC17A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_315)
{
    // 417A 003F;	
    // (䅺) CJK UNIFIED IDEOGRAPH-417A	[FB80 C17A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC17A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_316)
{
    // 417A 0061;	
    // (䅺) CJK UNIFIED IDEOGRAPH-417A	[FB80 C17A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC17A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_317)
{
    // 417A 0041;	
    // (䅺) CJK UNIFIED IDEOGRAPH-417A	[FB80 C17A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x417A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC17A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_318)
{
    // 417A 0062;	
    // (䅺) CJK UNIFIED IDEOGRAPH-417A	[FB80 C17A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC17A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_319)
{
    // 417B 0021;	
    // (䅻) CJK UNIFIED IDEOGRAPH-417B	[FB80 C17B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC17B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_320)
{
    // 417B 003F;	
    // (䅻) CJK UNIFIED IDEOGRAPH-417B	[FB80 C17B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC17B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_321)
{
    // 417B 0061;	
    // (䅻) CJK UNIFIED IDEOGRAPH-417B	[FB80 C17B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC17B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_322)
{
    // 417B 0041;	
    // (䅻) CJK UNIFIED IDEOGRAPH-417B	[FB80 C17B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x417B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC17B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_323)
{
    // 417B 0062;	
    // (䅻) CJK UNIFIED IDEOGRAPH-417B	[FB80 C17B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC17B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_324)
{
    // 417C 0021;	
    // (䅼) CJK UNIFIED IDEOGRAPH-417C	[FB80 C17C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC17C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_325)
{
    // 417C 003F;	
    // (䅼) CJK UNIFIED IDEOGRAPH-417C	[FB80 C17C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC17C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_326)
{
    // 417C 0061;	
    // (䅼) CJK UNIFIED IDEOGRAPH-417C	[FB80 C17C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC17C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_327)
{
    // 417C 0041;	
    // (䅼) CJK UNIFIED IDEOGRAPH-417C	[FB80 C17C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x417C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC17C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_328)
{
    // 417C 0062;	
    // (䅼) CJK UNIFIED IDEOGRAPH-417C	[FB80 C17C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC17C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_329)
{
    // 417D 0021;	
    // (䅽) CJK UNIFIED IDEOGRAPH-417D	[FB80 C17D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC17D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_330)
{
    // 417D 003F;	
    // (䅽) CJK UNIFIED IDEOGRAPH-417D	[FB80 C17D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC17D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_331)
{
    // 417D 0061;	
    // (䅽) CJK UNIFIED IDEOGRAPH-417D	[FB80 C17D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC17D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_332)
{
    // 417D 0041;	
    // (䅽) CJK UNIFIED IDEOGRAPH-417D	[FB80 C17D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x417D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC17D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_333)
{
    // 417D 0062;	
    // (䅽) CJK UNIFIED IDEOGRAPH-417D	[FB80 C17D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC17D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_334)
{
    // 417E 0021;	
    // (䅾) CJK UNIFIED IDEOGRAPH-417E	[FB80 C17E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC17E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_335)
{
    // 417E 003F;	
    // (䅾) CJK UNIFIED IDEOGRAPH-417E	[FB80 C17E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC17E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_336)
{
    // 417E 0061;	
    // (䅾) CJK UNIFIED IDEOGRAPH-417E	[FB80 C17E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC17E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_337)
{
    // 417E 0041;	
    // (䅾) CJK UNIFIED IDEOGRAPH-417E	[FB80 C17E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x417E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC17E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_338)
{
    // 417E 0062;	
    // (䅾) CJK UNIFIED IDEOGRAPH-417E	[FB80 C17E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC17E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_339)
{
    // 417F 0021;	
    // (䅿) CJK UNIFIED IDEOGRAPH-417F	[FB80 C17F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC17F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_340)
{
    // 417F 003F;	
    // (䅿) CJK UNIFIED IDEOGRAPH-417F	[FB80 C17F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC17F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_341)
{
    // 417F 0061;	
    // (䅿) CJK UNIFIED IDEOGRAPH-417F	[FB80 C17F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC17F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_342)
{
    // 417F 0041;	
    // (䅿) CJK UNIFIED IDEOGRAPH-417F	[FB80 C17F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x417F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC17F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_343)
{
    // 417F 0062;	
    // (䅿) CJK UNIFIED IDEOGRAPH-417F	[FB80 C17F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x417F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC17F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_344)
{
    // 4180 0021;	
    // (䆀) CJK UNIFIED IDEOGRAPH-4180	[FB80 C180 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4180, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC180, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_345)
{
    // 4180 003F;	
    // (䆀) CJK UNIFIED IDEOGRAPH-4180	[FB80 C180 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4180, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC180, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_346)
{
    // 4180 0061;	
    // (䆀) CJK UNIFIED IDEOGRAPH-4180	[FB80 C180 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4180, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_347)
{
    // 4180 0041;	
    // (䆀) CJK UNIFIED IDEOGRAPH-4180	[FB80 C180 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4180, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_348)
{
    // 4180 0062;	
    // (䆀) CJK UNIFIED IDEOGRAPH-4180	[FB80 C180 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4180, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC180, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_349)
{
    // 4181 0021;	
    // (䆁) CJK UNIFIED IDEOGRAPH-4181	[FB80 C181 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4181, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC181, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_350)
{
    // 4181 003F;	
    // (䆁) CJK UNIFIED IDEOGRAPH-4181	[FB80 C181 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4181, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC181, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_351)
{
    // 4181 0061;	
    // (䆁) CJK UNIFIED IDEOGRAPH-4181	[FB80 C181 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4181, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC181, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_352)
{
    // 4181 0041;	
    // (䆁) CJK UNIFIED IDEOGRAPH-4181	[FB80 C181 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4181, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC181, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_353)
{
    // 4181 0062;	
    // (䆁) CJK UNIFIED IDEOGRAPH-4181	[FB80 C181 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4181, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC181, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_354)
{
    // 4182 0021;	
    // (䆂) CJK UNIFIED IDEOGRAPH-4182	[FB80 C182 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4182, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC182, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_355)
{
    // 4182 003F;	
    // (䆂) CJK UNIFIED IDEOGRAPH-4182	[FB80 C182 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4182, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC182, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_356)
{
    // 4182 0061;	
    // (䆂) CJK UNIFIED IDEOGRAPH-4182	[FB80 C182 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4182, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_357)
{
    // 4182 0041;	
    // (䆂) CJK UNIFIED IDEOGRAPH-4182	[FB80 C182 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4182, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_358)
{
    // 4182 0062;	
    // (䆂) CJK UNIFIED IDEOGRAPH-4182	[FB80 C182 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4182, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC182, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_359)
{
    // 4183 0021;	
    // (䆃) CJK UNIFIED IDEOGRAPH-4183	[FB80 C183 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4183, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC183, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_360)
{
    // 4183 003F;	
    // (䆃) CJK UNIFIED IDEOGRAPH-4183	[FB80 C183 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4183, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC183, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_361)
{
    // 4183 0061;	
    // (䆃) CJK UNIFIED IDEOGRAPH-4183	[FB80 C183 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4183, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_362)
{
    // 4183 0041;	
    // (䆃) CJK UNIFIED IDEOGRAPH-4183	[FB80 C183 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4183, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_363)
{
    // 4183 0062;	
    // (䆃) CJK UNIFIED IDEOGRAPH-4183	[FB80 C183 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4183, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC183, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_364)
{
    // 4184 0021;	
    // (䆄) CJK UNIFIED IDEOGRAPH-4184	[FB80 C184 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4184, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC184, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_365)
{
    // 4184 003F;	
    // (䆄) CJK UNIFIED IDEOGRAPH-4184	[FB80 C184 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4184, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC184, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_366)
{
    // 4184 0061;	
    // (䆄) CJK UNIFIED IDEOGRAPH-4184	[FB80 C184 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4184, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC184, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_367)
{
    // 4184 0041;	
    // (䆄) CJK UNIFIED IDEOGRAPH-4184	[FB80 C184 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4184, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC184, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_368)
{
    // 4184 0062;	
    // (䆄) CJK UNIFIED IDEOGRAPH-4184	[FB80 C184 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4184, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC184, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_369)
{
    // 4185 0021;	
    // (䆅) CJK UNIFIED IDEOGRAPH-4185	[FB80 C185 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4185, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC185, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_370)
{
    // 4185 003F;	
    // (䆅) CJK UNIFIED IDEOGRAPH-4185	[FB80 C185 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4185, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC185, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_371)
{
    // 4185 0061;	
    // (䆅) CJK UNIFIED IDEOGRAPH-4185	[FB80 C185 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4185, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC185, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_372)
{
    // 4185 0041;	
    // (䆅) CJK UNIFIED IDEOGRAPH-4185	[FB80 C185 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4185, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC185, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_373)
{
    // 4185 0062;	
    // (䆅) CJK UNIFIED IDEOGRAPH-4185	[FB80 C185 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4185, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC185, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_374)
{
    // 4186 0021;	
    // (䆆) CJK UNIFIED IDEOGRAPH-4186	[FB80 C186 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4186, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC186, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_375)
{
    // 4186 003F;	
    // (䆆) CJK UNIFIED IDEOGRAPH-4186	[FB80 C186 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4186, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC186, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_376)
{
    // 4186 0061;	
    // (䆆) CJK UNIFIED IDEOGRAPH-4186	[FB80 C186 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4186, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC186, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_377)
{
    // 4186 0041;	
    // (䆆) CJK UNIFIED IDEOGRAPH-4186	[FB80 C186 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4186, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC186, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_378)
{
    // 4186 0062;	
    // (䆆) CJK UNIFIED IDEOGRAPH-4186	[FB80 C186 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4186, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC186, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_379)
{
    // 4187 0021;	
    // (䆇) CJK UNIFIED IDEOGRAPH-4187	[FB80 C187 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4187, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC187, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_380)
{
    // 4187 003F;	
    // (䆇) CJK UNIFIED IDEOGRAPH-4187	[FB80 C187 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4187, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC187, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_381)
{
    // 4187 0061;	
    // (䆇) CJK UNIFIED IDEOGRAPH-4187	[FB80 C187 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4187, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_382)
{
    // 4187 0041;	
    // (䆇) CJK UNIFIED IDEOGRAPH-4187	[FB80 C187 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4187, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC187, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_383)
{
    // 4187 0062;	
    // (䆇) CJK UNIFIED IDEOGRAPH-4187	[FB80 C187 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4187, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC187, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_384)
{
    // 4188 0021;	
    // (䆈) CJK UNIFIED IDEOGRAPH-4188	[FB80 C188 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4188, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC188, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_385)
{
    // 4188 003F;	
    // (䆈) CJK UNIFIED IDEOGRAPH-4188	[FB80 C188 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4188, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC188, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_386)
{
    // 4188 0061;	
    // (䆈) CJK UNIFIED IDEOGRAPH-4188	[FB80 C188 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4188, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC188, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_387)
{
    // 4188 0041;	
    // (䆈) CJK UNIFIED IDEOGRAPH-4188	[FB80 C188 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4188, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC188, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_388)
{
    // 4188 0062;	
    // (䆈) CJK UNIFIED IDEOGRAPH-4188	[FB80 C188 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4188, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC188, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_389)
{
    // 4189 0021;	
    // (䆉) CJK UNIFIED IDEOGRAPH-4189	[FB80 C189 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4189, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC189, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_390)
{
    // 4189 003F;	
    // (䆉) CJK UNIFIED IDEOGRAPH-4189	[FB80 C189 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4189, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC189, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_391)
{
    // 4189 0061;	
    // (䆉) CJK UNIFIED IDEOGRAPH-4189	[FB80 C189 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4189, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC189, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_392)
{
    // 4189 0041;	
    // (䆉) CJK UNIFIED IDEOGRAPH-4189	[FB80 C189 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4189, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC189, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_393)
{
    // 4189 0062;	
    // (䆉) CJK UNIFIED IDEOGRAPH-4189	[FB80 C189 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4189, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC189, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_394)
{
    // 418A 0021;	
    // (䆊) CJK UNIFIED IDEOGRAPH-418A	[FB80 C18A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC18A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_395)
{
    // 418A 003F;	
    // (䆊) CJK UNIFIED IDEOGRAPH-418A	[FB80 C18A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC18A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_396)
{
    // 418A 0061;	
    // (䆊) CJK UNIFIED IDEOGRAPH-418A	[FB80 C18A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC18A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_397)
{
    // 418A 0041;	
    // (䆊) CJK UNIFIED IDEOGRAPH-418A	[FB80 C18A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x418A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC18A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_398)
{
    // 418A 0062;	
    // (䆊) CJK UNIFIED IDEOGRAPH-418A	[FB80 C18A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC18A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_399)
{
    // 418B 0021;	
    // (䆋) CJK UNIFIED IDEOGRAPH-418B	[FB80 C18B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC18B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_400)
{
    // 418B 003F;	
    // (䆋) CJK UNIFIED IDEOGRAPH-418B	[FB80 C18B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC18B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_401)
{
    // 418B 0061;	
    // (䆋) CJK UNIFIED IDEOGRAPH-418B	[FB80 C18B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC18B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_402)
{
    // 418B 0041;	
    // (䆋) CJK UNIFIED IDEOGRAPH-418B	[FB80 C18B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x418B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC18B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_403)
{
    // 418B 0062;	
    // (䆋) CJK UNIFIED IDEOGRAPH-418B	[FB80 C18B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC18B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_404)
{
    // 418C 0021;	
    // (䆌) CJK UNIFIED IDEOGRAPH-418C	[FB80 C18C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC18C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_405)
{
    // 418C 003F;	
    // (䆌) CJK UNIFIED IDEOGRAPH-418C	[FB80 C18C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC18C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_406)
{
    // 418C 0061;	
    // (䆌) CJK UNIFIED IDEOGRAPH-418C	[FB80 C18C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC18C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_407)
{
    // 418C 0041;	
    // (䆌) CJK UNIFIED IDEOGRAPH-418C	[FB80 C18C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x418C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC18C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_408)
{
    // 418C 0062;	
    // (䆌) CJK UNIFIED IDEOGRAPH-418C	[FB80 C18C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC18C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_409)
{
    // 418D 0021;	
    // (䆍) CJK UNIFIED IDEOGRAPH-418D	[FB80 C18D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC18D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_410)
{
    // 418D 003F;	
    // (䆍) CJK UNIFIED IDEOGRAPH-418D	[FB80 C18D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC18D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_411)
{
    // 418D 0061;	
    // (䆍) CJK UNIFIED IDEOGRAPH-418D	[FB80 C18D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC18D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_412)
{
    // 418D 0041;	
    // (䆍) CJK UNIFIED IDEOGRAPH-418D	[FB80 C18D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x418D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC18D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_413)
{
    // 418D 0062;	
    // (䆍) CJK UNIFIED IDEOGRAPH-418D	[FB80 C18D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC18D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_414)
{
    // 418E 0021;	
    // (䆎) CJK UNIFIED IDEOGRAPH-418E	[FB80 C18E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC18E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_415)
{
    // 418E 003F;	
    // (䆎) CJK UNIFIED IDEOGRAPH-418E	[FB80 C18E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC18E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_416)
{
    // 418E 0061;	
    // (䆎) CJK UNIFIED IDEOGRAPH-418E	[FB80 C18E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC18E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_417)
{
    // 418E 0041;	
    // (䆎) CJK UNIFIED IDEOGRAPH-418E	[FB80 C18E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x418E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC18E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_418)
{
    // 418E 0062;	
    // (䆎) CJK UNIFIED IDEOGRAPH-418E	[FB80 C18E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC18E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_419)
{
    // 418F 0021;	
    // (䆏) CJK UNIFIED IDEOGRAPH-418F	[FB80 C18F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC18F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_420)
{
    // 418F 003F;	
    // (䆏) CJK UNIFIED IDEOGRAPH-418F	[FB80 C18F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC18F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_421)
{
    // 418F 0061;	
    // (䆏) CJK UNIFIED IDEOGRAPH-418F	[FB80 C18F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC18F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_422)
{
    // 418F 0041;	
    // (䆏) CJK UNIFIED IDEOGRAPH-418F	[FB80 C18F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x418F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC18F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_423)
{
    // 418F 0062;	
    // (䆏) CJK UNIFIED IDEOGRAPH-418F	[FB80 C18F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x418F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC18F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_424)
{
    // 4190 0021;	
    // (䆐) CJK UNIFIED IDEOGRAPH-4190	[FB80 C190 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4190, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC190, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_425)
{
    // 4190 003F;	
    // (䆐) CJK UNIFIED IDEOGRAPH-4190	[FB80 C190 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4190, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC190, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_426)
{
    // 4190 0061;	
    // (䆐) CJK UNIFIED IDEOGRAPH-4190	[FB80 C190 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4190, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_427)
{
    // 4190 0041;	
    // (䆐) CJK UNIFIED IDEOGRAPH-4190	[FB80 C190 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4190, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC190, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_428)
{
    // 4190 0062;	
    // (䆐) CJK UNIFIED IDEOGRAPH-4190	[FB80 C190 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4190, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC190, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_429)
{
    // 4191 0021;	
    // (䆑) CJK UNIFIED IDEOGRAPH-4191	[FB80 C191 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4191, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC191, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_430)
{
    // 4191 003F;	
    // (䆑) CJK UNIFIED IDEOGRAPH-4191	[FB80 C191 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4191, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC191, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_431)
{
    // 4191 0061;	
    // (䆑) CJK UNIFIED IDEOGRAPH-4191	[FB80 C191 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4191, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC191, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_432)
{
    // 4191 0041;	
    // (䆑) CJK UNIFIED IDEOGRAPH-4191	[FB80 C191 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4191, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC191, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_433)
{
    // 4191 0062;	
    // (䆑) CJK UNIFIED IDEOGRAPH-4191	[FB80 C191 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4191, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC191, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_434)
{
    // 4192 0021;	
    // (䆒) CJK UNIFIED IDEOGRAPH-4192	[FB80 C192 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4192, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC192, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_435)
{
    // 4192 003F;	
    // (䆒) CJK UNIFIED IDEOGRAPH-4192	[FB80 C192 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4192, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC192, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_436)
{
    // 4192 0061;	
    // (䆒) CJK UNIFIED IDEOGRAPH-4192	[FB80 C192 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4192, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_437)
{
    // 4192 0041;	
    // (䆒) CJK UNIFIED IDEOGRAPH-4192	[FB80 C192 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4192, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_438)
{
    // 4192 0062;	
    // (䆒) CJK UNIFIED IDEOGRAPH-4192	[FB80 C192 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4192, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC192, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_439)
{
    // 4193 0021;	
    // (䆓) CJK UNIFIED IDEOGRAPH-4193	[FB80 C193 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4193, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC193, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_440)
{
    // 4193 003F;	
    // (䆓) CJK UNIFIED IDEOGRAPH-4193	[FB80 C193 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4193, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC193, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_441)
{
    // 4193 0061;	
    // (䆓) CJK UNIFIED IDEOGRAPH-4193	[FB80 C193 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4193, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC193, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_442)
{
    // 4193 0041;	
    // (䆓) CJK UNIFIED IDEOGRAPH-4193	[FB80 C193 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4193, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC193, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_443)
{
    // 4193 0062;	
    // (䆓) CJK UNIFIED IDEOGRAPH-4193	[FB80 C193 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4193, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC193, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_444)
{
    // 4194 0021;	
    // (䆔) CJK UNIFIED IDEOGRAPH-4194	[FB80 C194 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4194, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC194, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_445)
{
    // 4194 003F;	
    // (䆔) CJK UNIFIED IDEOGRAPH-4194	[FB80 C194 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4194, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC194, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_446)
{
    // 4194 0061;	
    // (䆔) CJK UNIFIED IDEOGRAPH-4194	[FB80 C194 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4194, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_447)
{
    // 4194 0041;	
    // (䆔) CJK UNIFIED IDEOGRAPH-4194	[FB80 C194 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4194, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC194, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_448)
{
    // 4194 0062;	
    // (䆔) CJK UNIFIED IDEOGRAPH-4194	[FB80 C194 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4194, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC194, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_449)
{
    // 4195 0021;	
    // (䆕) CJK UNIFIED IDEOGRAPH-4195	[FB80 C195 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4195, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC195, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_450)
{
    // 4195 003F;	
    // (䆕) CJK UNIFIED IDEOGRAPH-4195	[FB80 C195 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4195, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC195, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_451)
{
    // 4195 0061;	
    // (䆕) CJK UNIFIED IDEOGRAPH-4195	[FB80 C195 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4195, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_452)
{
    // 4195 0041;	
    // (䆕) CJK UNIFIED IDEOGRAPH-4195	[FB80 C195 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4195, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_453)
{
    // 4195 0062;	
    // (䆕) CJK UNIFIED IDEOGRAPH-4195	[FB80 C195 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4195, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC195, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_454)
{
    // 4196 0021;	
    // (䆖) CJK UNIFIED IDEOGRAPH-4196	[FB80 C196 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4196, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC196, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_455)
{
    // 4196 003F;	
    // (䆖) CJK UNIFIED IDEOGRAPH-4196	[FB80 C196 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4196, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC196, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_456)
{
    // 4196 0061;	
    // (䆖) CJK UNIFIED IDEOGRAPH-4196	[FB80 C196 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4196, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_457)
{
    // 4196 0041;	
    // (䆖) CJK UNIFIED IDEOGRAPH-4196	[FB80 C196 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4196, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_458)
{
    // 4196 0062;	
    // (䆖) CJK UNIFIED IDEOGRAPH-4196	[FB80 C196 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4196, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC196, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_459)
{
    // 4197 0021;	
    // (䆗) CJK UNIFIED IDEOGRAPH-4197	[FB80 C197 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4197, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC197, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_460)
{
    // 4197 003F;	
    // (䆗) CJK UNIFIED IDEOGRAPH-4197	[FB80 C197 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4197, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC197, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_461)
{
    // 4197 0061;	
    // (䆗) CJK UNIFIED IDEOGRAPH-4197	[FB80 C197 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4197, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_462)
{
    // 4197 0041;	
    // (䆗) CJK UNIFIED IDEOGRAPH-4197	[FB80 C197 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4197, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_463)
{
    // 4197 0062;	
    // (䆗) CJK UNIFIED IDEOGRAPH-4197	[FB80 C197 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4197, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC197, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_464)
{
    // 4198 0021;	
    // (䆘) CJK UNIFIED IDEOGRAPH-4198	[FB80 C198 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4198, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC198, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_465)
{
    // 4198 003F;	
    // (䆘) CJK UNIFIED IDEOGRAPH-4198	[FB80 C198 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4198, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC198, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_466)
{
    // 4198 0061;	
    // (䆘) CJK UNIFIED IDEOGRAPH-4198	[FB80 C198 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4198, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_467)
{
    // 4198 0041;	
    // (䆘) CJK UNIFIED IDEOGRAPH-4198	[FB80 C198 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4198, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC198, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_468)
{
    // 4198 0062;	
    // (䆘) CJK UNIFIED IDEOGRAPH-4198	[FB80 C198 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4198, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC198, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_469)
{
    // 4199 0021;	
    // (䆙) CJK UNIFIED IDEOGRAPH-4199	[FB80 C199 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4199, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC199, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_470)
{
    // 4199 003F;	
    // (䆙) CJK UNIFIED IDEOGRAPH-4199	[FB80 C199 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4199, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC199, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_471)
{
    // 4199 0061;	
    // (䆙) CJK UNIFIED IDEOGRAPH-4199	[FB80 C199 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4199, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_472)
{
    // 4199 0041;	
    // (䆙) CJK UNIFIED IDEOGRAPH-4199	[FB80 C199 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4199, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_473)
{
    // 4199 0062;	
    // (䆙) CJK UNIFIED IDEOGRAPH-4199	[FB80 C199 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4199, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC199, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_474)
{
    // 419A 0021;	
    // (䆚) CJK UNIFIED IDEOGRAPH-419A	[FB80 C19A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC19A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_475)
{
    // 419A 003F;	
    // (䆚) CJK UNIFIED IDEOGRAPH-419A	[FB80 C19A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC19A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_476)
{
    // 419A 0061;	
    // (䆚) CJK UNIFIED IDEOGRAPH-419A	[FB80 C19A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC19A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_477)
{
    // 419A 0041;	
    // (䆚) CJK UNIFIED IDEOGRAPH-419A	[FB80 C19A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x419A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC19A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_478)
{
    // 419A 0062;	
    // (䆚) CJK UNIFIED IDEOGRAPH-419A	[FB80 C19A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC19A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_479)
{
    // 419B 0021;	
    // (䆛) CJK UNIFIED IDEOGRAPH-419B	[FB80 C19B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC19B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_480)
{
    // 419B 003F;	
    // (䆛) CJK UNIFIED IDEOGRAPH-419B	[FB80 C19B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC19B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_481)
{
    // 419B 0061;	
    // (䆛) CJK UNIFIED IDEOGRAPH-419B	[FB80 C19B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC19B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_482)
{
    // 419B 0041;	
    // (䆛) CJK UNIFIED IDEOGRAPH-419B	[FB80 C19B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x419B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC19B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_483)
{
    // 419B 0062;	
    // (䆛) CJK UNIFIED IDEOGRAPH-419B	[FB80 C19B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC19B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_484)
{
    // 419C 0021;	
    // (䆜) CJK UNIFIED IDEOGRAPH-419C	[FB80 C19C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC19C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_485)
{
    // 419C 003F;	
    // (䆜) CJK UNIFIED IDEOGRAPH-419C	[FB80 C19C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC19C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_486)
{
    // 419C 0061;	
    // (䆜) CJK UNIFIED IDEOGRAPH-419C	[FB80 C19C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC19C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_487)
{
    // 419C 0041;	
    // (䆜) CJK UNIFIED IDEOGRAPH-419C	[FB80 C19C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x419C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC19C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_488)
{
    // 419C 0062;	
    // (䆜) CJK UNIFIED IDEOGRAPH-419C	[FB80 C19C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC19C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_489)
{
    // 419D 0021;	
    // (䆝) CJK UNIFIED IDEOGRAPH-419D	[FB80 C19D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC19D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_490)
{
    // 419D 003F;	
    // (䆝) CJK UNIFIED IDEOGRAPH-419D	[FB80 C19D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC19D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_491)
{
    // 419D 0061;	
    // (䆝) CJK UNIFIED IDEOGRAPH-419D	[FB80 C19D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC19D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_492)
{
    // 419D 0041;	
    // (䆝) CJK UNIFIED IDEOGRAPH-419D	[FB80 C19D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x419D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC19D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_493)
{
    // 419D 0062;	
    // (䆝) CJK UNIFIED IDEOGRAPH-419D	[FB80 C19D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC19D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_494)
{
    // 419E 0021;	
    // (䆞) CJK UNIFIED IDEOGRAPH-419E	[FB80 C19E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC19E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_495)
{
    // 419E 003F;	
    // (䆞) CJK UNIFIED IDEOGRAPH-419E	[FB80 C19E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC19E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_496)
{
    // 419E 0061;	
    // (䆞) CJK UNIFIED IDEOGRAPH-419E	[FB80 C19E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC19E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_497)
{
    // 419E 0041;	
    // (䆞) CJK UNIFIED IDEOGRAPH-419E	[FB80 C19E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x419E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC19E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_498)
{
    // 419E 0062;	
    // (䆞) CJK UNIFIED IDEOGRAPH-419E	[FB80 C19E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC19E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_361_499)
{
    // 419F 0021;	
    // (䆟) CJK UNIFIED IDEOGRAPH-419F	[FB80 C19F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x419F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC19F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

