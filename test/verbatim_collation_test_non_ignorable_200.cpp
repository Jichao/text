// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_200_000)
{
    // 11C86 0061;	
    // (𑲆) MARCHEN LETTER ZHA	[2FC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C86, 0x0061 };
    uint32_t const ces[9] = { 0x2FC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_001)
{
    // 11C86 0041;	
    // (𑲆) MARCHEN LETTER ZHA	[2FC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C86, 0x0041 };
    uint32_t const ces[9] = { 0x2FC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_002)
{
    // 11C86 0062;	
    // (𑲆) MARCHEN LETTER ZHA	[2FC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C86, 0x0062 };
    uint32_t const ces[9] = { 0x2FC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_003)
{
    // 11CA6 0021;	
    // (𑲦) MARCHEN SUBJOINED LETTER ZHA	[2FC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA6, 0x0021 };
    uint32_t const ces[9] = { 0x2FC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_004)
{
    // 11CA6 003F;	
    // (𑲦) MARCHEN SUBJOINED LETTER ZHA	[2FC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA6, 0x003F };
    uint32_t const ces[9] = { 0x2FC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_005)
{
    // 11CA6 0061;	
    // (𑲦) MARCHEN SUBJOINED LETTER ZHA	[2FC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA6, 0x0061 };
    uint32_t const ces[9] = { 0x2FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_006)
{
    // 11CA6 0041;	
    // (𑲦) MARCHEN SUBJOINED LETTER ZHA	[2FC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA6, 0x0041 };
    uint32_t const ces[9] = { 0x2FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_007)
{
    // 11CA6 0062;	
    // (𑲦) MARCHEN SUBJOINED LETTER ZHA	[2FC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA6, 0x0062 };
    uint32_t const ces[9] = { 0x2FC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_008)
{
    // 11C87 0021;	
    // (𑲇) MARCHEN LETTER ZA	[2FC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C87, 0x0021 };
    uint32_t const ces[9] = { 0x2FC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_009)
{
    // 11C87 003F;	
    // (𑲇) MARCHEN LETTER ZA	[2FC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C87, 0x003F };
    uint32_t const ces[9] = { 0x2FC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_010)
{
    // 11C87 0061;	
    // (𑲇) MARCHEN LETTER ZA	[2FC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C87, 0x0061 };
    uint32_t const ces[9] = { 0x2FC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_011)
{
    // 11C87 0041;	
    // (𑲇) MARCHEN LETTER ZA	[2FC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C87, 0x0041 };
    uint32_t const ces[9] = { 0x2FC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_012)
{
    // 11C87 0062;	
    // (𑲇) MARCHEN LETTER ZA	[2FC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C87, 0x0062 };
    uint32_t const ces[9] = { 0x2FC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_013)
{
    // 11CA7 0021;	
    // (𑲧) MARCHEN SUBJOINED LETTER ZA	[2FC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA7, 0x0021 };
    uint32_t const ces[9] = { 0x2FC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_014)
{
    // 11CA7 003F;	
    // (𑲧) MARCHEN SUBJOINED LETTER ZA	[2FC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA7, 0x003F };
    uint32_t const ces[9] = { 0x2FC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_015)
{
    // 11CA7 0061;	
    // (𑲧) MARCHEN SUBJOINED LETTER ZA	[2FC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA7, 0x0061 };
    uint32_t const ces[9] = { 0x2FC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_016)
{
    // 11CA7 0041;	
    // (𑲧) MARCHEN SUBJOINED LETTER ZA	[2FC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA7, 0x0041 };
    uint32_t const ces[9] = { 0x2FC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_017)
{
    // 11CA7 0062;	
    // (𑲧) MARCHEN SUBJOINED LETTER ZA	[2FC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA7, 0x0062 };
    uint32_t const ces[9] = { 0x2FC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_018)
{
    // 11C88 0021;	
    // (𑲈) MARCHEN LETTER -A	[2FC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C88, 0x0021 };
    uint32_t const ces[9] = { 0x2FC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_019)
{
    // 11C88 003F;	
    // (𑲈) MARCHEN LETTER -A	[2FC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C88, 0x003F };
    uint32_t const ces[9] = { 0x2FC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_020)
{
    // 11C88 0061;	
    // (𑲈) MARCHEN LETTER -A	[2FC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C88, 0x0061 };
    uint32_t const ces[9] = { 0x2FC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_021)
{
    // 11C88 0041;	
    // (𑲈) MARCHEN LETTER -A	[2FC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C88, 0x0041 };
    uint32_t const ces[9] = { 0x2FC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_022)
{
    // 11C88 0062;	
    // (𑲈) MARCHEN LETTER -A	[2FC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C88, 0x0062 };
    uint32_t const ces[9] = { 0x2FC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_023)
{
    // 11C89 0021;	
    // (𑲉) MARCHEN LETTER YA	[2FCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C89, 0x0021 };
    uint32_t const ces[9] = { 0x2FCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_024)
{
    // 11C89 003F;	
    // (𑲉) MARCHEN LETTER YA	[2FCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C89, 0x003F };
    uint32_t const ces[9] = { 0x2FCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_025)
{
    // 11C89 0061;	
    // (𑲉) MARCHEN LETTER YA	[2FCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C89, 0x0061 };
    uint32_t const ces[9] = { 0x2FCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_026)
{
    // 11C89 0041;	
    // (𑲉) MARCHEN LETTER YA	[2FCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C89, 0x0041 };
    uint32_t const ces[9] = { 0x2FCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_027)
{
    // 11C89 0062;	
    // (𑲉) MARCHEN LETTER YA	[2FCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C89, 0x0062 };
    uint32_t const ces[9] = { 0x2FCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_028)
{
    // 11CA9 0021;	
    // (𑲩) MARCHEN SUBJOINED LETTER YA	[2FCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA9, 0x0021 };
    uint32_t const ces[9] = { 0x2FCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_029)
{
    // 11CA9 003F;	
    // (𑲩) MARCHEN SUBJOINED LETTER YA	[2FCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA9, 0x003F };
    uint32_t const ces[9] = { 0x2FCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_030)
{
    // 11CA9 0061;	
    // (𑲩) MARCHEN SUBJOINED LETTER YA	[2FCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA9, 0x0061 };
    uint32_t const ces[9] = { 0x2FCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_031)
{
    // 11CA9 0041;	
    // (𑲩) MARCHEN SUBJOINED LETTER YA	[2FCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CA9, 0x0041 };
    uint32_t const ces[9] = { 0x2FCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_032)
{
    // 11CA9 0062;	
    // (𑲩) MARCHEN SUBJOINED LETTER YA	[2FCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CA9, 0x0062 };
    uint32_t const ces[9] = { 0x2FCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_033)
{
    // 11C8A 0021;	
    // (𑲊) MARCHEN LETTER RA	[2FCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8A, 0x0021 };
    uint32_t const ces[9] = { 0x2FCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_034)
{
    // 11C8A 003F;	
    // (𑲊) MARCHEN LETTER RA	[2FCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8A, 0x003F };
    uint32_t const ces[9] = { 0x2FCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_035)
{
    // 11C8A 0061;	
    // (𑲊) MARCHEN LETTER RA	[2FCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8A, 0x0061 };
    uint32_t const ces[9] = { 0x2FCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_036)
{
    // 11C8A 0041;	
    // (𑲊) MARCHEN LETTER RA	[2FCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C8A, 0x0041 };
    uint32_t const ces[9] = { 0x2FCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_037)
{
    // 11C8A 0062;	
    // (𑲊) MARCHEN LETTER RA	[2FCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8A, 0x0062 };
    uint32_t const ces[9] = { 0x2FCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_038)
{
    // 11CAA 0021;	
    // (𑲪) MARCHEN SUBJOINED LETTER RA	[2FCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAA, 0x0021 };
    uint32_t const ces[9] = { 0x2FCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_039)
{
    // 11CAA 003F;	
    // (𑲪) MARCHEN SUBJOINED LETTER RA	[2FCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAA, 0x003F };
    uint32_t const ces[9] = { 0x2FCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_040)
{
    // 11CAA 0061;	
    // (𑲪) MARCHEN SUBJOINED LETTER RA	[2FCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAA, 0x0061 };
    uint32_t const ces[9] = { 0x2FCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_041)
{
    // 11CAA 0041;	
    // (𑲪) MARCHEN SUBJOINED LETTER RA	[2FCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CAA, 0x0041 };
    uint32_t const ces[9] = { 0x2FCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_042)
{
    // 11CAA 0062;	
    // (𑲪) MARCHEN SUBJOINED LETTER RA	[2FCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAA, 0x0062 };
    uint32_t const ces[9] = { 0x2FCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_043)
{
    // 11C8B 0021;	
    // (𑲋) MARCHEN LETTER LA	[2FCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8B, 0x0021 };
    uint32_t const ces[9] = { 0x2FCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_044)
{
    // 11C8B 003F;	
    // (𑲋) MARCHEN LETTER LA	[2FCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8B, 0x003F };
    uint32_t const ces[9] = { 0x2FCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_045)
{
    // 11C8B 0061;	
    // (𑲋) MARCHEN LETTER LA	[2FCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8B, 0x0061 };
    uint32_t const ces[9] = { 0x2FCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_046)
{
    // 11C8B 0041;	
    // (𑲋) MARCHEN LETTER LA	[2FCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C8B, 0x0041 };
    uint32_t const ces[9] = { 0x2FCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_047)
{
    // 11C8B 0062;	
    // (𑲋) MARCHEN LETTER LA	[2FCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8B, 0x0062 };
    uint32_t const ces[9] = { 0x2FCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_048)
{
    // 11CAB 0021;	
    // (𑲫) MARCHEN SUBJOINED LETTER LA	[2FCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAB, 0x0021 };
    uint32_t const ces[9] = { 0x2FCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_049)
{
    // 11CAB 003F;	
    // (𑲫) MARCHEN SUBJOINED LETTER LA	[2FCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAB, 0x003F };
    uint32_t const ces[9] = { 0x2FCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_050)
{
    // 11CAB 0061;	
    // (𑲫) MARCHEN SUBJOINED LETTER LA	[2FCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAB, 0x0061 };
    uint32_t const ces[9] = { 0x2FCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_051)
{
    // 11CAB 0041;	
    // (𑲫) MARCHEN SUBJOINED LETTER LA	[2FCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CAB, 0x0041 };
    uint32_t const ces[9] = { 0x2FCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_052)
{
    // 11CAB 0062;	
    // (𑲫) MARCHEN SUBJOINED LETTER LA	[2FCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAB, 0x0062 };
    uint32_t const ces[9] = { 0x2FCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_053)
{
    // 11C8C 0021;	
    // (𑲌) MARCHEN LETTER SHA	[2FD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8C, 0x0021 };
    uint32_t const ces[9] = { 0x2FD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_054)
{
    // 11C8C 003F;	
    // (𑲌) MARCHEN LETTER SHA	[2FD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8C, 0x003F };
    uint32_t const ces[9] = { 0x2FD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_055)
{
    // 11C8C 0061;	
    // (𑲌) MARCHEN LETTER SHA	[2FD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8C, 0x0061 };
    uint32_t const ces[9] = { 0x2FD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_056)
{
    // 11C8C 0041;	
    // (𑲌) MARCHEN LETTER SHA	[2FD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C8C, 0x0041 };
    uint32_t const ces[9] = { 0x2FD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_057)
{
    // 11C8C 0062;	
    // (𑲌) MARCHEN LETTER SHA	[2FD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8C, 0x0062 };
    uint32_t const ces[9] = { 0x2FD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_058)
{
    // 11CAC 0021;	
    // (𑲬) MARCHEN SUBJOINED LETTER SHA	[2FD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAC, 0x0021 };
    uint32_t const ces[9] = { 0x2FD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_059)
{
    // 11CAC 003F;	
    // (𑲬) MARCHEN SUBJOINED LETTER SHA	[2FD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAC, 0x003F };
    uint32_t const ces[9] = { 0x2FD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_060)
{
    // 11CAC 0061;	
    // (𑲬) MARCHEN SUBJOINED LETTER SHA	[2FD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAC, 0x0061 };
    uint32_t const ces[9] = { 0x2FD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_061)
{
    // 11CAC 0041;	
    // (𑲬) MARCHEN SUBJOINED LETTER SHA	[2FD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CAC, 0x0041 };
    uint32_t const ces[9] = { 0x2FD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_062)
{
    // 11CAC 0062;	
    // (𑲬) MARCHEN SUBJOINED LETTER SHA	[2FD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAC, 0x0062 };
    uint32_t const ces[9] = { 0x2FD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_063)
{
    // 11C8D 0021;	
    // (𑲍) MARCHEN LETTER SA	[2FD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8D, 0x0021 };
    uint32_t const ces[9] = { 0x2FD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_064)
{
    // 11C8D 003F;	
    // (𑲍) MARCHEN LETTER SA	[2FD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8D, 0x003F };
    uint32_t const ces[9] = { 0x2FD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_065)
{
    // 11C8D 0061;	
    // (𑲍) MARCHEN LETTER SA	[2FD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8D, 0x0061 };
    uint32_t const ces[9] = { 0x2FD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_066)
{
    // 11C8D 0041;	
    // (𑲍) MARCHEN LETTER SA	[2FD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C8D, 0x0041 };
    uint32_t const ces[9] = { 0x2FD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_067)
{
    // 11C8D 0062;	
    // (𑲍) MARCHEN LETTER SA	[2FD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8D, 0x0062 };
    uint32_t const ces[9] = { 0x2FD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_068)
{
    // 11CAD 0021;	
    // (𑲭) MARCHEN SUBJOINED LETTER SA	[2FD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAD, 0x0021 };
    uint32_t const ces[9] = { 0x2FD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_069)
{
    // 11CAD 003F;	
    // (𑲭) MARCHEN SUBJOINED LETTER SA	[2FD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAD, 0x003F };
    uint32_t const ces[9] = { 0x2FD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_070)
{
    // 11CAD 0061;	
    // (𑲭) MARCHEN SUBJOINED LETTER SA	[2FD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAD, 0x0061 };
    uint32_t const ces[9] = { 0x2FD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_071)
{
    // 11CAD 0041;	
    // (𑲭) MARCHEN SUBJOINED LETTER SA	[2FD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CAD, 0x0041 };
    uint32_t const ces[9] = { 0x2FD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_072)
{
    // 11CAD 0062;	
    // (𑲭) MARCHEN SUBJOINED LETTER SA	[2FD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAD, 0x0062 };
    uint32_t const ces[9] = { 0x2FD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_073)
{
    // 11C8E 0021;	
    // (𑲎) MARCHEN LETTER HA	[2FD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8E, 0x0021 };
    uint32_t const ces[9] = { 0x2FD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_074)
{
    // 11C8E 003F;	
    // (𑲎) MARCHEN LETTER HA	[2FD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8E, 0x003F };
    uint32_t const ces[9] = { 0x2FD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_075)
{
    // 11C8E 0061;	
    // (𑲎) MARCHEN LETTER HA	[2FD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8E, 0x0061 };
    uint32_t const ces[9] = { 0x2FD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_076)
{
    // 11C8E 0041;	
    // (𑲎) MARCHEN LETTER HA	[2FD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C8E, 0x0041 };
    uint32_t const ces[9] = { 0x2FD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_077)
{
    // 11C8E 0062;	
    // (𑲎) MARCHEN LETTER HA	[2FD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8E, 0x0062 };
    uint32_t const ces[9] = { 0x2FD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_078)
{
    // 11CAE 0021;	
    // (𑲮) MARCHEN SUBJOINED LETTER HA	[2FD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAE, 0x0021 };
    uint32_t const ces[9] = { 0x2FD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_079)
{
    // 11CAE 003F;	
    // (𑲮) MARCHEN SUBJOINED LETTER HA	[2FD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAE, 0x003F };
    uint32_t const ces[9] = { 0x2FD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_080)
{
    // 11CAE 0061;	
    // (𑲮) MARCHEN SUBJOINED LETTER HA	[2FD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAE, 0x0061 };
    uint32_t const ces[9] = { 0x2FD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_081)
{
    // 11CAE 0041;	
    // (𑲮) MARCHEN SUBJOINED LETTER HA	[2FD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CAE, 0x0041 };
    uint32_t const ces[9] = { 0x2FD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_082)
{
    // 11CAE 0062;	
    // (𑲮) MARCHEN SUBJOINED LETTER HA	[2FD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAE, 0x0062 };
    uint32_t const ces[9] = { 0x2FD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_083)
{
    // 11C8F 0021;	
    // (𑲏) MARCHEN LETTER A	[2FD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8F, 0x0021 };
    uint32_t const ces[9] = { 0x2FD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_084)
{
    // 11C8F 003F;	
    // (𑲏) MARCHEN LETTER A	[2FD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8F, 0x003F };
    uint32_t const ces[9] = { 0x2FD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_085)
{
    // 11C8F 0061;	
    // (𑲏) MARCHEN LETTER A	[2FD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8F, 0x0061 };
    uint32_t const ces[9] = { 0x2FD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_086)
{
    // 11C8F 0041;	
    // (𑲏) MARCHEN LETTER A	[2FD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C8F, 0x0041 };
    uint32_t const ces[9] = { 0x2FD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_087)
{
    // 11C8F 0062;	
    // (𑲏) MARCHEN LETTER A	[2FD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C8F, 0x0062 };
    uint32_t const ces[9] = { 0x2FD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_088)
{
    // 11CAF 0021;	
    // (𑲯) MARCHEN SUBJOINED LETTER A	[2FD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAF, 0x0021 };
    uint32_t const ces[9] = { 0x2FD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_089)
{
    // 11CAF 003F;	
    // (𑲯) MARCHEN SUBJOINED LETTER A	[2FD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAF, 0x003F };
    uint32_t const ces[9] = { 0x2FD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_090)
{
    // 11CAF 0061;	
    // (𑲯) MARCHEN SUBJOINED LETTER A	[2FD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAF, 0x0061 };
    uint32_t const ces[9] = { 0x2FD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_091)
{
    // 11CAF 0041;	
    // (𑲯) MARCHEN SUBJOINED LETTER A	[2FD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CAF, 0x0041 };
    uint32_t const ces[9] = { 0x2FD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_092)
{
    // 11CAF 0062;	
    // (𑲯) MARCHEN SUBJOINED LETTER A	[2FD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CAF, 0x0062 };
    uint32_t const ces[9] = { 0x2FD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_093)
{
    // 11CB0 0021;	
    // (𑲰) MARCHEN VOWEL SIGN AA	[2FD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB0, 0x0021 };
    uint32_t const ces[9] = { 0x2FD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_094)
{
    // 11CB0 003F;	
    // (𑲰) MARCHEN VOWEL SIGN AA	[2FD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB0, 0x003F };
    uint32_t const ces[9] = { 0x2FD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_095)
{
    // 11CB0 0061;	
    // (𑲰) MARCHEN VOWEL SIGN AA	[2FD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB0, 0x0061 };
    uint32_t const ces[9] = { 0x2FD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_096)
{
    // 11CB0 0041;	
    // (𑲰) MARCHEN VOWEL SIGN AA	[2FD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CB0, 0x0041 };
    uint32_t const ces[9] = { 0x2FD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_097)
{
    // 11CB0 0062;	
    // (𑲰) MARCHEN VOWEL SIGN AA	[2FD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB0, 0x0062 };
    uint32_t const ces[9] = { 0x2FD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_098)
{
    // 11CB1 0021;	
    // (𑲱) MARCHEN VOWEL SIGN I	[2FD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB1, 0x0021 };
    uint32_t const ces[9] = { 0x2FD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_099)
{
    // 11CB1 003F;	
    // (𑲱) MARCHEN VOWEL SIGN I	[2FD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB1, 0x003F };
    uint32_t const ces[9] = { 0x2FD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_100)
{
    // 11CB1 0061;	
    // (𑲱) MARCHEN VOWEL SIGN I	[2FD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB1, 0x0061 };
    uint32_t const ces[9] = { 0x2FD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_101)
{
    // 11CB1 0041;	
    // (𑲱) MARCHEN VOWEL SIGN I	[2FD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CB1, 0x0041 };
    uint32_t const ces[9] = { 0x2FD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_102)
{
    // 11CB1 0062;	
    // (𑲱) MARCHEN VOWEL SIGN I	[2FD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB1, 0x0062 };
    uint32_t const ces[9] = { 0x2FD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_103)
{
    // 11CB2 0021;	
    // (𑲲) MARCHEN VOWEL SIGN U	[2FDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB2, 0x0021 };
    uint32_t const ces[9] = { 0x2FDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_104)
{
    // 11CB2 003F;	
    // (𑲲) MARCHEN VOWEL SIGN U	[2FDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB2, 0x003F };
    uint32_t const ces[9] = { 0x2FDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_105)
{
    // 11CB2 0061;	
    // (𑲲) MARCHEN VOWEL SIGN U	[2FDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB2, 0x0061 };
    uint32_t const ces[9] = { 0x2FDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_106)
{
    // 11CB2 0041;	
    // (𑲲) MARCHEN VOWEL SIGN U	[2FDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CB2, 0x0041 };
    uint32_t const ces[9] = { 0x2FDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_107)
{
    // 11CB2 0062;	
    // (𑲲) MARCHEN VOWEL SIGN U	[2FDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB2, 0x0062 };
    uint32_t const ces[9] = { 0x2FDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_108)
{
    // 11CB3 0021;	
    // (𑲳) MARCHEN VOWEL SIGN E	[2FDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB3, 0x0021 };
    uint32_t const ces[9] = { 0x2FDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_109)
{
    // 11CB3 003F;	
    // (𑲳) MARCHEN VOWEL SIGN E	[2FDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB3, 0x003F };
    uint32_t const ces[9] = { 0x2FDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_110)
{
    // 11CB3 0061;	
    // (𑲳) MARCHEN VOWEL SIGN E	[2FDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB3, 0x0061 };
    uint32_t const ces[9] = { 0x2FDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_111)
{
    // 11CB3 0041;	
    // (𑲳) MARCHEN VOWEL SIGN E	[2FDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CB3, 0x0041 };
    uint32_t const ces[9] = { 0x2FDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_112)
{
    // 11CB3 0062;	
    // (𑲳) MARCHEN VOWEL SIGN E	[2FDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB3, 0x0062 };
    uint32_t const ces[9] = { 0x2FDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_113)
{
    // 11CB4 0021;	
    // (𑲴) MARCHEN VOWEL SIGN O	[2FDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB4, 0x0021 };
    uint32_t const ces[9] = { 0x2FDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_114)
{
    // 11CB4 003F;	
    // (𑲴) MARCHEN VOWEL SIGN O	[2FDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB4, 0x003F };
    uint32_t const ces[9] = { 0x2FDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_115)
{
    // 11CB4 0061;	
    // (𑲴) MARCHEN VOWEL SIGN O	[2FDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB4, 0x0061 };
    uint32_t const ces[9] = { 0x2FDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_116)
{
    // 11CB4 0041;	
    // (𑲴) MARCHEN VOWEL SIGN O	[2FDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11CB4, 0x0041 };
    uint32_t const ces[9] = { 0x2FDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_117)
{
    // 11CB4 0062;	
    // (𑲴) MARCHEN VOWEL SIGN O	[2FDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB4, 0x0062 };
    uint32_t const ces[9] = { 0x2FDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_118)
{
    // 1C00 0021;	
    // (ᰀ) LEPCHA LETTER KA	[2FDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C00, 0x0021 };
    uint32_t const ces[9] = { 0x2FDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_119)
{
    // 1C00 003F;	
    // (ᰀ) LEPCHA LETTER KA	[2FDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C00, 0x003F };
    uint32_t const ces[9] = { 0x2FDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_120)
{
    // 1C00 0061;	
    // (ᰀ) LEPCHA LETTER KA	[2FDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C00, 0x0061 };
    uint32_t const ces[9] = { 0x2FDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_121)
{
    // 1C00 0041;	
    // (ᰀ) LEPCHA LETTER KA	[2FDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C00, 0x0041 };
    uint32_t const ces[9] = { 0x2FDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_122)
{
    // 1C00 0062;	
    // (ᰀ) LEPCHA LETTER KA	[2FDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C00, 0x0062 };
    uint32_t const ces[9] = { 0x2FDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_123)
{
    // 1C01 0021;	
    // (ᰁ) LEPCHA LETTER KLA	[2FDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C01, 0x0021 };
    uint32_t const ces[9] = { 0x2FDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_124)
{
    // 1C01 003F;	
    // (ᰁ) LEPCHA LETTER KLA	[2FDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C01, 0x003F };
    uint32_t const ces[9] = { 0x2FDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_125)
{
    // 1C01 0061;	
    // (ᰁ) LEPCHA LETTER KLA	[2FDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C01, 0x0061 };
    uint32_t const ces[9] = { 0x2FDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_126)
{
    // 1C01 0041;	
    // (ᰁ) LEPCHA LETTER KLA	[2FDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C01, 0x0041 };
    uint32_t const ces[9] = { 0x2FDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_127)
{
    // 1C01 0062;	
    // (ᰁ) LEPCHA LETTER KLA	[2FDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C01, 0x0062 };
    uint32_t const ces[9] = { 0x2FDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_128)
{
    // 1C02 0021;	
    // (ᰂ) LEPCHA LETTER KHA	[2FDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C02, 0x0021 };
    uint32_t const ces[9] = { 0x2FDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_129)
{
    // 1C02 003F;	
    // (ᰂ) LEPCHA LETTER KHA	[2FDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C02, 0x003F };
    uint32_t const ces[9] = { 0x2FDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_130)
{
    // 1C02 0061;	
    // (ᰂ) LEPCHA LETTER KHA	[2FDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C02, 0x0061 };
    uint32_t const ces[9] = { 0x2FDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_131)
{
    // 1C02 0041;	
    // (ᰂ) LEPCHA LETTER KHA	[2FDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C02, 0x0041 };
    uint32_t const ces[9] = { 0x2FDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_132)
{
    // 1C02 0062;	
    // (ᰂ) LEPCHA LETTER KHA	[2FDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C02, 0x0062 };
    uint32_t const ces[9] = { 0x2FDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_133)
{
    // 1C03 0021;	
    // (ᰃ) LEPCHA LETTER GA	[2FE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C03, 0x0021 };
    uint32_t const ces[9] = { 0x2FE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_134)
{
    // 1C03 003F;	
    // (ᰃ) LEPCHA LETTER GA	[2FE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C03, 0x003F };
    uint32_t const ces[9] = { 0x2FE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_135)
{
    // 1C03 0061;	
    // (ᰃ) LEPCHA LETTER GA	[2FE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C03, 0x0061 };
    uint32_t const ces[9] = { 0x2FE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_136)
{
    // 1C03 0041;	
    // (ᰃ) LEPCHA LETTER GA	[2FE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C03, 0x0041 };
    uint32_t const ces[9] = { 0x2FE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_137)
{
    // 1C03 0062;	
    // (ᰃ) LEPCHA LETTER GA	[2FE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C03, 0x0062 };
    uint32_t const ces[9] = { 0x2FE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_138)
{
    // 1C04 0021;	
    // (ᰄ) LEPCHA LETTER GLA	[2FE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C04, 0x0021 };
    uint32_t const ces[9] = { 0x2FE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_139)
{
    // 1C04 003F;	
    // (ᰄ) LEPCHA LETTER GLA	[2FE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C04, 0x003F };
    uint32_t const ces[9] = { 0x2FE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_140)
{
    // 1C04 0061;	
    // (ᰄ) LEPCHA LETTER GLA	[2FE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C04, 0x0061 };
    uint32_t const ces[9] = { 0x2FE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_141)
{
    // 1C04 0041;	
    // (ᰄ) LEPCHA LETTER GLA	[2FE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C04, 0x0041 };
    uint32_t const ces[9] = { 0x2FE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_142)
{
    // 1C04 0062;	
    // (ᰄ) LEPCHA LETTER GLA	[2FE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C04, 0x0062 };
    uint32_t const ces[9] = { 0x2FE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_143)
{
    // 1C05 0021;	
    // (ᰅ) LEPCHA LETTER NGA	[2FE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C05, 0x0021 };
    uint32_t const ces[9] = { 0x2FE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_144)
{
    // 1C05 003F;	
    // (ᰅ) LEPCHA LETTER NGA	[2FE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C05, 0x003F };
    uint32_t const ces[9] = { 0x2FE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_145)
{
    // 1C05 0061;	
    // (ᰅ) LEPCHA LETTER NGA	[2FE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C05, 0x0061 };
    uint32_t const ces[9] = { 0x2FE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_146)
{
    // 1C05 0041;	
    // (ᰅ) LEPCHA LETTER NGA	[2FE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C05, 0x0041 };
    uint32_t const ces[9] = { 0x2FE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_147)
{
    // 1C05 0062;	
    // (ᰅ) LEPCHA LETTER NGA	[2FE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C05, 0x0062 };
    uint32_t const ces[9] = { 0x2FE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_148)
{
    // 1C06 0021;	
    // (ᰆ) LEPCHA LETTER CA	[2FE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C06, 0x0021 };
    uint32_t const ces[9] = { 0x2FE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_149)
{
    // 1C06 003F;	
    // (ᰆ) LEPCHA LETTER CA	[2FE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C06, 0x003F };
    uint32_t const ces[9] = { 0x2FE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_150)
{
    // 1C06 0061;	
    // (ᰆ) LEPCHA LETTER CA	[2FE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C06, 0x0061 };
    uint32_t const ces[9] = { 0x2FE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_151)
{
    // 1C06 0041;	
    // (ᰆ) LEPCHA LETTER CA	[2FE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C06, 0x0041 };
    uint32_t const ces[9] = { 0x2FE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_152)
{
    // 1C06 0062;	
    // (ᰆ) LEPCHA LETTER CA	[2FE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C06, 0x0062 };
    uint32_t const ces[9] = { 0x2FE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_153)
{
    // 1C07 0021;	
    // (ᰇ) LEPCHA LETTER CHA	[2FE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C07, 0x0021 };
    uint32_t const ces[9] = { 0x2FE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_154)
{
    // 1C07 003F;	
    // (ᰇ) LEPCHA LETTER CHA	[2FE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C07, 0x003F };
    uint32_t const ces[9] = { 0x2FE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_155)
{
    // 1C07 0061;	
    // (ᰇ) LEPCHA LETTER CHA	[2FE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C07, 0x0061 };
    uint32_t const ces[9] = { 0x2FE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_156)
{
    // 1C07 0041;	
    // (ᰇ) LEPCHA LETTER CHA	[2FE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C07, 0x0041 };
    uint32_t const ces[9] = { 0x2FE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_157)
{
    // 1C07 0062;	
    // (ᰇ) LEPCHA LETTER CHA	[2FE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C07, 0x0062 };
    uint32_t const ces[9] = { 0x2FE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_158)
{
    // 1C08 0021;	
    // (ᰈ) LEPCHA LETTER JA	[2FE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C08, 0x0021 };
    uint32_t const ces[9] = { 0x2FE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_159)
{
    // 1C08 003F;	
    // (ᰈ) LEPCHA LETTER JA	[2FE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C08, 0x003F };
    uint32_t const ces[9] = { 0x2FE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_160)
{
    // 1C08 0061;	
    // (ᰈ) LEPCHA LETTER JA	[2FE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C08, 0x0061 };
    uint32_t const ces[9] = { 0x2FE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_161)
{
    // 1C08 0041;	
    // (ᰈ) LEPCHA LETTER JA	[2FE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C08, 0x0041 };
    uint32_t const ces[9] = { 0x2FE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_162)
{
    // 1C08 0062;	
    // (ᰈ) LEPCHA LETTER JA	[2FE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C08, 0x0062 };
    uint32_t const ces[9] = { 0x2FE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_163)
{
    // 1C09 0021;	
    // (ᰉ) LEPCHA LETTER NYA	[2FE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C09, 0x0021 };
    uint32_t const ces[9] = { 0x2FE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_164)
{
    // 1C09 003F;	
    // (ᰉ) LEPCHA LETTER NYA	[2FE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C09, 0x003F };
    uint32_t const ces[9] = { 0x2FE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_165)
{
    // 1C09 0061;	
    // (ᰉ) LEPCHA LETTER NYA	[2FE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C09, 0x0061 };
    uint32_t const ces[9] = { 0x2FE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_166)
{
    // 1C09 0041;	
    // (ᰉ) LEPCHA LETTER NYA	[2FE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C09, 0x0041 };
    uint32_t const ces[9] = { 0x2FE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_167)
{
    // 1C09 0062;	
    // (ᰉ) LEPCHA LETTER NYA	[2FE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C09, 0x0062 };
    uint32_t const ces[9] = { 0x2FE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_168)
{
    // 1C4D 0021;	
    // (ᱍ) LEPCHA LETTER TTA	[2FE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4D, 0x0021 };
    uint32_t const ces[9] = { 0x2FE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_169)
{
    // 1C4D 003F;	
    // (ᱍ) LEPCHA LETTER TTA	[2FE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4D, 0x003F };
    uint32_t const ces[9] = { 0x2FE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_170)
{
    // 1C4D 0061;	
    // (ᱍ) LEPCHA LETTER TTA	[2FE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4D, 0x0061 };
    uint32_t const ces[9] = { 0x2FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_171)
{
    // 1C4D 0041;	
    // (ᱍ) LEPCHA LETTER TTA	[2FE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C4D, 0x0041 };
    uint32_t const ces[9] = { 0x2FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_172)
{
    // 1C4D 0062;	
    // (ᱍ) LEPCHA LETTER TTA	[2FE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4D, 0x0062 };
    uint32_t const ces[9] = { 0x2FE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_173)
{
    // 1C4E 0021;	
    // (ᱎ) LEPCHA LETTER TTHA	[2FE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4E, 0x0021 };
    uint32_t const ces[9] = { 0x2FE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_174)
{
    // 1C4E 003F;	
    // (ᱎ) LEPCHA LETTER TTHA	[2FE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4E, 0x003F };
    uint32_t const ces[9] = { 0x2FE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_175)
{
    // 1C4E 0061;	
    // (ᱎ) LEPCHA LETTER TTHA	[2FE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4E, 0x0061 };
    uint32_t const ces[9] = { 0x2FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_176)
{
    // 1C4E 0041;	
    // (ᱎ) LEPCHA LETTER TTHA	[2FE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C4E, 0x0041 };
    uint32_t const ces[9] = { 0x2FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_177)
{
    // 1C4E 0062;	
    // (ᱎ) LEPCHA LETTER TTHA	[2FE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4E, 0x0062 };
    uint32_t const ces[9] = { 0x2FE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_178)
{
    // 1C4F 0021;	
    // (ᱏ) LEPCHA LETTER DDA	[2FE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4F, 0x0021 };
    uint32_t const ces[9] = { 0x2FE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_179)
{
    // 1C4F 003F;	
    // (ᱏ) LEPCHA LETTER DDA	[2FE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4F, 0x003F };
    uint32_t const ces[9] = { 0x2FE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_180)
{
    // 1C4F 0061;	
    // (ᱏ) LEPCHA LETTER DDA	[2FE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4F, 0x0061 };
    uint32_t const ces[9] = { 0x2FE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_181)
{
    // 1C4F 0041;	
    // (ᱏ) LEPCHA LETTER DDA	[2FE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C4F, 0x0041 };
    uint32_t const ces[9] = { 0x2FE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_182)
{
    // 1C4F 0062;	
    // (ᱏ) LEPCHA LETTER DDA	[2FE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C4F, 0x0062 };
    uint32_t const ces[9] = { 0x2FE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_183)
{
    // 1C0A 0021;	
    // (ᰊ) LEPCHA LETTER TA	[2FEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0A, 0x0021 };
    uint32_t const ces[9] = { 0x2FEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_184)
{
    // 1C0A 003F;	
    // (ᰊ) LEPCHA LETTER TA	[2FEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0A, 0x003F };
    uint32_t const ces[9] = { 0x2FEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_185)
{
    // 1C0A 0061;	
    // (ᰊ) LEPCHA LETTER TA	[2FEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0A, 0x0061 };
    uint32_t const ces[9] = { 0x2FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_186)
{
    // 1C0A 0041;	
    // (ᰊ) LEPCHA LETTER TA	[2FEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C0A, 0x0041 };
    uint32_t const ces[9] = { 0x2FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_187)
{
    // 1C0A 0062;	
    // (ᰊ) LEPCHA LETTER TA	[2FEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0A, 0x0062 };
    uint32_t const ces[9] = { 0x2FEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_188)
{
    // 1C0B 0021;	
    // (ᰋ) LEPCHA LETTER THA	[2FEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0B, 0x0021 };
    uint32_t const ces[9] = { 0x2FEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_189)
{
    // 1C0B 003F;	
    // (ᰋ) LEPCHA LETTER THA	[2FEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0B, 0x003F };
    uint32_t const ces[9] = { 0x2FEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_190)
{
    // 1C0B 0061;	
    // (ᰋ) LEPCHA LETTER THA	[2FEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0B, 0x0061 };
    uint32_t const ces[9] = { 0x2FEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_191)
{
    // 1C0B 0041;	
    // (ᰋ) LEPCHA LETTER THA	[2FEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C0B, 0x0041 };
    uint32_t const ces[9] = { 0x2FEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_192)
{
    // 1C0B 0062;	
    // (ᰋ) LEPCHA LETTER THA	[2FEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0B, 0x0062 };
    uint32_t const ces[9] = { 0x2FEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_193)
{
    // 1C0C 0021;	
    // (ᰌ) LEPCHA LETTER DA	[2FEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0C, 0x0021 };
    uint32_t const ces[9] = { 0x2FEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_194)
{
    // 1C0C 003F;	
    // (ᰌ) LEPCHA LETTER DA	[2FEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0C, 0x003F };
    uint32_t const ces[9] = { 0x2FEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_195)
{
    // 1C0C 0061;	
    // (ᰌ) LEPCHA LETTER DA	[2FEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0C, 0x0061 };
    uint32_t const ces[9] = { 0x2FEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_196)
{
    // 1C0C 0041;	
    // (ᰌ) LEPCHA LETTER DA	[2FEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C0C, 0x0041 };
    uint32_t const ces[9] = { 0x2FEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_197)
{
    // 1C0C 0062;	
    // (ᰌ) LEPCHA LETTER DA	[2FEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0C, 0x0062 };
    uint32_t const ces[9] = { 0x2FEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_198)
{
    // 1C0D 0021;	
    // (ᰍ) LEPCHA LETTER NA	[2FED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0D, 0x0021 };
    uint32_t const ces[9] = { 0x2FED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_199)
{
    // 1C0D 003F;	
    // (ᰍ) LEPCHA LETTER NA	[2FED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0D, 0x003F };
    uint32_t const ces[9] = { 0x2FED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_200)
{
    // 1C0D 0061;	
    // (ᰍ) LEPCHA LETTER NA	[2FED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0D, 0x0061 };
    uint32_t const ces[9] = { 0x2FED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_201)
{
    // 1C0D 0041;	
    // (ᰍ) LEPCHA LETTER NA	[2FED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C0D, 0x0041 };
    uint32_t const ces[9] = { 0x2FED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_202)
{
    // 1C0D 0062;	
    // (ᰍ) LEPCHA LETTER NA	[2FED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0D, 0x0062 };
    uint32_t const ces[9] = { 0x2FED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_203)
{
    // 1C0E 0021;	
    // (ᰎ) LEPCHA LETTER PA	[2FEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0E, 0x0021 };
    uint32_t const ces[9] = { 0x2FEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_204)
{
    // 1C0E 003F;	
    // (ᰎ) LEPCHA LETTER PA	[2FEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0E, 0x003F };
    uint32_t const ces[9] = { 0x2FEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_205)
{
    // 1C0E 0061;	
    // (ᰎ) LEPCHA LETTER PA	[2FEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0E, 0x0061 };
    uint32_t const ces[9] = { 0x2FEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_206)
{
    // 1C0E 0041;	
    // (ᰎ) LEPCHA LETTER PA	[2FEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C0E, 0x0041 };
    uint32_t const ces[9] = { 0x2FEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_207)
{
    // 1C0E 0062;	
    // (ᰎ) LEPCHA LETTER PA	[2FEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0E, 0x0062 };
    uint32_t const ces[9] = { 0x2FEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_208)
{
    // 1C0F 0021;	
    // (ᰏ) LEPCHA LETTER PLA	[2FEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0F, 0x0021 };
    uint32_t const ces[9] = { 0x2FEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_209)
{
    // 1C0F 003F;	
    // (ᰏ) LEPCHA LETTER PLA	[2FEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0F, 0x003F };
    uint32_t const ces[9] = { 0x2FEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_210)
{
    // 1C0F 0061;	
    // (ᰏ) LEPCHA LETTER PLA	[2FEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0F, 0x0061 };
    uint32_t const ces[9] = { 0x2FEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_211)
{
    // 1C0F 0041;	
    // (ᰏ) LEPCHA LETTER PLA	[2FEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C0F, 0x0041 };
    uint32_t const ces[9] = { 0x2FEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_212)
{
    // 1C0F 0062;	
    // (ᰏ) LEPCHA LETTER PLA	[2FEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C0F, 0x0062 };
    uint32_t const ces[9] = { 0x2FEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_213)
{
    // 1C10 0021;	
    // (ᰐ) LEPCHA LETTER PHA	[2FF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C10, 0x0021 };
    uint32_t const ces[9] = { 0x2FF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_214)
{
    // 1C10 003F;	
    // (ᰐ) LEPCHA LETTER PHA	[2FF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C10, 0x003F };
    uint32_t const ces[9] = { 0x2FF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_215)
{
    // 1C10 0061;	
    // (ᰐ) LEPCHA LETTER PHA	[2FF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C10, 0x0061 };
    uint32_t const ces[9] = { 0x2FF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_216)
{
    // 1C10 0041;	
    // (ᰐ) LEPCHA LETTER PHA	[2FF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C10, 0x0041 };
    uint32_t const ces[9] = { 0x2FF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_217)
{
    // 1C10 0062;	
    // (ᰐ) LEPCHA LETTER PHA	[2FF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C10, 0x0062 };
    uint32_t const ces[9] = { 0x2FF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_218)
{
    // 1C11 0021;	
    // (ᰑ) LEPCHA LETTER FA	[2FF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C11, 0x0021 };
    uint32_t const ces[9] = { 0x2FF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_219)
{
    // 1C11 003F;	
    // (ᰑ) LEPCHA LETTER FA	[2FF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C11, 0x003F };
    uint32_t const ces[9] = { 0x2FF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_220)
{
    // 1C11 0061;	
    // (ᰑ) LEPCHA LETTER FA	[2FF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C11, 0x0061 };
    uint32_t const ces[9] = { 0x2FF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_221)
{
    // 1C11 0041;	
    // (ᰑ) LEPCHA LETTER FA	[2FF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C11, 0x0041 };
    uint32_t const ces[9] = { 0x2FF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_222)
{
    // 1C11 0062;	
    // (ᰑ) LEPCHA LETTER FA	[2FF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C11, 0x0062 };
    uint32_t const ces[9] = { 0x2FF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_223)
{
    // 1C12 0021;	
    // (ᰒ) LEPCHA LETTER FLA	[2FF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C12, 0x0021 };
    uint32_t const ces[9] = { 0x2FF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_224)
{
    // 1C12 003F;	
    // (ᰒ) LEPCHA LETTER FLA	[2FF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C12, 0x003F };
    uint32_t const ces[9] = { 0x2FF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_225)
{
    // 1C12 0061;	
    // (ᰒ) LEPCHA LETTER FLA	[2FF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C12, 0x0061 };
    uint32_t const ces[9] = { 0x2FF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_226)
{
    // 1C12 0041;	
    // (ᰒ) LEPCHA LETTER FLA	[2FF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C12, 0x0041 };
    uint32_t const ces[9] = { 0x2FF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_227)
{
    // 1C12 0062;	
    // (ᰒ) LEPCHA LETTER FLA	[2FF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C12, 0x0062 };
    uint32_t const ces[9] = { 0x2FF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_228)
{
    // 1C13 0021;	
    // (ᰓ) LEPCHA LETTER BA	[2FF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C13, 0x0021 };
    uint32_t const ces[9] = { 0x2FF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_229)
{
    // 1C13 003F;	
    // (ᰓ) LEPCHA LETTER BA	[2FF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C13, 0x003F };
    uint32_t const ces[9] = { 0x2FF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_230)
{
    // 1C13 0061;	
    // (ᰓ) LEPCHA LETTER BA	[2FF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C13, 0x0061 };
    uint32_t const ces[9] = { 0x2FF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_231)
{
    // 1C13 0041;	
    // (ᰓ) LEPCHA LETTER BA	[2FF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C13, 0x0041 };
    uint32_t const ces[9] = { 0x2FF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_232)
{
    // 1C13 0062;	
    // (ᰓ) LEPCHA LETTER BA	[2FF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C13, 0x0062 };
    uint32_t const ces[9] = { 0x2FF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_233)
{
    // 1C14 0021;	
    // (ᰔ) LEPCHA LETTER BLA	[2FF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C14, 0x0021 };
    uint32_t const ces[9] = { 0x2FF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_234)
{
    // 1C14 003F;	
    // (ᰔ) LEPCHA LETTER BLA	[2FF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C14, 0x003F };
    uint32_t const ces[9] = { 0x2FF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_235)
{
    // 1C14 0061;	
    // (ᰔ) LEPCHA LETTER BLA	[2FF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C14, 0x0061 };
    uint32_t const ces[9] = { 0x2FF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_236)
{
    // 1C14 0041;	
    // (ᰔ) LEPCHA LETTER BLA	[2FF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C14, 0x0041 };
    uint32_t const ces[9] = { 0x2FF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_237)
{
    // 1C14 0062;	
    // (ᰔ) LEPCHA LETTER BLA	[2FF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C14, 0x0062 };
    uint32_t const ces[9] = { 0x2FF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_238)
{
    // 1C15 0021;	
    // (ᰕ) LEPCHA LETTER MA	[2FF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C15, 0x0021 };
    uint32_t const ces[9] = { 0x2FF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_239)
{
    // 1C15 003F;	
    // (ᰕ) LEPCHA LETTER MA	[2FF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C15, 0x003F };
    uint32_t const ces[9] = { 0x2FF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_240)
{
    // 1C15 0061;	
    // (ᰕ) LEPCHA LETTER MA	[2FF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C15, 0x0061 };
    uint32_t const ces[9] = { 0x2FF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_241)
{
    // 1C15 0041;	
    // (ᰕ) LEPCHA LETTER MA	[2FF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C15, 0x0041 };
    uint32_t const ces[9] = { 0x2FF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_242)
{
    // 1C15 0062;	
    // (ᰕ) LEPCHA LETTER MA	[2FF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C15, 0x0062 };
    uint32_t const ces[9] = { 0x2FF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_243)
{
    // 1C16 0021;	
    // (ᰖ) LEPCHA LETTER MLA	[2FF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C16, 0x0021 };
    uint32_t const ces[9] = { 0x2FF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_244)
{
    // 1C16 003F;	
    // (ᰖ) LEPCHA LETTER MLA	[2FF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C16, 0x003F };
    uint32_t const ces[9] = { 0x2FF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_245)
{
    // 1C16 0061;	
    // (ᰖ) LEPCHA LETTER MLA	[2FF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C16, 0x0061 };
    uint32_t const ces[9] = { 0x2FF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_246)
{
    // 1C16 0041;	
    // (ᰖ) LEPCHA LETTER MLA	[2FF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C16, 0x0041 };
    uint32_t const ces[9] = { 0x2FF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_247)
{
    // 1C16 0062;	
    // (ᰖ) LEPCHA LETTER MLA	[2FF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C16, 0x0062 };
    uint32_t const ces[9] = { 0x2FF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_248)
{
    // 1C17 0021;	
    // (ᰗ) LEPCHA LETTER TSA	[2FF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C17, 0x0021 };
    uint32_t const ces[9] = { 0x2FF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_249)
{
    // 1C17 003F;	
    // (ᰗ) LEPCHA LETTER TSA	[2FF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C17, 0x003F };
    uint32_t const ces[9] = { 0x2FF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_250)
{
    // 1C17 0061;	
    // (ᰗ) LEPCHA LETTER TSA	[2FF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C17, 0x0061 };
    uint32_t const ces[9] = { 0x2FF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_251)
{
    // 1C17 0041;	
    // (ᰗ) LEPCHA LETTER TSA	[2FF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C17, 0x0041 };
    uint32_t const ces[9] = { 0x2FF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_252)
{
    // 1C17 0062;	
    // (ᰗ) LEPCHA LETTER TSA	[2FF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C17, 0x0062 };
    uint32_t const ces[9] = { 0x2FF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_253)
{
    // 1C18 0021;	
    // (ᰘ) LEPCHA LETTER TSHA	[2FF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C18, 0x0021 };
    uint32_t const ces[9] = { 0x2FF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_254)
{
    // 1C18 003F;	
    // (ᰘ) LEPCHA LETTER TSHA	[2FF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C18, 0x003F };
    uint32_t const ces[9] = { 0x2FF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_255)
{
    // 1C18 0061;	
    // (ᰘ) LEPCHA LETTER TSHA	[2FF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C18, 0x0061 };
    uint32_t const ces[9] = { 0x2FF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_256)
{
    // 1C18 0041;	
    // (ᰘ) LEPCHA LETTER TSHA	[2FF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C18, 0x0041 };
    uint32_t const ces[9] = { 0x2FF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_257)
{
    // 1C18 0062;	
    // (ᰘ) LEPCHA LETTER TSHA	[2FF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C18, 0x0062 };
    uint32_t const ces[9] = { 0x2FF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_258)
{
    // 1C19 0021;	
    // (ᰙ) LEPCHA LETTER DZA	[2FF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C19, 0x0021 };
    uint32_t const ces[9] = { 0x2FF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_259)
{
    // 1C19 003F;	
    // (ᰙ) LEPCHA LETTER DZA	[2FF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C19, 0x003F };
    uint32_t const ces[9] = { 0x2FF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_260)
{
    // 1C19 0061;	
    // (ᰙ) LEPCHA LETTER DZA	[2FF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C19, 0x0061 };
    uint32_t const ces[9] = { 0x2FF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_261)
{
    // 1C19 0041;	
    // (ᰙ) LEPCHA LETTER DZA	[2FF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C19, 0x0041 };
    uint32_t const ces[9] = { 0x2FF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_262)
{
    // 1C19 0062;	
    // (ᰙ) LEPCHA LETTER DZA	[2FF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C19, 0x0062 };
    uint32_t const ces[9] = { 0x2FF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_263)
{
    // 1C1A 0021;	
    // (ᰚ) LEPCHA LETTER YA	[2FFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1A, 0x0021 };
    uint32_t const ces[9] = { 0x2FFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_264)
{
    // 1C1A 003F;	
    // (ᰚ) LEPCHA LETTER YA	[2FFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1A, 0x003F };
    uint32_t const ces[9] = { 0x2FFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_265)
{
    // 1C1A 0061;	
    // (ᰚ) LEPCHA LETTER YA	[2FFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1A, 0x0061 };
    uint32_t const ces[9] = { 0x2FFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_266)
{
    // 1C1A 0041;	
    // (ᰚ) LEPCHA LETTER YA	[2FFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C1A, 0x0041 };
    uint32_t const ces[9] = { 0x2FFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_267)
{
    // 1C1A 0062;	
    // (ᰚ) LEPCHA LETTER YA	[2FFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1A, 0x0062 };
    uint32_t const ces[9] = { 0x2FFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_268)
{
    // 1C24 0021;	
    // (ᰤ) LEPCHA SUBJOINED LETTER YA	[2FFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C24, 0x0021 };
    uint32_t const ces[9] = { 0x2FFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_269)
{
    // 1C24 003F;	
    // (ᰤ) LEPCHA SUBJOINED LETTER YA	[2FFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C24, 0x003F };
    uint32_t const ces[9] = { 0x2FFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_270)
{
    // 1C24 0061;	
    // (ᰤ) LEPCHA SUBJOINED LETTER YA	[2FFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C24, 0x0061 };
    uint32_t const ces[9] = { 0x2FFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_271)
{
    // 1C24 0041;	
    // (ᰤ) LEPCHA SUBJOINED LETTER YA	[2FFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C24, 0x0041 };
    uint32_t const ces[9] = { 0x2FFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_272)
{
    // 1C24 0062;	
    // (ᰤ) LEPCHA SUBJOINED LETTER YA	[2FFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C24, 0x0062 };
    uint32_t const ces[9] = { 0x2FFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_273)
{
    // 1C1B 0021;	
    // (ᰛ) LEPCHA LETTER RA	[2FFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1B, 0x0021 };
    uint32_t const ces[9] = { 0x2FFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_274)
{
    // 1C1B 003F;	
    // (ᰛ) LEPCHA LETTER RA	[2FFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1B, 0x003F };
    uint32_t const ces[9] = { 0x2FFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_275)
{
    // 1C1B 0061;	
    // (ᰛ) LEPCHA LETTER RA	[2FFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1B, 0x0061 };
    uint32_t const ces[9] = { 0x2FFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_276)
{
    // 1C1B 0041;	
    // (ᰛ) LEPCHA LETTER RA	[2FFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C1B, 0x0041 };
    uint32_t const ces[9] = { 0x2FFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_277)
{
    // 1C1B 0062;	
    // (ᰛ) LEPCHA LETTER RA	[2FFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1B, 0x0062 };
    uint32_t const ces[9] = { 0x2FFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_278)
{
    // 1C25 0021;	
    // (ᰥ) LEPCHA SUBJOINED LETTER RA	[2FFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C25, 0x0021 };
    uint32_t const ces[9] = { 0x2FFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_279)
{
    // 1C25 003F;	
    // (ᰥ) LEPCHA SUBJOINED LETTER RA	[2FFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C25, 0x003F };
    uint32_t const ces[9] = { 0x2FFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_280)
{
    // 1C25 0061;	
    // (ᰥ) LEPCHA SUBJOINED LETTER RA	[2FFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C25, 0x0061 };
    uint32_t const ces[9] = { 0x2FFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_281)
{
    // 1C25 0041;	
    // (ᰥ) LEPCHA SUBJOINED LETTER RA	[2FFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C25, 0x0041 };
    uint32_t const ces[9] = { 0x2FFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_282)
{
    // 1C25 0062;	
    // (ᰥ) LEPCHA SUBJOINED LETTER RA	[2FFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C25, 0x0062 };
    uint32_t const ces[9] = { 0x2FFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_283)
{
    // 1C1C 0021;	
    // (ᰜ) LEPCHA LETTER LA	[2FFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1C, 0x0021 };
    uint32_t const ces[9] = { 0x2FFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_284)
{
    // 1C1C 003F;	
    // (ᰜ) LEPCHA LETTER LA	[2FFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1C, 0x003F };
    uint32_t const ces[9] = { 0x2FFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_285)
{
    // 1C1C 0061;	
    // (ᰜ) LEPCHA LETTER LA	[2FFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1C, 0x0061 };
    uint32_t const ces[9] = { 0x2FFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_286)
{
    // 1C1C 0041;	
    // (ᰜ) LEPCHA LETTER LA	[2FFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C1C, 0x0041 };
    uint32_t const ces[9] = { 0x2FFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_287)
{
    // 1C1C 0062;	
    // (ᰜ) LEPCHA LETTER LA	[2FFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1C, 0x0062 };
    uint32_t const ces[9] = { 0x2FFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_288)
{
    // 1C1D 0021;	
    // (ᰝ) LEPCHA LETTER HA	[2FFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1D, 0x0021 };
    uint32_t const ces[9] = { 0x2FFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_289)
{
    // 1C1D 003F;	
    // (ᰝ) LEPCHA LETTER HA	[2FFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1D, 0x003F };
    uint32_t const ces[9] = { 0x2FFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_290)
{
    // 1C1D 0061;	
    // (ᰝ) LEPCHA LETTER HA	[2FFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1D, 0x0061 };
    uint32_t const ces[9] = { 0x2FFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_291)
{
    // 1C1D 0041;	
    // (ᰝ) LEPCHA LETTER HA	[2FFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C1D, 0x0041 };
    uint32_t const ces[9] = { 0x2FFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_292)
{
    // 1C1D 0062;	
    // (ᰝ) LEPCHA LETTER HA	[2FFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1D, 0x0062 };
    uint32_t const ces[9] = { 0x2FFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_293)
{
    // 1C1E 0021;	
    // (ᰞ) LEPCHA LETTER HLA	[3000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1E, 0x0021 };
    uint32_t const ces[9] = { 0x3000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_294)
{
    // 1C1E 003F;	
    // (ᰞ) LEPCHA LETTER HLA	[3000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1E, 0x003F };
    uint32_t const ces[9] = { 0x3000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_295)
{
    // 1C1E 0061;	
    // (ᰞ) LEPCHA LETTER HLA	[3000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1E, 0x0061 };
    uint32_t const ces[9] = { 0x3000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_296)
{
    // 1C1E 0041;	
    // (ᰞ) LEPCHA LETTER HLA	[3000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C1E, 0x0041 };
    uint32_t const ces[9] = { 0x3000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_297)
{
    // 1C1E 0062;	
    // (ᰞ) LEPCHA LETTER HLA	[3000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1E, 0x0062 };
    uint32_t const ces[9] = { 0x3000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_298)
{
    // 1C1F 0021;	
    // (ᰟ) LEPCHA LETTER VA	[3001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1F, 0x0021 };
    uint32_t const ces[9] = { 0x3001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_299)
{
    // 1C1F 003F;	
    // (ᰟ) LEPCHA LETTER VA	[3001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1F, 0x003F };
    uint32_t const ces[9] = { 0x3001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_300)
{
    // 1C1F 0061;	
    // (ᰟ) LEPCHA LETTER VA	[3001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1F, 0x0061 };
    uint32_t const ces[9] = { 0x3001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_301)
{
    // 1C1F 0041;	
    // (ᰟ) LEPCHA LETTER VA	[3001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C1F, 0x0041 };
    uint32_t const ces[9] = { 0x3001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_302)
{
    // 1C1F 0062;	
    // (ᰟ) LEPCHA LETTER VA	[3001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C1F, 0x0062 };
    uint32_t const ces[9] = { 0x3001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_303)
{
    // 1C20 0021;	
    // (ᰠ) LEPCHA LETTER SA	[3002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C20, 0x0021 };
    uint32_t const ces[9] = { 0x3002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_304)
{
    // 1C20 003F;	
    // (ᰠ) LEPCHA LETTER SA	[3002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C20, 0x003F };
    uint32_t const ces[9] = { 0x3002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_305)
{
    // 1C20 0061;	
    // (ᰠ) LEPCHA LETTER SA	[3002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C20, 0x0061 };
    uint32_t const ces[9] = { 0x3002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_306)
{
    // 1C20 0041;	
    // (ᰠ) LEPCHA LETTER SA	[3002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C20, 0x0041 };
    uint32_t const ces[9] = { 0x3002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_307)
{
    // 1C20 0062;	
    // (ᰠ) LEPCHA LETTER SA	[3002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C20, 0x0062 };
    uint32_t const ces[9] = { 0x3002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_308)
{
    // 1C21 0021;	
    // (ᰡ) LEPCHA LETTER SHA	[3003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C21, 0x0021 };
    uint32_t const ces[9] = { 0x3003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_309)
{
    // 1C21 003F;	
    // (ᰡ) LEPCHA LETTER SHA	[3003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C21, 0x003F };
    uint32_t const ces[9] = { 0x3003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_310)
{
    // 1C21 0061;	
    // (ᰡ) LEPCHA LETTER SHA	[3003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C21, 0x0061 };
    uint32_t const ces[9] = { 0x3003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_311)
{
    // 1C21 0041;	
    // (ᰡ) LEPCHA LETTER SHA	[3003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C21, 0x0041 };
    uint32_t const ces[9] = { 0x3003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_312)
{
    // 1C21 0062;	
    // (ᰡ) LEPCHA LETTER SHA	[3003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C21, 0x0062 };
    uint32_t const ces[9] = { 0x3003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_313)
{
    // 1C22 0021;	
    // (ᰢ) LEPCHA LETTER WA	[3004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C22, 0x0021 };
    uint32_t const ces[9] = { 0x3004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_314)
{
    // 1C22 003F;	
    // (ᰢ) LEPCHA LETTER WA	[3004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C22, 0x003F };
    uint32_t const ces[9] = { 0x3004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_315)
{
    // 1C22 0061;	
    // (ᰢ) LEPCHA LETTER WA	[3004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C22, 0x0061 };
    uint32_t const ces[9] = { 0x3004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_316)
{
    // 1C22 0041;	
    // (ᰢ) LEPCHA LETTER WA	[3004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C22, 0x0041 };
    uint32_t const ces[9] = { 0x3004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_317)
{
    // 1C22 0062;	
    // (ᰢ) LEPCHA LETTER WA	[3004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C22, 0x0062 };
    uint32_t const ces[9] = { 0x3004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_318)
{
    // 1C23 0021;	
    // (ᰣ) LEPCHA LETTER A	[3005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C23, 0x0021 };
    uint32_t const ces[9] = { 0x3005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_319)
{
    // 1C23 003F;	
    // (ᰣ) LEPCHA LETTER A	[3005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C23, 0x003F };
    uint32_t const ces[9] = { 0x3005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_320)
{
    // 1C23 0061;	
    // (ᰣ) LEPCHA LETTER A	[3005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C23, 0x0061 };
    uint32_t const ces[9] = { 0x3005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_321)
{
    // 1C23 0041;	
    // (ᰣ) LEPCHA LETTER A	[3005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C23, 0x0041 };
    uint32_t const ces[9] = { 0x3005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_322)
{
    // 1C23 0062;	
    // (ᰣ) LEPCHA LETTER A	[3005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C23, 0x0062 };
    uint32_t const ces[9] = { 0x3005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_323)
{
    // 1C36 0021;	
    // (ᰶ) LEPCHA SIGN RAN	[3006 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C36, 0x0021 };
    uint32_t const ces[9] = { 0x3006, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_324)
{
    // 1C36 003F;	
    // (ᰶ) LEPCHA SIGN RAN	[3006 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C36, 0x003F };
    uint32_t const ces[9] = { 0x3006, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_325)
{
    // 1C36 0061;	
    // (ᰶ) LEPCHA SIGN RAN	[3006 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C36, 0x0061 };
    uint32_t const ces[9] = { 0x3006, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_326)
{
    // 1C36 0041;	
    // (ᰶ) LEPCHA SIGN RAN	[3006 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C36, 0x0041 };
    uint32_t const ces[9] = { 0x3006, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_327)
{
    // 1C36 0062;	
    // (ᰶ) LEPCHA SIGN RAN	[3006 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C36, 0x0062 };
    uint32_t const ces[9] = { 0x3006, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_328)
{
    // 1C26 0021;	
    // (ᰦ) LEPCHA VOWEL SIGN AA	[3007 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C26, 0x0021 };
    uint32_t const ces[9] = { 0x3007, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_329)
{
    // 1C26 003F;	
    // (ᰦ) LEPCHA VOWEL SIGN AA	[3007 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C26, 0x003F };
    uint32_t const ces[9] = { 0x3007, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_330)
{
    // 1C26 0061;	
    // (ᰦ) LEPCHA VOWEL SIGN AA	[3007 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C26, 0x0061 };
    uint32_t const ces[9] = { 0x3007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_331)
{
    // 1C26 0041;	
    // (ᰦ) LEPCHA VOWEL SIGN AA	[3007 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C26, 0x0041 };
    uint32_t const ces[9] = { 0x3007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_332)
{
    // 1C26 0062;	
    // (ᰦ) LEPCHA VOWEL SIGN AA	[3007 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C26, 0x0062 };
    uint32_t const ces[9] = { 0x3007, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_333)
{
    // 1C27 0021;	
    // (ᰧ) LEPCHA VOWEL SIGN I	[3008 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C27, 0x0021 };
    uint32_t const ces[9] = { 0x3008, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_334)
{
    // 1C27 003F;	
    // (ᰧ) LEPCHA VOWEL SIGN I	[3008 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C27, 0x003F };
    uint32_t const ces[9] = { 0x3008, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_335)
{
    // 1C27 0061;	
    // (ᰧ) LEPCHA VOWEL SIGN I	[3008 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C27, 0x0061 };
    uint32_t const ces[9] = { 0x3008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_336)
{
    // 1C27 0041;	
    // (ᰧ) LEPCHA VOWEL SIGN I	[3008 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C27, 0x0041 };
    uint32_t const ces[9] = { 0x3008, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_337)
{
    // 1C27 0062;	
    // (ᰧ) LEPCHA VOWEL SIGN I	[3008 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C27, 0x0062 };
    uint32_t const ces[9] = { 0x3008, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_338)
{
    // 1C28 0021;	
    // (ᰨ) LEPCHA VOWEL SIGN O	[3009 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C28, 0x0021 };
    uint32_t const ces[9] = { 0x3009, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_339)
{
    // 1C28 003F;	
    // (ᰨ) LEPCHA VOWEL SIGN O	[3009 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C28, 0x003F };
    uint32_t const ces[9] = { 0x3009, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_340)
{
    // 1C28 0061;	
    // (ᰨ) LEPCHA VOWEL SIGN O	[3009 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C28, 0x0061 };
    uint32_t const ces[9] = { 0x3009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_341)
{
    // 1C28 0041;	
    // (ᰨ) LEPCHA VOWEL SIGN O	[3009 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C28, 0x0041 };
    uint32_t const ces[9] = { 0x3009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_342)
{
    // 1C28 0062;	
    // (ᰨ) LEPCHA VOWEL SIGN O	[3009 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C28, 0x0062 };
    uint32_t const ces[9] = { 0x3009, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_343)
{
    // 1C29 0021;	
    // (ᰩ) LEPCHA VOWEL SIGN OO	[300A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C29, 0x0021 };
    uint32_t const ces[9] = { 0x300A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_344)
{
    // 1C29 003F;	
    // (ᰩ) LEPCHA VOWEL SIGN OO	[300A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C29, 0x003F };
    uint32_t const ces[9] = { 0x300A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_345)
{
    // 1C29 0061;	
    // (ᰩ) LEPCHA VOWEL SIGN OO	[300A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C29, 0x0061 };
    uint32_t const ces[9] = { 0x300A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_346)
{
    // 1C29 0041;	
    // (ᰩ) LEPCHA VOWEL SIGN OO	[300A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C29, 0x0041 };
    uint32_t const ces[9] = { 0x300A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_347)
{
    // 1C29 0062;	
    // (ᰩ) LEPCHA VOWEL SIGN OO	[300A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C29, 0x0062 };
    uint32_t const ces[9] = { 0x300A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_348)
{
    // 1C2A 0021;	
    // (ᰪ) LEPCHA VOWEL SIGN U	[300B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2A, 0x0021 };
    uint32_t const ces[9] = { 0x300B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_349)
{
    // 1C2A 003F;	
    // (ᰪ) LEPCHA VOWEL SIGN U	[300B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2A, 0x003F };
    uint32_t const ces[9] = { 0x300B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_350)
{
    // 1C2A 0061;	
    // (ᰪ) LEPCHA VOWEL SIGN U	[300B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2A, 0x0061 };
    uint32_t const ces[9] = { 0x300B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_351)
{
    // 1C2A 0041;	
    // (ᰪ) LEPCHA VOWEL SIGN U	[300B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C2A, 0x0041 };
    uint32_t const ces[9] = { 0x300B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_352)
{
    // 1C2A 0062;	
    // (ᰪ) LEPCHA VOWEL SIGN U	[300B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2A, 0x0062 };
    uint32_t const ces[9] = { 0x300B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_353)
{
    // 1C2B 0021;	
    // (ᰫ) LEPCHA VOWEL SIGN UU	[300C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2B, 0x0021 };
    uint32_t const ces[9] = { 0x300C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_354)
{
    // 1C2B 003F;	
    // (ᰫ) LEPCHA VOWEL SIGN UU	[300C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2B, 0x003F };
    uint32_t const ces[9] = { 0x300C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_355)
{
    // 1C2B 0061;	
    // (ᰫ) LEPCHA VOWEL SIGN UU	[300C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2B, 0x0061 };
    uint32_t const ces[9] = { 0x300C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_356)
{
    // 1C2B 0041;	
    // (ᰫ) LEPCHA VOWEL SIGN UU	[300C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C2B, 0x0041 };
    uint32_t const ces[9] = { 0x300C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_357)
{
    // 1C2B 0062;	
    // (ᰫ) LEPCHA VOWEL SIGN UU	[300C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2B, 0x0062 };
    uint32_t const ces[9] = { 0x300C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_358)
{
    // 1C2C 0021;	
    // (ᰬ) LEPCHA VOWEL SIGN E	[300D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2C, 0x0021 };
    uint32_t const ces[9] = { 0x300D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_359)
{
    // 1C2C 003F;	
    // (ᰬ) LEPCHA VOWEL SIGN E	[300D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2C, 0x003F };
    uint32_t const ces[9] = { 0x300D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_360)
{
    // 1C2C 0061;	
    // (ᰬ) LEPCHA VOWEL SIGN E	[300D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2C, 0x0061 };
    uint32_t const ces[9] = { 0x300D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_361)
{
    // 1C2C 0041;	
    // (ᰬ) LEPCHA VOWEL SIGN E	[300D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C2C, 0x0041 };
    uint32_t const ces[9] = { 0x300D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_362)
{
    // 1C2C 0062;	
    // (ᰬ) LEPCHA VOWEL SIGN E	[300D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2C, 0x0062 };
    uint32_t const ces[9] = { 0x300D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_363)
{
    // 1C2D 0021;	
    // (ᰭ) LEPCHA CONSONANT SIGN K	[300E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2D, 0x0021 };
    uint32_t const ces[9] = { 0x300E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_364)
{
    // 1C2D 003F;	
    // (ᰭ) LEPCHA CONSONANT SIGN K	[300E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2D, 0x003F };
    uint32_t const ces[9] = { 0x300E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_365)
{
    // 1C2D 0061;	
    // (ᰭ) LEPCHA CONSONANT SIGN K	[300E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2D, 0x0061 };
    uint32_t const ces[9] = { 0x300E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_366)
{
    // 1C2D 0041;	
    // (ᰭ) LEPCHA CONSONANT SIGN K	[300E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C2D, 0x0041 };
    uint32_t const ces[9] = { 0x300E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_367)
{
    // 1C2D 0062;	
    // (ᰭ) LEPCHA CONSONANT SIGN K	[300E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2D, 0x0062 };
    uint32_t const ces[9] = { 0x300E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_368)
{
    // 1C2E 0021;	
    // (ᰮ) LEPCHA CONSONANT SIGN M	[300F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2E, 0x0021 };
    uint32_t const ces[9] = { 0x300F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_369)
{
    // 1C2E 003F;	
    // (ᰮ) LEPCHA CONSONANT SIGN M	[300F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2E, 0x003F };
    uint32_t const ces[9] = { 0x300F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_370)
{
    // 1C2E 0061;	
    // (ᰮ) LEPCHA CONSONANT SIGN M	[300F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2E, 0x0061 };
    uint32_t const ces[9] = { 0x300F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_371)
{
    // 1C2E 0041;	
    // (ᰮ) LEPCHA CONSONANT SIGN M	[300F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C2E, 0x0041 };
    uint32_t const ces[9] = { 0x300F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_372)
{
    // 1C2E 0062;	
    // (ᰮ) LEPCHA CONSONANT SIGN M	[300F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2E, 0x0062 };
    uint32_t const ces[9] = { 0x300F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_373)
{
    // 1C2F 0021;	
    // (ᰯ) LEPCHA CONSONANT SIGN L	[3010 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2F, 0x0021 };
    uint32_t const ces[9] = { 0x3010, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_374)
{
    // 1C2F 003F;	
    // (ᰯ) LEPCHA CONSONANT SIGN L	[3010 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2F, 0x003F };
    uint32_t const ces[9] = { 0x3010, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_375)
{
    // 1C2F 0061;	
    // (ᰯ) LEPCHA CONSONANT SIGN L	[3010 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2F, 0x0061 };
    uint32_t const ces[9] = { 0x3010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_376)
{
    // 1C2F 0041;	
    // (ᰯ) LEPCHA CONSONANT SIGN L	[3010 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C2F, 0x0041 };
    uint32_t const ces[9] = { 0x3010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_377)
{
    // 1C2F 0062;	
    // (ᰯ) LEPCHA CONSONANT SIGN L	[3010 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C2F, 0x0062 };
    uint32_t const ces[9] = { 0x3010, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_378)
{
    // 1C30 0021;	
    // (ᰰ) LEPCHA CONSONANT SIGN N	[3011 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C30, 0x0021 };
    uint32_t const ces[9] = { 0x3011, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_379)
{
    // 1C30 003F;	
    // (ᰰ) LEPCHA CONSONANT SIGN N	[3011 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C30, 0x003F };
    uint32_t const ces[9] = { 0x3011, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_380)
{
    // 1C30 0061;	
    // (ᰰ) LEPCHA CONSONANT SIGN N	[3011 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C30, 0x0061 };
    uint32_t const ces[9] = { 0x3011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_381)
{
    // 1C30 0041;	
    // (ᰰ) LEPCHA CONSONANT SIGN N	[3011 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C30, 0x0041 };
    uint32_t const ces[9] = { 0x3011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_382)
{
    // 1C30 0062;	
    // (ᰰ) LEPCHA CONSONANT SIGN N	[3011 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C30, 0x0062 };
    uint32_t const ces[9] = { 0x3011, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_383)
{
    // 1C31 0021;	
    // (ᰱ) LEPCHA CONSONANT SIGN P	[3012 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C31, 0x0021 };
    uint32_t const ces[9] = { 0x3012, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_384)
{
    // 1C31 003F;	
    // (ᰱ) LEPCHA CONSONANT SIGN P	[3012 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C31, 0x003F };
    uint32_t const ces[9] = { 0x3012, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_385)
{
    // 1C31 0061;	
    // (ᰱ) LEPCHA CONSONANT SIGN P	[3012 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C31, 0x0061 };
    uint32_t const ces[9] = { 0x3012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_386)
{
    // 1C31 0041;	
    // (ᰱ) LEPCHA CONSONANT SIGN P	[3012 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C31, 0x0041 };
    uint32_t const ces[9] = { 0x3012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_387)
{
    // 1C31 0062;	
    // (ᰱ) LEPCHA CONSONANT SIGN P	[3012 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C31, 0x0062 };
    uint32_t const ces[9] = { 0x3012, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_388)
{
    // 1C32 0021;	
    // (ᰲ) LEPCHA CONSONANT SIGN R	[3013 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C32, 0x0021 };
    uint32_t const ces[9] = { 0x3013, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_389)
{
    // 1C32 003F;	
    // (ᰲ) LEPCHA CONSONANT SIGN R	[3013 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C32, 0x003F };
    uint32_t const ces[9] = { 0x3013, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_390)
{
    // 1C32 0061;	
    // (ᰲ) LEPCHA CONSONANT SIGN R	[3013 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C32, 0x0061 };
    uint32_t const ces[9] = { 0x3013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_391)
{
    // 1C32 0041;	
    // (ᰲ) LEPCHA CONSONANT SIGN R	[3013 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C32, 0x0041 };
    uint32_t const ces[9] = { 0x3013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_392)
{
    // 1C32 0062;	
    // (ᰲ) LEPCHA CONSONANT SIGN R	[3013 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C32, 0x0062 };
    uint32_t const ces[9] = { 0x3013, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_393)
{
    // 1C33 0021;	
    // (ᰳ) LEPCHA CONSONANT SIGN T	[3014 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C33, 0x0021 };
    uint32_t const ces[9] = { 0x3014, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_394)
{
    // 1C33 003F;	
    // (ᰳ) LEPCHA CONSONANT SIGN T	[3014 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C33, 0x003F };
    uint32_t const ces[9] = { 0x3014, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_395)
{
    // 1C33 0061;	
    // (ᰳ) LEPCHA CONSONANT SIGN T	[3014 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C33, 0x0061 };
    uint32_t const ces[9] = { 0x3014, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_396)
{
    // 1C33 0041;	
    // (ᰳ) LEPCHA CONSONANT SIGN T	[3014 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C33, 0x0041 };
    uint32_t const ces[9] = { 0x3014, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_397)
{
    // 1C33 0062;	
    // (ᰳ) LEPCHA CONSONANT SIGN T	[3014 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C33, 0x0062 };
    uint32_t const ces[9] = { 0x3014, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_398)
{
    // 1C34 0021;	
    // (ᰴ) LEPCHA CONSONANT SIGN NYIN-DO	[3015 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C34, 0x0021 };
    uint32_t const ces[9] = { 0x3015, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_399)
{
    // 1C34 003F;	
    // (ᰴ) LEPCHA CONSONANT SIGN NYIN-DO	[3015 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C34, 0x003F };
    uint32_t const ces[9] = { 0x3015, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_400)
{
    // 1C34 0061;	
    // (ᰴ) LEPCHA CONSONANT SIGN NYIN-DO	[3015 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C34, 0x0061 };
    uint32_t const ces[9] = { 0x3015, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_401)
{
    // 1C34 0041;	
    // (ᰴ) LEPCHA CONSONANT SIGN NYIN-DO	[3015 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C34, 0x0041 };
    uint32_t const ces[9] = { 0x3015, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_402)
{
    // 1C34 0062;	
    // (ᰴ) LEPCHA CONSONANT SIGN NYIN-DO	[3015 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C34, 0x0062 };
    uint32_t const ces[9] = { 0x3015, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_403)
{
    // 1C35 0021;	
    // (ᰵ) LEPCHA CONSONANT SIGN KANG	[3016 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C35, 0x0021 };
    uint32_t const ces[9] = { 0x3016, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_404)
{
    // 1C35 003F;	
    // (ᰵ) LEPCHA CONSONANT SIGN KANG	[3016 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C35, 0x003F };
    uint32_t const ces[9] = { 0x3016, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_405)
{
    // 1C35 0061;	
    // (ᰵ) LEPCHA CONSONANT SIGN KANG	[3016 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C35, 0x0061 };
    uint32_t const ces[9] = { 0x3016, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_406)
{
    // 1C35 0041;	
    // (ᰵ) LEPCHA CONSONANT SIGN KANG	[3016 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1C35, 0x0041 };
    uint32_t const ces[9] = { 0x3016, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_407)
{
    // 1C35 0062;	
    // (ᰵ) LEPCHA CONSONANT SIGN KANG	[3016 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C35, 0x0062 };
    uint32_t const ces[9] = { 0x3016, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_408)
{
    // A840 0021;	
    // (ꡀ) PHAGS-PA LETTER KA	[3017 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA840, 0x0021 };
    uint32_t const ces[9] = { 0x3017, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_409)
{
    // A840 003F;	
    // (ꡀ) PHAGS-PA LETTER KA	[3017 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA840, 0x003F };
    uint32_t const ces[9] = { 0x3017, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_410)
{
    // A840 0061;	
    // (ꡀ) PHAGS-PA LETTER KA	[3017 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA840, 0x0061 };
    uint32_t const ces[9] = { 0x3017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_411)
{
    // A840 0041;	
    // (ꡀ) PHAGS-PA LETTER KA	[3017 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA840, 0x0041 };
    uint32_t const ces[9] = { 0x3017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_412)
{
    // A840 0062;	
    // (ꡀ) PHAGS-PA LETTER KA	[3017 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA840, 0x0062 };
    uint32_t const ces[9] = { 0x3017, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_413)
{
    // A841 0021;	
    // (ꡁ) PHAGS-PA LETTER KHA	[3018 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA841, 0x0021 };
    uint32_t const ces[9] = { 0x3018, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_414)
{
    // A841 003F;	
    // (ꡁ) PHAGS-PA LETTER KHA	[3018 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA841, 0x003F };
    uint32_t const ces[9] = { 0x3018, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_415)
{
    // A841 0061;	
    // (ꡁ) PHAGS-PA LETTER KHA	[3018 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA841, 0x0061 };
    uint32_t const ces[9] = { 0x3018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_416)
{
    // A841 0041;	
    // (ꡁ) PHAGS-PA LETTER KHA	[3018 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA841, 0x0041 };
    uint32_t const ces[9] = { 0x3018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_417)
{
    // A841 0062;	
    // (ꡁ) PHAGS-PA LETTER KHA	[3018 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA841, 0x0062 };
    uint32_t const ces[9] = { 0x3018, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_418)
{
    // A842 0021;	
    // (ꡂ) PHAGS-PA LETTER GA	[3019 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA842, 0x0021 };
    uint32_t const ces[9] = { 0x3019, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_419)
{
    // A842 003F;	
    // (ꡂ) PHAGS-PA LETTER GA	[3019 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA842, 0x003F };
    uint32_t const ces[9] = { 0x3019, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_420)
{
    // A842 0061;	
    // (ꡂ) PHAGS-PA LETTER GA	[3019 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA842, 0x0061 };
    uint32_t const ces[9] = { 0x3019, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_421)
{
    // A842 0041;	
    // (ꡂ) PHAGS-PA LETTER GA	[3019 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA842, 0x0041 };
    uint32_t const ces[9] = { 0x3019, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_422)
{
    // A842 0062;	
    // (ꡂ) PHAGS-PA LETTER GA	[3019 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA842, 0x0062 };
    uint32_t const ces[9] = { 0x3019, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_423)
{
    // A843 0021;	
    // (ꡃ) PHAGS-PA LETTER NGA	[301A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA843, 0x0021 };
    uint32_t const ces[9] = { 0x301A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_424)
{
    // A843 003F;	
    // (ꡃ) PHAGS-PA LETTER NGA	[301A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA843, 0x003F };
    uint32_t const ces[9] = { 0x301A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_425)
{
    // A843 0061;	
    // (ꡃ) PHAGS-PA LETTER NGA	[301A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA843, 0x0061 };
    uint32_t const ces[9] = { 0x301A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_426)
{
    // A843 0041;	
    // (ꡃ) PHAGS-PA LETTER NGA	[301A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA843, 0x0041 };
    uint32_t const ces[9] = { 0x301A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_427)
{
    // A843 0062;	
    // (ꡃ) PHAGS-PA LETTER NGA	[301A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA843, 0x0062 };
    uint32_t const ces[9] = { 0x301A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_428)
{
    // A844 0021;	
    // (ꡄ) PHAGS-PA LETTER CA	[301B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA844, 0x0021 };
    uint32_t const ces[9] = { 0x301B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_429)
{
    // A844 003F;	
    // (ꡄ) PHAGS-PA LETTER CA	[301B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA844, 0x003F };
    uint32_t const ces[9] = { 0x301B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_430)
{
    // A844 0061;	
    // (ꡄ) PHAGS-PA LETTER CA	[301B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA844, 0x0061 };
    uint32_t const ces[9] = { 0x301B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_431)
{
    // A844 0041;	
    // (ꡄ) PHAGS-PA LETTER CA	[301B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA844, 0x0041 };
    uint32_t const ces[9] = { 0x301B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_432)
{
    // A844 0062;	
    // (ꡄ) PHAGS-PA LETTER CA	[301B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA844, 0x0062 };
    uint32_t const ces[9] = { 0x301B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_433)
{
    // A845 0021;	
    // (ꡅ) PHAGS-PA LETTER CHA	[301C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA845, 0x0021 };
    uint32_t const ces[9] = { 0x301C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_434)
{
    // A845 003F;	
    // (ꡅ) PHAGS-PA LETTER CHA	[301C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA845, 0x003F };
    uint32_t const ces[9] = { 0x301C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_435)
{
    // A845 0061;	
    // (ꡅ) PHAGS-PA LETTER CHA	[301C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA845, 0x0061 };
    uint32_t const ces[9] = { 0x301C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_436)
{
    // A845 0041;	
    // (ꡅ) PHAGS-PA LETTER CHA	[301C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA845, 0x0041 };
    uint32_t const ces[9] = { 0x301C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_437)
{
    // A845 0062;	
    // (ꡅ) PHAGS-PA LETTER CHA	[301C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA845, 0x0062 };
    uint32_t const ces[9] = { 0x301C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_438)
{
    // A846 0021;	
    // (ꡆ) PHAGS-PA LETTER JA	[301D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA846, 0x0021 };
    uint32_t const ces[9] = { 0x301D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_439)
{
    // A846 003F;	
    // (ꡆ) PHAGS-PA LETTER JA	[301D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA846, 0x003F };
    uint32_t const ces[9] = { 0x301D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_440)
{
    // A846 0061;	
    // (ꡆ) PHAGS-PA LETTER JA	[301D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA846, 0x0061 };
    uint32_t const ces[9] = { 0x301D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_441)
{
    // A846 0041;	
    // (ꡆ) PHAGS-PA LETTER JA	[301D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA846, 0x0041 };
    uint32_t const ces[9] = { 0x301D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_442)
{
    // A846 0062;	
    // (ꡆ) PHAGS-PA LETTER JA	[301D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA846, 0x0062 };
    uint32_t const ces[9] = { 0x301D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_443)
{
    // A847 0021;	
    // (ꡇ) PHAGS-PA LETTER NYA	[301E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA847, 0x0021 };
    uint32_t const ces[9] = { 0x301E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_444)
{
    // A847 003F;	
    // (ꡇ) PHAGS-PA LETTER NYA	[301E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA847, 0x003F };
    uint32_t const ces[9] = { 0x301E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_445)
{
    // A847 0061;	
    // (ꡇ) PHAGS-PA LETTER NYA	[301E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA847, 0x0061 };
    uint32_t const ces[9] = { 0x301E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_446)
{
    // A847 0041;	
    // (ꡇ) PHAGS-PA LETTER NYA	[301E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA847, 0x0041 };
    uint32_t const ces[9] = { 0x301E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_447)
{
    // A847 0062;	
    // (ꡇ) PHAGS-PA LETTER NYA	[301E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA847, 0x0062 };
    uint32_t const ces[9] = { 0x301E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_448)
{
    // A869 0021;	
    // (ꡩ) PHAGS-PA LETTER TTA	[301F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA869, 0x0021 };
    uint32_t const ces[9] = { 0x301F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_449)
{
    // A869 003F;	
    // (ꡩ) PHAGS-PA LETTER TTA	[301F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA869, 0x003F };
    uint32_t const ces[9] = { 0x301F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_450)
{
    // A869 0061;	
    // (ꡩ) PHAGS-PA LETTER TTA	[301F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA869, 0x0061 };
    uint32_t const ces[9] = { 0x301F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_451)
{
    // A869 0041;	
    // (ꡩ) PHAGS-PA LETTER TTA	[301F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA869, 0x0041 };
    uint32_t const ces[9] = { 0x301F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_452)
{
    // A869 0062;	
    // (ꡩ) PHAGS-PA LETTER TTA	[301F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA869, 0x0062 };
    uint32_t const ces[9] = { 0x301F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_453)
{
    // A86A 0021;	
    // (ꡪ) PHAGS-PA LETTER TTHA	[3020 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86A, 0x0021 };
    uint32_t const ces[9] = { 0x3020, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_454)
{
    // A86A 003F;	
    // (ꡪ) PHAGS-PA LETTER TTHA	[3020 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86A, 0x003F };
    uint32_t const ces[9] = { 0x3020, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_455)
{
    // A86A 0061;	
    // (ꡪ) PHAGS-PA LETTER TTHA	[3020 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86A, 0x0061 };
    uint32_t const ces[9] = { 0x3020, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_456)
{
    // A86A 0041;	
    // (ꡪ) PHAGS-PA LETTER TTHA	[3020 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA86A, 0x0041 };
    uint32_t const ces[9] = { 0x3020, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_457)
{
    // A86A 0062;	
    // (ꡪ) PHAGS-PA LETTER TTHA	[3020 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86A, 0x0062 };
    uint32_t const ces[9] = { 0x3020, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_458)
{
    // A86B 0021;	
    // (ꡫ) PHAGS-PA LETTER DDA	[3021 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86B, 0x0021 };
    uint32_t const ces[9] = { 0x3021, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_459)
{
    // A86B 003F;	
    // (ꡫ) PHAGS-PA LETTER DDA	[3021 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86B, 0x003F };
    uint32_t const ces[9] = { 0x3021, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_460)
{
    // A86B 0061;	
    // (ꡫ) PHAGS-PA LETTER DDA	[3021 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86B, 0x0061 };
    uint32_t const ces[9] = { 0x3021, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_461)
{
    // A86B 0041;	
    // (ꡫ) PHAGS-PA LETTER DDA	[3021 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA86B, 0x0041 };
    uint32_t const ces[9] = { 0x3021, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_462)
{
    // A86B 0062;	
    // (ꡫ) PHAGS-PA LETTER DDA	[3021 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86B, 0x0062 };
    uint32_t const ces[9] = { 0x3021, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_463)
{
    // A86C 0021;	
    // (ꡬ) PHAGS-PA LETTER NNA	[3022 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86C, 0x0021 };
    uint32_t const ces[9] = { 0x3022, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_464)
{
    // A86C 003F;	
    // (ꡬ) PHAGS-PA LETTER NNA	[3022 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86C, 0x003F };
    uint32_t const ces[9] = { 0x3022, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_465)
{
    // A86C 0061;	
    // (ꡬ) PHAGS-PA LETTER NNA	[3022 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86C, 0x0061 };
    uint32_t const ces[9] = { 0x3022, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_466)
{
    // A86C 0041;	
    // (ꡬ) PHAGS-PA LETTER NNA	[3022 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA86C, 0x0041 };
    uint32_t const ces[9] = { 0x3022, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_467)
{
    // A86C 0062;	
    // (ꡬ) PHAGS-PA LETTER NNA	[3022 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA86C, 0x0062 };
    uint32_t const ces[9] = { 0x3022, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_468)
{
    // A848 0021;	
    // (ꡈ) PHAGS-PA LETTER TA	[3023 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA848, 0x0021 };
    uint32_t const ces[9] = { 0x3023, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_469)
{
    // A848 003F;	
    // (ꡈ) PHAGS-PA LETTER TA	[3023 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA848, 0x003F };
    uint32_t const ces[9] = { 0x3023, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_470)
{
    // A848 0061;	
    // (ꡈ) PHAGS-PA LETTER TA	[3023 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA848, 0x0061 };
    uint32_t const ces[9] = { 0x3023, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_471)
{
    // A848 0041;	
    // (ꡈ) PHAGS-PA LETTER TA	[3023 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA848, 0x0041 };
    uint32_t const ces[9] = { 0x3023, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_472)
{
    // A848 0062;	
    // (ꡈ) PHAGS-PA LETTER TA	[3023 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA848, 0x0062 };
    uint32_t const ces[9] = { 0x3023, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_473)
{
    // A849 0021;	
    // (ꡉ) PHAGS-PA LETTER THA	[3024 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA849, 0x0021 };
    uint32_t const ces[9] = { 0x3024, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_474)
{
    // A849 003F;	
    // (ꡉ) PHAGS-PA LETTER THA	[3024 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA849, 0x003F };
    uint32_t const ces[9] = { 0x3024, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_475)
{
    // A849 0061;	
    // (ꡉ) PHAGS-PA LETTER THA	[3024 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA849, 0x0061 };
    uint32_t const ces[9] = { 0x3024, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_476)
{
    // A849 0041;	
    // (ꡉ) PHAGS-PA LETTER THA	[3024 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA849, 0x0041 };
    uint32_t const ces[9] = { 0x3024, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_477)
{
    // A849 0062;	
    // (ꡉ) PHAGS-PA LETTER THA	[3024 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA849, 0x0062 };
    uint32_t const ces[9] = { 0x3024, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_478)
{
    // A84A 0021;	
    // (ꡊ) PHAGS-PA LETTER DA	[3025 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84A, 0x0021 };
    uint32_t const ces[9] = { 0x3025, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_479)
{
    // A84A 003F;	
    // (ꡊ) PHAGS-PA LETTER DA	[3025 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84A, 0x003F };
    uint32_t const ces[9] = { 0x3025, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_480)
{
    // A84A 0061;	
    // (ꡊ) PHAGS-PA LETTER DA	[3025 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84A, 0x0061 };
    uint32_t const ces[9] = { 0x3025, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_481)
{
    // A84A 0041;	
    // (ꡊ) PHAGS-PA LETTER DA	[3025 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA84A, 0x0041 };
    uint32_t const ces[9] = { 0x3025, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_482)
{
    // A84A 0062;	
    // (ꡊ) PHAGS-PA LETTER DA	[3025 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84A, 0x0062 };
    uint32_t const ces[9] = { 0x3025, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_483)
{
    // A84B 0021;	
    // (ꡋ) PHAGS-PA LETTER NA	[3026 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84B, 0x0021 };
    uint32_t const ces[9] = { 0x3026, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_484)
{
    // A84B 003F;	
    // (ꡋ) PHAGS-PA LETTER NA	[3026 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84B, 0x003F };
    uint32_t const ces[9] = { 0x3026, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_485)
{
    // A84B 0061;	
    // (ꡋ) PHAGS-PA LETTER NA	[3026 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84B, 0x0061 };
    uint32_t const ces[9] = { 0x3026, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_486)
{
    // A84B 0041;	
    // (ꡋ) PHAGS-PA LETTER NA	[3026 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA84B, 0x0041 };
    uint32_t const ces[9] = { 0x3026, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_487)
{
    // A84B 0062;	
    // (ꡋ) PHAGS-PA LETTER NA	[3026 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84B, 0x0062 };
    uint32_t const ces[9] = { 0x3026, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_488)
{
    // A84C 0021;	
    // (ꡌ) PHAGS-PA LETTER PA	[3027 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84C, 0x0021 };
    uint32_t const ces[9] = { 0x3027, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_489)
{
    // A84C 003F;	
    // (ꡌ) PHAGS-PA LETTER PA	[3027 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84C, 0x003F };
    uint32_t const ces[9] = { 0x3027, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_490)
{
    // A84C 0061;	
    // (ꡌ) PHAGS-PA LETTER PA	[3027 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84C, 0x0061 };
    uint32_t const ces[9] = { 0x3027, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_491)
{
    // A84C 0041;	
    // (ꡌ) PHAGS-PA LETTER PA	[3027 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA84C, 0x0041 };
    uint32_t const ces[9] = { 0x3027, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_492)
{
    // A84C 0062;	
    // (ꡌ) PHAGS-PA LETTER PA	[3027 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84C, 0x0062 };
    uint32_t const ces[9] = { 0x3027, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_493)
{
    // A84D 0021;	
    // (ꡍ) PHAGS-PA LETTER PHA	[3028 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84D, 0x0021 };
    uint32_t const ces[9] = { 0x3028, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_494)
{
    // A84D 003F;	
    // (ꡍ) PHAGS-PA LETTER PHA	[3028 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84D, 0x003F };
    uint32_t const ces[9] = { 0x3028, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_495)
{
    // A84D 0061;	
    // (ꡍ) PHAGS-PA LETTER PHA	[3028 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84D, 0x0061 };
    uint32_t const ces[9] = { 0x3028, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_496)
{
    // A84D 0041;	
    // (ꡍ) PHAGS-PA LETTER PHA	[3028 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA84D, 0x0041 };
    uint32_t const ces[9] = { 0x3028, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_497)
{
    // A84D 0062;	
    // (ꡍ) PHAGS-PA LETTER PHA	[3028 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84D, 0x0062 };
    uint32_t const ces[9] = { 0x3028, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_498)
{
    // A84E 0021;	
    // (ꡎ) PHAGS-PA LETTER BA	[3029 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84E, 0x0021 };
    uint32_t const ces[9] = { 0x3029, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_200_499)
{
    // A84E 003F;	
    // (ꡎ) PHAGS-PA LETTER BA	[3029 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA84E, 0x003F };
    uint32_t const ces[9] = { 0x3029, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

