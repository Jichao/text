// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkc_030_000)
{
    // BA00;BA00;1106 1163;BA00;1106 1163; 
    // (먀; 먀; 먀; 먀; 먀; ) HANGUL SYLLABLE MYA
    {
        std::array<uint32_t, 1> const source = {{ 0xBA00 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA00 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_001)
{
    // BA01;BA01;1106 1163 11A8;BA01;1106 1163 11A8; 
    // (먁; 먁; 먁; 먁; 먁; ) HANGUL SYLLABLE MYAG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA01 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA01 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_002)
{
    // BA02;BA02;1106 1163 11A9;BA02;1106 1163 11A9; 
    // (먂; 먂; 먂; 먂; 먂; ) HANGUL SYLLABLE MYAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA02 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA02 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_003)
{
    // BA03;BA03;1106 1163 11AA;BA03;1106 1163 11AA; 
    // (먃; 먃; 먃; 먃; 먃; ) HANGUL SYLLABLE MYAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA03 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA03 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_004)
{
    // BA04;BA04;1106 1163 11AB;BA04;1106 1163 11AB; 
    // (먄; 먄; 먄; 먄; 먄; ) HANGUL SYLLABLE MYAN
    {
        std::array<uint32_t, 1> const source = {{ 0xBA04 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA04 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_005)
{
    // BA05;BA05;1106 1163 11AC;BA05;1106 1163 11AC; 
    // (먅; 먅; 먅; 먅; 먅; ) HANGUL SYLLABLE MYANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA05 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA05 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_006)
{
    // BA06;BA06;1106 1163 11AD;BA06;1106 1163 11AD; 
    // (먆; 먆; 먆; 먆; 먆; ) HANGUL SYLLABLE MYANH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA06 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA06 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_007)
{
    // BA07;BA07;1106 1163 11AE;BA07;1106 1163 11AE; 
    // (먇; 먇; 먇; 먇; 먇; ) HANGUL SYLLABLE MYAD
    {
        std::array<uint32_t, 1> const source = {{ 0xBA07 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA07 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_008)
{
    // BA08;BA08;1106 1163 11AF;BA08;1106 1163 11AF; 
    // (먈; 먈; 먈; 먈; 먈; ) HANGUL SYLLABLE MYAL
    {
        std::array<uint32_t, 1> const source = {{ 0xBA08 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA08 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_009)
{
    // BA09;BA09;1106 1163 11B0;BA09;1106 1163 11B0; 
    // (먉; 먉; 먉; 먉; 먉; ) HANGUL SYLLABLE MYALG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA09 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA09 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_010)
{
    // BA0A;BA0A;1106 1163 11B1;BA0A;1106 1163 11B1; 
    // (먊; 먊; 먊; 먊; 먊; ) HANGUL SYLLABLE MYALM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA0A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA0A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_011)
{
    // BA0B;BA0B;1106 1163 11B2;BA0B;1106 1163 11B2; 
    // (먋; 먋; 먋; 먋; 먋; ) HANGUL SYLLABLE MYALB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA0B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA0B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_012)
{
    // BA0C;BA0C;1106 1163 11B3;BA0C;1106 1163 11B3; 
    // (먌; 먌; 먌; 먌; 먌; ) HANGUL SYLLABLE MYALS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA0C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA0C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_013)
{
    // BA0D;BA0D;1106 1163 11B4;BA0D;1106 1163 11B4; 
    // (먍; 먍; 먍; 먍; 먍; ) HANGUL SYLLABLE MYALT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA0D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA0D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_014)
{
    // BA0E;BA0E;1106 1163 11B5;BA0E;1106 1163 11B5; 
    // (먎; 먎; 먎; 먎; 먎; ) HANGUL SYLLABLE MYALP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA0E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA0E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_015)
{
    // BA0F;BA0F;1106 1163 11B6;BA0F;1106 1163 11B6; 
    // (먏; 먏; 먏; 먏; 먏; ) HANGUL SYLLABLE MYALH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA0F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA0F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_016)
{
    // BA10;BA10;1106 1163 11B7;BA10;1106 1163 11B7; 
    // (먐; 먐; 먐; 먐; 먐; ) HANGUL SYLLABLE MYAM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA10 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA10 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_017)
{
    // BA11;BA11;1106 1163 11B8;BA11;1106 1163 11B8; 
    // (먑; 먑; 먑; 먑; 먑; ) HANGUL SYLLABLE MYAB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA11 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA11 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_018)
{
    // BA12;BA12;1106 1163 11B9;BA12;1106 1163 11B9; 
    // (먒; 먒; 먒; 먒; 먒; ) HANGUL SYLLABLE MYABS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA12 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA12 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_019)
{
    // BA13;BA13;1106 1163 11BA;BA13;1106 1163 11BA; 
    // (먓; 먓; 먓; 먓; 먓; ) HANGUL SYLLABLE MYAS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA13 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA13 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_020)
{
    // BA14;BA14;1106 1163 11BB;BA14;1106 1163 11BB; 
    // (먔; 먔; 먔; 먔; 먔; ) HANGUL SYLLABLE MYASS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA14 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA14 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_021)
{
    // BA15;BA15;1106 1163 11BC;BA15;1106 1163 11BC; 
    // (먕; 먕; 먕; 먕; 먕; ) HANGUL SYLLABLE MYANG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA15 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA15 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_022)
{
    // BA16;BA16;1106 1163 11BD;BA16;1106 1163 11BD; 
    // (먖; 먖; 먖; 먖; 먖; ) HANGUL SYLLABLE MYAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA16 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA16 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_023)
{
    // BA17;BA17;1106 1163 11BE;BA17;1106 1163 11BE; 
    // (먗; 먗; 먗; 먗; 먗; ) HANGUL SYLLABLE MYAC
    {
        std::array<uint32_t, 1> const source = {{ 0xBA17 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA17 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_024)
{
    // BA18;BA18;1106 1163 11BF;BA18;1106 1163 11BF; 
    // (먘; 먘; 먘; 먘; 먘; ) HANGUL SYLLABLE MYAK
    {
        std::array<uint32_t, 1> const source = {{ 0xBA18 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA18 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_025)
{
    // BA19;BA19;1106 1163 11C0;BA19;1106 1163 11C0; 
    // (먙; 먙; 먙; 먙; 먙; ) HANGUL SYLLABLE MYAT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA19 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA19 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_026)
{
    // BA1A;BA1A;1106 1163 11C1;BA1A;1106 1163 11C1; 
    // (먚; 먚; 먚; 먚; 먚; ) HANGUL SYLLABLE MYAP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA1A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA1A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_027)
{
    // BA1B;BA1B;1106 1163 11C2;BA1B;1106 1163 11C2; 
    // (먛; 먛; 먛; 먛; 먛; ) HANGUL SYLLABLE MYAH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA1B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA1B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_028)
{
    // BA1C;BA1C;1106 1164;BA1C;1106 1164; 
    // (먜; 먜; 먜; 먜; 먜; ) HANGUL SYLLABLE MYAE
    {
        std::array<uint32_t, 1> const source = {{ 0xBA1C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA1C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_029)
{
    // BA1D;BA1D;1106 1164 11A8;BA1D;1106 1164 11A8; 
    // (먝; 먝; 먝; 먝; 먝; ) HANGUL SYLLABLE MYAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA1D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA1D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_030)
{
    // BA1E;BA1E;1106 1164 11A9;BA1E;1106 1164 11A9; 
    // (먞; 먞; 먞; 먞; 먞; ) HANGUL SYLLABLE MYAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA1E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA1E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_031)
{
    // BA1F;BA1F;1106 1164 11AA;BA1F;1106 1164 11AA; 
    // (먟; 먟; 먟; 먟; 먟; ) HANGUL SYLLABLE MYAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA1F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA1F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_032)
{
    // BA20;BA20;1106 1164 11AB;BA20;1106 1164 11AB; 
    // (먠; 먠; 먠; 먠; 먠; ) HANGUL SYLLABLE MYAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xBA20 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA20 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_033)
{
    // BA21;BA21;1106 1164 11AC;BA21;1106 1164 11AC; 
    // (먡; 먡; 먡; 먡; 먡; ) HANGUL SYLLABLE MYAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA21 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA21 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_034)
{
    // BA22;BA22;1106 1164 11AD;BA22;1106 1164 11AD; 
    // (먢; 먢; 먢; 먢; 먢; ) HANGUL SYLLABLE MYAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA22 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA22 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_035)
{
    // BA23;BA23;1106 1164 11AE;BA23;1106 1164 11AE; 
    // (먣; 먣; 먣; 먣; 먣; ) HANGUL SYLLABLE MYAED
    {
        std::array<uint32_t, 1> const source = {{ 0xBA23 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA23 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_036)
{
    // BA24;BA24;1106 1164 11AF;BA24;1106 1164 11AF; 
    // (먤; 먤; 먤; 먤; 먤; ) HANGUL SYLLABLE MYAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xBA24 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA24 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_037)
{
    // BA25;BA25;1106 1164 11B0;BA25;1106 1164 11B0; 
    // (먥; 먥; 먥; 먥; 먥; ) HANGUL SYLLABLE MYAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA25 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA25 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_038)
{
    // BA26;BA26;1106 1164 11B1;BA26;1106 1164 11B1; 
    // (먦; 먦; 먦; 먦; 먦; ) HANGUL SYLLABLE MYAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA26 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA26 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_039)
{
    // BA27;BA27;1106 1164 11B2;BA27;1106 1164 11B2; 
    // (먧; 먧; 먧; 먧; 먧; ) HANGUL SYLLABLE MYAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA27 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA27 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_040)
{
    // BA28;BA28;1106 1164 11B3;BA28;1106 1164 11B3; 
    // (먨; 먨; 먨; 먨; 먨; ) HANGUL SYLLABLE MYAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA28 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA28 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_041)
{
    // BA29;BA29;1106 1164 11B4;BA29;1106 1164 11B4; 
    // (먩; 먩; 먩; 먩; 먩; ) HANGUL SYLLABLE MYAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA29 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA29 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_042)
{
    // BA2A;BA2A;1106 1164 11B5;BA2A;1106 1164 11B5; 
    // (먪; 먪; 먪; 먪; 먪; ) HANGUL SYLLABLE MYAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA2A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA2A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_043)
{
    // BA2B;BA2B;1106 1164 11B6;BA2B;1106 1164 11B6; 
    // (먫; 먫; 먫; 먫; 먫; ) HANGUL SYLLABLE MYAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA2B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA2B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_044)
{
    // BA2C;BA2C;1106 1164 11B7;BA2C;1106 1164 11B7; 
    // (먬; 먬; 먬; 먬; 먬; ) HANGUL SYLLABLE MYAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA2C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA2C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_045)
{
    // BA2D;BA2D;1106 1164 11B8;BA2D;1106 1164 11B8; 
    // (먭; 먭; 먭; 먭; 먭; ) HANGUL SYLLABLE MYAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA2D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA2D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_046)
{
    // BA2E;BA2E;1106 1164 11B9;BA2E;1106 1164 11B9; 
    // (먮; 먮; 먮; 먮; 먮; ) HANGUL SYLLABLE MYAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA2E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA2E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_047)
{
    // BA2F;BA2F;1106 1164 11BA;BA2F;1106 1164 11BA; 
    // (먯; 먯; 먯; 먯; 먯; ) HANGUL SYLLABLE MYAES
    {
        std::array<uint32_t, 1> const source = {{ 0xBA2F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA2F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_048)
{
    // BA30;BA30;1106 1164 11BB;BA30;1106 1164 11BB; 
    // (먰; 먰; 먰; 먰; 먰; ) HANGUL SYLLABLE MYAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA30 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA30 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_049)
{
    // BA31;BA31;1106 1164 11BC;BA31;1106 1164 11BC; 
    // (먱; 먱; 먱; 먱; 먱; ) HANGUL SYLLABLE MYAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA31 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA31 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_050)
{
    // BA32;BA32;1106 1164 11BD;BA32;1106 1164 11BD; 
    // (먲; 먲; 먲; 먲; 먲; ) HANGUL SYLLABLE MYAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA32 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA32 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_051)
{
    // BA33;BA33;1106 1164 11BE;BA33;1106 1164 11BE; 
    // (먳; 먳; 먳; 먳; 먳; ) HANGUL SYLLABLE MYAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xBA33 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA33 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_052)
{
    // BA34;BA34;1106 1164 11BF;BA34;1106 1164 11BF; 
    // (먴; 먴; 먴; 먴; 먴; ) HANGUL SYLLABLE MYAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xBA34 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA34 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_053)
{
    // BA35;BA35;1106 1164 11C0;BA35;1106 1164 11C0; 
    // (먵; 먵; 먵; 먵; 먵; ) HANGUL SYLLABLE MYAET
    {
        std::array<uint32_t, 1> const source = {{ 0xBA35 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA35 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_054)
{
    // BA36;BA36;1106 1164 11C1;BA36;1106 1164 11C1; 
    // (먶; 먶; 먶; 먶; 먶; ) HANGUL SYLLABLE MYAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA36 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA36 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_055)
{
    // BA37;BA37;1106 1164 11C2;BA37;1106 1164 11C2; 
    // (먷; 먷; 먷; 먷; 먷; ) HANGUL SYLLABLE MYAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA37 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA37 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_056)
{
    // BA38;BA38;1106 1165;BA38;1106 1165; 
    // (머; 머; 머; 머; 머; ) HANGUL SYLLABLE MEO
    {
        std::array<uint32_t, 1> const source = {{ 0xBA38 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA38 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_057)
{
    // BA39;BA39;1106 1165 11A8;BA39;1106 1165 11A8; 
    // (먹; 먹; 먹; 먹; 먹; ) HANGUL SYLLABLE MEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA39 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA39 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_058)
{
    // BA3A;BA3A;1106 1165 11A9;BA3A;1106 1165 11A9; 
    // (먺; 먺; 먺; 먺; 먺; ) HANGUL SYLLABLE MEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA3A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA3A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_059)
{
    // BA3B;BA3B;1106 1165 11AA;BA3B;1106 1165 11AA; 
    // (먻; 먻; 먻; 먻; 먻; ) HANGUL SYLLABLE MEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA3B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA3B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_060)
{
    // BA3C;BA3C;1106 1165 11AB;BA3C;1106 1165 11AB; 
    // (먼; 먼; 먼; 먼; 먼; ) HANGUL SYLLABLE MEON
    {
        std::array<uint32_t, 1> const source = {{ 0xBA3C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA3C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_061)
{
    // BA3D;BA3D;1106 1165 11AC;BA3D;1106 1165 11AC; 
    // (먽; 먽; 먽; 먽; 먽; ) HANGUL SYLLABLE MEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA3D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA3D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_062)
{
    // BA3E;BA3E;1106 1165 11AD;BA3E;1106 1165 11AD; 
    // (먾; 먾; 먾; 먾; 먾; ) HANGUL SYLLABLE MEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA3E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA3E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_063)
{
    // BA3F;BA3F;1106 1165 11AE;BA3F;1106 1165 11AE; 
    // (먿; 먿; 먿; 먿; 먿; ) HANGUL SYLLABLE MEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xBA3F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA3F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_064)
{
    // BA40;BA40;1106 1165 11AF;BA40;1106 1165 11AF; 
    // (멀; 멀; 멀; 멀; 멀; ) HANGUL SYLLABLE MEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xBA40 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA40 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_065)
{
    // BA41;BA41;1106 1165 11B0;BA41;1106 1165 11B0; 
    // (멁; 멁; 멁; 멁; 멁; ) HANGUL SYLLABLE MEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA41 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA41 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_066)
{
    // BA42;BA42;1106 1165 11B1;BA42;1106 1165 11B1; 
    // (멂; 멂; 멂; 멂; 멂; ) HANGUL SYLLABLE MEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA42 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA42 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_067)
{
    // BA43;BA43;1106 1165 11B2;BA43;1106 1165 11B2; 
    // (멃; 멃; 멃; 멃; 멃; ) HANGUL SYLLABLE MEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA43 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA43 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_068)
{
    // BA44;BA44;1106 1165 11B3;BA44;1106 1165 11B3; 
    // (멄; 멄; 멄; 멄; 멄; ) HANGUL SYLLABLE MEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA44 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA44 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_069)
{
    // BA45;BA45;1106 1165 11B4;BA45;1106 1165 11B4; 
    // (멅; 멅; 멅; 멅; 멅; ) HANGUL SYLLABLE MEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA45 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA45 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_070)
{
    // BA46;BA46;1106 1165 11B5;BA46;1106 1165 11B5; 
    // (멆; 멆; 멆; 멆; 멆; ) HANGUL SYLLABLE MEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA46 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA46 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_071)
{
    // BA47;BA47;1106 1165 11B6;BA47;1106 1165 11B6; 
    // (멇; 멇; 멇; 멇; 멇; ) HANGUL SYLLABLE MEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA47 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA47 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_072)
{
    // BA48;BA48;1106 1165 11B7;BA48;1106 1165 11B7; 
    // (멈; 멈; 멈; 멈; 멈; ) HANGUL SYLLABLE MEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA48 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA48 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_073)
{
    // BA49;BA49;1106 1165 11B8;BA49;1106 1165 11B8; 
    // (멉; 멉; 멉; 멉; 멉; ) HANGUL SYLLABLE MEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA49 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA49 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_074)
{
    // BA4A;BA4A;1106 1165 11B9;BA4A;1106 1165 11B9; 
    // (멊; 멊; 멊; 멊; 멊; ) HANGUL SYLLABLE MEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA4A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA4A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_075)
{
    // BA4B;BA4B;1106 1165 11BA;BA4B;1106 1165 11BA; 
    // (멋; 멋; 멋; 멋; 멋; ) HANGUL SYLLABLE MEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA4B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA4B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_076)
{
    // BA4C;BA4C;1106 1165 11BB;BA4C;1106 1165 11BB; 
    // (멌; 멌; 멌; 멌; 멌; ) HANGUL SYLLABLE MEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA4C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA4C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_077)
{
    // BA4D;BA4D;1106 1165 11BC;BA4D;1106 1165 11BC; 
    // (멍; 멍; 멍; 멍; 멍; ) HANGUL SYLLABLE MEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA4D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA4D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_078)
{
    // BA4E;BA4E;1106 1165 11BD;BA4E;1106 1165 11BD; 
    // (멎; 멎; 멎; 멎; 멎; ) HANGUL SYLLABLE MEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA4E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA4E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_079)
{
    // BA4F;BA4F;1106 1165 11BE;BA4F;1106 1165 11BE; 
    // (멏; 멏; 멏; 멏; 멏; ) HANGUL SYLLABLE MEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xBA4F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA4F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_080)
{
    // BA50;BA50;1106 1165 11BF;BA50;1106 1165 11BF; 
    // (멐; 멐; 멐; 멐; 멐; ) HANGUL SYLLABLE MEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xBA50 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA50 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_081)
{
    // BA51;BA51;1106 1165 11C0;BA51;1106 1165 11C0; 
    // (멑; 멑; 멑; 멑; 멑; ) HANGUL SYLLABLE MEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA51 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA51 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_082)
{
    // BA52;BA52;1106 1165 11C1;BA52;1106 1165 11C1; 
    // (멒; 멒; 멒; 멒; 멒; ) HANGUL SYLLABLE MEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA52 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA52 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_083)
{
    // BA53;BA53;1106 1165 11C2;BA53;1106 1165 11C2; 
    // (멓; 멓; 멓; 멓; 멓; ) HANGUL SYLLABLE MEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA53 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA53 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_084)
{
    // BA54;BA54;1106 1166;BA54;1106 1166; 
    // (메; 메; 메; 메; 메; ) HANGUL SYLLABLE ME
    {
        std::array<uint32_t, 1> const source = {{ 0xBA54 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA54 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_085)
{
    // BA55;BA55;1106 1166 11A8;BA55;1106 1166 11A8; 
    // (멕; 멕; 멕; 멕; 멕; ) HANGUL SYLLABLE MEG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA55 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA55 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_086)
{
    // BA56;BA56;1106 1166 11A9;BA56;1106 1166 11A9; 
    // (멖; 멖; 멖; 멖; 멖; ) HANGUL SYLLABLE MEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA56 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA56 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_087)
{
    // BA57;BA57;1106 1166 11AA;BA57;1106 1166 11AA; 
    // (멗; 멗; 멗; 멗; 멗; ) HANGUL SYLLABLE MEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA57 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA57 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_088)
{
    // BA58;BA58;1106 1166 11AB;BA58;1106 1166 11AB; 
    // (멘; 멘; 멘; 멘; 멘; ) HANGUL SYLLABLE MEN
    {
        std::array<uint32_t, 1> const source = {{ 0xBA58 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA58 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_089)
{
    // BA59;BA59;1106 1166 11AC;BA59;1106 1166 11AC; 
    // (멙; 멙; 멙; 멙; 멙; ) HANGUL SYLLABLE MENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA59 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA59 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_090)
{
    // BA5A;BA5A;1106 1166 11AD;BA5A;1106 1166 11AD; 
    // (멚; 멚; 멚; 멚; 멚; ) HANGUL SYLLABLE MENH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA5A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA5A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_091)
{
    // BA5B;BA5B;1106 1166 11AE;BA5B;1106 1166 11AE; 
    // (멛; 멛; 멛; 멛; 멛; ) HANGUL SYLLABLE MED
    {
        std::array<uint32_t, 1> const source = {{ 0xBA5B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA5B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_092)
{
    // BA5C;BA5C;1106 1166 11AF;BA5C;1106 1166 11AF; 
    // (멜; 멜; 멜; 멜; 멜; ) HANGUL SYLLABLE MEL
    {
        std::array<uint32_t, 1> const source = {{ 0xBA5C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA5C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_093)
{
    // BA5D;BA5D;1106 1166 11B0;BA5D;1106 1166 11B0; 
    // (멝; 멝; 멝; 멝; 멝; ) HANGUL SYLLABLE MELG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA5D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA5D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_094)
{
    // BA5E;BA5E;1106 1166 11B1;BA5E;1106 1166 11B1; 
    // (멞; 멞; 멞; 멞; 멞; ) HANGUL SYLLABLE MELM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA5E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA5E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_095)
{
    // BA5F;BA5F;1106 1166 11B2;BA5F;1106 1166 11B2; 
    // (멟; 멟; 멟; 멟; 멟; ) HANGUL SYLLABLE MELB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA5F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA5F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_096)
{
    // BA60;BA60;1106 1166 11B3;BA60;1106 1166 11B3; 
    // (멠; 멠; 멠; 멠; 멠; ) HANGUL SYLLABLE MELS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA60 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA60 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_097)
{
    // BA61;BA61;1106 1166 11B4;BA61;1106 1166 11B4; 
    // (멡; 멡; 멡; 멡; 멡; ) HANGUL SYLLABLE MELT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA61 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA61 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_098)
{
    // BA62;BA62;1106 1166 11B5;BA62;1106 1166 11B5; 
    // (멢; 멢; 멢; 멢; 멢; ) HANGUL SYLLABLE MELP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA62 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA62 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_099)
{
    // BA63;BA63;1106 1166 11B6;BA63;1106 1166 11B6; 
    // (멣; 멣; 멣; 멣; 멣; ) HANGUL SYLLABLE MELH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA63 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA63 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_100)
{
    // BA64;BA64;1106 1166 11B7;BA64;1106 1166 11B7; 
    // (멤; 멤; 멤; 멤; 멤; ) HANGUL SYLLABLE MEM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA64 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA64 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_101)
{
    // BA65;BA65;1106 1166 11B8;BA65;1106 1166 11B8; 
    // (멥; 멥; 멥; 멥; 멥; ) HANGUL SYLLABLE MEB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA65 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA65 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_102)
{
    // BA66;BA66;1106 1166 11B9;BA66;1106 1166 11B9; 
    // (멦; 멦; 멦; 멦; 멦; ) HANGUL SYLLABLE MEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA66 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA66 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_103)
{
    // BA67;BA67;1106 1166 11BA;BA67;1106 1166 11BA; 
    // (멧; 멧; 멧; 멧; 멧; ) HANGUL SYLLABLE MES
    {
        std::array<uint32_t, 1> const source = {{ 0xBA67 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA67 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_104)
{
    // BA68;BA68;1106 1166 11BB;BA68;1106 1166 11BB; 
    // (멨; 멨; 멨; 멨; 멨; ) HANGUL SYLLABLE MESS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA68 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA68 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_105)
{
    // BA69;BA69;1106 1166 11BC;BA69;1106 1166 11BC; 
    // (멩; 멩; 멩; 멩; 멩; ) HANGUL SYLLABLE MENG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA69 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA69 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_106)
{
    // BA6A;BA6A;1106 1166 11BD;BA6A;1106 1166 11BD; 
    // (멪; 멪; 멪; 멪; 멪; ) HANGUL SYLLABLE MEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA6A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA6A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_107)
{
    // BA6B;BA6B;1106 1166 11BE;BA6B;1106 1166 11BE; 
    // (멫; 멫; 멫; 멫; 멫; ) HANGUL SYLLABLE MEC
    {
        std::array<uint32_t, 1> const source = {{ 0xBA6B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA6B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_108)
{
    // BA6C;BA6C;1106 1166 11BF;BA6C;1106 1166 11BF; 
    // (멬; 멬; 멬; 멬; 멬; ) HANGUL SYLLABLE MEK
    {
        std::array<uint32_t, 1> const source = {{ 0xBA6C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA6C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_109)
{
    // BA6D;BA6D;1106 1166 11C0;BA6D;1106 1166 11C0; 
    // (멭; 멭; 멭; 멭; 멭; ) HANGUL SYLLABLE MET
    {
        std::array<uint32_t, 1> const source = {{ 0xBA6D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA6D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_110)
{
    // BA6E;BA6E;1106 1166 11C1;BA6E;1106 1166 11C1; 
    // (멮; 멮; 멮; 멮; 멮; ) HANGUL SYLLABLE MEP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA6E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA6E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_111)
{
    // BA6F;BA6F;1106 1166 11C2;BA6F;1106 1166 11C2; 
    // (멯; 멯; 멯; 멯; 멯; ) HANGUL SYLLABLE MEH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA6F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA6F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_112)
{
    // BA70;BA70;1106 1167;BA70;1106 1167; 
    // (며; 며; 며; 며; 며; ) HANGUL SYLLABLE MYEO
    {
        std::array<uint32_t, 1> const source = {{ 0xBA70 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA70 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_113)
{
    // BA71;BA71;1106 1167 11A8;BA71;1106 1167 11A8; 
    // (멱; 멱; 멱; 멱; 멱; ) HANGUL SYLLABLE MYEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA71 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA71 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_114)
{
    // BA72;BA72;1106 1167 11A9;BA72;1106 1167 11A9; 
    // (멲; 멲; 멲; 멲; 멲; ) HANGUL SYLLABLE MYEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA72 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA72 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_115)
{
    // BA73;BA73;1106 1167 11AA;BA73;1106 1167 11AA; 
    // (멳; 멳; 멳; 멳; 멳; ) HANGUL SYLLABLE MYEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA73 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA73 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_116)
{
    // BA74;BA74;1106 1167 11AB;BA74;1106 1167 11AB; 
    // (면; 면; 면; 면; 면; ) HANGUL SYLLABLE MYEON
    {
        std::array<uint32_t, 1> const source = {{ 0xBA74 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA74 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_117)
{
    // BA75;BA75;1106 1167 11AC;BA75;1106 1167 11AC; 
    // (멵; 멵; 멵; 멵; 멵; ) HANGUL SYLLABLE MYEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA75 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA75 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_118)
{
    // BA76;BA76;1106 1167 11AD;BA76;1106 1167 11AD; 
    // (멶; 멶; 멶; 멶; 멶; ) HANGUL SYLLABLE MYEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA76 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA76 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_119)
{
    // BA77;BA77;1106 1167 11AE;BA77;1106 1167 11AE; 
    // (멷; 멷; 멷; 멷; 멷; ) HANGUL SYLLABLE MYEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xBA77 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA77 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_120)
{
    // BA78;BA78;1106 1167 11AF;BA78;1106 1167 11AF; 
    // (멸; 멸; 멸; 멸; 멸; ) HANGUL SYLLABLE MYEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xBA78 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA78 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_121)
{
    // BA79;BA79;1106 1167 11B0;BA79;1106 1167 11B0; 
    // (멹; 멹; 멹; 멹; 멹; ) HANGUL SYLLABLE MYEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA79 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA79 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_122)
{
    // BA7A;BA7A;1106 1167 11B1;BA7A;1106 1167 11B1; 
    // (멺; 멺; 멺; 멺; 멺; ) HANGUL SYLLABLE MYEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA7A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA7A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_123)
{
    // BA7B;BA7B;1106 1167 11B2;BA7B;1106 1167 11B2; 
    // (멻; 멻; 멻; 멻; 멻; ) HANGUL SYLLABLE MYEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA7B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA7B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_124)
{
    // BA7C;BA7C;1106 1167 11B3;BA7C;1106 1167 11B3; 
    // (멼; 멼; 멼; 멼; 멼; ) HANGUL SYLLABLE MYEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA7C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA7C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_125)
{
    // BA7D;BA7D;1106 1167 11B4;BA7D;1106 1167 11B4; 
    // (멽; 멽; 멽; 멽; 멽; ) HANGUL SYLLABLE MYEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA7D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA7D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_126)
{
    // BA7E;BA7E;1106 1167 11B5;BA7E;1106 1167 11B5; 
    // (멾; 멾; 멾; 멾; 멾; ) HANGUL SYLLABLE MYEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA7E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA7E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_127)
{
    // BA7F;BA7F;1106 1167 11B6;BA7F;1106 1167 11B6; 
    // (멿; 멿; 멿; 멿; 멿; ) HANGUL SYLLABLE MYEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA7F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA7F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_128)
{
    // BA80;BA80;1106 1167 11B7;BA80;1106 1167 11B7; 
    // (몀; 몀; 몀; 몀; 몀; ) HANGUL SYLLABLE MYEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA80 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA80 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_129)
{
    // BA81;BA81;1106 1167 11B8;BA81;1106 1167 11B8; 
    // (몁; 몁; 몁; 몁; 몁; ) HANGUL SYLLABLE MYEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA81 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA81 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_130)
{
    // BA82;BA82;1106 1167 11B9;BA82;1106 1167 11B9; 
    // (몂; 몂; 몂; 몂; 몂; ) HANGUL SYLLABLE MYEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA82 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA82 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_131)
{
    // BA83;BA83;1106 1167 11BA;BA83;1106 1167 11BA; 
    // (몃; 몃; 몃; 몃; 몃; ) HANGUL SYLLABLE MYEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA83 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA83 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_132)
{
    // BA84;BA84;1106 1167 11BB;BA84;1106 1167 11BB; 
    // (몄; 몄; 몄; 몄; 몄; ) HANGUL SYLLABLE MYEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA84 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA84 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_133)
{
    // BA85;BA85;1106 1167 11BC;BA85;1106 1167 11BC; 
    // (명; 명; 명; 명; 명; ) HANGUL SYLLABLE MYEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA85 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA85 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_134)
{
    // BA86;BA86;1106 1167 11BD;BA86;1106 1167 11BD; 
    // (몆; 몆; 몆; 몆; 몆; ) HANGUL SYLLABLE MYEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA86 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA86 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_135)
{
    // BA87;BA87;1106 1167 11BE;BA87;1106 1167 11BE; 
    // (몇; 몇; 몇; 몇; 몇; ) HANGUL SYLLABLE MYEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xBA87 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA87 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_136)
{
    // BA88;BA88;1106 1167 11BF;BA88;1106 1167 11BF; 
    // (몈; 몈; 몈; 몈; 몈; ) HANGUL SYLLABLE MYEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xBA88 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA88 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_137)
{
    // BA89;BA89;1106 1167 11C0;BA89;1106 1167 11C0; 
    // (몉; 몉; 몉; 몉; 몉; ) HANGUL SYLLABLE MYEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA89 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA89 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_138)
{
    // BA8A;BA8A;1106 1167 11C1;BA8A;1106 1167 11C1; 
    // (몊; 몊; 몊; 몊; 몊; ) HANGUL SYLLABLE MYEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA8A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA8A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_139)
{
    // BA8B;BA8B;1106 1167 11C2;BA8B;1106 1167 11C2; 
    // (몋; 몋; 몋; 몋; 몋; ) HANGUL SYLLABLE MYEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA8B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA8B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_140)
{
    // BA8C;BA8C;1106 1168;BA8C;1106 1168; 
    // (몌; 몌; 몌; 몌; 몌; ) HANGUL SYLLABLE MYE
    {
        std::array<uint32_t, 1> const source = {{ 0xBA8C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA8C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_141)
{
    // BA8D;BA8D;1106 1168 11A8;BA8D;1106 1168 11A8; 
    // (몍; 몍; 몍; 몍; 몍; ) HANGUL SYLLABLE MYEG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA8D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA8D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_142)
{
    // BA8E;BA8E;1106 1168 11A9;BA8E;1106 1168 11A9; 
    // (몎; 몎; 몎; 몎; 몎; ) HANGUL SYLLABLE MYEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA8E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA8E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_143)
{
    // BA8F;BA8F;1106 1168 11AA;BA8F;1106 1168 11AA; 
    // (몏; 몏; 몏; 몏; 몏; ) HANGUL SYLLABLE MYEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA8F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA8F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_144)
{
    // BA90;BA90;1106 1168 11AB;BA90;1106 1168 11AB; 
    // (몐; 몐; 몐; 몐; 몐; ) HANGUL SYLLABLE MYEN
    {
        std::array<uint32_t, 1> const source = {{ 0xBA90 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA90 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_145)
{
    // BA91;BA91;1106 1168 11AC;BA91;1106 1168 11AC; 
    // (몑; 몑; 몑; 몑; 몑; ) HANGUL SYLLABLE MYENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBA91 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA91 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_146)
{
    // BA92;BA92;1106 1168 11AD;BA92;1106 1168 11AD; 
    // (몒; 몒; 몒; 몒; 몒; ) HANGUL SYLLABLE MYENH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA92 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA92 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_147)
{
    // BA93;BA93;1106 1168 11AE;BA93;1106 1168 11AE; 
    // (몓; 몓; 몓; 몓; 몓; ) HANGUL SYLLABLE MYED
    {
        std::array<uint32_t, 1> const source = {{ 0xBA93 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA93 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_148)
{
    // BA94;BA94;1106 1168 11AF;BA94;1106 1168 11AF; 
    // (몔; 몔; 몔; 몔; 몔; ) HANGUL SYLLABLE MYEL
    {
        std::array<uint32_t, 1> const source = {{ 0xBA94 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA94 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_149)
{
    // BA95;BA95;1106 1168 11B0;BA95;1106 1168 11B0; 
    // (몕; 몕; 몕; 몕; 몕; ) HANGUL SYLLABLE MYELG
    {
        std::array<uint32_t, 1> const source = {{ 0xBA95 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA95 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_150)
{
    // BA96;BA96;1106 1168 11B1;BA96;1106 1168 11B1; 
    // (몖; 몖; 몖; 몖; 몖; ) HANGUL SYLLABLE MYELM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA96 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA96 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_151)
{
    // BA97;BA97;1106 1168 11B2;BA97;1106 1168 11B2; 
    // (몗; 몗; 몗; 몗; 몗; ) HANGUL SYLLABLE MYELB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA97 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA97 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_152)
{
    // BA98;BA98;1106 1168 11B3;BA98;1106 1168 11B3; 
    // (몘; 몘; 몘; 몘; 몘; ) HANGUL SYLLABLE MYELS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA98 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA98 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_153)
{
    // BA99;BA99;1106 1168 11B4;BA99;1106 1168 11B4; 
    // (몙; 몙; 몙; 몙; 몙; ) HANGUL SYLLABLE MYELT
    {
        std::array<uint32_t, 1> const source = {{ 0xBA99 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA99 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_154)
{
    // BA9A;BA9A;1106 1168 11B5;BA9A;1106 1168 11B5; 
    // (몚; 몚; 몚; 몚; 몚; ) HANGUL SYLLABLE MYELP
    {
        std::array<uint32_t, 1> const source = {{ 0xBA9A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA9A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_155)
{
    // BA9B;BA9B;1106 1168 11B6;BA9B;1106 1168 11B6; 
    // (몛; 몛; 몛; 몛; 몛; ) HANGUL SYLLABLE MYELH
    {
        std::array<uint32_t, 1> const source = {{ 0xBA9B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA9B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_156)
{
    // BA9C;BA9C;1106 1168 11B7;BA9C;1106 1168 11B7; 
    // (몜; 몜; 몜; 몜; 몜; ) HANGUL SYLLABLE MYEM
    {
        std::array<uint32_t, 1> const source = {{ 0xBA9C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA9C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_157)
{
    // BA9D;BA9D;1106 1168 11B8;BA9D;1106 1168 11B8; 
    // (몝; 몝; 몝; 몝; 몝; ) HANGUL SYLLABLE MYEB
    {
        std::array<uint32_t, 1> const source = {{ 0xBA9D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA9D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_158)
{
    // BA9E;BA9E;1106 1168 11B9;BA9E;1106 1168 11B9; 
    // (몞; 몞; 몞; 몞; 몞; ) HANGUL SYLLABLE MYEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBA9E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA9E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_159)
{
    // BA9F;BA9F;1106 1168 11BA;BA9F;1106 1168 11BA; 
    // (몟; 몟; 몟; 몟; 몟; ) HANGUL SYLLABLE MYES
    {
        std::array<uint32_t, 1> const source = {{ 0xBA9F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBA9F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_160)
{
    // BAA0;BAA0;1106 1168 11BB;BAA0;1106 1168 11BB; 
    // (몠; 몠; 몠; 몠; 몠; ) HANGUL SYLLABLE MYESS
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_161)
{
    // BAA1;BAA1;1106 1168 11BC;BAA1;1106 1168 11BC; 
    // (몡; 몡; 몡; 몡; 몡; ) HANGUL SYLLABLE MYENG
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_162)
{
    // BAA2;BAA2;1106 1168 11BD;BAA2;1106 1168 11BD; 
    // (몢; 몢; 몢; 몢; 몢; ) HANGUL SYLLABLE MYEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_163)
{
    // BAA3;BAA3;1106 1168 11BE;BAA3;1106 1168 11BE; 
    // (몣; 몣; 몣; 몣; 몣; ) HANGUL SYLLABLE MYEC
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_164)
{
    // BAA4;BAA4;1106 1168 11BF;BAA4;1106 1168 11BF; 
    // (몤; 몤; 몤; 몤; 몤; ) HANGUL SYLLABLE MYEK
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_165)
{
    // BAA5;BAA5;1106 1168 11C0;BAA5;1106 1168 11C0; 
    // (몥; 몥; 몥; 몥; 몥; ) HANGUL SYLLABLE MYET
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_166)
{
    // BAA6;BAA6;1106 1168 11C1;BAA6;1106 1168 11C1; 
    // (몦; 몦; 몦; 몦; 몦; ) HANGUL SYLLABLE MYEP
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_167)
{
    // BAA7;BAA7;1106 1168 11C2;BAA7;1106 1168 11C2; 
    // (몧; 몧; 몧; 몧; 몧; ) HANGUL SYLLABLE MYEH
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_168)
{
    // BAA8;BAA8;1106 1169;BAA8;1106 1169; 
    // (모; 모; 모; 모; 모; ) HANGUL SYLLABLE MO
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_169)
{
    // BAA9;BAA9;1106 1169 11A8;BAA9;1106 1169 11A8; 
    // (목; 목; 목; 목; 목; ) HANGUL SYLLABLE MOG
    {
        std::array<uint32_t, 1> const source = {{ 0xBAA9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAA9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_170)
{
    // BAAA;BAAA;1106 1169 11A9;BAAA;1106 1169 11A9; 
    // (몪; 몪; 몪; 몪; 몪; ) HANGUL SYLLABLE MOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBAAA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAAA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_171)
{
    // BAAB;BAAB;1106 1169 11AA;BAAB;1106 1169 11AA; 
    // (몫; 몫; 몫; 몫; 몫; ) HANGUL SYLLABLE MOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBAAB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAAB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_172)
{
    // BAAC;BAAC;1106 1169 11AB;BAAC;1106 1169 11AB; 
    // (몬; 몬; 몬; 몬; 몬; ) HANGUL SYLLABLE MON
    {
        std::array<uint32_t, 1> const source = {{ 0xBAAC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAAC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_173)
{
    // BAAD;BAAD;1106 1169 11AC;BAAD;1106 1169 11AC; 
    // (몭; 몭; 몭; 몭; 몭; ) HANGUL SYLLABLE MONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBAAD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAAD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_174)
{
    // BAAE;BAAE;1106 1169 11AD;BAAE;1106 1169 11AD; 
    // (몮; 몮; 몮; 몮; 몮; ) HANGUL SYLLABLE MONH
    {
        std::array<uint32_t, 1> const source = {{ 0xBAAE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAAE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_175)
{
    // BAAF;BAAF;1106 1169 11AE;BAAF;1106 1169 11AE; 
    // (몯; 몯; 몯; 몯; 몯; ) HANGUL SYLLABLE MOD
    {
        std::array<uint32_t, 1> const source = {{ 0xBAAF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAAF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_176)
{
    // BAB0;BAB0;1106 1169 11AF;BAB0;1106 1169 11AF; 
    // (몰; 몰; 몰; 몰; 몰; ) HANGUL SYLLABLE MOL
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_177)
{
    // BAB1;BAB1;1106 1169 11B0;BAB1;1106 1169 11B0; 
    // (몱; 몱; 몱; 몱; 몱; ) HANGUL SYLLABLE MOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_178)
{
    // BAB2;BAB2;1106 1169 11B1;BAB2;1106 1169 11B1; 
    // (몲; 몲; 몲; 몲; 몲; ) HANGUL SYLLABLE MOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_179)
{
    // BAB3;BAB3;1106 1169 11B2;BAB3;1106 1169 11B2; 
    // (몳; 몳; 몳; 몳; 몳; ) HANGUL SYLLABLE MOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_180)
{
    // BAB4;BAB4;1106 1169 11B3;BAB4;1106 1169 11B3; 
    // (몴; 몴; 몴; 몴; 몴; ) HANGUL SYLLABLE MOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_181)
{
    // BAB5;BAB5;1106 1169 11B4;BAB5;1106 1169 11B4; 
    // (몵; 몵; 몵; 몵; 몵; ) HANGUL SYLLABLE MOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_182)
{
    // BAB6;BAB6;1106 1169 11B5;BAB6;1106 1169 11B5; 
    // (몶; 몶; 몶; 몶; 몶; ) HANGUL SYLLABLE MOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_183)
{
    // BAB7;BAB7;1106 1169 11B6;BAB7;1106 1169 11B6; 
    // (몷; 몷; 몷; 몷; 몷; ) HANGUL SYLLABLE MOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_184)
{
    // BAB8;BAB8;1106 1169 11B7;BAB8;1106 1169 11B7; 
    // (몸; 몸; 몸; 몸; 몸; ) HANGUL SYLLABLE MOM
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_185)
{
    // BAB9;BAB9;1106 1169 11B8;BAB9;1106 1169 11B8; 
    // (몹; 몹; 몹; 몹; 몹; ) HANGUL SYLLABLE MOB
    {
        std::array<uint32_t, 1> const source = {{ 0xBAB9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAB9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_186)
{
    // BABA;BABA;1106 1169 11B9;BABA;1106 1169 11B9; 
    // (몺; 몺; 몺; 몺; 몺; ) HANGUL SYLLABLE MOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xBABA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBABA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_187)
{
    // BABB;BABB;1106 1169 11BA;BABB;1106 1169 11BA; 
    // (못; 못; 못; 못; 못; ) HANGUL SYLLABLE MOS
    {
        std::array<uint32_t, 1> const source = {{ 0xBABB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBABB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_188)
{
    // BABC;BABC;1106 1169 11BB;BABC;1106 1169 11BB; 
    // (몼; 몼; 몼; 몼; 몼; ) HANGUL SYLLABLE MOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xBABC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBABC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_189)
{
    // BABD;BABD;1106 1169 11BC;BABD;1106 1169 11BC; 
    // (몽; 몽; 몽; 몽; 몽; ) HANGUL SYLLABLE MONG
    {
        std::array<uint32_t, 1> const source = {{ 0xBABD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBABD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_190)
{
    // BABE;BABE;1106 1169 11BD;BABE;1106 1169 11BD; 
    // (몾; 몾; 몾; 몾; 몾; ) HANGUL SYLLABLE MOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xBABE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBABE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_191)
{
    // BABF;BABF;1106 1169 11BE;BABF;1106 1169 11BE; 
    // (몿; 몿; 몿; 몿; 몿; ) HANGUL SYLLABLE MOC
    {
        std::array<uint32_t, 1> const source = {{ 0xBABF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBABF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_192)
{
    // BAC0;BAC0;1106 1169 11BF;BAC0;1106 1169 11BF; 
    // (뫀; 뫀; 뫀; 뫀; 뫀; ) HANGUL SYLLABLE MOK
    {
        std::array<uint32_t, 1> const source = {{ 0xBAC0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAC0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_193)
{
    // BAC1;BAC1;1106 1169 11C0;BAC1;1106 1169 11C0; 
    // (뫁; 뫁; 뫁; 뫁; 뫁; ) HANGUL SYLLABLE MOT
    {
        std::array<uint32_t, 1> const source = {{ 0xBAC1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAC1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_194)
{
    // BAC2;BAC2;1106 1169 11C1;BAC2;1106 1169 11C1; 
    // (뫂; 뫂; 뫂; 뫂; 뫂; ) HANGUL SYLLABLE MOP
    {
        std::array<uint32_t, 1> const source = {{ 0xBAC2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAC2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_195)
{
    // BAC3;BAC3;1106 1169 11C2;BAC3;1106 1169 11C2; 
    // (뫃; 뫃; 뫃; 뫃; 뫃; ) HANGUL SYLLABLE MOH
    {
        std::array<uint32_t, 1> const source = {{ 0xBAC3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAC3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_196)
{
    // BAC4;BAC4;1106 116A;BAC4;1106 116A; 
    // (뫄; 뫄; 뫄; 뫄; 뫄; ) HANGUL SYLLABLE MWA
    {
        std::array<uint32_t, 1> const source = {{ 0xBAC4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAC4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_197)
{
    // BAC5;BAC5;1106 116A 11A8;BAC5;1106 116A 11A8; 
    // (뫅; 뫅; 뫅; 뫅; 뫅; ) HANGUL SYLLABLE MWAG
    {
        std::array<uint32_t, 1> const source = {{ 0xBAC5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAC5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_198)
{
    // BAC6;BAC6;1106 116A 11A9;BAC6;1106 116A 11A9; 
    // (뫆; 뫆; 뫆; 뫆; 뫆; ) HANGUL SYLLABLE MWAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xBAC6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAC6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_030_199)
{
    // BAC7;BAC7;1106 116A 11AA;BAC7;1106 116A 11AA; 
    // (뫇; 뫇; 뫇; 뫇; 뫇; ) HANGUL SYLLABLE MWAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xBAC7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xBAC7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


