// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_065_000)
{
    // 1F63B 0041;	
    // (😻) SMILING CAT FACE WITH HEART-SHAPED EYES	[1696 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F63B, 0x0041 };
    uint32_t const ces[9] = { 0x1696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_001)
{
    // 1F63B 0062;	
    // (😻) SMILING CAT FACE WITH HEART-SHAPED EYES	[1696 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63B, 0x0062 };
    uint32_t const ces[9] = { 0x1696, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_002)
{
    // 1F63C 0021;	
    // (😼) CAT FACE WITH WRY SMILE	[1697 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63C, 0x0021 };
    uint32_t const ces[9] = { 0x1697, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_003)
{
    // 1F63C 003F;	
    // (😼) CAT FACE WITH WRY SMILE	[1697 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63C, 0x003F };
    uint32_t const ces[9] = { 0x1697, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_004)
{
    // 1F63C 0061;	
    // (😼) CAT FACE WITH WRY SMILE	[1697 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63C, 0x0061 };
    uint32_t const ces[9] = { 0x1697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_005)
{
    // 1F63C 0041;	
    // (😼) CAT FACE WITH WRY SMILE	[1697 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F63C, 0x0041 };
    uint32_t const ces[9] = { 0x1697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_006)
{
    // 1F63C 0062;	
    // (😼) CAT FACE WITH WRY SMILE	[1697 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63C, 0x0062 };
    uint32_t const ces[9] = { 0x1697, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_007)
{
    // 1F63D 0021;	
    // (😽) KISSING CAT FACE WITH CLOSED EYES	[1698 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63D, 0x0021 };
    uint32_t const ces[9] = { 0x1698, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_008)
{
    // 1F63D 003F;	
    // (😽) KISSING CAT FACE WITH CLOSED EYES	[1698 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63D, 0x003F };
    uint32_t const ces[9] = { 0x1698, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_009)
{
    // 1F63D 0061;	
    // (😽) KISSING CAT FACE WITH CLOSED EYES	[1698 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63D, 0x0061 };
    uint32_t const ces[9] = { 0x1698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_010)
{
    // 1F63D 0041;	
    // (😽) KISSING CAT FACE WITH CLOSED EYES	[1698 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F63D, 0x0041 };
    uint32_t const ces[9] = { 0x1698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_011)
{
    // 1F63D 0062;	
    // (😽) KISSING CAT FACE WITH CLOSED EYES	[1698 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63D, 0x0062 };
    uint32_t const ces[9] = { 0x1698, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_012)
{
    // 1F63E 0021;	
    // (😾) POUTING CAT FACE	[1699 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63E, 0x0021 };
    uint32_t const ces[9] = { 0x1699, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_013)
{
    // 1F63E 003F;	
    // (😾) POUTING CAT FACE	[1699 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63E, 0x003F };
    uint32_t const ces[9] = { 0x1699, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_014)
{
    // 1F63E 0061;	
    // (😾) POUTING CAT FACE	[1699 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63E, 0x0061 };
    uint32_t const ces[9] = { 0x1699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_015)
{
    // 1F63E 0041;	
    // (😾) POUTING CAT FACE	[1699 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F63E, 0x0041 };
    uint32_t const ces[9] = { 0x1699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_016)
{
    // 1F63E 0062;	
    // (😾) POUTING CAT FACE	[1699 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63E, 0x0062 };
    uint32_t const ces[9] = { 0x1699, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_017)
{
    // 1F63F 0021;	
    // (😿) CRYING CAT FACE	[169A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63F, 0x0021 };
    uint32_t const ces[9] = { 0x169A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_018)
{
    // 1F63F 003F;	
    // (😿) CRYING CAT FACE	[169A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63F, 0x003F };
    uint32_t const ces[9] = { 0x169A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_019)
{
    // 1F63F 0061;	
    // (😿) CRYING CAT FACE	[169A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63F, 0x0061 };
    uint32_t const ces[9] = { 0x169A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_020)
{
    // 1F63F 0041;	
    // (😿) CRYING CAT FACE	[169A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F63F, 0x0041 };
    uint32_t const ces[9] = { 0x169A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_021)
{
    // 1F63F 0062;	
    // (😿) CRYING CAT FACE	[169A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F63F, 0x0062 };
    uint32_t const ces[9] = { 0x169A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_022)
{
    // 1F640 0021;	
    // (🙀) WEARY CAT FACE	[169B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F640, 0x0021 };
    uint32_t const ces[9] = { 0x169B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_023)
{
    // 1F640 003F;	
    // (🙀) WEARY CAT FACE	[169B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F640, 0x003F };
    uint32_t const ces[9] = { 0x169B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_024)
{
    // 1F640 0061;	
    // (🙀) WEARY CAT FACE	[169B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F640, 0x0061 };
    uint32_t const ces[9] = { 0x169B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_025)
{
    // 1F640 0041;	
    // (🙀) WEARY CAT FACE	[169B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F640, 0x0041 };
    uint32_t const ces[9] = { 0x169B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_026)
{
    // 1F640 0062;	
    // (🙀) WEARY CAT FACE	[169B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F640, 0x0062 };
    uint32_t const ces[9] = { 0x169B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_027)
{
    // 1F641 0021;	
    // (🙁) SLIGHTLY FROWNING FACE	[169C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F641, 0x0021 };
    uint32_t const ces[9] = { 0x169C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_028)
{
    // 1F641 003F;	
    // (🙁) SLIGHTLY FROWNING FACE	[169C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F641, 0x003F };
    uint32_t const ces[9] = { 0x169C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_029)
{
    // 1F641 0061;	
    // (🙁) SLIGHTLY FROWNING FACE	[169C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F641, 0x0061 };
    uint32_t const ces[9] = { 0x169C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_030)
{
    // 1F641 0041;	
    // (🙁) SLIGHTLY FROWNING FACE	[169C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F641, 0x0041 };
    uint32_t const ces[9] = { 0x169C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_031)
{
    // 1F641 0062;	
    // (🙁) SLIGHTLY FROWNING FACE	[169C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F641, 0x0062 };
    uint32_t const ces[9] = { 0x169C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_032)
{
    // 1F642 0021;	
    // (🙂) SLIGHTLY SMILING FACE	[169D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F642, 0x0021 };
    uint32_t const ces[9] = { 0x169D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_033)
{
    // 1F642 003F;	
    // (🙂) SLIGHTLY SMILING FACE	[169D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F642, 0x003F };
    uint32_t const ces[9] = { 0x169D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_034)
{
    // 1F642 0061;	
    // (🙂) SLIGHTLY SMILING FACE	[169D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F642, 0x0061 };
    uint32_t const ces[9] = { 0x169D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_035)
{
    // 1F642 0041;	
    // (🙂) SLIGHTLY SMILING FACE	[169D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F642, 0x0041 };
    uint32_t const ces[9] = { 0x169D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_036)
{
    // 1F642 0062;	
    // (🙂) SLIGHTLY SMILING FACE	[169D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F642, 0x0062 };
    uint32_t const ces[9] = { 0x169D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_037)
{
    // 1F643 0021;	
    // (🙃) UPSIDE-DOWN FACE	[169E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F643, 0x0021 };
    uint32_t const ces[9] = { 0x169E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_038)
{
    // 1F643 003F;	
    // (🙃) UPSIDE-DOWN FACE	[169E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F643, 0x003F };
    uint32_t const ces[9] = { 0x169E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_039)
{
    // 1F643 0061;	
    // (🙃) UPSIDE-DOWN FACE	[169E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F643, 0x0061 };
    uint32_t const ces[9] = { 0x169E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_040)
{
    // 1F643 0041;	
    // (🙃) UPSIDE-DOWN FACE	[169E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F643, 0x0041 };
    uint32_t const ces[9] = { 0x169E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_041)
{
    // 1F643 0062;	
    // (🙃) UPSIDE-DOWN FACE	[169E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F643, 0x0062 };
    uint32_t const ces[9] = { 0x169E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_042)
{
    // 1F644 0021;	
    // (🙄) FACE WITH ROLLING EYES	[169F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F644, 0x0021 };
    uint32_t const ces[9] = { 0x169F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_043)
{
    // 1F644 003F;	
    // (🙄) FACE WITH ROLLING EYES	[169F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F644, 0x003F };
    uint32_t const ces[9] = { 0x169F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_044)
{
    // 1F644 0061;	
    // (🙄) FACE WITH ROLLING EYES	[169F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F644, 0x0061 };
    uint32_t const ces[9] = { 0x169F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_045)
{
    // 1F644 0041;	
    // (🙄) FACE WITH ROLLING EYES	[169F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F644, 0x0041 };
    uint32_t const ces[9] = { 0x169F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_046)
{
    // 1F644 0062;	
    // (🙄) FACE WITH ROLLING EYES	[169F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F644, 0x0062 };
    uint32_t const ces[9] = { 0x169F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_047)
{
    // 1F645 0021;	
    // (🙅) FACE WITH NO GOOD GESTURE	[16A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F645, 0x0021 };
    uint32_t const ces[9] = { 0x16A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_048)
{
    // 1F645 003F;	
    // (🙅) FACE WITH NO GOOD GESTURE	[16A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F645, 0x003F };
    uint32_t const ces[9] = { 0x16A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_049)
{
    // 1F645 0061;	
    // (🙅) FACE WITH NO GOOD GESTURE	[16A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F645, 0x0061 };
    uint32_t const ces[9] = { 0x16A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_050)
{
    // 1F645 0041;	
    // (🙅) FACE WITH NO GOOD GESTURE	[16A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F645, 0x0041 };
    uint32_t const ces[9] = { 0x16A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_051)
{
    // 1F645 0062;	
    // (🙅) FACE WITH NO GOOD GESTURE	[16A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F645, 0x0062 };
    uint32_t const ces[9] = { 0x16A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_052)
{
    // 1F646 0021;	
    // (🙆) FACE WITH OK GESTURE	[16A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F646, 0x0021 };
    uint32_t const ces[9] = { 0x16A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_053)
{
    // 1F646 003F;	
    // (🙆) FACE WITH OK GESTURE	[16A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F646, 0x003F };
    uint32_t const ces[9] = { 0x16A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_054)
{
    // 1F646 0061;	
    // (🙆) FACE WITH OK GESTURE	[16A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F646, 0x0061 };
    uint32_t const ces[9] = { 0x16A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_055)
{
    // 1F646 0041;	
    // (🙆) FACE WITH OK GESTURE	[16A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F646, 0x0041 };
    uint32_t const ces[9] = { 0x16A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_056)
{
    // 1F646 0062;	
    // (🙆) FACE WITH OK GESTURE	[16A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F646, 0x0062 };
    uint32_t const ces[9] = { 0x16A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_057)
{
    // 1F647 0021;	
    // (🙇) PERSON BOWING DEEPLY	[16A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F647, 0x0021 };
    uint32_t const ces[9] = { 0x16A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_058)
{
    // 1F647 003F;	
    // (🙇) PERSON BOWING DEEPLY	[16A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F647, 0x003F };
    uint32_t const ces[9] = { 0x16A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_059)
{
    // 1F647 0061;	
    // (🙇) PERSON BOWING DEEPLY	[16A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F647, 0x0061 };
    uint32_t const ces[9] = { 0x16A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_060)
{
    // 1F647 0041;	
    // (🙇) PERSON BOWING DEEPLY	[16A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F647, 0x0041 };
    uint32_t const ces[9] = { 0x16A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_061)
{
    // 1F647 0062;	
    // (🙇) PERSON BOWING DEEPLY	[16A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F647, 0x0062 };
    uint32_t const ces[9] = { 0x16A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_062)
{
    // 1F648 0021;	
    // (🙈) SEE-NO-EVIL MONKEY	[16A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F648, 0x0021 };
    uint32_t const ces[9] = { 0x16A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_063)
{
    // 1F648 003F;	
    // (🙈) SEE-NO-EVIL MONKEY	[16A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F648, 0x003F };
    uint32_t const ces[9] = { 0x16A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_064)
{
    // 1F648 0061;	
    // (🙈) SEE-NO-EVIL MONKEY	[16A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F648, 0x0061 };
    uint32_t const ces[9] = { 0x16A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_065)
{
    // 1F648 0041;	
    // (🙈) SEE-NO-EVIL MONKEY	[16A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F648, 0x0041 };
    uint32_t const ces[9] = { 0x16A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_066)
{
    // 1F648 0062;	
    // (🙈) SEE-NO-EVIL MONKEY	[16A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F648, 0x0062 };
    uint32_t const ces[9] = { 0x16A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_067)
{
    // 1F649 0021;	
    // (🙉) HEAR-NO-EVIL MONKEY	[16A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F649, 0x0021 };
    uint32_t const ces[9] = { 0x16A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_068)
{
    // 1F649 003F;	
    // (🙉) HEAR-NO-EVIL MONKEY	[16A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F649, 0x003F };
    uint32_t const ces[9] = { 0x16A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_069)
{
    // 1F649 0061;	
    // (🙉) HEAR-NO-EVIL MONKEY	[16A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F649, 0x0061 };
    uint32_t const ces[9] = { 0x16A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_070)
{
    // 1F649 0041;	
    // (🙉) HEAR-NO-EVIL MONKEY	[16A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F649, 0x0041 };
    uint32_t const ces[9] = { 0x16A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_071)
{
    // 1F649 0062;	
    // (🙉) HEAR-NO-EVIL MONKEY	[16A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F649, 0x0062 };
    uint32_t const ces[9] = { 0x16A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_072)
{
    // 1F64A 0021;	
    // (🙊) SPEAK-NO-EVIL MONKEY	[16A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64A, 0x0021 };
    uint32_t const ces[9] = { 0x16A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_073)
{
    // 1F64A 003F;	
    // (🙊) SPEAK-NO-EVIL MONKEY	[16A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64A, 0x003F };
    uint32_t const ces[9] = { 0x16A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_074)
{
    // 1F64A 0061;	
    // (🙊) SPEAK-NO-EVIL MONKEY	[16A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64A, 0x0061 };
    uint32_t const ces[9] = { 0x16A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_075)
{
    // 1F64A 0041;	
    // (🙊) SPEAK-NO-EVIL MONKEY	[16A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F64A, 0x0041 };
    uint32_t const ces[9] = { 0x16A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_076)
{
    // 1F64A 0062;	
    // (🙊) SPEAK-NO-EVIL MONKEY	[16A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64A, 0x0062 };
    uint32_t const ces[9] = { 0x16A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_077)
{
    // 1F64B 0021;	
    // (🙋) HAPPY PERSON RAISING ONE HAND	[16A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64B, 0x0021 };
    uint32_t const ces[9] = { 0x16A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_078)
{
    // 1F64B 003F;	
    // (🙋) HAPPY PERSON RAISING ONE HAND	[16A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64B, 0x003F };
    uint32_t const ces[9] = { 0x16A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_079)
{
    // 1F64B 0061;	
    // (🙋) HAPPY PERSON RAISING ONE HAND	[16A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64B, 0x0061 };
    uint32_t const ces[9] = { 0x16A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_080)
{
    // 1F64B 0041;	
    // (🙋) HAPPY PERSON RAISING ONE HAND	[16A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F64B, 0x0041 };
    uint32_t const ces[9] = { 0x16A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_081)
{
    // 1F64B 0062;	
    // (🙋) HAPPY PERSON RAISING ONE HAND	[16A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64B, 0x0062 };
    uint32_t const ces[9] = { 0x16A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_082)
{
    // 1F64C 0021;	
    // (🙌) PERSON RAISING BOTH HANDS IN CELEBRATION	[16A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64C, 0x0021 };
    uint32_t const ces[9] = { 0x16A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_083)
{
    // 1F64C 003F;	
    // (🙌) PERSON RAISING BOTH HANDS IN CELEBRATION	[16A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64C, 0x003F };
    uint32_t const ces[9] = { 0x16A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_084)
{
    // 1F64C 0061;	
    // (🙌) PERSON RAISING BOTH HANDS IN CELEBRATION	[16A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64C, 0x0061 };
    uint32_t const ces[9] = { 0x16A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_085)
{
    // 1F64C 0041;	
    // (🙌) PERSON RAISING BOTH HANDS IN CELEBRATION	[16A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F64C, 0x0041 };
    uint32_t const ces[9] = { 0x16A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_086)
{
    // 1F64C 0062;	
    // (🙌) PERSON RAISING BOTH HANDS IN CELEBRATION	[16A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64C, 0x0062 };
    uint32_t const ces[9] = { 0x16A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_087)
{
    // 1F64D 0021;	
    // (🙍) PERSON FROWNING	[16A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64D, 0x0021 };
    uint32_t const ces[9] = { 0x16A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_088)
{
    // 1F64D 003F;	
    // (🙍) PERSON FROWNING	[16A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64D, 0x003F };
    uint32_t const ces[9] = { 0x16A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_089)
{
    // 1F64D 0061;	
    // (🙍) PERSON FROWNING	[16A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64D, 0x0061 };
    uint32_t const ces[9] = { 0x16A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_090)
{
    // 1F64D 0041;	
    // (🙍) PERSON FROWNING	[16A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F64D, 0x0041 };
    uint32_t const ces[9] = { 0x16A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_091)
{
    // 1F64D 0062;	
    // (🙍) PERSON FROWNING	[16A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64D, 0x0062 };
    uint32_t const ces[9] = { 0x16A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_092)
{
    // 1F64E 0021;	
    // (🙎) PERSON WITH POUTING FACE	[16A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64E, 0x0021 };
    uint32_t const ces[9] = { 0x16A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_093)
{
    // 1F64E 003F;	
    // (🙎) PERSON WITH POUTING FACE	[16A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64E, 0x003F };
    uint32_t const ces[9] = { 0x16A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_094)
{
    // 1F64E 0061;	
    // (🙎) PERSON WITH POUTING FACE	[16A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64E, 0x0061 };
    uint32_t const ces[9] = { 0x16A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_095)
{
    // 1F64E 0041;	
    // (🙎) PERSON WITH POUTING FACE	[16A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F64E, 0x0041 };
    uint32_t const ces[9] = { 0x16A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_096)
{
    // 1F64E 0062;	
    // (🙎) PERSON WITH POUTING FACE	[16A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64E, 0x0062 };
    uint32_t const ces[9] = { 0x16A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_097)
{
    // 1F64F 0021;	
    // (🙏) PERSON WITH FOLDED HANDS	[16AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64F, 0x0021 };
    uint32_t const ces[9] = { 0x16AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_098)
{
    // 1F64F 003F;	
    // (🙏) PERSON WITH FOLDED HANDS	[16AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64F, 0x003F };
    uint32_t const ces[9] = { 0x16AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_099)
{
    // 1F64F 0061;	
    // (🙏) PERSON WITH FOLDED HANDS	[16AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64F, 0x0061 };
    uint32_t const ces[9] = { 0x16AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_100)
{
    // 1F64F 0041;	
    // (🙏) PERSON WITH FOLDED HANDS	[16AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F64F, 0x0041 };
    uint32_t const ces[9] = { 0x16AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_101)
{
    // 1F64F 0062;	
    // (🙏) PERSON WITH FOLDED HANDS	[16AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F64F, 0x0062 };
    uint32_t const ces[9] = { 0x16AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_102)
{
    // 1F650 0021;	
    // (🙐) NORTH WEST POINTING LEAF	[16AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F650, 0x0021 };
    uint32_t const ces[9] = { 0x16AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_103)
{
    // 1F650 003F;	
    // (🙐) NORTH WEST POINTING LEAF	[16AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F650, 0x003F };
    uint32_t const ces[9] = { 0x16AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_104)
{
    // 1F650 0061;	
    // (🙐) NORTH WEST POINTING LEAF	[16AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F650, 0x0061 };
    uint32_t const ces[9] = { 0x16AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_105)
{
    // 1F650 0041;	
    // (🙐) NORTH WEST POINTING LEAF	[16AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F650, 0x0041 };
    uint32_t const ces[9] = { 0x16AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_106)
{
    // 1F650 0062;	
    // (🙐) NORTH WEST POINTING LEAF	[16AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F650, 0x0062 };
    uint32_t const ces[9] = { 0x16AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_107)
{
    // 1F651 0021;	
    // (🙑) SOUTH WEST POINTING LEAF	[16AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F651, 0x0021 };
    uint32_t const ces[9] = { 0x16AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_108)
{
    // 1F651 003F;	
    // (🙑) SOUTH WEST POINTING LEAF	[16AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F651, 0x003F };
    uint32_t const ces[9] = { 0x16AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_109)
{
    // 1F651 0061;	
    // (🙑) SOUTH WEST POINTING LEAF	[16AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F651, 0x0061 };
    uint32_t const ces[9] = { 0x16AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_110)
{
    // 1F651 0041;	
    // (🙑) SOUTH WEST POINTING LEAF	[16AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F651, 0x0041 };
    uint32_t const ces[9] = { 0x16AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_111)
{
    // 1F651 0062;	
    // (🙑) SOUTH WEST POINTING LEAF	[16AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F651, 0x0062 };
    uint32_t const ces[9] = { 0x16AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_112)
{
    // 1F652 0021;	
    // (🙒) NORTH EAST POINTING LEAF	[16AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F652, 0x0021 };
    uint32_t const ces[9] = { 0x16AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_113)
{
    // 1F652 003F;	
    // (🙒) NORTH EAST POINTING LEAF	[16AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F652, 0x003F };
    uint32_t const ces[9] = { 0x16AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_114)
{
    // 1F652 0061;	
    // (🙒) NORTH EAST POINTING LEAF	[16AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F652, 0x0061 };
    uint32_t const ces[9] = { 0x16AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_115)
{
    // 1F652 0041;	
    // (🙒) NORTH EAST POINTING LEAF	[16AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F652, 0x0041 };
    uint32_t const ces[9] = { 0x16AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_116)
{
    // 1F652 0062;	
    // (🙒) NORTH EAST POINTING LEAF	[16AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F652, 0x0062 };
    uint32_t const ces[9] = { 0x16AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_117)
{
    // 1F653 0021;	
    // (🙓) SOUTH EAST POINTING LEAF	[16AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F653, 0x0021 };
    uint32_t const ces[9] = { 0x16AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_118)
{
    // 1F653 003F;	
    // (🙓) SOUTH EAST POINTING LEAF	[16AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F653, 0x003F };
    uint32_t const ces[9] = { 0x16AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_119)
{
    // 1F653 0061;	
    // (🙓) SOUTH EAST POINTING LEAF	[16AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F653, 0x0061 };
    uint32_t const ces[9] = { 0x16AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_120)
{
    // 1F653 0041;	
    // (🙓) SOUTH EAST POINTING LEAF	[16AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F653, 0x0041 };
    uint32_t const ces[9] = { 0x16AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_121)
{
    // 1F653 0062;	
    // (🙓) SOUTH EAST POINTING LEAF	[16AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F653, 0x0062 };
    uint32_t const ces[9] = { 0x16AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_122)
{
    // 1F654 0021;	
    // (🙔) TURNED NORTH WEST POINTING LEAF	[16AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F654, 0x0021 };
    uint32_t const ces[9] = { 0x16AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_123)
{
    // 1F654 003F;	
    // (🙔) TURNED NORTH WEST POINTING LEAF	[16AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F654, 0x003F };
    uint32_t const ces[9] = { 0x16AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_124)
{
    // 1F654 0061;	
    // (🙔) TURNED NORTH WEST POINTING LEAF	[16AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F654, 0x0061 };
    uint32_t const ces[9] = { 0x16AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_125)
{
    // 1F654 0041;	
    // (🙔) TURNED NORTH WEST POINTING LEAF	[16AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F654, 0x0041 };
    uint32_t const ces[9] = { 0x16AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_126)
{
    // 1F654 0062;	
    // (🙔) TURNED NORTH WEST POINTING LEAF	[16AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F654, 0x0062 };
    uint32_t const ces[9] = { 0x16AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_127)
{
    // 1F655 0021;	
    // (🙕) TURNED SOUTH WEST POINTING LEAF	[16B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F655, 0x0021 };
    uint32_t const ces[9] = { 0x16B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_128)
{
    // 1F655 003F;	
    // (🙕) TURNED SOUTH WEST POINTING LEAF	[16B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F655, 0x003F };
    uint32_t const ces[9] = { 0x16B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_129)
{
    // 1F655 0061;	
    // (🙕) TURNED SOUTH WEST POINTING LEAF	[16B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F655, 0x0061 };
    uint32_t const ces[9] = { 0x16B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_130)
{
    // 1F655 0041;	
    // (🙕) TURNED SOUTH WEST POINTING LEAF	[16B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F655, 0x0041 };
    uint32_t const ces[9] = { 0x16B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_131)
{
    // 1F655 0062;	
    // (🙕) TURNED SOUTH WEST POINTING LEAF	[16B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F655, 0x0062 };
    uint32_t const ces[9] = { 0x16B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_132)
{
    // 1F656 0021;	
    // (🙖) TURNED NORTH EAST POINTING LEAF	[16B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F656, 0x0021 };
    uint32_t const ces[9] = { 0x16B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_133)
{
    // 1F656 003F;	
    // (🙖) TURNED NORTH EAST POINTING LEAF	[16B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F656, 0x003F };
    uint32_t const ces[9] = { 0x16B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_134)
{
    // 1F656 0061;	
    // (🙖) TURNED NORTH EAST POINTING LEAF	[16B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F656, 0x0061 };
    uint32_t const ces[9] = { 0x16B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_135)
{
    // 1F656 0041;	
    // (🙖) TURNED NORTH EAST POINTING LEAF	[16B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F656, 0x0041 };
    uint32_t const ces[9] = { 0x16B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_136)
{
    // 1F656 0062;	
    // (🙖) TURNED NORTH EAST POINTING LEAF	[16B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F656, 0x0062 };
    uint32_t const ces[9] = { 0x16B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_137)
{
    // 1F657 0021;	
    // (🙗) TURNED SOUTH EAST POINTING LEAF	[16B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F657, 0x0021 };
    uint32_t const ces[9] = { 0x16B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_138)
{
    // 1F657 003F;	
    // (🙗) TURNED SOUTH EAST POINTING LEAF	[16B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F657, 0x003F };
    uint32_t const ces[9] = { 0x16B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_139)
{
    // 1F657 0061;	
    // (🙗) TURNED SOUTH EAST POINTING LEAF	[16B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F657, 0x0061 };
    uint32_t const ces[9] = { 0x16B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_140)
{
    // 1F657 0041;	
    // (🙗) TURNED SOUTH EAST POINTING LEAF	[16B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F657, 0x0041 };
    uint32_t const ces[9] = { 0x16B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_141)
{
    // 1F657 0062;	
    // (🙗) TURNED SOUTH EAST POINTING LEAF	[16B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F657, 0x0062 };
    uint32_t const ces[9] = { 0x16B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_142)
{
    // 1F658 0021;	
    // (🙘) NORTH WEST POINTING VINE LEAF	[16B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F658, 0x0021 };
    uint32_t const ces[9] = { 0x16B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_143)
{
    // 1F658 003F;	
    // (🙘) NORTH WEST POINTING VINE LEAF	[16B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F658, 0x003F };
    uint32_t const ces[9] = { 0x16B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_144)
{
    // 1F658 0061;	
    // (🙘) NORTH WEST POINTING VINE LEAF	[16B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F658, 0x0061 };
    uint32_t const ces[9] = { 0x16B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_145)
{
    // 1F658 0041;	
    // (🙘) NORTH WEST POINTING VINE LEAF	[16B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F658, 0x0041 };
    uint32_t const ces[9] = { 0x16B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_146)
{
    // 1F658 0062;	
    // (🙘) NORTH WEST POINTING VINE LEAF	[16B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F658, 0x0062 };
    uint32_t const ces[9] = { 0x16B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_147)
{
    // 1F659 0021;	
    // (🙙) SOUTH WEST POINTING VINE LEAF	[16B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F659, 0x0021 };
    uint32_t const ces[9] = { 0x16B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_148)
{
    // 1F659 003F;	
    // (🙙) SOUTH WEST POINTING VINE LEAF	[16B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F659, 0x003F };
    uint32_t const ces[9] = { 0x16B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_149)
{
    // 1F659 0061;	
    // (🙙) SOUTH WEST POINTING VINE LEAF	[16B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F659, 0x0061 };
    uint32_t const ces[9] = { 0x16B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_150)
{
    // 1F659 0041;	
    // (🙙) SOUTH WEST POINTING VINE LEAF	[16B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F659, 0x0041 };
    uint32_t const ces[9] = { 0x16B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_151)
{
    // 1F659 0062;	
    // (🙙) SOUTH WEST POINTING VINE LEAF	[16B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F659, 0x0062 };
    uint32_t const ces[9] = { 0x16B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_152)
{
    // 1F65A 0021;	
    // (🙚) NORTH EAST POINTING VINE LEAF	[16B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65A, 0x0021 };
    uint32_t const ces[9] = { 0x16B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_153)
{
    // 1F65A 003F;	
    // (🙚) NORTH EAST POINTING VINE LEAF	[16B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65A, 0x003F };
    uint32_t const ces[9] = { 0x16B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_154)
{
    // 1F65A 0061;	
    // (🙚) NORTH EAST POINTING VINE LEAF	[16B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65A, 0x0061 };
    uint32_t const ces[9] = { 0x16B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_155)
{
    // 1F65A 0041;	
    // (🙚) NORTH EAST POINTING VINE LEAF	[16B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F65A, 0x0041 };
    uint32_t const ces[9] = { 0x16B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_156)
{
    // 1F65A 0062;	
    // (🙚) NORTH EAST POINTING VINE LEAF	[16B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65A, 0x0062 };
    uint32_t const ces[9] = { 0x16B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_157)
{
    // 1F65B 0021;	
    // (🙛) SOUTH EAST POINTING VINE LEAF	[16B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65B, 0x0021 };
    uint32_t const ces[9] = { 0x16B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_158)
{
    // 1F65B 003F;	
    // (🙛) SOUTH EAST POINTING VINE LEAF	[16B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65B, 0x003F };
    uint32_t const ces[9] = { 0x16B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_159)
{
    // 1F65B 0061;	
    // (🙛) SOUTH EAST POINTING VINE LEAF	[16B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65B, 0x0061 };
    uint32_t const ces[9] = { 0x16B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_160)
{
    // 1F65B 0041;	
    // (🙛) SOUTH EAST POINTING VINE LEAF	[16B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F65B, 0x0041 };
    uint32_t const ces[9] = { 0x16B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_161)
{
    // 1F65B 0062;	
    // (🙛) SOUTH EAST POINTING VINE LEAF	[16B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65B, 0x0062 };
    uint32_t const ces[9] = { 0x16B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_162)
{
    // 1F65C 0021;	
    // (🙜) HEAVY NORTH WEST POINTING VINE LEAF	[16B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65C, 0x0021 };
    uint32_t const ces[9] = { 0x16B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_163)
{
    // 1F65C 003F;	
    // (🙜) HEAVY NORTH WEST POINTING VINE LEAF	[16B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65C, 0x003F };
    uint32_t const ces[9] = { 0x16B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_164)
{
    // 1F65C 0061;	
    // (🙜) HEAVY NORTH WEST POINTING VINE LEAF	[16B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65C, 0x0061 };
    uint32_t const ces[9] = { 0x16B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_165)
{
    // 1F65C 0041;	
    // (🙜) HEAVY NORTH WEST POINTING VINE LEAF	[16B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F65C, 0x0041 };
    uint32_t const ces[9] = { 0x16B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_166)
{
    // 1F65C 0062;	
    // (🙜) HEAVY NORTH WEST POINTING VINE LEAF	[16B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65C, 0x0062 };
    uint32_t const ces[9] = { 0x16B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_167)
{
    // 1F65D 0021;	
    // (🙝) HEAVY SOUTH WEST POINTING VINE LEAF	[16B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65D, 0x0021 };
    uint32_t const ces[9] = { 0x16B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_168)
{
    // 1F65D 003F;	
    // (🙝) HEAVY SOUTH WEST POINTING VINE LEAF	[16B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65D, 0x003F };
    uint32_t const ces[9] = { 0x16B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_169)
{
    // 1F65D 0061;	
    // (🙝) HEAVY SOUTH WEST POINTING VINE LEAF	[16B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65D, 0x0061 };
    uint32_t const ces[9] = { 0x16B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_170)
{
    // 1F65D 0041;	
    // (🙝) HEAVY SOUTH WEST POINTING VINE LEAF	[16B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F65D, 0x0041 };
    uint32_t const ces[9] = { 0x16B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_171)
{
    // 1F65D 0062;	
    // (🙝) HEAVY SOUTH WEST POINTING VINE LEAF	[16B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65D, 0x0062 };
    uint32_t const ces[9] = { 0x16B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_172)
{
    // 1F65E 0021;	
    // (🙞) HEAVY NORTH EAST POINTING VINE LEAF	[16B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65E, 0x0021 };
    uint32_t const ces[9] = { 0x16B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_173)
{
    // 1F65E 003F;	
    // (🙞) HEAVY NORTH EAST POINTING VINE LEAF	[16B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65E, 0x003F };
    uint32_t const ces[9] = { 0x16B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_174)
{
    // 1F65E 0061;	
    // (🙞) HEAVY NORTH EAST POINTING VINE LEAF	[16B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65E, 0x0061 };
    uint32_t const ces[9] = { 0x16B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_175)
{
    // 1F65E 0041;	
    // (🙞) HEAVY NORTH EAST POINTING VINE LEAF	[16B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F65E, 0x0041 };
    uint32_t const ces[9] = { 0x16B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_176)
{
    // 1F65E 0062;	
    // (🙞) HEAVY NORTH EAST POINTING VINE LEAF	[16B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65E, 0x0062 };
    uint32_t const ces[9] = { 0x16B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_177)
{
    // 1F65F 0021;	
    // (🙟) HEAVY SOUTH EAST POINTING VINE LEAF	[16BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65F, 0x0021 };
    uint32_t const ces[9] = { 0x16BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_178)
{
    // 1F65F 003F;	
    // (🙟) HEAVY SOUTH EAST POINTING VINE LEAF	[16BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65F, 0x003F };
    uint32_t const ces[9] = { 0x16BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_179)
{
    // 1F65F 0061;	
    // (🙟) HEAVY SOUTH EAST POINTING VINE LEAF	[16BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65F, 0x0061 };
    uint32_t const ces[9] = { 0x16BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_180)
{
    // 1F65F 0041;	
    // (🙟) HEAVY SOUTH EAST POINTING VINE LEAF	[16BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F65F, 0x0041 };
    uint32_t const ces[9] = { 0x16BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_181)
{
    // 1F65F 0062;	
    // (🙟) HEAVY SOUTH EAST POINTING VINE LEAF	[16BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F65F, 0x0062 };
    uint32_t const ces[9] = { 0x16BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_182)
{
    // 1F660 0021;	
    // (🙠) NORTH WEST POINTING BUD	[16BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F660, 0x0021 };
    uint32_t const ces[9] = { 0x16BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_183)
{
    // 1F660 003F;	
    // (🙠) NORTH WEST POINTING BUD	[16BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F660, 0x003F };
    uint32_t const ces[9] = { 0x16BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_184)
{
    // 1F660 0061;	
    // (🙠) NORTH WEST POINTING BUD	[16BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F660, 0x0061 };
    uint32_t const ces[9] = { 0x16BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_185)
{
    // 1F660 0041;	
    // (🙠) NORTH WEST POINTING BUD	[16BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F660, 0x0041 };
    uint32_t const ces[9] = { 0x16BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_186)
{
    // 1F660 0062;	
    // (🙠) NORTH WEST POINTING BUD	[16BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F660, 0x0062 };
    uint32_t const ces[9] = { 0x16BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_187)
{
    // 1F661 0021;	
    // (🙡) SOUTH WEST POINTING BUD	[16BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F661, 0x0021 };
    uint32_t const ces[9] = { 0x16BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_188)
{
    // 1F661 003F;	
    // (🙡) SOUTH WEST POINTING BUD	[16BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F661, 0x003F };
    uint32_t const ces[9] = { 0x16BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_189)
{
    // 1F661 0061;	
    // (🙡) SOUTH WEST POINTING BUD	[16BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F661, 0x0061 };
    uint32_t const ces[9] = { 0x16BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_190)
{
    // 1F661 0041;	
    // (🙡) SOUTH WEST POINTING BUD	[16BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F661, 0x0041 };
    uint32_t const ces[9] = { 0x16BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_191)
{
    // 1F661 0062;	
    // (🙡) SOUTH WEST POINTING BUD	[16BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F661, 0x0062 };
    uint32_t const ces[9] = { 0x16BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_192)
{
    // 1F662 0021;	
    // (🙢) NORTH EAST POINTING BUD	[16BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F662, 0x0021 };
    uint32_t const ces[9] = { 0x16BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_193)
{
    // 1F662 003F;	
    // (🙢) NORTH EAST POINTING BUD	[16BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F662, 0x003F };
    uint32_t const ces[9] = { 0x16BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_194)
{
    // 1F662 0061;	
    // (🙢) NORTH EAST POINTING BUD	[16BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F662, 0x0061 };
    uint32_t const ces[9] = { 0x16BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_195)
{
    // 1F662 0041;	
    // (🙢) NORTH EAST POINTING BUD	[16BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F662, 0x0041 };
    uint32_t const ces[9] = { 0x16BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_196)
{
    // 1F662 0062;	
    // (🙢) NORTH EAST POINTING BUD	[16BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F662, 0x0062 };
    uint32_t const ces[9] = { 0x16BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_197)
{
    // 1F663 0021;	
    // (🙣) SOUTH EAST POINTING BUD	[16BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F663, 0x0021 };
    uint32_t const ces[9] = { 0x16BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_198)
{
    // 1F663 003F;	
    // (🙣) SOUTH EAST POINTING BUD	[16BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F663, 0x003F };
    uint32_t const ces[9] = { 0x16BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_199)
{
    // 1F663 0061;	
    // (🙣) SOUTH EAST POINTING BUD	[16BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F663, 0x0061 };
    uint32_t const ces[9] = { 0x16BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_200)
{
    // 1F663 0041;	
    // (🙣) SOUTH EAST POINTING BUD	[16BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F663, 0x0041 };
    uint32_t const ces[9] = { 0x16BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_201)
{
    // 1F663 0062;	
    // (🙣) SOUTH EAST POINTING BUD	[16BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F663, 0x0062 };
    uint32_t const ces[9] = { 0x16BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_202)
{
    // 1F664 0021;	
    // (🙤) HEAVY NORTH WEST POINTING BUD	[16BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F664, 0x0021 };
    uint32_t const ces[9] = { 0x16BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_203)
{
    // 1F664 003F;	
    // (🙤) HEAVY NORTH WEST POINTING BUD	[16BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F664, 0x003F };
    uint32_t const ces[9] = { 0x16BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_204)
{
    // 1F664 0061;	
    // (🙤) HEAVY NORTH WEST POINTING BUD	[16BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F664, 0x0061 };
    uint32_t const ces[9] = { 0x16BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_205)
{
    // 1F664 0041;	
    // (🙤) HEAVY NORTH WEST POINTING BUD	[16BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F664, 0x0041 };
    uint32_t const ces[9] = { 0x16BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_206)
{
    // 1F664 0062;	
    // (🙤) HEAVY NORTH WEST POINTING BUD	[16BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F664, 0x0062 };
    uint32_t const ces[9] = { 0x16BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_207)
{
    // 1F665 0021;	
    // (🙥) HEAVY SOUTH WEST POINTING BUD	[16C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F665, 0x0021 };
    uint32_t const ces[9] = { 0x16C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_208)
{
    // 1F665 003F;	
    // (🙥) HEAVY SOUTH WEST POINTING BUD	[16C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F665, 0x003F };
    uint32_t const ces[9] = { 0x16C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_209)
{
    // 1F665 0061;	
    // (🙥) HEAVY SOUTH WEST POINTING BUD	[16C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F665, 0x0061 };
    uint32_t const ces[9] = { 0x16C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_210)
{
    // 1F665 0041;	
    // (🙥) HEAVY SOUTH WEST POINTING BUD	[16C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F665, 0x0041 };
    uint32_t const ces[9] = { 0x16C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_211)
{
    // 1F665 0062;	
    // (🙥) HEAVY SOUTH WEST POINTING BUD	[16C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F665, 0x0062 };
    uint32_t const ces[9] = { 0x16C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_212)
{
    // 1F666 0021;	
    // (🙦) HEAVY NORTH EAST POINTING BUD	[16C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F666, 0x0021 };
    uint32_t const ces[9] = { 0x16C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_213)
{
    // 1F666 003F;	
    // (🙦) HEAVY NORTH EAST POINTING BUD	[16C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F666, 0x003F };
    uint32_t const ces[9] = { 0x16C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_214)
{
    // 1F666 0061;	
    // (🙦) HEAVY NORTH EAST POINTING BUD	[16C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F666, 0x0061 };
    uint32_t const ces[9] = { 0x16C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_215)
{
    // 1F666 0041;	
    // (🙦) HEAVY NORTH EAST POINTING BUD	[16C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F666, 0x0041 };
    uint32_t const ces[9] = { 0x16C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_216)
{
    // 1F666 0062;	
    // (🙦) HEAVY NORTH EAST POINTING BUD	[16C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F666, 0x0062 };
    uint32_t const ces[9] = { 0x16C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_217)
{
    // 1F667 0021;	
    // (🙧) HEAVY SOUTH EAST POINTING BUD	[16C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F667, 0x0021 };
    uint32_t const ces[9] = { 0x16C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_218)
{
    // 1F667 003F;	
    // (🙧) HEAVY SOUTH EAST POINTING BUD	[16C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F667, 0x003F };
    uint32_t const ces[9] = { 0x16C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_219)
{
    // 1F667 0061;	
    // (🙧) HEAVY SOUTH EAST POINTING BUD	[16C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F667, 0x0061 };
    uint32_t const ces[9] = { 0x16C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_220)
{
    // 1F667 0041;	
    // (🙧) HEAVY SOUTH EAST POINTING BUD	[16C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F667, 0x0041 };
    uint32_t const ces[9] = { 0x16C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_221)
{
    // 1F667 0062;	
    // (🙧) HEAVY SOUTH EAST POINTING BUD	[16C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F667, 0x0062 };
    uint32_t const ces[9] = { 0x16C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_222)
{
    // 1F668 0021;	
    // (🙨) HOLLOW QUILT SQUARE ORNAMENT	[16C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F668, 0x0021 };
    uint32_t const ces[9] = { 0x16C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_223)
{
    // 1F668 003F;	
    // (🙨) HOLLOW QUILT SQUARE ORNAMENT	[16C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F668, 0x003F };
    uint32_t const ces[9] = { 0x16C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_224)
{
    // 1F668 0061;	
    // (🙨) HOLLOW QUILT SQUARE ORNAMENT	[16C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F668, 0x0061 };
    uint32_t const ces[9] = { 0x16C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_225)
{
    // 1F668 0041;	
    // (🙨) HOLLOW QUILT SQUARE ORNAMENT	[16C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F668, 0x0041 };
    uint32_t const ces[9] = { 0x16C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_226)
{
    // 1F668 0062;	
    // (🙨) HOLLOW QUILT SQUARE ORNAMENT	[16C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F668, 0x0062 };
    uint32_t const ces[9] = { 0x16C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_227)
{
    // 1F669 0021;	
    // (🙩) HOLLOW QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F669, 0x0021 };
    uint32_t const ces[9] = { 0x16C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_228)
{
    // 1F669 003F;	
    // (🙩) HOLLOW QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F669, 0x003F };
    uint32_t const ces[9] = { 0x16C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_229)
{
    // 1F669 0061;	
    // (🙩) HOLLOW QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F669, 0x0061 };
    uint32_t const ces[9] = { 0x16C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_230)
{
    // 1F669 0041;	
    // (🙩) HOLLOW QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F669, 0x0041 };
    uint32_t const ces[9] = { 0x16C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_231)
{
    // 1F669 0062;	
    // (🙩) HOLLOW QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F669, 0x0062 };
    uint32_t const ces[9] = { 0x16C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_232)
{
    // 1F66A 0021;	
    // (🙪) SOLID QUILT SQUARE ORNAMENT	[16C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66A, 0x0021 };
    uint32_t const ces[9] = { 0x16C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_233)
{
    // 1F66A 003F;	
    // (🙪) SOLID QUILT SQUARE ORNAMENT	[16C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66A, 0x003F };
    uint32_t const ces[9] = { 0x16C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_234)
{
    // 1F66A 0061;	
    // (🙪) SOLID QUILT SQUARE ORNAMENT	[16C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66A, 0x0061 };
    uint32_t const ces[9] = { 0x16C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_235)
{
    // 1F66A 0041;	
    // (🙪) SOLID QUILT SQUARE ORNAMENT	[16C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F66A, 0x0041 };
    uint32_t const ces[9] = { 0x16C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_236)
{
    // 1F66A 0062;	
    // (🙪) SOLID QUILT SQUARE ORNAMENT	[16C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66A, 0x0062 };
    uint32_t const ces[9] = { 0x16C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_237)
{
    // 1F66B 0021;	
    // (🙫) SOLID QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66B, 0x0021 };
    uint32_t const ces[9] = { 0x16C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_238)
{
    // 1F66B 003F;	
    // (🙫) SOLID QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66B, 0x003F };
    uint32_t const ces[9] = { 0x16C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_239)
{
    // 1F66B 0061;	
    // (🙫) SOLID QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66B, 0x0061 };
    uint32_t const ces[9] = { 0x16C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_240)
{
    // 1F66B 0041;	
    // (🙫) SOLID QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F66B, 0x0041 };
    uint32_t const ces[9] = { 0x16C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_241)
{
    // 1F66B 0062;	
    // (🙫) SOLID QUILT SQUARE ORNAMENT IN BLACK SQUARE	[16C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66B, 0x0062 };
    uint32_t const ces[9] = { 0x16C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_242)
{
    // 1F66C 0021;	
    // (🙬) LEFTWARDS ROCKET	[16C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66C, 0x0021 };
    uint32_t const ces[9] = { 0x16C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_243)
{
    // 1F66C 003F;	
    // (🙬) LEFTWARDS ROCKET	[16C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66C, 0x003F };
    uint32_t const ces[9] = { 0x16C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_244)
{
    // 1F66C 0061;	
    // (🙬) LEFTWARDS ROCKET	[16C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66C, 0x0061 };
    uint32_t const ces[9] = { 0x16C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_245)
{
    // 1F66C 0041;	
    // (🙬) LEFTWARDS ROCKET	[16C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F66C, 0x0041 };
    uint32_t const ces[9] = { 0x16C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_246)
{
    // 1F66C 0062;	
    // (🙬) LEFTWARDS ROCKET	[16C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66C, 0x0062 };
    uint32_t const ces[9] = { 0x16C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_247)
{
    // 1F66D 0021;	
    // (🙭) UPWARDS ROCKET	[16C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66D, 0x0021 };
    uint32_t const ces[9] = { 0x16C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_248)
{
    // 1F66D 003F;	
    // (🙭) UPWARDS ROCKET	[16C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66D, 0x003F };
    uint32_t const ces[9] = { 0x16C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_249)
{
    // 1F66D 0061;	
    // (🙭) UPWARDS ROCKET	[16C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66D, 0x0061 };
    uint32_t const ces[9] = { 0x16C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_250)
{
    // 1F66D 0041;	
    // (🙭) UPWARDS ROCKET	[16C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F66D, 0x0041 };
    uint32_t const ces[9] = { 0x16C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_251)
{
    // 1F66D 0062;	
    // (🙭) UPWARDS ROCKET	[16C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66D, 0x0062 };
    uint32_t const ces[9] = { 0x16C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_252)
{
    // 1F66E 0021;	
    // (🙮) RIGHTWARDS ROCKET	[16C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66E, 0x0021 };
    uint32_t const ces[9] = { 0x16C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_253)
{
    // 1F66E 003F;	
    // (🙮) RIGHTWARDS ROCKET	[16C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66E, 0x003F };
    uint32_t const ces[9] = { 0x16C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_254)
{
    // 1F66E 0061;	
    // (🙮) RIGHTWARDS ROCKET	[16C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66E, 0x0061 };
    uint32_t const ces[9] = { 0x16C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_255)
{
    // 1F66E 0041;	
    // (🙮) RIGHTWARDS ROCKET	[16C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F66E, 0x0041 };
    uint32_t const ces[9] = { 0x16C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_256)
{
    // 1F66E 0062;	
    // (🙮) RIGHTWARDS ROCKET	[16C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66E, 0x0062 };
    uint32_t const ces[9] = { 0x16C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_257)
{
    // 1F66F 0021;	
    // (🙯) DOWNWARDS ROCKET	[16CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66F, 0x0021 };
    uint32_t const ces[9] = { 0x16CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_258)
{
    // 1F66F 003F;	
    // (🙯) DOWNWARDS ROCKET	[16CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66F, 0x003F };
    uint32_t const ces[9] = { 0x16CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_259)
{
    // 1F66F 0061;	
    // (🙯) DOWNWARDS ROCKET	[16CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66F, 0x0061 };
    uint32_t const ces[9] = { 0x16CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_260)
{
    // 1F66F 0041;	
    // (🙯) DOWNWARDS ROCKET	[16CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F66F, 0x0041 };
    uint32_t const ces[9] = { 0x16CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_261)
{
    // 1F66F 0062;	
    // (🙯) DOWNWARDS ROCKET	[16CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F66F, 0x0062 };
    uint32_t const ces[9] = { 0x16CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_262)
{
    // 1F670 0021;	
    // (🙰) SCRIPT LIGATURE ET ORNAMENT	[16CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F670, 0x0021 };
    uint32_t const ces[9] = { 0x16CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_263)
{
    // 1F670 003F;	
    // (🙰) SCRIPT LIGATURE ET ORNAMENT	[16CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F670, 0x003F };
    uint32_t const ces[9] = { 0x16CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_264)
{
    // 1F670 0061;	
    // (🙰) SCRIPT LIGATURE ET ORNAMENT	[16CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F670, 0x0061 };
    uint32_t const ces[9] = { 0x16CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_265)
{
    // 1F670 0041;	
    // (🙰) SCRIPT LIGATURE ET ORNAMENT	[16CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F670, 0x0041 };
    uint32_t const ces[9] = { 0x16CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_266)
{
    // 1F670 0062;	
    // (🙰) SCRIPT LIGATURE ET ORNAMENT	[16CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F670, 0x0062 };
    uint32_t const ces[9] = { 0x16CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_267)
{
    // 1F671 0021;	
    // (🙱) HEAVY SCRIPT LIGATURE ET ORNAMENT	[16CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F671, 0x0021 };
    uint32_t const ces[9] = { 0x16CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_268)
{
    // 1F671 003F;	
    // (🙱) HEAVY SCRIPT LIGATURE ET ORNAMENT	[16CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F671, 0x003F };
    uint32_t const ces[9] = { 0x16CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_269)
{
    // 1F671 0061;	
    // (🙱) HEAVY SCRIPT LIGATURE ET ORNAMENT	[16CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F671, 0x0061 };
    uint32_t const ces[9] = { 0x16CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_270)
{
    // 1F671 0041;	
    // (🙱) HEAVY SCRIPT LIGATURE ET ORNAMENT	[16CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F671, 0x0041 };
    uint32_t const ces[9] = { 0x16CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_271)
{
    // 1F671 0062;	
    // (🙱) HEAVY SCRIPT LIGATURE ET ORNAMENT	[16CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F671, 0x0062 };
    uint32_t const ces[9] = { 0x16CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_272)
{
    // 1F672 0021;	
    // (🙲) LIGATURE OPEN ET ORNAMENT	[16CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F672, 0x0021 };
    uint32_t const ces[9] = { 0x16CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_273)
{
    // 1F672 003F;	
    // (🙲) LIGATURE OPEN ET ORNAMENT	[16CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F672, 0x003F };
    uint32_t const ces[9] = { 0x16CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_274)
{
    // 1F672 0061;	
    // (🙲) LIGATURE OPEN ET ORNAMENT	[16CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F672, 0x0061 };
    uint32_t const ces[9] = { 0x16CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_275)
{
    // 1F672 0041;	
    // (🙲) LIGATURE OPEN ET ORNAMENT	[16CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F672, 0x0041 };
    uint32_t const ces[9] = { 0x16CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_276)
{
    // 1F672 0062;	
    // (🙲) LIGATURE OPEN ET ORNAMENT	[16CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F672, 0x0062 };
    uint32_t const ces[9] = { 0x16CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_277)
{
    // 1F673 0021;	
    // (🙳) HEAVY LIGATURE OPEN ET ORNAMENT	[16CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F673, 0x0021 };
    uint32_t const ces[9] = { 0x16CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_278)
{
    // 1F673 003F;	
    // (🙳) HEAVY LIGATURE OPEN ET ORNAMENT	[16CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F673, 0x003F };
    uint32_t const ces[9] = { 0x16CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_279)
{
    // 1F673 0061;	
    // (🙳) HEAVY LIGATURE OPEN ET ORNAMENT	[16CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F673, 0x0061 };
    uint32_t const ces[9] = { 0x16CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_280)
{
    // 1F673 0041;	
    // (🙳) HEAVY LIGATURE OPEN ET ORNAMENT	[16CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F673, 0x0041 };
    uint32_t const ces[9] = { 0x16CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_281)
{
    // 1F673 0062;	
    // (🙳) HEAVY LIGATURE OPEN ET ORNAMENT	[16CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F673, 0x0062 };
    uint32_t const ces[9] = { 0x16CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_282)
{
    // 1F674 0021;	
    // (🙴) HEAVY AMPERSAND ORNAMENT	[16CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F674, 0x0021 };
    uint32_t const ces[9] = { 0x16CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_283)
{
    // 1F674 003F;	
    // (🙴) HEAVY AMPERSAND ORNAMENT	[16CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F674, 0x003F };
    uint32_t const ces[9] = { 0x16CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_284)
{
    // 1F674 0061;	
    // (🙴) HEAVY AMPERSAND ORNAMENT	[16CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F674, 0x0061 };
    uint32_t const ces[9] = { 0x16CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_285)
{
    // 1F674 0041;	
    // (🙴) HEAVY AMPERSAND ORNAMENT	[16CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F674, 0x0041 };
    uint32_t const ces[9] = { 0x16CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_286)
{
    // 1F674 0062;	
    // (🙴) HEAVY AMPERSAND ORNAMENT	[16CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F674, 0x0062 };
    uint32_t const ces[9] = { 0x16CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_287)
{
    // 1F675 0021;	
    // (🙵) SWASH AMPERSAND ORNAMENT	[16D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F675, 0x0021 };
    uint32_t const ces[9] = { 0x16D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_288)
{
    // 1F675 003F;	
    // (🙵) SWASH AMPERSAND ORNAMENT	[16D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F675, 0x003F };
    uint32_t const ces[9] = { 0x16D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_289)
{
    // 1F675 0061;	
    // (🙵) SWASH AMPERSAND ORNAMENT	[16D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F675, 0x0061 };
    uint32_t const ces[9] = { 0x16D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_290)
{
    // 1F675 0041;	
    // (🙵) SWASH AMPERSAND ORNAMENT	[16D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F675, 0x0041 };
    uint32_t const ces[9] = { 0x16D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_291)
{
    // 1F675 0062;	
    // (🙵) SWASH AMPERSAND ORNAMENT	[16D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F675, 0x0062 };
    uint32_t const ces[9] = { 0x16D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_292)
{
    // 1F676 0021;	
    // (🙶) SANS-SERIF HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[16D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F676, 0x0021 };
    uint32_t const ces[9] = { 0x16D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_293)
{
    // 1F676 003F;	
    // (🙶) SANS-SERIF HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[16D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F676, 0x003F };
    uint32_t const ces[9] = { 0x16D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_294)
{
    // 1F676 0061;	
    // (🙶) SANS-SERIF HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[16D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F676, 0x0061 };
    uint32_t const ces[9] = { 0x16D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_295)
{
    // 1F676 0041;	
    // (🙶) SANS-SERIF HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[16D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F676, 0x0041 };
    uint32_t const ces[9] = { 0x16D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_296)
{
    // 1F676 0062;	
    // (🙶) SANS-SERIF HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT	[16D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F676, 0x0062 };
    uint32_t const ces[9] = { 0x16D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_297)
{
    // 1F677 0021;	
    // (🙷) SANS-SERIF HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F677, 0x0021 };
    uint32_t const ces[9] = { 0x16D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_298)
{
    // 1F677 003F;	
    // (🙷) SANS-SERIF HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F677, 0x003F };
    uint32_t const ces[9] = { 0x16D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_299)
{
    // 1F677 0061;	
    // (🙷) SANS-SERIF HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F677, 0x0061 };
    uint32_t const ces[9] = { 0x16D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_300)
{
    // 1F677 0041;	
    // (🙷) SANS-SERIF HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F677, 0x0041 };
    uint32_t const ces[9] = { 0x16D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_301)
{
    // 1F677 0062;	
    // (🙷) SANS-SERIF HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F677, 0x0062 };
    uint32_t const ces[9] = { 0x16D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_302)
{
    // 1F678 0021;	
    // (🙸) SANS-SERIF HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F678, 0x0021 };
    uint32_t const ces[9] = { 0x16D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_303)
{
    // 1F678 003F;	
    // (🙸) SANS-SERIF HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F678, 0x003F };
    uint32_t const ces[9] = { 0x16D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_304)
{
    // 1F678 0061;	
    // (🙸) SANS-SERIF HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F678, 0x0061 };
    uint32_t const ces[9] = { 0x16D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_305)
{
    // 1F678 0041;	
    // (🙸) SANS-SERIF HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F678, 0x0041 };
    uint32_t const ces[9] = { 0x16D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_306)
{
    // 1F678 0062;	
    // (🙸) SANS-SERIF HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT	[16D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F678, 0x0062 };
    uint32_t const ces[9] = { 0x16D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_307)
{
    // 1F679 0021;	
    // (🙹) HEAVY INTERROBANG ORNAMENT	[16D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F679, 0x0021 };
    uint32_t const ces[9] = { 0x16D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_308)
{
    // 1F679 003F;	
    // (🙹) HEAVY INTERROBANG ORNAMENT	[16D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F679, 0x003F };
    uint32_t const ces[9] = { 0x16D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_309)
{
    // 1F679 0061;	
    // (🙹) HEAVY INTERROBANG ORNAMENT	[16D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F679, 0x0061 };
    uint32_t const ces[9] = { 0x16D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_310)
{
    // 1F679 0041;	
    // (🙹) HEAVY INTERROBANG ORNAMENT	[16D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F679, 0x0041 };
    uint32_t const ces[9] = { 0x16D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_311)
{
    // 1F679 0062;	
    // (🙹) HEAVY INTERROBANG ORNAMENT	[16D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F679, 0x0062 };
    uint32_t const ces[9] = { 0x16D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_312)
{
    // 1F67A 0021;	
    // (🙺) SANS-SERIF INTERROBANG ORNAMENT	[16D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67A, 0x0021 };
    uint32_t const ces[9] = { 0x16D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_313)
{
    // 1F67A 003F;	
    // (🙺) SANS-SERIF INTERROBANG ORNAMENT	[16D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67A, 0x003F };
    uint32_t const ces[9] = { 0x16D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_314)
{
    // 1F67A 0061;	
    // (🙺) SANS-SERIF INTERROBANG ORNAMENT	[16D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67A, 0x0061 };
    uint32_t const ces[9] = { 0x16D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_315)
{
    // 1F67A 0041;	
    // (🙺) SANS-SERIF INTERROBANG ORNAMENT	[16D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F67A, 0x0041 };
    uint32_t const ces[9] = { 0x16D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_316)
{
    // 1F67A 0062;	
    // (🙺) SANS-SERIF INTERROBANG ORNAMENT	[16D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67A, 0x0062 };
    uint32_t const ces[9] = { 0x16D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_317)
{
    // 1F67B 0021;	
    // (🙻) HEAVY SANS-SERIF INTERROBANG ORNAMENT	[16D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67B, 0x0021 };
    uint32_t const ces[9] = { 0x16D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_318)
{
    // 1F67B 003F;	
    // (🙻) HEAVY SANS-SERIF INTERROBANG ORNAMENT	[16D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67B, 0x003F };
    uint32_t const ces[9] = { 0x16D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_319)
{
    // 1F67B 0061;	
    // (🙻) HEAVY SANS-SERIF INTERROBANG ORNAMENT	[16D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67B, 0x0061 };
    uint32_t const ces[9] = { 0x16D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_320)
{
    // 1F67B 0041;	
    // (🙻) HEAVY SANS-SERIF INTERROBANG ORNAMENT	[16D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F67B, 0x0041 };
    uint32_t const ces[9] = { 0x16D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_321)
{
    // 1F67B 0062;	
    // (🙻) HEAVY SANS-SERIF INTERROBANG ORNAMENT	[16D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67B, 0x0062 };
    uint32_t const ces[9] = { 0x16D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_322)
{
    // 1F67C 0021;	
    // (🙼) VERY HEAVY SOLIDUS	[16D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67C, 0x0021 };
    uint32_t const ces[9] = { 0x16D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_323)
{
    // 1F67C 003F;	
    // (🙼) VERY HEAVY SOLIDUS	[16D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67C, 0x003F };
    uint32_t const ces[9] = { 0x16D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_324)
{
    // 1F67C 0061;	
    // (🙼) VERY HEAVY SOLIDUS	[16D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67C, 0x0061 };
    uint32_t const ces[9] = { 0x16D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_325)
{
    // 1F67C 0041;	
    // (🙼) VERY HEAVY SOLIDUS	[16D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F67C, 0x0041 };
    uint32_t const ces[9] = { 0x16D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_326)
{
    // 1F67C 0062;	
    // (🙼) VERY HEAVY SOLIDUS	[16D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67C, 0x0062 };
    uint32_t const ces[9] = { 0x16D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_327)
{
    // 1F67D 0021;	
    // (🙽) VERY HEAVY REVERSE SOLIDUS	[16D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67D, 0x0021 };
    uint32_t const ces[9] = { 0x16D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_328)
{
    // 1F67D 003F;	
    // (🙽) VERY HEAVY REVERSE SOLIDUS	[16D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67D, 0x003F };
    uint32_t const ces[9] = { 0x16D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_329)
{
    // 1F67D 0061;	
    // (🙽) VERY HEAVY REVERSE SOLIDUS	[16D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67D, 0x0061 };
    uint32_t const ces[9] = { 0x16D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_330)
{
    // 1F67D 0041;	
    // (🙽) VERY HEAVY REVERSE SOLIDUS	[16D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F67D, 0x0041 };
    uint32_t const ces[9] = { 0x16D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_331)
{
    // 1F67D 0062;	
    // (🙽) VERY HEAVY REVERSE SOLIDUS	[16D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67D, 0x0062 };
    uint32_t const ces[9] = { 0x16D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_332)
{
    // 1F67E 0021;	
    // (🙾) CHECKER BOARD	[16D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67E, 0x0021 };
    uint32_t const ces[9] = { 0x16D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_333)
{
    // 1F67E 003F;	
    // (🙾) CHECKER BOARD	[16D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67E, 0x003F };
    uint32_t const ces[9] = { 0x16D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_334)
{
    // 1F67E 0061;	
    // (🙾) CHECKER BOARD	[16D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67E, 0x0061 };
    uint32_t const ces[9] = { 0x16D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_335)
{
    // 1F67E 0041;	
    // (🙾) CHECKER BOARD	[16D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F67E, 0x0041 };
    uint32_t const ces[9] = { 0x16D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_336)
{
    // 1F67E 0062;	
    // (🙾) CHECKER BOARD	[16D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67E, 0x0062 };
    uint32_t const ces[9] = { 0x16D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_337)
{
    // 1F67F 0021;	
    // (🙿) REVERSE CHECKER BOARD	[16DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67F, 0x0021 };
    uint32_t const ces[9] = { 0x16DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_338)
{
    // 1F67F 003F;	
    // (🙿) REVERSE CHECKER BOARD	[16DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67F, 0x003F };
    uint32_t const ces[9] = { 0x16DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_339)
{
    // 1F67F 0061;	
    // (🙿) REVERSE CHECKER BOARD	[16DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67F, 0x0061 };
    uint32_t const ces[9] = { 0x16DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_340)
{
    // 1F67F 0041;	
    // (🙿) REVERSE CHECKER BOARD	[16DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F67F, 0x0041 };
    uint32_t const ces[9] = { 0x16DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_341)
{
    // 1F67F 0062;	
    // (🙿) REVERSE CHECKER BOARD	[16DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F67F, 0x0062 };
    uint32_t const ces[9] = { 0x16DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_342)
{
    // 1F680 0021;	
    // (🚀) ROCKET	[16DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F680, 0x0021 };
    uint32_t const ces[9] = { 0x16DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_343)
{
    // 1F680 003F;	
    // (🚀) ROCKET	[16DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F680, 0x003F };
    uint32_t const ces[9] = { 0x16DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_344)
{
    // 1F680 0061;	
    // (🚀) ROCKET	[16DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F680, 0x0061 };
    uint32_t const ces[9] = { 0x16DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_345)
{
    // 1F680 0041;	
    // (🚀) ROCKET	[16DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F680, 0x0041 };
    uint32_t const ces[9] = { 0x16DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_346)
{
    // 1F680 0062;	
    // (🚀) ROCKET	[16DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F680, 0x0062 };
    uint32_t const ces[9] = { 0x16DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_347)
{
    // 1F681 0021;	
    // (🚁) HELICOPTER	[16DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F681, 0x0021 };
    uint32_t const ces[9] = { 0x16DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_348)
{
    // 1F681 003F;	
    // (🚁) HELICOPTER	[16DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F681, 0x003F };
    uint32_t const ces[9] = { 0x16DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_349)
{
    // 1F681 0061;	
    // (🚁) HELICOPTER	[16DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F681, 0x0061 };
    uint32_t const ces[9] = { 0x16DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_350)
{
    // 1F681 0041;	
    // (🚁) HELICOPTER	[16DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F681, 0x0041 };
    uint32_t const ces[9] = { 0x16DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_351)
{
    // 1F681 0062;	
    // (🚁) HELICOPTER	[16DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F681, 0x0062 };
    uint32_t const ces[9] = { 0x16DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_352)
{
    // 1F682 0021;	
    // (🚂) STEAM LOCOMOTIVE	[16DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F682, 0x0021 };
    uint32_t const ces[9] = { 0x16DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_353)
{
    // 1F682 003F;	
    // (🚂) STEAM LOCOMOTIVE	[16DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F682, 0x003F };
    uint32_t const ces[9] = { 0x16DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_354)
{
    // 1F682 0061;	
    // (🚂) STEAM LOCOMOTIVE	[16DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F682, 0x0061 };
    uint32_t const ces[9] = { 0x16DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_355)
{
    // 1F682 0041;	
    // (🚂) STEAM LOCOMOTIVE	[16DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F682, 0x0041 };
    uint32_t const ces[9] = { 0x16DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_356)
{
    // 1F682 0062;	
    // (🚂) STEAM LOCOMOTIVE	[16DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F682, 0x0062 };
    uint32_t const ces[9] = { 0x16DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_357)
{
    // 1F683 0021;	
    // (🚃) RAILWAY CAR	[16DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F683, 0x0021 };
    uint32_t const ces[9] = { 0x16DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_358)
{
    // 1F683 003F;	
    // (🚃) RAILWAY CAR	[16DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F683, 0x003F };
    uint32_t const ces[9] = { 0x16DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_359)
{
    // 1F683 0061;	
    // (🚃) RAILWAY CAR	[16DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F683, 0x0061 };
    uint32_t const ces[9] = { 0x16DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_360)
{
    // 1F683 0041;	
    // (🚃) RAILWAY CAR	[16DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F683, 0x0041 };
    uint32_t const ces[9] = { 0x16DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_361)
{
    // 1F683 0062;	
    // (🚃) RAILWAY CAR	[16DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F683, 0x0062 };
    uint32_t const ces[9] = { 0x16DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_362)
{
    // 1F684 0021;	
    // (🚄) HIGH-SPEED TRAIN	[16DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F684, 0x0021 };
    uint32_t const ces[9] = { 0x16DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_363)
{
    // 1F684 003F;	
    // (🚄) HIGH-SPEED TRAIN	[16DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F684, 0x003F };
    uint32_t const ces[9] = { 0x16DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_364)
{
    // 1F684 0061;	
    // (🚄) HIGH-SPEED TRAIN	[16DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F684, 0x0061 };
    uint32_t const ces[9] = { 0x16DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_365)
{
    // 1F684 0041;	
    // (🚄) HIGH-SPEED TRAIN	[16DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F684, 0x0041 };
    uint32_t const ces[9] = { 0x16DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_366)
{
    // 1F684 0062;	
    // (🚄) HIGH-SPEED TRAIN	[16DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F684, 0x0062 };
    uint32_t const ces[9] = { 0x16DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_367)
{
    // 1F685 0021;	
    // (🚅) HIGH-SPEED TRAIN WITH BULLET NOSE	[16E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F685, 0x0021 };
    uint32_t const ces[9] = { 0x16E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_368)
{
    // 1F685 003F;	
    // (🚅) HIGH-SPEED TRAIN WITH BULLET NOSE	[16E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F685, 0x003F };
    uint32_t const ces[9] = { 0x16E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_369)
{
    // 1F685 0061;	
    // (🚅) HIGH-SPEED TRAIN WITH BULLET NOSE	[16E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F685, 0x0061 };
    uint32_t const ces[9] = { 0x16E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_370)
{
    // 1F685 0041;	
    // (🚅) HIGH-SPEED TRAIN WITH BULLET NOSE	[16E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F685, 0x0041 };
    uint32_t const ces[9] = { 0x16E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_371)
{
    // 1F685 0062;	
    // (🚅) HIGH-SPEED TRAIN WITH BULLET NOSE	[16E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F685, 0x0062 };
    uint32_t const ces[9] = { 0x16E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_372)
{
    // 1F686 0021;	
    // (🚆) TRAIN	[16E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F686, 0x0021 };
    uint32_t const ces[9] = { 0x16E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_373)
{
    // 1F686 003F;	
    // (🚆) TRAIN	[16E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F686, 0x003F };
    uint32_t const ces[9] = { 0x16E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_374)
{
    // 1F686 0061;	
    // (🚆) TRAIN	[16E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F686, 0x0061 };
    uint32_t const ces[9] = { 0x16E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_375)
{
    // 1F686 0041;	
    // (🚆) TRAIN	[16E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F686, 0x0041 };
    uint32_t const ces[9] = { 0x16E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_376)
{
    // 1F686 0062;	
    // (🚆) TRAIN	[16E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F686, 0x0062 };
    uint32_t const ces[9] = { 0x16E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_377)
{
    // 1F687 0021;	
    // (🚇) METRO	[16E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F687, 0x0021 };
    uint32_t const ces[9] = { 0x16E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_378)
{
    // 1F687 003F;	
    // (🚇) METRO	[16E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F687, 0x003F };
    uint32_t const ces[9] = { 0x16E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_379)
{
    // 1F687 0061;	
    // (🚇) METRO	[16E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F687, 0x0061 };
    uint32_t const ces[9] = { 0x16E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_380)
{
    // 1F687 0041;	
    // (🚇) METRO	[16E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F687, 0x0041 };
    uint32_t const ces[9] = { 0x16E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_381)
{
    // 1F687 0062;	
    // (🚇) METRO	[16E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F687, 0x0062 };
    uint32_t const ces[9] = { 0x16E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_382)
{
    // 1F688 0021;	
    // (🚈) LIGHT RAIL	[16E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F688, 0x0021 };
    uint32_t const ces[9] = { 0x16E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_383)
{
    // 1F688 003F;	
    // (🚈) LIGHT RAIL	[16E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F688, 0x003F };
    uint32_t const ces[9] = { 0x16E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_384)
{
    // 1F688 0061;	
    // (🚈) LIGHT RAIL	[16E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F688, 0x0061 };
    uint32_t const ces[9] = { 0x16E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_385)
{
    // 1F688 0041;	
    // (🚈) LIGHT RAIL	[16E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F688, 0x0041 };
    uint32_t const ces[9] = { 0x16E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_386)
{
    // 1F688 0062;	
    // (🚈) LIGHT RAIL	[16E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F688, 0x0062 };
    uint32_t const ces[9] = { 0x16E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_387)
{
    // 1F689 0021;	
    // (🚉) STATION	[16E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F689, 0x0021 };
    uint32_t const ces[9] = { 0x16E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_388)
{
    // 1F689 003F;	
    // (🚉) STATION	[16E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F689, 0x003F };
    uint32_t const ces[9] = { 0x16E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_389)
{
    // 1F689 0061;	
    // (🚉) STATION	[16E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F689, 0x0061 };
    uint32_t const ces[9] = { 0x16E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_390)
{
    // 1F689 0041;	
    // (🚉) STATION	[16E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F689, 0x0041 };
    uint32_t const ces[9] = { 0x16E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_391)
{
    // 1F689 0062;	
    // (🚉) STATION	[16E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F689, 0x0062 };
    uint32_t const ces[9] = { 0x16E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_392)
{
    // 1F68A 0021;	
    // (🚊) TRAM	[16E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68A, 0x0021 };
    uint32_t const ces[9] = { 0x16E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_393)
{
    // 1F68A 003F;	
    // (🚊) TRAM	[16E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68A, 0x003F };
    uint32_t const ces[9] = { 0x16E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_394)
{
    // 1F68A 0061;	
    // (🚊) TRAM	[16E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68A, 0x0061 };
    uint32_t const ces[9] = { 0x16E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_395)
{
    // 1F68A 0041;	
    // (🚊) TRAM	[16E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F68A, 0x0041 };
    uint32_t const ces[9] = { 0x16E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_396)
{
    // 1F68A 0062;	
    // (🚊) TRAM	[16E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68A, 0x0062 };
    uint32_t const ces[9] = { 0x16E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_397)
{
    // 1F68B 0021;	
    // (🚋) TRAM CAR	[16E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68B, 0x0021 };
    uint32_t const ces[9] = { 0x16E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_398)
{
    // 1F68B 003F;	
    // (🚋) TRAM CAR	[16E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68B, 0x003F };
    uint32_t const ces[9] = { 0x16E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_399)
{
    // 1F68B 0061;	
    // (🚋) TRAM CAR	[16E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68B, 0x0061 };
    uint32_t const ces[9] = { 0x16E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_400)
{
    // 1F68B 0041;	
    // (🚋) TRAM CAR	[16E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F68B, 0x0041 };
    uint32_t const ces[9] = { 0x16E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_401)
{
    // 1F68B 0062;	
    // (🚋) TRAM CAR	[16E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68B, 0x0062 };
    uint32_t const ces[9] = { 0x16E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_402)
{
    // 1F68C 0021;	
    // (🚌) BUS	[16E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68C, 0x0021 };
    uint32_t const ces[9] = { 0x16E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_403)
{
    // 1F68C 003F;	
    // (🚌) BUS	[16E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68C, 0x003F };
    uint32_t const ces[9] = { 0x16E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_404)
{
    // 1F68C 0061;	
    // (🚌) BUS	[16E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68C, 0x0061 };
    uint32_t const ces[9] = { 0x16E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_405)
{
    // 1F68C 0041;	
    // (🚌) BUS	[16E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F68C, 0x0041 };
    uint32_t const ces[9] = { 0x16E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_406)
{
    // 1F68C 0062;	
    // (🚌) BUS	[16E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68C, 0x0062 };
    uint32_t const ces[9] = { 0x16E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_407)
{
    // 1F68D 0021;	
    // (🚍) ONCOMING BUS	[16E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68D, 0x0021 };
    uint32_t const ces[9] = { 0x16E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_408)
{
    // 1F68D 003F;	
    // (🚍) ONCOMING BUS	[16E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68D, 0x003F };
    uint32_t const ces[9] = { 0x16E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_409)
{
    // 1F68D 0061;	
    // (🚍) ONCOMING BUS	[16E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68D, 0x0061 };
    uint32_t const ces[9] = { 0x16E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_410)
{
    // 1F68D 0041;	
    // (🚍) ONCOMING BUS	[16E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F68D, 0x0041 };
    uint32_t const ces[9] = { 0x16E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_411)
{
    // 1F68D 0062;	
    // (🚍) ONCOMING BUS	[16E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68D, 0x0062 };
    uint32_t const ces[9] = { 0x16E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_412)
{
    // 1F68E 0021;	
    // (🚎) TROLLEYBUS	[16E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68E, 0x0021 };
    uint32_t const ces[9] = { 0x16E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_413)
{
    // 1F68E 003F;	
    // (🚎) TROLLEYBUS	[16E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68E, 0x003F };
    uint32_t const ces[9] = { 0x16E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_414)
{
    // 1F68E 0061;	
    // (🚎) TROLLEYBUS	[16E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68E, 0x0061 };
    uint32_t const ces[9] = { 0x16E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_415)
{
    // 1F68E 0041;	
    // (🚎) TROLLEYBUS	[16E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F68E, 0x0041 };
    uint32_t const ces[9] = { 0x16E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_416)
{
    // 1F68E 0062;	
    // (🚎) TROLLEYBUS	[16E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68E, 0x0062 };
    uint32_t const ces[9] = { 0x16E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_417)
{
    // 1F68F 0021;	
    // (🚏) BUS STOP	[16EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68F, 0x0021 };
    uint32_t const ces[9] = { 0x16EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_418)
{
    // 1F68F 003F;	
    // (🚏) BUS STOP	[16EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68F, 0x003F };
    uint32_t const ces[9] = { 0x16EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_419)
{
    // 1F68F 0061;	
    // (🚏) BUS STOP	[16EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68F, 0x0061 };
    uint32_t const ces[9] = { 0x16EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_420)
{
    // 1F68F 0041;	
    // (🚏) BUS STOP	[16EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F68F, 0x0041 };
    uint32_t const ces[9] = { 0x16EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_421)
{
    // 1F68F 0062;	
    // (🚏) BUS STOP	[16EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F68F, 0x0062 };
    uint32_t const ces[9] = { 0x16EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_422)
{
    // 1F690 0021;	
    // (🚐) MINIBUS	[16EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F690, 0x0021 };
    uint32_t const ces[9] = { 0x16EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_423)
{
    // 1F690 003F;	
    // (🚐) MINIBUS	[16EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F690, 0x003F };
    uint32_t const ces[9] = { 0x16EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_424)
{
    // 1F690 0061;	
    // (🚐) MINIBUS	[16EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F690, 0x0061 };
    uint32_t const ces[9] = { 0x16EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_425)
{
    // 1F690 0041;	
    // (🚐) MINIBUS	[16EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F690, 0x0041 };
    uint32_t const ces[9] = { 0x16EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_426)
{
    // 1F690 0062;	
    // (🚐) MINIBUS	[16EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F690, 0x0062 };
    uint32_t const ces[9] = { 0x16EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_427)
{
    // 1F691 0021;	
    // (🚑) AMBULANCE	[16EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F691, 0x0021 };
    uint32_t const ces[9] = { 0x16EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_428)
{
    // 1F691 003F;	
    // (🚑) AMBULANCE	[16EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F691, 0x003F };
    uint32_t const ces[9] = { 0x16EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_429)
{
    // 1F691 0061;	
    // (🚑) AMBULANCE	[16EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F691, 0x0061 };
    uint32_t const ces[9] = { 0x16EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_430)
{
    // 1F691 0041;	
    // (🚑) AMBULANCE	[16EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F691, 0x0041 };
    uint32_t const ces[9] = { 0x16EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_431)
{
    // 1F691 0062;	
    // (🚑) AMBULANCE	[16EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F691, 0x0062 };
    uint32_t const ces[9] = { 0x16EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_432)
{
    // 1F692 0021;	
    // (🚒) FIRE ENGINE	[16ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F692, 0x0021 };
    uint32_t const ces[9] = { 0x16ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_433)
{
    // 1F692 003F;	
    // (🚒) FIRE ENGINE	[16ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F692, 0x003F };
    uint32_t const ces[9] = { 0x16ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_434)
{
    // 1F692 0061;	
    // (🚒) FIRE ENGINE	[16ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F692, 0x0061 };
    uint32_t const ces[9] = { 0x16ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_435)
{
    // 1F692 0041;	
    // (🚒) FIRE ENGINE	[16ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F692, 0x0041 };
    uint32_t const ces[9] = { 0x16ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_436)
{
    // 1F692 0062;	
    // (🚒) FIRE ENGINE	[16ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F692, 0x0062 };
    uint32_t const ces[9] = { 0x16ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_437)
{
    // 1F693 0021;	
    // (🚓) POLICE CAR	[16EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F693, 0x0021 };
    uint32_t const ces[9] = { 0x16EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_438)
{
    // 1F693 003F;	
    // (🚓) POLICE CAR	[16EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F693, 0x003F };
    uint32_t const ces[9] = { 0x16EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_439)
{
    // 1F693 0061;	
    // (🚓) POLICE CAR	[16EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F693, 0x0061 };
    uint32_t const ces[9] = { 0x16EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_440)
{
    // 1F693 0041;	
    // (🚓) POLICE CAR	[16EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F693, 0x0041 };
    uint32_t const ces[9] = { 0x16EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_441)
{
    // 1F693 0062;	
    // (🚓) POLICE CAR	[16EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F693, 0x0062 };
    uint32_t const ces[9] = { 0x16EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_442)
{
    // 1F694 0021;	
    // (🚔) ONCOMING POLICE CAR	[16EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F694, 0x0021 };
    uint32_t const ces[9] = { 0x16EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_443)
{
    // 1F694 003F;	
    // (🚔) ONCOMING POLICE CAR	[16EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F694, 0x003F };
    uint32_t const ces[9] = { 0x16EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_444)
{
    // 1F694 0061;	
    // (🚔) ONCOMING POLICE CAR	[16EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F694, 0x0061 };
    uint32_t const ces[9] = { 0x16EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_445)
{
    // 1F694 0041;	
    // (🚔) ONCOMING POLICE CAR	[16EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F694, 0x0041 };
    uint32_t const ces[9] = { 0x16EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_446)
{
    // 1F694 0062;	
    // (🚔) ONCOMING POLICE CAR	[16EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F694, 0x0062 };
    uint32_t const ces[9] = { 0x16EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_447)
{
    // 1F695 0021;	
    // (🚕) TAXI	[16F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F695, 0x0021 };
    uint32_t const ces[9] = { 0x16F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_448)
{
    // 1F695 003F;	
    // (🚕) TAXI	[16F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F695, 0x003F };
    uint32_t const ces[9] = { 0x16F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_449)
{
    // 1F695 0061;	
    // (🚕) TAXI	[16F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F695, 0x0061 };
    uint32_t const ces[9] = { 0x16F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_450)
{
    // 1F695 0041;	
    // (🚕) TAXI	[16F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F695, 0x0041 };
    uint32_t const ces[9] = { 0x16F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_451)
{
    // 1F695 0062;	
    // (🚕) TAXI	[16F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F695, 0x0062 };
    uint32_t const ces[9] = { 0x16F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_452)
{
    // 1F696 0021;	
    // (🚖) ONCOMING TAXI	[16F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F696, 0x0021 };
    uint32_t const ces[9] = { 0x16F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_453)
{
    // 1F696 003F;	
    // (🚖) ONCOMING TAXI	[16F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F696, 0x003F };
    uint32_t const ces[9] = { 0x16F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_454)
{
    // 1F696 0061;	
    // (🚖) ONCOMING TAXI	[16F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F696, 0x0061 };
    uint32_t const ces[9] = { 0x16F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_455)
{
    // 1F696 0041;	
    // (🚖) ONCOMING TAXI	[16F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F696, 0x0041 };
    uint32_t const ces[9] = { 0x16F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_456)
{
    // 1F696 0062;	
    // (🚖) ONCOMING TAXI	[16F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F696, 0x0062 };
    uint32_t const ces[9] = { 0x16F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_457)
{
    // 1F697 0021;	
    // (🚗) AUTOMOBILE	[16F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F697, 0x0021 };
    uint32_t const ces[9] = { 0x16F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_458)
{
    // 1F697 003F;	
    // (🚗) AUTOMOBILE	[16F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F697, 0x003F };
    uint32_t const ces[9] = { 0x16F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_459)
{
    // 1F697 0061;	
    // (🚗) AUTOMOBILE	[16F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F697, 0x0061 };
    uint32_t const ces[9] = { 0x16F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_460)
{
    // 1F697 0041;	
    // (🚗) AUTOMOBILE	[16F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F697, 0x0041 };
    uint32_t const ces[9] = { 0x16F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_461)
{
    // 1F697 0062;	
    // (🚗) AUTOMOBILE	[16F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F697, 0x0062 };
    uint32_t const ces[9] = { 0x16F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_462)
{
    // 1F698 0021;	
    // (🚘) ONCOMING AUTOMOBILE	[16F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F698, 0x0021 };
    uint32_t const ces[9] = { 0x16F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_463)
{
    // 1F698 003F;	
    // (🚘) ONCOMING AUTOMOBILE	[16F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F698, 0x003F };
    uint32_t const ces[9] = { 0x16F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_464)
{
    // 1F698 0061;	
    // (🚘) ONCOMING AUTOMOBILE	[16F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F698, 0x0061 };
    uint32_t const ces[9] = { 0x16F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_465)
{
    // 1F698 0041;	
    // (🚘) ONCOMING AUTOMOBILE	[16F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F698, 0x0041 };
    uint32_t const ces[9] = { 0x16F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_466)
{
    // 1F698 0062;	
    // (🚘) ONCOMING AUTOMOBILE	[16F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F698, 0x0062 };
    uint32_t const ces[9] = { 0x16F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_467)
{
    // 1F699 0021;	
    // (🚙) RECREATIONAL VEHICLE	[16F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F699, 0x0021 };
    uint32_t const ces[9] = { 0x16F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_468)
{
    // 1F699 003F;	
    // (🚙) RECREATIONAL VEHICLE	[16F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F699, 0x003F };
    uint32_t const ces[9] = { 0x16F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_469)
{
    // 1F699 0061;	
    // (🚙) RECREATIONAL VEHICLE	[16F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F699, 0x0061 };
    uint32_t const ces[9] = { 0x16F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_470)
{
    // 1F699 0041;	
    // (🚙) RECREATIONAL VEHICLE	[16F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F699, 0x0041 };
    uint32_t const ces[9] = { 0x16F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_471)
{
    // 1F699 0062;	
    // (🚙) RECREATIONAL VEHICLE	[16F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F699, 0x0062 };
    uint32_t const ces[9] = { 0x16F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_472)
{
    // 1F69A 0021;	
    // (🚚) DELIVERY TRUCK	[16F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69A, 0x0021 };
    uint32_t const ces[9] = { 0x16F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_473)
{
    // 1F69A 003F;	
    // (🚚) DELIVERY TRUCK	[16F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69A, 0x003F };
    uint32_t const ces[9] = { 0x16F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_474)
{
    // 1F69A 0061;	
    // (🚚) DELIVERY TRUCK	[16F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69A, 0x0061 };
    uint32_t const ces[9] = { 0x16F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_475)
{
    // 1F69A 0041;	
    // (🚚) DELIVERY TRUCK	[16F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F69A, 0x0041 };
    uint32_t const ces[9] = { 0x16F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_476)
{
    // 1F69A 0062;	
    // (🚚) DELIVERY TRUCK	[16F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69A, 0x0062 };
    uint32_t const ces[9] = { 0x16F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_477)
{
    // 1F69B 0021;	
    // (🚛) ARTICULATED LORRY	[16F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69B, 0x0021 };
    uint32_t const ces[9] = { 0x16F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_478)
{
    // 1F69B 003F;	
    // (🚛) ARTICULATED LORRY	[16F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69B, 0x003F };
    uint32_t const ces[9] = { 0x16F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_479)
{
    // 1F69B 0061;	
    // (🚛) ARTICULATED LORRY	[16F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69B, 0x0061 };
    uint32_t const ces[9] = { 0x16F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_480)
{
    // 1F69B 0041;	
    // (🚛) ARTICULATED LORRY	[16F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F69B, 0x0041 };
    uint32_t const ces[9] = { 0x16F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_481)
{
    // 1F69B 0062;	
    // (🚛) ARTICULATED LORRY	[16F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69B, 0x0062 };
    uint32_t const ces[9] = { 0x16F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_482)
{
    // 1F69C 0021;	
    // (🚜) TRACTOR	[16F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69C, 0x0021 };
    uint32_t const ces[9] = { 0x16F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_483)
{
    // 1F69C 003F;	
    // (🚜) TRACTOR	[16F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69C, 0x003F };
    uint32_t const ces[9] = { 0x16F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_484)
{
    // 1F69C 0061;	
    // (🚜) TRACTOR	[16F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69C, 0x0061 };
    uint32_t const ces[9] = { 0x16F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_485)
{
    // 1F69C 0041;	
    // (🚜) TRACTOR	[16F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F69C, 0x0041 };
    uint32_t const ces[9] = { 0x16F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_486)
{
    // 1F69C 0062;	
    // (🚜) TRACTOR	[16F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69C, 0x0062 };
    uint32_t const ces[9] = { 0x16F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_487)
{
    // 1F69D 0021;	
    // (🚝) MONORAIL	[16F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69D, 0x0021 };
    uint32_t const ces[9] = { 0x16F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_488)
{
    // 1F69D 003F;	
    // (🚝) MONORAIL	[16F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69D, 0x003F };
    uint32_t const ces[9] = { 0x16F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_489)
{
    // 1F69D 0061;	
    // (🚝) MONORAIL	[16F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69D, 0x0061 };
    uint32_t const ces[9] = { 0x16F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_490)
{
    // 1F69D 0041;	
    // (🚝) MONORAIL	[16F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F69D, 0x0041 };
    uint32_t const ces[9] = { 0x16F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_491)
{
    // 1F69D 0062;	
    // (🚝) MONORAIL	[16F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69D, 0x0062 };
    uint32_t const ces[9] = { 0x16F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_492)
{
    // 1F69E 0021;	
    // (🚞) MOUNTAIN RAILWAY	[16F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69E, 0x0021 };
    uint32_t const ces[9] = { 0x16F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_493)
{
    // 1F69E 003F;	
    // (🚞) MOUNTAIN RAILWAY	[16F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69E, 0x003F };
    uint32_t const ces[9] = { 0x16F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_494)
{
    // 1F69E 0061;	
    // (🚞) MOUNTAIN RAILWAY	[16F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69E, 0x0061 };
    uint32_t const ces[9] = { 0x16F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_495)
{
    // 1F69E 0041;	
    // (🚞) MOUNTAIN RAILWAY	[16F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F69E, 0x0041 };
    uint32_t const ces[9] = { 0x16F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_496)
{
    // 1F69E 0062;	
    // (🚞) MOUNTAIN RAILWAY	[16F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69E, 0x0062 };
    uint32_t const ces[9] = { 0x16F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_497)
{
    // 1F69F 0021;	
    // (🚟) SUSPENSION RAILWAY	[16FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69F, 0x0021 };
    uint32_t const ces[9] = { 0x16FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_498)
{
    // 1F69F 003F;	
    // (🚟) SUSPENSION RAILWAY	[16FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69F, 0x003F };
    uint32_t const ces[9] = { 0x16FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_065_499)
{
    // 1F69F 0061;	
    // (🚟) SUSPENSION RAILWAY	[16FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F69F, 0x0061 };
    uint32_t const ces[9] = { 0x16FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

