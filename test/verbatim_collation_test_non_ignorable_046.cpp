// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_046_000)
{
    // 1D33F 003F;	
    // (ùåø) TETRAGRAM FOR GATHERING IN	[0F41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33F, 0x003F };
    uint32_t const ces[9] = { 0x0F41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_001)
{
    // 1D33F 0061;	
    // (ùåø) TETRAGRAM FOR GATHERING IN	[0F41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33F, 0x0061 };
    uint32_t const ces[9] = { 0x0F41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_002)
{
    // 1D33F 0041;	
    // (ùåø) TETRAGRAM FOR GATHERING IN	[0F41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D33F, 0x0041 };
    uint32_t const ces[9] = { 0x0F41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_003)
{
    // 1D33F 0062;	
    // (ùåø) TETRAGRAM FOR GATHERING IN	[0F41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D33F, 0x0062 };
    uint32_t const ces[9] = { 0x0F41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_004)
{
    // 1D340 0021;	
    // (ùçÄ) TETRAGRAM FOR MASSING	[0F42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D340, 0x0021 };
    uint32_t const ces[9] = { 0x0F42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_005)
{
    // 1D340 003F;	
    // (ùçÄ) TETRAGRAM FOR MASSING	[0F42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D340, 0x003F };
    uint32_t const ces[9] = { 0x0F42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_006)
{
    // 1D340 0061;	
    // (ùçÄ) TETRAGRAM FOR MASSING	[0F42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D340, 0x0061 };
    uint32_t const ces[9] = { 0x0F42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_007)
{
    // 1D340 0041;	
    // (ùçÄ) TETRAGRAM FOR MASSING	[0F42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D340, 0x0041 };
    uint32_t const ces[9] = { 0x0F42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_008)
{
    // 1D340 0062;	
    // (ùçÄ) TETRAGRAM FOR MASSING	[0F42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D340, 0x0062 };
    uint32_t const ces[9] = { 0x0F42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_009)
{
    // 1D341 0021;	
    // (ùçÅ) TETRAGRAM FOR ACCUMULATION	[0F43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D341, 0x0021 };
    uint32_t const ces[9] = { 0x0F43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_010)
{
    // 1D341 003F;	
    // (ùçÅ) TETRAGRAM FOR ACCUMULATION	[0F43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D341, 0x003F };
    uint32_t const ces[9] = { 0x0F43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_011)
{
    // 1D341 0061;	
    // (ùçÅ) TETRAGRAM FOR ACCUMULATION	[0F43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D341, 0x0061 };
    uint32_t const ces[9] = { 0x0F43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_012)
{
    // 1D341 0041;	
    // (ùçÅ) TETRAGRAM FOR ACCUMULATION	[0F43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D341, 0x0041 };
    uint32_t const ces[9] = { 0x0F43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_013)
{
    // 1D341 0062;	
    // (ùçÅ) TETRAGRAM FOR ACCUMULATION	[0F43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D341, 0x0062 };
    uint32_t const ces[9] = { 0x0F43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_014)
{
    // 1D342 0021;	
    // (ùçÇ) TETRAGRAM FOR EMBELLISHMENT	[0F44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D342, 0x0021 };
    uint32_t const ces[9] = { 0x0F44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_015)
{
    // 1D342 003F;	
    // (ùçÇ) TETRAGRAM FOR EMBELLISHMENT	[0F44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D342, 0x003F };
    uint32_t const ces[9] = { 0x0F44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_016)
{
    // 1D342 0061;	
    // (ùçÇ) TETRAGRAM FOR EMBELLISHMENT	[0F44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D342, 0x0061 };
    uint32_t const ces[9] = { 0x0F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_017)
{
    // 1D342 0041;	
    // (ùçÇ) TETRAGRAM FOR EMBELLISHMENT	[0F44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D342, 0x0041 };
    uint32_t const ces[9] = { 0x0F44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_018)
{
    // 1D342 0062;	
    // (ùçÇ) TETRAGRAM FOR EMBELLISHMENT	[0F44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D342, 0x0062 };
    uint32_t const ces[9] = { 0x0F44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_019)
{
    // 1D343 0021;	
    // (ùçÉ) TETRAGRAM FOR DOUBT	[0F45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D343, 0x0021 };
    uint32_t const ces[9] = { 0x0F45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_020)
{
    // 1D343 003F;	
    // (ùçÉ) TETRAGRAM FOR DOUBT	[0F45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D343, 0x003F };
    uint32_t const ces[9] = { 0x0F45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_021)
{
    // 1D343 0061;	
    // (ùçÉ) TETRAGRAM FOR DOUBT	[0F45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D343, 0x0061 };
    uint32_t const ces[9] = { 0x0F45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_022)
{
    // 1D343 0041;	
    // (ùçÉ) TETRAGRAM FOR DOUBT	[0F45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D343, 0x0041 };
    uint32_t const ces[9] = { 0x0F45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_023)
{
    // 1D343 0062;	
    // (ùçÉ) TETRAGRAM FOR DOUBT	[0F45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D343, 0x0062 };
    uint32_t const ces[9] = { 0x0F45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_024)
{
    // 1D344 0021;	
    // (ùçÑ) TETRAGRAM FOR WATCH	[0F46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D344, 0x0021 };
    uint32_t const ces[9] = { 0x0F46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_025)
{
    // 1D344 003F;	
    // (ùçÑ) TETRAGRAM FOR WATCH	[0F46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D344, 0x003F };
    uint32_t const ces[9] = { 0x0F46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_026)
{
    // 1D344 0061;	
    // (ùçÑ) TETRAGRAM FOR WATCH	[0F46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D344, 0x0061 };
    uint32_t const ces[9] = { 0x0F46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_027)
{
    // 1D344 0041;	
    // (ùçÑ) TETRAGRAM FOR WATCH	[0F46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D344, 0x0041 };
    uint32_t const ces[9] = { 0x0F46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_028)
{
    // 1D344 0062;	
    // (ùçÑ) TETRAGRAM FOR WATCH	[0F46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D344, 0x0062 };
    uint32_t const ces[9] = { 0x0F46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_029)
{
    // 1D345 0021;	
    // (ùçÖ) TETRAGRAM FOR SINKING	[0F47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D345, 0x0021 };
    uint32_t const ces[9] = { 0x0F47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_030)
{
    // 1D345 003F;	
    // (ùçÖ) TETRAGRAM FOR SINKING	[0F47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D345, 0x003F };
    uint32_t const ces[9] = { 0x0F47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_031)
{
    // 1D345 0061;	
    // (ùçÖ) TETRAGRAM FOR SINKING	[0F47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D345, 0x0061 };
    uint32_t const ces[9] = { 0x0F47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_032)
{
    // 1D345 0041;	
    // (ùçÖ) TETRAGRAM FOR SINKING	[0F47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D345, 0x0041 };
    uint32_t const ces[9] = { 0x0F47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_033)
{
    // 1D345 0062;	
    // (ùçÖ) TETRAGRAM FOR SINKING	[0F47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D345, 0x0062 };
    uint32_t const ces[9] = { 0x0F47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_034)
{
    // 1D346 0021;	
    // (ùçÜ) TETRAGRAM FOR INNER	[0F48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D346, 0x0021 };
    uint32_t const ces[9] = { 0x0F48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_035)
{
    // 1D346 003F;	
    // (ùçÜ) TETRAGRAM FOR INNER	[0F48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D346, 0x003F };
    uint32_t const ces[9] = { 0x0F48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_036)
{
    // 1D346 0061;	
    // (ùçÜ) TETRAGRAM FOR INNER	[0F48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D346, 0x0061 };
    uint32_t const ces[9] = { 0x0F48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_037)
{
    // 1D346 0041;	
    // (ùçÜ) TETRAGRAM FOR INNER	[0F48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D346, 0x0041 };
    uint32_t const ces[9] = { 0x0F48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_038)
{
    // 1D346 0062;	
    // (ùçÜ) TETRAGRAM FOR INNER	[0F48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D346, 0x0062 };
    uint32_t const ces[9] = { 0x0F48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_039)
{
    // 1D347 0021;	
    // (ùçá) TETRAGRAM FOR DEPARTURE	[0F49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D347, 0x0021 };
    uint32_t const ces[9] = { 0x0F49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_040)
{
    // 1D347 003F;	
    // (ùçá) TETRAGRAM FOR DEPARTURE	[0F49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D347, 0x003F };
    uint32_t const ces[9] = { 0x0F49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_041)
{
    // 1D347 0061;	
    // (ùçá) TETRAGRAM FOR DEPARTURE	[0F49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D347, 0x0061 };
    uint32_t const ces[9] = { 0x0F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_042)
{
    // 1D347 0041;	
    // (ùçá) TETRAGRAM FOR DEPARTURE	[0F49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D347, 0x0041 };
    uint32_t const ces[9] = { 0x0F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_043)
{
    // 1D347 0062;	
    // (ùçá) TETRAGRAM FOR DEPARTURE	[0F49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D347, 0x0062 };
    uint32_t const ces[9] = { 0x0F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_044)
{
    // 1D348 0021;	
    // (ùçà) TETRAGRAM FOR DARKENING	[0F4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D348, 0x0021 };
    uint32_t const ces[9] = { 0x0F4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_045)
{
    // 1D348 003F;	
    // (ùçà) TETRAGRAM FOR DARKENING	[0F4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D348, 0x003F };
    uint32_t const ces[9] = { 0x0F4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_046)
{
    // 1D348 0061;	
    // (ùçà) TETRAGRAM FOR DARKENING	[0F4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D348, 0x0061 };
    uint32_t const ces[9] = { 0x0F4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_047)
{
    // 1D348 0041;	
    // (ùçà) TETRAGRAM FOR DARKENING	[0F4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D348, 0x0041 };
    uint32_t const ces[9] = { 0x0F4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_048)
{
    // 1D348 0062;	
    // (ùçà) TETRAGRAM FOR DARKENING	[0F4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D348, 0x0062 };
    uint32_t const ces[9] = { 0x0F4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_049)
{
    // 1D349 0021;	
    // (ùçâ) TETRAGRAM FOR DIMMING	[0F4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D349, 0x0021 };
    uint32_t const ces[9] = { 0x0F4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_050)
{
    // 1D349 003F;	
    // (ùçâ) TETRAGRAM FOR DIMMING	[0F4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D349, 0x003F };
    uint32_t const ces[9] = { 0x0F4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_051)
{
    // 1D349 0061;	
    // (ùçâ) TETRAGRAM FOR DIMMING	[0F4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D349, 0x0061 };
    uint32_t const ces[9] = { 0x0F4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_052)
{
    // 1D349 0041;	
    // (ùçâ) TETRAGRAM FOR DIMMING	[0F4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D349, 0x0041 };
    uint32_t const ces[9] = { 0x0F4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_053)
{
    // 1D349 0062;	
    // (ùçâ) TETRAGRAM FOR DIMMING	[0F4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D349, 0x0062 };
    uint32_t const ces[9] = { 0x0F4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_054)
{
    // 1D34A 0021;	
    // (ùçä) TETRAGRAM FOR EXHAUSTION	[0F4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34A, 0x0021 };
    uint32_t const ces[9] = { 0x0F4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_055)
{
    // 1D34A 003F;	
    // (ùçä) TETRAGRAM FOR EXHAUSTION	[0F4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34A, 0x003F };
    uint32_t const ces[9] = { 0x0F4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_056)
{
    // 1D34A 0061;	
    // (ùçä) TETRAGRAM FOR EXHAUSTION	[0F4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34A, 0x0061 };
    uint32_t const ces[9] = { 0x0F4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_057)
{
    // 1D34A 0041;	
    // (ùçä) TETRAGRAM FOR EXHAUSTION	[0F4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D34A, 0x0041 };
    uint32_t const ces[9] = { 0x0F4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_058)
{
    // 1D34A 0062;	
    // (ùçä) TETRAGRAM FOR EXHAUSTION	[0F4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34A, 0x0062 };
    uint32_t const ces[9] = { 0x0F4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_059)
{
    // 1D34B 0021;	
    // (ùçã) TETRAGRAM FOR SEVERANCE	[0F4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34B, 0x0021 };
    uint32_t const ces[9] = { 0x0F4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_060)
{
    // 1D34B 003F;	
    // (ùçã) TETRAGRAM FOR SEVERANCE	[0F4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34B, 0x003F };
    uint32_t const ces[9] = { 0x0F4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_061)
{
    // 1D34B 0061;	
    // (ùçã) TETRAGRAM FOR SEVERANCE	[0F4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34B, 0x0061 };
    uint32_t const ces[9] = { 0x0F4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_062)
{
    // 1D34B 0041;	
    // (ùçã) TETRAGRAM FOR SEVERANCE	[0F4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D34B, 0x0041 };
    uint32_t const ces[9] = { 0x0F4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_063)
{
    // 1D34B 0062;	
    // (ùçã) TETRAGRAM FOR SEVERANCE	[0F4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34B, 0x0062 };
    uint32_t const ces[9] = { 0x0F4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_064)
{
    // 1D34C 0021;	
    // (ùçå) TETRAGRAM FOR STOPPAGE	[0F4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34C, 0x0021 };
    uint32_t const ces[9] = { 0x0F4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_065)
{
    // 1D34C 003F;	
    // (ùçå) TETRAGRAM FOR STOPPAGE	[0F4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34C, 0x003F };
    uint32_t const ces[9] = { 0x0F4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_066)
{
    // 1D34C 0061;	
    // (ùçå) TETRAGRAM FOR STOPPAGE	[0F4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34C, 0x0061 };
    uint32_t const ces[9] = { 0x0F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_067)
{
    // 1D34C 0041;	
    // (ùçå) TETRAGRAM FOR STOPPAGE	[0F4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D34C, 0x0041 };
    uint32_t const ces[9] = { 0x0F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_068)
{
    // 1D34C 0062;	
    // (ùçå) TETRAGRAM FOR STOPPAGE	[0F4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34C, 0x0062 };
    uint32_t const ces[9] = { 0x0F4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_069)
{
    // 1D34D 0021;	
    // (ùçç) TETRAGRAM FOR HARDNESS	[0F4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34D, 0x0021 };
    uint32_t const ces[9] = { 0x0F4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_070)
{
    // 1D34D 003F;	
    // (ùçç) TETRAGRAM FOR HARDNESS	[0F4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34D, 0x003F };
    uint32_t const ces[9] = { 0x0F4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_071)
{
    // 1D34D 0061;	
    // (ùçç) TETRAGRAM FOR HARDNESS	[0F4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34D, 0x0061 };
    uint32_t const ces[9] = { 0x0F4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_072)
{
    // 1D34D 0041;	
    // (ùçç) TETRAGRAM FOR HARDNESS	[0F4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D34D, 0x0041 };
    uint32_t const ces[9] = { 0x0F4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_073)
{
    // 1D34D 0062;	
    // (ùçç) TETRAGRAM FOR HARDNESS	[0F4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34D, 0x0062 };
    uint32_t const ces[9] = { 0x0F4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_074)
{
    // 1D34E 0021;	
    // (ùçé) TETRAGRAM FOR COMPLETION	[0F50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34E, 0x0021 };
    uint32_t const ces[9] = { 0x0F50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_075)
{
    // 1D34E 003F;	
    // (ùçé) TETRAGRAM FOR COMPLETION	[0F50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34E, 0x003F };
    uint32_t const ces[9] = { 0x0F50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_076)
{
    // 1D34E 0061;	
    // (ùçé) TETRAGRAM FOR COMPLETION	[0F50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34E, 0x0061 };
    uint32_t const ces[9] = { 0x0F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_077)
{
    // 1D34E 0041;	
    // (ùçé) TETRAGRAM FOR COMPLETION	[0F50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D34E, 0x0041 };
    uint32_t const ces[9] = { 0x0F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_078)
{
    // 1D34E 0062;	
    // (ùçé) TETRAGRAM FOR COMPLETION	[0F50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34E, 0x0062 };
    uint32_t const ces[9] = { 0x0F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_079)
{
    // 1D34F 0021;	
    // (ùçè) TETRAGRAM FOR CLOSURE	[0F51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34F, 0x0021 };
    uint32_t const ces[9] = { 0x0F51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_080)
{
    // 1D34F 003F;	
    // (ùçè) TETRAGRAM FOR CLOSURE	[0F51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34F, 0x003F };
    uint32_t const ces[9] = { 0x0F51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_081)
{
    // 1D34F 0061;	
    // (ùçè) TETRAGRAM FOR CLOSURE	[0F51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34F, 0x0061 };
    uint32_t const ces[9] = { 0x0F51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_082)
{
    // 1D34F 0041;	
    // (ùçè) TETRAGRAM FOR CLOSURE	[0F51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D34F, 0x0041 };
    uint32_t const ces[9] = { 0x0F51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_083)
{
    // 1D34F 0062;	
    // (ùçè) TETRAGRAM FOR CLOSURE	[0F51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D34F, 0x0062 };
    uint32_t const ces[9] = { 0x0F51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_084)
{
    // 1D350 0021;	
    // (ùçê) TETRAGRAM FOR FAILURE	[0F52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D350, 0x0021 };
    uint32_t const ces[9] = { 0x0F52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_085)
{
    // 1D350 003F;	
    // (ùçê) TETRAGRAM FOR FAILURE	[0F52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D350, 0x003F };
    uint32_t const ces[9] = { 0x0F52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_086)
{
    // 1D350 0061;	
    // (ùçê) TETRAGRAM FOR FAILURE	[0F52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D350, 0x0061 };
    uint32_t const ces[9] = { 0x0F52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_087)
{
    // 1D350 0041;	
    // (ùçê) TETRAGRAM FOR FAILURE	[0F52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D350, 0x0041 };
    uint32_t const ces[9] = { 0x0F52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_088)
{
    // 1D350 0062;	
    // (ùçê) TETRAGRAM FOR FAILURE	[0F52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D350, 0x0062 };
    uint32_t const ces[9] = { 0x0F52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_089)
{
    // 1D351 0021;	
    // (ùçë) TETRAGRAM FOR AGGRAVATION	[0F53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D351, 0x0021 };
    uint32_t const ces[9] = { 0x0F53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_090)
{
    // 1D351 003F;	
    // (ùçë) TETRAGRAM FOR AGGRAVATION	[0F53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D351, 0x003F };
    uint32_t const ces[9] = { 0x0F53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_091)
{
    // 1D351 0061;	
    // (ùçë) TETRAGRAM FOR AGGRAVATION	[0F53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D351, 0x0061 };
    uint32_t const ces[9] = { 0x0F53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_092)
{
    // 1D351 0041;	
    // (ùçë) TETRAGRAM FOR AGGRAVATION	[0F53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D351, 0x0041 };
    uint32_t const ces[9] = { 0x0F53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_093)
{
    // 1D351 0062;	
    // (ùçë) TETRAGRAM FOR AGGRAVATION	[0F53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D351, 0x0062 };
    uint32_t const ces[9] = { 0x0F53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_094)
{
    // 1D352 0021;	
    // (ùçí) TETRAGRAM FOR COMPLIANCE	[0F54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D352, 0x0021 };
    uint32_t const ces[9] = { 0x0F54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_095)
{
    // 1D352 003F;	
    // (ùçí) TETRAGRAM FOR COMPLIANCE	[0F54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D352, 0x003F };
    uint32_t const ces[9] = { 0x0F54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_096)
{
    // 1D352 0061;	
    // (ùçí) TETRAGRAM FOR COMPLIANCE	[0F54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D352, 0x0061 };
    uint32_t const ces[9] = { 0x0F54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_097)
{
    // 1D352 0041;	
    // (ùçí) TETRAGRAM FOR COMPLIANCE	[0F54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D352, 0x0041 };
    uint32_t const ces[9] = { 0x0F54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_098)
{
    // 1D352 0062;	
    // (ùçí) TETRAGRAM FOR COMPLIANCE	[0F54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D352, 0x0062 };
    uint32_t const ces[9] = { 0x0F54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_099)
{
    // 1D353 0021;	
    // (ùçì) TETRAGRAM FOR ON THE VERGE	[0F55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D353, 0x0021 };
    uint32_t const ces[9] = { 0x0F55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_100)
{
    // 1D353 003F;	
    // (ùçì) TETRAGRAM FOR ON THE VERGE	[0F55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D353, 0x003F };
    uint32_t const ces[9] = { 0x0F55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_101)
{
    // 1D353 0061;	
    // (ùçì) TETRAGRAM FOR ON THE VERGE	[0F55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D353, 0x0061 };
    uint32_t const ces[9] = { 0x0F55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_102)
{
    // 1D353 0041;	
    // (ùçì) TETRAGRAM FOR ON THE VERGE	[0F55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D353, 0x0041 };
    uint32_t const ces[9] = { 0x0F55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_103)
{
    // 1D353 0062;	
    // (ùçì) TETRAGRAM FOR ON THE VERGE	[0F55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D353, 0x0062 };
    uint32_t const ces[9] = { 0x0F55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_104)
{
    // 1D354 0021;	
    // (ùçî) TETRAGRAM FOR DIFFICULTIES	[0F56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D354, 0x0021 };
    uint32_t const ces[9] = { 0x0F56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_105)
{
    // 1D354 003F;	
    // (ùçî) TETRAGRAM FOR DIFFICULTIES	[0F56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D354, 0x003F };
    uint32_t const ces[9] = { 0x0F56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_106)
{
    // 1D354 0061;	
    // (ùçî) TETRAGRAM FOR DIFFICULTIES	[0F56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D354, 0x0061 };
    uint32_t const ces[9] = { 0x0F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_107)
{
    // 1D354 0041;	
    // (ùçî) TETRAGRAM FOR DIFFICULTIES	[0F56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D354, 0x0041 };
    uint32_t const ces[9] = { 0x0F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_108)
{
    // 1D354 0062;	
    // (ùçî) TETRAGRAM FOR DIFFICULTIES	[0F56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D354, 0x0062 };
    uint32_t const ces[9] = { 0x0F56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_109)
{
    // 1D355 0021;	
    // (ùçï) TETRAGRAM FOR LABOURING	[0F57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D355, 0x0021 };
    uint32_t const ces[9] = { 0x0F57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_110)
{
    // 1D355 003F;	
    // (ùçï) TETRAGRAM FOR LABOURING	[0F57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D355, 0x003F };
    uint32_t const ces[9] = { 0x0F57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_111)
{
    // 1D355 0061;	
    // (ùçï) TETRAGRAM FOR LABOURING	[0F57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D355, 0x0061 };
    uint32_t const ces[9] = { 0x0F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_112)
{
    // 1D355 0041;	
    // (ùçï) TETRAGRAM FOR LABOURING	[0F57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D355, 0x0041 };
    uint32_t const ces[9] = { 0x0F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_113)
{
    // 1D355 0062;	
    // (ùçï) TETRAGRAM FOR LABOURING	[0F57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D355, 0x0062 };
    uint32_t const ces[9] = { 0x0F57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_114)
{
    // 1D356 0021;	
    // (ùçñ) TETRAGRAM FOR FOSTERING	[0F58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D356, 0x0021 };
    uint32_t const ces[9] = { 0x0F58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_115)
{
    // 1D356 003F;	
    // (ùçñ) TETRAGRAM FOR FOSTERING	[0F58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D356, 0x003F };
    uint32_t const ces[9] = { 0x0F58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_116)
{
    // 1D356 0061;	
    // (ùçñ) TETRAGRAM FOR FOSTERING	[0F58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D356, 0x0061 };
    uint32_t const ces[9] = { 0x0F58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_117)
{
    // 1D356 0041;	
    // (ùçñ) TETRAGRAM FOR FOSTERING	[0F58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D356, 0x0041 };
    uint32_t const ces[9] = { 0x0F58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_118)
{
    // 1D356 0062;	
    // (ùçñ) TETRAGRAM FOR FOSTERING	[0F58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D356, 0x0062 };
    uint32_t const ces[9] = { 0x0F58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_119)
{
    // A490 0021;	
    // (Ííê) YI RADICAL QOT	[0F59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA490, 0x0021 };
    uint32_t const ces[9] = { 0x0F59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_120)
{
    // A490 003F;	
    // (Ííê) YI RADICAL QOT	[0F59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA490, 0x003F };
    uint32_t const ces[9] = { 0x0F59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_121)
{
    // A490 0061;	
    // (Ííê) YI RADICAL QOT	[0F59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA490, 0x0061 };
    uint32_t const ces[9] = { 0x0F59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_122)
{
    // A490 0041;	
    // (Ííê) YI RADICAL QOT	[0F59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA490, 0x0041 };
    uint32_t const ces[9] = { 0x0F59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_123)
{
    // A490 0062;	
    // (Ííê) YI RADICAL QOT	[0F59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA490, 0x0062 };
    uint32_t const ces[9] = { 0x0F59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_124)
{
    // A491 0021;	
    // (Ííë) YI RADICAL LI	[0F5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA491, 0x0021 };
    uint32_t const ces[9] = { 0x0F5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_125)
{
    // A491 003F;	
    // (Ííë) YI RADICAL LI	[0F5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA491, 0x003F };
    uint32_t const ces[9] = { 0x0F5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_126)
{
    // A491 0061;	
    // (Ííë) YI RADICAL LI	[0F5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA491, 0x0061 };
    uint32_t const ces[9] = { 0x0F5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_127)
{
    // A491 0041;	
    // (Ííë) YI RADICAL LI	[0F5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA491, 0x0041 };
    uint32_t const ces[9] = { 0x0F5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_128)
{
    // A491 0062;	
    // (Ííë) YI RADICAL LI	[0F5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA491, 0x0062 };
    uint32_t const ces[9] = { 0x0F5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_129)
{
    // A492 0021;	
    // (Ííí) YI RADICAL KIT	[0F5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA492, 0x0021 };
    uint32_t const ces[9] = { 0x0F5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_130)
{
    // A492 003F;	
    // (Ííí) YI RADICAL KIT	[0F5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA492, 0x003F };
    uint32_t const ces[9] = { 0x0F5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_131)
{
    // A492 0061;	
    // (Ííí) YI RADICAL KIT	[0F5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA492, 0x0061 };
    uint32_t const ces[9] = { 0x0F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_132)
{
    // A492 0041;	
    // (Ííí) YI RADICAL KIT	[0F5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA492, 0x0041 };
    uint32_t const ces[9] = { 0x0F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_133)
{
    // A492 0062;	
    // (Ííí) YI RADICAL KIT	[0F5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA492, 0x0062 };
    uint32_t const ces[9] = { 0x0F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_134)
{
    // A493 0021;	
    // (Ííì) YI RADICAL NYIP	[0F5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA493, 0x0021 };
    uint32_t const ces[9] = { 0x0F5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_135)
{
    // A493 003F;	
    // (Ííì) YI RADICAL NYIP	[0F5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA493, 0x003F };
    uint32_t const ces[9] = { 0x0F5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_136)
{
    // A493 0061;	
    // (Ííì) YI RADICAL NYIP	[0F5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA493, 0x0061 };
    uint32_t const ces[9] = { 0x0F5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_137)
{
    // A493 0041;	
    // (Ííì) YI RADICAL NYIP	[0F5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA493, 0x0041 };
    uint32_t const ces[9] = { 0x0F5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_138)
{
    // A493 0062;	
    // (Ííì) YI RADICAL NYIP	[0F5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA493, 0x0062 };
    uint32_t const ces[9] = { 0x0F5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_139)
{
    // A494 0021;	
    // (Ííî) YI RADICAL CYP	[0F5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA494, 0x0021 };
    uint32_t const ces[9] = { 0x0F5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_140)
{
    // A494 003F;	
    // (Ííî) YI RADICAL CYP	[0F5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA494, 0x003F };
    uint32_t const ces[9] = { 0x0F5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_141)
{
    // A494 0061;	
    // (Ííî) YI RADICAL CYP	[0F5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA494, 0x0061 };
    uint32_t const ces[9] = { 0x0F5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_142)
{
    // A494 0041;	
    // (Ííî) YI RADICAL CYP	[0F5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA494, 0x0041 };
    uint32_t const ces[9] = { 0x0F5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_143)
{
    // A494 0062;	
    // (Ííî) YI RADICAL CYP	[0F5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA494, 0x0062 };
    uint32_t const ces[9] = { 0x0F5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_144)
{
    // A495 0021;	
    // (Ííï) YI RADICAL SSI	[0F5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA495, 0x0021 };
    uint32_t const ces[9] = { 0x0F5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_145)
{
    // A495 003F;	
    // (Ííï) YI RADICAL SSI	[0F5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA495, 0x003F };
    uint32_t const ces[9] = { 0x0F5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_146)
{
    // A495 0061;	
    // (Ííï) YI RADICAL SSI	[0F5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA495, 0x0061 };
    uint32_t const ces[9] = { 0x0F5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_147)
{
    // A495 0041;	
    // (Ííï) YI RADICAL SSI	[0F5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA495, 0x0041 };
    uint32_t const ces[9] = { 0x0F5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_148)
{
    // A495 0062;	
    // (Ííï) YI RADICAL SSI	[0F5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA495, 0x0062 };
    uint32_t const ces[9] = { 0x0F5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_149)
{
    // A496 0021;	
    // (Ííñ) YI RADICAL GGOP	[0F5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA496, 0x0021 };
    uint32_t const ces[9] = { 0x0F5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_150)
{
    // A496 003F;	
    // (Ííñ) YI RADICAL GGOP	[0F5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA496, 0x003F };
    uint32_t const ces[9] = { 0x0F5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_151)
{
    // A496 0061;	
    // (Ííñ) YI RADICAL GGOP	[0F5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA496, 0x0061 };
    uint32_t const ces[9] = { 0x0F5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_152)
{
    // A496 0041;	
    // (Ííñ) YI RADICAL GGOP	[0F5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA496, 0x0041 };
    uint32_t const ces[9] = { 0x0F5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_153)
{
    // A496 0062;	
    // (Ííñ) YI RADICAL GGOP	[0F5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA496, 0x0062 };
    uint32_t const ces[9] = { 0x0F5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_154)
{
    // A497 0021;	
    // (Ííó) YI RADICAL GEP	[0F60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA497, 0x0021 };
    uint32_t const ces[9] = { 0x0F60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_155)
{
    // A497 003F;	
    // (Ííó) YI RADICAL GEP	[0F60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA497, 0x003F };
    uint32_t const ces[9] = { 0x0F60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_156)
{
    // A497 0061;	
    // (Ííó) YI RADICAL GEP	[0F60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA497, 0x0061 };
    uint32_t const ces[9] = { 0x0F60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_157)
{
    // A497 0041;	
    // (Ííó) YI RADICAL GEP	[0F60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA497, 0x0041 };
    uint32_t const ces[9] = { 0x0F60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_158)
{
    // A497 0062;	
    // (Ííó) YI RADICAL GEP	[0F60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA497, 0x0062 };
    uint32_t const ces[9] = { 0x0F60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_159)
{
    // A498 0021;	
    // (Ííò) YI RADICAL MI	[0F61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA498, 0x0021 };
    uint32_t const ces[9] = { 0x0F61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_160)
{
    // A498 003F;	
    // (Ííò) YI RADICAL MI	[0F61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA498, 0x003F };
    uint32_t const ces[9] = { 0x0F61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_161)
{
    // A498 0061;	
    // (Ííò) YI RADICAL MI	[0F61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA498, 0x0061 };
    uint32_t const ces[9] = { 0x0F61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_162)
{
    // A498 0041;	
    // (Ííò) YI RADICAL MI	[0F61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA498, 0x0041 };
    uint32_t const ces[9] = { 0x0F61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_163)
{
    // A498 0062;	
    // (Ííò) YI RADICAL MI	[0F61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA498, 0x0062 };
    uint32_t const ces[9] = { 0x0F61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_164)
{
    // A499 0021;	
    // (Ííô) YI RADICAL HXIT	[0F62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA499, 0x0021 };
    uint32_t const ces[9] = { 0x0F62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_165)
{
    // A499 003F;	
    // (Ííô) YI RADICAL HXIT	[0F62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA499, 0x003F };
    uint32_t const ces[9] = { 0x0F62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_166)
{
    // A499 0061;	
    // (Ííô) YI RADICAL HXIT	[0F62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA499, 0x0061 };
    uint32_t const ces[9] = { 0x0F62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_167)
{
    // A499 0041;	
    // (Ííô) YI RADICAL HXIT	[0F62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA499, 0x0041 };
    uint32_t const ces[9] = { 0x0F62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_168)
{
    // A499 0062;	
    // (Ííô) YI RADICAL HXIT	[0F62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA499, 0x0062 };
    uint32_t const ces[9] = { 0x0F62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_169)
{
    // A49A 0021;	
    // (Ííö) YI RADICAL LYR	[0F63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49A, 0x0021 };
    uint32_t const ces[9] = { 0x0F63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_170)
{
    // A49A 003F;	
    // (Ííö) YI RADICAL LYR	[0F63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49A, 0x003F };
    uint32_t const ces[9] = { 0x0F63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_171)
{
    // A49A 0061;	
    // (Ííö) YI RADICAL LYR	[0F63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49A, 0x0061 };
    uint32_t const ces[9] = { 0x0F63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_172)
{
    // A49A 0041;	
    // (Ííö) YI RADICAL LYR	[0F63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA49A, 0x0041 };
    uint32_t const ces[9] = { 0x0F63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_173)
{
    // A49A 0062;	
    // (Ííö) YI RADICAL LYR	[0F63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49A, 0x0062 };
    uint32_t const ces[9] = { 0x0F63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_174)
{
    // A49B 0021;	
    // (Ííõ) YI RADICAL BBUT	[0F64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49B, 0x0021 };
    uint32_t const ces[9] = { 0x0F64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_175)
{
    // A49B 003F;	
    // (Ííõ) YI RADICAL BBUT	[0F64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49B, 0x003F };
    uint32_t const ces[9] = { 0x0F64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_176)
{
    // A49B 0061;	
    // (Ííõ) YI RADICAL BBUT	[0F64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49B, 0x0061 };
    uint32_t const ces[9] = { 0x0F64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_177)
{
    // A49B 0041;	
    // (Ííõ) YI RADICAL BBUT	[0F64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA49B, 0x0041 };
    uint32_t const ces[9] = { 0x0F64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_178)
{
    // A49B 0062;	
    // (Ííõ) YI RADICAL BBUT	[0F64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49B, 0x0062 };
    uint32_t const ces[9] = { 0x0F64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_179)
{
    // A49C 0021;	
    // (Ííú) YI RADICAL MOP	[0F65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49C, 0x0021 };
    uint32_t const ces[9] = { 0x0F65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_180)
{
    // A49C 003F;	
    // (Ííú) YI RADICAL MOP	[0F65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49C, 0x003F };
    uint32_t const ces[9] = { 0x0F65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_181)
{
    // A49C 0061;	
    // (Ííú) YI RADICAL MOP	[0F65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49C, 0x0061 };
    uint32_t const ces[9] = { 0x0F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_182)
{
    // A49C 0041;	
    // (Ííú) YI RADICAL MOP	[0F65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA49C, 0x0041 };
    uint32_t const ces[9] = { 0x0F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_183)
{
    // A49C 0062;	
    // (Ííú) YI RADICAL MOP	[0F65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49C, 0x0062 };
    uint32_t const ces[9] = { 0x0F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_184)
{
    // A49D 0021;	
    // (Ííù) YI RADICAL YO	[0F66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49D, 0x0021 };
    uint32_t const ces[9] = { 0x0F66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_185)
{
    // A49D 003F;	
    // (Ííù) YI RADICAL YO	[0F66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49D, 0x003F };
    uint32_t const ces[9] = { 0x0F66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_186)
{
    // A49D 0061;	
    // (Ííù) YI RADICAL YO	[0F66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49D, 0x0061 };
    uint32_t const ces[9] = { 0x0F66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_187)
{
    // A49D 0041;	
    // (Ííù) YI RADICAL YO	[0F66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA49D, 0x0041 };
    uint32_t const ces[9] = { 0x0F66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_188)
{
    // A49D 0062;	
    // (Ííù) YI RADICAL YO	[0F66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49D, 0x0062 };
    uint32_t const ces[9] = { 0x0F66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_189)
{
    // A49E 0021;	
    // (Ííû) YI RADICAL PUT	[0F67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49E, 0x0021 };
    uint32_t const ces[9] = { 0x0F67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_190)
{
    // A49E 003F;	
    // (Ííû) YI RADICAL PUT	[0F67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49E, 0x003F };
    uint32_t const ces[9] = { 0x0F67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_191)
{
    // A49E 0061;	
    // (Ííû) YI RADICAL PUT	[0F67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49E, 0x0061 };
    uint32_t const ces[9] = { 0x0F67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_192)
{
    // A49E 0041;	
    // (Ííû) YI RADICAL PUT	[0F67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA49E, 0x0041 };
    uint32_t const ces[9] = { 0x0F67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_193)
{
    // A49E 0062;	
    // (Ííû) YI RADICAL PUT	[0F67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49E, 0x0062 };
    uint32_t const ces[9] = { 0x0F67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_194)
{
    // A49F 0021;	
    // (Ííü) YI RADICAL HXUO	[0F68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49F, 0x0021 };
    uint32_t const ces[9] = { 0x0F68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_195)
{
    // A49F 003F;	
    // (Ííü) YI RADICAL HXUO	[0F68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49F, 0x003F };
    uint32_t const ces[9] = { 0x0F68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_196)
{
    // A49F 0061;	
    // (Ííü) YI RADICAL HXUO	[0F68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49F, 0x0061 };
    uint32_t const ces[9] = { 0x0F68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_197)
{
    // A49F 0041;	
    // (Ííü) YI RADICAL HXUO	[0F68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA49F, 0x0041 };
    uint32_t const ces[9] = { 0x0F68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_198)
{
    // A49F 0062;	
    // (Ííü) YI RADICAL HXUO	[0F68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA49F, 0x0062 };
    uint32_t const ces[9] = { 0x0F68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_199)
{
    // A4A0 0021;	
    // (Íí†) YI RADICAL TAT	[0F69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A0, 0x0021 };
    uint32_t const ces[9] = { 0x0F69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_200)
{
    // A4A0 003F;	
    // (Íí†) YI RADICAL TAT	[0F69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A0, 0x003F };
    uint32_t const ces[9] = { 0x0F69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_201)
{
    // A4A0 0061;	
    // (Íí†) YI RADICAL TAT	[0F69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A0, 0x0061 };
    uint32_t const ces[9] = { 0x0F69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_202)
{
    // A4A0 0041;	
    // (Íí†) YI RADICAL TAT	[0F69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A0, 0x0041 };
    uint32_t const ces[9] = { 0x0F69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_203)
{
    // A4A0 0062;	
    // (Íí†) YI RADICAL TAT	[0F69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A0, 0x0062 };
    uint32_t const ces[9] = { 0x0F69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_204)
{
    // A4A1 0021;	
    // (Íí°) YI RADICAL GA	[0F6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A1, 0x0021 };
    uint32_t const ces[9] = { 0x0F6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_205)
{
    // A4A1 003F;	
    // (Íí°) YI RADICAL GA	[0F6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A1, 0x003F };
    uint32_t const ces[9] = { 0x0F6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_206)
{
    // A4A1 0061;	
    // (Íí°) YI RADICAL GA	[0F6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A1, 0x0061 };
    uint32_t const ces[9] = { 0x0F6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_207)
{
    // A4A1 0041;	
    // (Íí°) YI RADICAL GA	[0F6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A1, 0x0041 };
    uint32_t const ces[9] = { 0x0F6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_208)
{
    // A4A1 0062;	
    // (Íí°) YI RADICAL GA	[0F6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A1, 0x0062 };
    uint32_t const ces[9] = { 0x0F6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_209)
{
    // A4A2 0021;	
    // (Íí¢) YI RADICAL ZUP	[0F6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A2, 0x0021 };
    uint32_t const ces[9] = { 0x0F6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_210)
{
    // A4A2 003F;	
    // (Íí¢) YI RADICAL ZUP	[0F6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A2, 0x003F };
    uint32_t const ces[9] = { 0x0F6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_211)
{
    // A4A2 0061;	
    // (Íí¢) YI RADICAL ZUP	[0F6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A2, 0x0061 };
    uint32_t const ces[9] = { 0x0F6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_212)
{
    // A4A2 0041;	
    // (Íí¢) YI RADICAL ZUP	[0F6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A2, 0x0041 };
    uint32_t const ces[9] = { 0x0F6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_213)
{
    // A4A2 0062;	
    // (Íí¢) YI RADICAL ZUP	[0F6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A2, 0x0062 };
    uint32_t const ces[9] = { 0x0F6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_214)
{
    // A4A3 0021;	
    // (Íí£) YI RADICAL CYT	[0F6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A3, 0x0021 };
    uint32_t const ces[9] = { 0x0F6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_215)
{
    // A4A3 003F;	
    // (Íí£) YI RADICAL CYT	[0F6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A3, 0x003F };
    uint32_t const ces[9] = { 0x0F6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_216)
{
    // A4A3 0061;	
    // (Íí£) YI RADICAL CYT	[0F6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A3, 0x0061 };
    uint32_t const ces[9] = { 0x0F6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_217)
{
    // A4A3 0041;	
    // (Íí£) YI RADICAL CYT	[0F6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A3, 0x0041 };
    uint32_t const ces[9] = { 0x0F6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_218)
{
    // A4A3 0062;	
    // (Íí£) YI RADICAL CYT	[0F6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A3, 0x0062 };
    uint32_t const ces[9] = { 0x0F6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_219)
{
    // A4A4 0021;	
    // (Íí§) YI RADICAL DDUR	[0F6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A4, 0x0021 };
    uint32_t const ces[9] = { 0x0F6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_220)
{
    // A4A4 003F;	
    // (Íí§) YI RADICAL DDUR	[0F6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A4, 0x003F };
    uint32_t const ces[9] = { 0x0F6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_221)
{
    // A4A4 0061;	
    // (Íí§) YI RADICAL DDUR	[0F6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A4, 0x0061 };
    uint32_t const ces[9] = { 0x0F6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_222)
{
    // A4A4 0041;	
    // (Íí§) YI RADICAL DDUR	[0F6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A4, 0x0041 };
    uint32_t const ces[9] = { 0x0F6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_223)
{
    // A4A4 0062;	
    // (Íí§) YI RADICAL DDUR	[0F6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A4, 0x0062 };
    uint32_t const ces[9] = { 0x0F6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_224)
{
    // A4A5 0021;	
    // (Íí•) YI RADICAL BUR	[0F6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A5, 0x0021 };
    uint32_t const ces[9] = { 0x0F6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_225)
{
    // A4A5 003F;	
    // (Íí•) YI RADICAL BUR	[0F6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A5, 0x003F };
    uint32_t const ces[9] = { 0x0F6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_226)
{
    // A4A5 0061;	
    // (Íí•) YI RADICAL BUR	[0F6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A5, 0x0061 };
    uint32_t const ces[9] = { 0x0F6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_227)
{
    // A4A5 0041;	
    // (Íí•) YI RADICAL BUR	[0F6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A5, 0x0041 };
    uint32_t const ces[9] = { 0x0F6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_228)
{
    // A4A5 0062;	
    // (Íí•) YI RADICAL BUR	[0F6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A5, 0x0062 };
    uint32_t const ces[9] = { 0x0F6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_229)
{
    // A4A6 0021;	
    // (Íí¶) YI RADICAL GGUO	[0F6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A6, 0x0021 };
    uint32_t const ces[9] = { 0x0F6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_230)
{
    // A4A6 003F;	
    // (Íí¶) YI RADICAL GGUO	[0F6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A6, 0x003F };
    uint32_t const ces[9] = { 0x0F6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_231)
{
    // A4A6 0061;	
    // (Íí¶) YI RADICAL GGUO	[0F6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A6, 0x0061 };
    uint32_t const ces[9] = { 0x0F6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_232)
{
    // A4A6 0041;	
    // (Íí¶) YI RADICAL GGUO	[0F6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A6, 0x0041 };
    uint32_t const ces[9] = { 0x0F6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_233)
{
    // A4A6 0062;	
    // (Íí¶) YI RADICAL GGUO	[0F6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A6, 0x0062 };
    uint32_t const ces[9] = { 0x0F6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_234)
{
    // A4A7 0021;	
    // (Ííß) YI RADICAL NYOP	[0F70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A7, 0x0021 };
    uint32_t const ces[9] = { 0x0F70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_235)
{
    // A4A7 003F;	
    // (Ííß) YI RADICAL NYOP	[0F70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A7, 0x003F };
    uint32_t const ces[9] = { 0x0F70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_236)
{
    // A4A7 0061;	
    // (Ííß) YI RADICAL NYOP	[0F70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A7, 0x0061 };
    uint32_t const ces[9] = { 0x0F70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_237)
{
    // A4A7 0041;	
    // (Ííß) YI RADICAL NYOP	[0F70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A7, 0x0041 };
    uint32_t const ces[9] = { 0x0F70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_238)
{
    // A4A7 0062;	
    // (Ííß) YI RADICAL NYOP	[0F70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A7, 0x0062 };
    uint32_t const ces[9] = { 0x0F70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_239)
{
    // A4A8 0021;	
    // (Íí®) YI RADICAL TU	[0F71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A8, 0x0021 };
    uint32_t const ces[9] = { 0x0F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_240)
{
    // A4A8 003F;	
    // (Íí®) YI RADICAL TU	[0F71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A8, 0x003F };
    uint32_t const ces[9] = { 0x0F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_241)
{
    // A4A8 0061;	
    // (Íí®) YI RADICAL TU	[0F71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A8, 0x0061 };
    uint32_t const ces[9] = { 0x0F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_242)
{
    // A4A8 0041;	
    // (Íí®) YI RADICAL TU	[0F71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A8, 0x0041 };
    uint32_t const ces[9] = { 0x0F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_243)
{
    // A4A8 0062;	
    // (Íí®) YI RADICAL TU	[0F71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A8, 0x0062 };
    uint32_t const ces[9] = { 0x0F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_244)
{
    // A4A9 0021;	
    // (Íí©) YI RADICAL OP	[0F72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A9, 0x0021 };
    uint32_t const ces[9] = { 0x0F72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_245)
{
    // A4A9 003F;	
    // (Íí©) YI RADICAL OP	[0F72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A9, 0x003F };
    uint32_t const ces[9] = { 0x0F72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_246)
{
    // A4A9 0061;	
    // (Íí©) YI RADICAL OP	[0F72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A9, 0x0061 };
    uint32_t const ces[9] = { 0x0F72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_247)
{
    // A4A9 0041;	
    // (Íí©) YI RADICAL OP	[0F72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4A9, 0x0041 };
    uint32_t const ces[9] = { 0x0F72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_248)
{
    // A4A9 0062;	
    // (Íí©) YI RADICAL OP	[0F72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4A9, 0x0062 };
    uint32_t const ces[9] = { 0x0F72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_249)
{
    // A4AA 0021;	
    // (Íí™) YI RADICAL JJUT	[0F73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AA, 0x0021 };
    uint32_t const ces[9] = { 0x0F73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_250)
{
    // A4AA 003F;	
    // (Íí™) YI RADICAL JJUT	[0F73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AA, 0x003F };
    uint32_t const ces[9] = { 0x0F73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_251)
{
    // A4AA 0061;	
    // (Íí™) YI RADICAL JJUT	[0F73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AA, 0x0061 };
    uint32_t const ces[9] = { 0x0F73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_252)
{
    // A4AA 0041;	
    // (Íí™) YI RADICAL JJUT	[0F73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4AA, 0x0041 };
    uint32_t const ces[9] = { 0x0F73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_253)
{
    // A4AA 0062;	
    // (Íí™) YI RADICAL JJUT	[0F73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AA, 0x0062 };
    uint32_t const ces[9] = { 0x0F73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_254)
{
    // A4AB 0021;	
    // (Íí´) YI RADICAL ZOT	[0F74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AB, 0x0021 };
    uint32_t const ces[9] = { 0x0F74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_255)
{
    // A4AB 003F;	
    // (Íí´) YI RADICAL ZOT	[0F74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AB, 0x003F };
    uint32_t const ces[9] = { 0x0F74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_256)
{
    // A4AB 0061;	
    // (Íí´) YI RADICAL ZOT	[0F74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AB, 0x0061 };
    uint32_t const ces[9] = { 0x0F74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_257)
{
    // A4AB 0041;	
    // (Íí´) YI RADICAL ZOT	[0F74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4AB, 0x0041 };
    uint32_t const ces[9] = { 0x0F74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_258)
{
    // A4AB 0062;	
    // (Íí´) YI RADICAL ZOT	[0F74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AB, 0x0062 };
    uint32_t const ces[9] = { 0x0F74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_259)
{
    // A4AC 0021;	
    // (Íí¨) YI RADICAL PYT	[0F75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AC, 0x0021 };
    uint32_t const ces[9] = { 0x0F75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_260)
{
    // A4AC 003F;	
    // (Íí¨) YI RADICAL PYT	[0F75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AC, 0x003F };
    uint32_t const ces[9] = { 0x0F75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_261)
{
    // A4AC 0061;	
    // (Íí¨) YI RADICAL PYT	[0F75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AC, 0x0061 };
    uint32_t const ces[9] = { 0x0F75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_262)
{
    // A4AC 0041;	
    // (Íí¨) YI RADICAL PYT	[0F75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4AC, 0x0041 };
    uint32_t const ces[9] = { 0x0F75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_263)
{
    // A4AC 0062;	
    // (Íí¨) YI RADICAL PYT	[0F75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AC, 0x0062 };
    uint32_t const ces[9] = { 0x0F75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_264)
{
    // A4AD 0021;	
    // (Íí≠) YI RADICAL HMO	[0F76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AD, 0x0021 };
    uint32_t const ces[9] = { 0x0F76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_265)
{
    // A4AD 003F;	
    // (Íí≠) YI RADICAL HMO	[0F76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AD, 0x003F };
    uint32_t const ces[9] = { 0x0F76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_266)
{
    // A4AD 0061;	
    // (Íí≠) YI RADICAL HMO	[0F76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AD, 0x0061 };
    uint32_t const ces[9] = { 0x0F76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_267)
{
    // A4AD 0041;	
    // (Íí≠) YI RADICAL HMO	[0F76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4AD, 0x0041 };
    uint32_t const ces[9] = { 0x0F76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_268)
{
    // A4AD 0062;	
    // (Íí≠) YI RADICAL HMO	[0F76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AD, 0x0062 };
    uint32_t const ces[9] = { 0x0F76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_269)
{
    // A4AE 0021;	
    // (ÍíÆ) YI RADICAL YIT	[0F77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AE, 0x0021 };
    uint32_t const ces[9] = { 0x0F77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_270)
{
    // A4AE 003F;	
    // (ÍíÆ) YI RADICAL YIT	[0F77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AE, 0x003F };
    uint32_t const ces[9] = { 0x0F77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_271)
{
    // A4AE 0061;	
    // (ÍíÆ) YI RADICAL YIT	[0F77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AE, 0x0061 };
    uint32_t const ces[9] = { 0x0F77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_272)
{
    // A4AE 0041;	
    // (ÍíÆ) YI RADICAL YIT	[0F77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4AE, 0x0041 };
    uint32_t const ces[9] = { 0x0F77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_273)
{
    // A4AE 0062;	
    // (ÍíÆ) YI RADICAL YIT	[0F77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AE, 0x0062 };
    uint32_t const ces[9] = { 0x0F77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_274)
{
    // A4AF 0021;	
    // (ÍíØ) YI RADICAL VUR	[0F78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AF, 0x0021 };
    uint32_t const ces[9] = { 0x0F78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_275)
{
    // A4AF 003F;	
    // (ÍíØ) YI RADICAL VUR	[0F78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AF, 0x003F };
    uint32_t const ces[9] = { 0x0F78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_276)
{
    // A4AF 0061;	
    // (ÍíØ) YI RADICAL VUR	[0F78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AF, 0x0061 };
    uint32_t const ces[9] = { 0x0F78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_277)
{
    // A4AF 0041;	
    // (ÍíØ) YI RADICAL VUR	[0F78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4AF, 0x0041 };
    uint32_t const ces[9] = { 0x0F78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_278)
{
    // A4AF 0062;	
    // (ÍíØ) YI RADICAL VUR	[0F78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4AF, 0x0062 };
    uint32_t const ces[9] = { 0x0F78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_279)
{
    // A4B0 0021;	
    // (Íí∞) YI RADICAL SHY	[0F79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B0, 0x0021 };
    uint32_t const ces[9] = { 0x0F79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_280)
{
    // A4B0 003F;	
    // (Íí∞) YI RADICAL SHY	[0F79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B0, 0x003F };
    uint32_t const ces[9] = { 0x0F79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_281)
{
    // A4B0 0061;	
    // (Íí∞) YI RADICAL SHY	[0F79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B0, 0x0061 };
    uint32_t const ces[9] = { 0x0F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_282)
{
    // A4B0 0041;	
    // (Íí∞) YI RADICAL SHY	[0F79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B0, 0x0041 };
    uint32_t const ces[9] = { 0x0F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_283)
{
    // A4B0 0062;	
    // (Íí∞) YI RADICAL SHY	[0F79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B0, 0x0062 };
    uint32_t const ces[9] = { 0x0F79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_284)
{
    // A4B1 0021;	
    // (Íí±) YI RADICAL VEP	[0F7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B1, 0x0021 };
    uint32_t const ces[9] = { 0x0F7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_285)
{
    // A4B1 003F;	
    // (Íí±) YI RADICAL VEP	[0F7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B1, 0x003F };
    uint32_t const ces[9] = { 0x0F7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_286)
{
    // A4B1 0061;	
    // (Íí±) YI RADICAL VEP	[0F7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B1, 0x0061 };
    uint32_t const ces[9] = { 0x0F7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_287)
{
    // A4B1 0041;	
    // (Íí±) YI RADICAL VEP	[0F7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B1, 0x0041 };
    uint32_t const ces[9] = { 0x0F7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_288)
{
    // A4B1 0062;	
    // (Íí±) YI RADICAL VEP	[0F7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B1, 0x0062 };
    uint32_t const ces[9] = { 0x0F7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_289)
{
    // A4B2 0021;	
    // (Íí≤) YI RADICAL ZA	[0F7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B2, 0x0021 };
    uint32_t const ces[9] = { 0x0F7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_290)
{
    // A4B2 003F;	
    // (Íí≤) YI RADICAL ZA	[0F7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B2, 0x003F };
    uint32_t const ces[9] = { 0x0F7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_291)
{
    // A4B2 0061;	
    // (Íí≤) YI RADICAL ZA	[0F7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B2, 0x0061 };
    uint32_t const ces[9] = { 0x0F7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_292)
{
    // A4B2 0041;	
    // (Íí≤) YI RADICAL ZA	[0F7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B2, 0x0041 };
    uint32_t const ces[9] = { 0x0F7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_293)
{
    // A4B2 0062;	
    // (Íí≤) YI RADICAL ZA	[0F7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B2, 0x0062 };
    uint32_t const ces[9] = { 0x0F7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_294)
{
    // A4B3 0021;	
    // (Íí≥) YI RADICAL JO	[0F7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B3, 0x0021 };
    uint32_t const ces[9] = { 0x0F7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_295)
{
    // A4B3 003F;	
    // (Íí≥) YI RADICAL JO	[0F7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B3, 0x003F };
    uint32_t const ces[9] = { 0x0F7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_296)
{
    // A4B3 0061;	
    // (Íí≥) YI RADICAL JO	[0F7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B3, 0x0061 };
    uint32_t const ces[9] = { 0x0F7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_297)
{
    // A4B3 0041;	
    // (Íí≥) YI RADICAL JO	[0F7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B3, 0x0041 };
    uint32_t const ces[9] = { 0x0F7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_298)
{
    // A4B3 0062;	
    // (Íí≥) YI RADICAL JO	[0F7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B3, 0x0062 };
    uint32_t const ces[9] = { 0x0F7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_299)
{
    // A4B4 0021;	
    // (Íí¥) YI RADICAL NZUP	[0F7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B4, 0x0021 };
    uint32_t const ces[9] = { 0x0F7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_300)
{
    // A4B4 003F;	
    // (Íí¥) YI RADICAL NZUP	[0F7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B4, 0x003F };
    uint32_t const ces[9] = { 0x0F7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_301)
{
    // A4B4 0061;	
    // (Íí¥) YI RADICAL NZUP	[0F7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B4, 0x0061 };
    uint32_t const ces[9] = { 0x0F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_302)
{
    // A4B4 0041;	
    // (Íí¥) YI RADICAL NZUP	[0F7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B4, 0x0041 };
    uint32_t const ces[9] = { 0x0F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_303)
{
    // A4B4 0062;	
    // (Íí¥) YI RADICAL NZUP	[0F7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B4, 0x0062 };
    uint32_t const ces[9] = { 0x0F7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_304)
{
    // A4B5 0021;	
    // (Ííµ) YI RADICAL JJY	[0F7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B5, 0x0021 };
    uint32_t const ces[9] = { 0x0F7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_305)
{
    // A4B5 003F;	
    // (Ííµ) YI RADICAL JJY	[0F7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B5, 0x003F };
    uint32_t const ces[9] = { 0x0F7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_306)
{
    // A4B5 0061;	
    // (Ííµ) YI RADICAL JJY	[0F7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B5, 0x0061 };
    uint32_t const ces[9] = { 0x0F7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_307)
{
    // A4B5 0041;	
    // (Ííµ) YI RADICAL JJY	[0F7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B5, 0x0041 };
    uint32_t const ces[9] = { 0x0F7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_308)
{
    // A4B5 0062;	
    // (Ííµ) YI RADICAL JJY	[0F7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B5, 0x0062 };
    uint32_t const ces[9] = { 0x0F7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_309)
{
    // A4B6 0021;	
    // (Íí∂) YI RADICAL GOT	[0F7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B6, 0x0021 };
    uint32_t const ces[9] = { 0x0F7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_310)
{
    // A4B6 003F;	
    // (Íí∂) YI RADICAL GOT	[0F7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B6, 0x003F };
    uint32_t const ces[9] = { 0x0F7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_311)
{
    // A4B6 0061;	
    // (Íí∂) YI RADICAL GOT	[0F7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B6, 0x0061 };
    uint32_t const ces[9] = { 0x0F7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_312)
{
    // A4B6 0041;	
    // (Íí∂) YI RADICAL GOT	[0F7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B6, 0x0041 };
    uint32_t const ces[9] = { 0x0F7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_313)
{
    // A4B6 0062;	
    // (Íí∂) YI RADICAL GOT	[0F7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B6, 0x0062 };
    uint32_t const ces[9] = { 0x0F7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_314)
{
    // A4B7 0021;	
    // (Íí∑) YI RADICAL JJIE	[0F80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B7, 0x0021 };
    uint32_t const ces[9] = { 0x0F80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_315)
{
    // A4B7 003F;	
    // (Íí∑) YI RADICAL JJIE	[0F80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B7, 0x003F };
    uint32_t const ces[9] = { 0x0F80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_316)
{
    // A4B7 0061;	
    // (Íí∑) YI RADICAL JJIE	[0F80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B7, 0x0061 };
    uint32_t const ces[9] = { 0x0F80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_317)
{
    // A4B7 0041;	
    // (Íí∑) YI RADICAL JJIE	[0F80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B7, 0x0041 };
    uint32_t const ces[9] = { 0x0F80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_318)
{
    // A4B7 0062;	
    // (Íí∑) YI RADICAL JJIE	[0F80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B7, 0x0062 };
    uint32_t const ces[9] = { 0x0F80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_319)
{
    // A4B8 0021;	
    // (Íí∏) YI RADICAL WO	[0F81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B8, 0x0021 };
    uint32_t const ces[9] = { 0x0F81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_320)
{
    // A4B8 003F;	
    // (Íí∏) YI RADICAL WO	[0F81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B8, 0x003F };
    uint32_t const ces[9] = { 0x0F81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_321)
{
    // A4B8 0061;	
    // (Íí∏) YI RADICAL WO	[0F81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B8, 0x0061 };
    uint32_t const ces[9] = { 0x0F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_322)
{
    // A4B8 0041;	
    // (Íí∏) YI RADICAL WO	[0F81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B8, 0x0041 };
    uint32_t const ces[9] = { 0x0F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_323)
{
    // A4B8 0062;	
    // (Íí∏) YI RADICAL WO	[0F81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B8, 0x0062 };
    uint32_t const ces[9] = { 0x0F81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_324)
{
    // A4B9 0021;	
    // (Ííπ) YI RADICAL DU	[0F82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B9, 0x0021 };
    uint32_t const ces[9] = { 0x0F82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_325)
{
    // A4B9 003F;	
    // (Ííπ) YI RADICAL DU	[0F82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B9, 0x003F };
    uint32_t const ces[9] = { 0x0F82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_326)
{
    // A4B9 0061;	
    // (Ííπ) YI RADICAL DU	[0F82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B9, 0x0061 };
    uint32_t const ces[9] = { 0x0F82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_327)
{
    // A4B9 0041;	
    // (Ííπ) YI RADICAL DU	[0F82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4B9, 0x0041 };
    uint32_t const ces[9] = { 0x0F82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_328)
{
    // A4B9 0062;	
    // (Ííπ) YI RADICAL DU	[0F82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4B9, 0x0062 };
    uint32_t const ces[9] = { 0x0F82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_329)
{
    // A4BA 0021;	
    // (Íí∫) YI RADICAL SHUR	[0F83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BA, 0x0021 };
    uint32_t const ces[9] = { 0x0F83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_330)
{
    // A4BA 003F;	
    // (Íí∫) YI RADICAL SHUR	[0F83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BA, 0x003F };
    uint32_t const ces[9] = { 0x0F83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_331)
{
    // A4BA 0061;	
    // (Íí∫) YI RADICAL SHUR	[0F83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BA, 0x0061 };
    uint32_t const ces[9] = { 0x0F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_332)
{
    // A4BA 0041;	
    // (Íí∫) YI RADICAL SHUR	[0F83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4BA, 0x0041 };
    uint32_t const ces[9] = { 0x0F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_333)
{
    // A4BA 0062;	
    // (Íí∫) YI RADICAL SHUR	[0F83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BA, 0x0062 };
    uint32_t const ces[9] = { 0x0F83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_334)
{
    // A4BB 0021;	
    // (Ííª) YI RADICAL LIE	[0F84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BB, 0x0021 };
    uint32_t const ces[9] = { 0x0F84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_335)
{
    // A4BB 003F;	
    // (Ííª) YI RADICAL LIE	[0F84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BB, 0x003F };
    uint32_t const ces[9] = { 0x0F84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_336)
{
    // A4BB 0061;	
    // (Ííª) YI RADICAL LIE	[0F84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BB, 0x0061 };
    uint32_t const ces[9] = { 0x0F84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_337)
{
    // A4BB 0041;	
    // (Ííª) YI RADICAL LIE	[0F84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4BB, 0x0041 };
    uint32_t const ces[9] = { 0x0F84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_338)
{
    // A4BB 0062;	
    // (Ííª) YI RADICAL LIE	[0F84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BB, 0x0062 };
    uint32_t const ces[9] = { 0x0F84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_339)
{
    // A4BC 0021;	
    // (Ííº) YI RADICAL CY	[0F85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BC, 0x0021 };
    uint32_t const ces[9] = { 0x0F85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_340)
{
    // A4BC 003F;	
    // (Ííº) YI RADICAL CY	[0F85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BC, 0x003F };
    uint32_t const ces[9] = { 0x0F85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_341)
{
    // A4BC 0061;	
    // (Ííº) YI RADICAL CY	[0F85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BC, 0x0061 };
    uint32_t const ces[9] = { 0x0F85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_342)
{
    // A4BC 0041;	
    // (Ííº) YI RADICAL CY	[0F85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4BC, 0x0041 };
    uint32_t const ces[9] = { 0x0F85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_343)
{
    // A4BC 0062;	
    // (Ííº) YI RADICAL CY	[0F85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BC, 0x0062 };
    uint32_t const ces[9] = { 0x0F85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_344)
{
    // A4BD 0021;	
    // (ÍíΩ) YI RADICAL CUOP	[0F86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BD, 0x0021 };
    uint32_t const ces[9] = { 0x0F86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_345)
{
    // A4BD 003F;	
    // (ÍíΩ) YI RADICAL CUOP	[0F86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BD, 0x003F };
    uint32_t const ces[9] = { 0x0F86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_346)
{
    // A4BD 0061;	
    // (ÍíΩ) YI RADICAL CUOP	[0F86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BD, 0x0061 };
    uint32_t const ces[9] = { 0x0F86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_347)
{
    // A4BD 0041;	
    // (ÍíΩ) YI RADICAL CUOP	[0F86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4BD, 0x0041 };
    uint32_t const ces[9] = { 0x0F86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_348)
{
    // A4BD 0062;	
    // (ÍíΩ) YI RADICAL CUOP	[0F86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BD, 0x0062 };
    uint32_t const ces[9] = { 0x0F86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_349)
{
    // A4BE 0021;	
    // (Ííæ) YI RADICAL CIP	[0F87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BE, 0x0021 };
    uint32_t const ces[9] = { 0x0F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_350)
{
    // A4BE 003F;	
    // (Ííæ) YI RADICAL CIP	[0F87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BE, 0x003F };
    uint32_t const ces[9] = { 0x0F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_351)
{
    // A4BE 0061;	
    // (Ííæ) YI RADICAL CIP	[0F87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BE, 0x0061 };
    uint32_t const ces[9] = { 0x0F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_352)
{
    // A4BE 0041;	
    // (Ííæ) YI RADICAL CIP	[0F87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4BE, 0x0041 };
    uint32_t const ces[9] = { 0x0F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_353)
{
    // A4BE 0062;	
    // (Ííæ) YI RADICAL CIP	[0F87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BE, 0x0062 };
    uint32_t const ces[9] = { 0x0F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_354)
{
    // A4BF 0021;	
    // (Ííø) YI RADICAL HXOP	[0F88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BF, 0x0021 };
    uint32_t const ces[9] = { 0x0F88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_355)
{
    // A4BF 003F;	
    // (Ííø) YI RADICAL HXOP	[0F88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BF, 0x003F };
    uint32_t const ces[9] = { 0x0F88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_356)
{
    // A4BF 0061;	
    // (Ííø) YI RADICAL HXOP	[0F88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BF, 0x0061 };
    uint32_t const ces[9] = { 0x0F88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_357)
{
    // A4BF 0041;	
    // (Ííø) YI RADICAL HXOP	[0F88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4BF, 0x0041 };
    uint32_t const ces[9] = { 0x0F88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_358)
{
    // A4BF 0062;	
    // (Ííø) YI RADICAL HXOP	[0F88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4BF, 0x0062 };
    uint32_t const ces[9] = { 0x0F88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_359)
{
    // A4C0 0021;	
    // (ÍìÄ) YI RADICAL SHAT	[0F89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C0, 0x0021 };
    uint32_t const ces[9] = { 0x0F89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_360)
{
    // A4C0 003F;	
    // (ÍìÄ) YI RADICAL SHAT	[0F89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C0, 0x003F };
    uint32_t const ces[9] = { 0x0F89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_361)
{
    // A4C0 0061;	
    // (ÍìÄ) YI RADICAL SHAT	[0F89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C0, 0x0061 };
    uint32_t const ces[9] = { 0x0F89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_362)
{
    // A4C0 0041;	
    // (ÍìÄ) YI RADICAL SHAT	[0F89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4C0, 0x0041 };
    uint32_t const ces[9] = { 0x0F89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_363)
{
    // A4C0 0062;	
    // (ÍìÄ) YI RADICAL SHAT	[0F89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C0, 0x0062 };
    uint32_t const ces[9] = { 0x0F89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_364)
{
    // A4C1 0021;	
    // (ÍìÅ) YI RADICAL ZUR	[0F8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C1, 0x0021 };
    uint32_t const ces[9] = { 0x0F8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_365)
{
    // A4C1 003F;	
    // (ÍìÅ) YI RADICAL ZUR	[0F8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C1, 0x003F };
    uint32_t const ces[9] = { 0x0F8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_366)
{
    // A4C1 0061;	
    // (ÍìÅ) YI RADICAL ZUR	[0F8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C1, 0x0061 };
    uint32_t const ces[9] = { 0x0F8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_367)
{
    // A4C1 0041;	
    // (ÍìÅ) YI RADICAL ZUR	[0F8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4C1, 0x0041 };
    uint32_t const ces[9] = { 0x0F8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_368)
{
    // A4C1 0062;	
    // (ÍìÅ) YI RADICAL ZUR	[0F8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C1, 0x0062 };
    uint32_t const ces[9] = { 0x0F8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_369)
{
    // A4C2 0021;	
    // (ÍìÇ) YI RADICAL SHOP	[0F8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C2, 0x0021 };
    uint32_t const ces[9] = { 0x0F8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_370)
{
    // A4C2 003F;	
    // (ÍìÇ) YI RADICAL SHOP	[0F8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C2, 0x003F };
    uint32_t const ces[9] = { 0x0F8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_371)
{
    // A4C2 0061;	
    // (ÍìÇ) YI RADICAL SHOP	[0F8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C2, 0x0061 };
    uint32_t const ces[9] = { 0x0F8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_372)
{
    // A4C2 0041;	
    // (ÍìÇ) YI RADICAL SHOP	[0F8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4C2, 0x0041 };
    uint32_t const ces[9] = { 0x0F8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_373)
{
    // A4C2 0062;	
    // (ÍìÇ) YI RADICAL SHOP	[0F8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C2, 0x0062 };
    uint32_t const ces[9] = { 0x0F8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_374)
{
    // A4C3 0021;	
    // (ÍìÉ) YI RADICAL CHE	[0F8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C3, 0x0021 };
    uint32_t const ces[9] = { 0x0F8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_375)
{
    // A4C3 003F;	
    // (ÍìÉ) YI RADICAL CHE	[0F8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C3, 0x003F };
    uint32_t const ces[9] = { 0x0F8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_376)
{
    // A4C3 0061;	
    // (ÍìÉ) YI RADICAL CHE	[0F8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C3, 0x0061 };
    uint32_t const ces[9] = { 0x0F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_377)
{
    // A4C3 0041;	
    // (ÍìÉ) YI RADICAL CHE	[0F8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4C3, 0x0041 };
    uint32_t const ces[9] = { 0x0F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_378)
{
    // A4C3 0062;	
    // (ÍìÉ) YI RADICAL CHE	[0F8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C3, 0x0062 };
    uint32_t const ces[9] = { 0x0F8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_379)
{
    // A4C4 0021;	
    // (ÍìÑ) YI RADICAL ZZIET	[0F8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C4, 0x0021 };
    uint32_t const ces[9] = { 0x0F8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_380)
{
    // A4C4 003F;	
    // (ÍìÑ) YI RADICAL ZZIET	[0F8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C4, 0x003F };
    uint32_t const ces[9] = { 0x0F8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_381)
{
    // A4C4 0061;	
    // (ÍìÑ) YI RADICAL ZZIET	[0F8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C4, 0x0061 };
    uint32_t const ces[9] = { 0x0F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_382)
{
    // A4C4 0041;	
    // (ÍìÑ) YI RADICAL ZZIET	[0F8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4C4, 0x0041 };
    uint32_t const ces[9] = { 0x0F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_383)
{
    // A4C4 0062;	
    // (ÍìÑ) YI RADICAL ZZIET	[0F8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C4, 0x0062 };
    uint32_t const ces[9] = { 0x0F8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_384)
{
    // A4C5 0021;	
    // (ÍìÖ) YI RADICAL NBIE	[0F8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C5, 0x0021 };
    uint32_t const ces[9] = { 0x0F8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_385)
{
    // A4C5 003F;	
    // (ÍìÖ) YI RADICAL NBIE	[0F8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C5, 0x003F };
    uint32_t const ces[9] = { 0x0F8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_386)
{
    // A4C5 0061;	
    // (ÍìÖ) YI RADICAL NBIE	[0F8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C5, 0x0061 };
    uint32_t const ces[9] = { 0x0F8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_387)
{
    // A4C5 0041;	
    // (ÍìÖ) YI RADICAL NBIE	[0F8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4C5, 0x0041 };
    uint32_t const ces[9] = { 0x0F8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_388)
{
    // A4C5 0062;	
    // (ÍìÖ) YI RADICAL NBIE	[0F8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C5, 0x0062 };
    uint32_t const ces[9] = { 0x0F8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_389)
{
    // A4C6 0021;	
    // (ÍìÜ) YI RADICAL KE	[0F8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C6, 0x0021 };
    uint32_t const ces[9] = { 0x0F8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_390)
{
    // A4C6 003F;	
    // (ÍìÜ) YI RADICAL KE	[0F8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C6, 0x003F };
    uint32_t const ces[9] = { 0x0F8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_391)
{
    // A4C6 0061;	
    // (ÍìÜ) YI RADICAL KE	[0F8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C6, 0x0061 };
    uint32_t const ces[9] = { 0x0F8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_392)
{
    // A4C6 0041;	
    // (ÍìÜ) YI RADICAL KE	[0F8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA4C6, 0x0041 };
    uint32_t const ces[9] = { 0x0F8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_393)
{
    // A4C6 0062;	
    // (ÍìÜ) YI RADICAL KE	[0F8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA4C6, 0x0062 };
    uint32_t const ces[9] = { 0x0F8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_394)
{
    // 10137 0021;	
    // (êÑ∑) AEGEAN WEIGHT BASE UNIT	[0F90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10137, 0x0021 };
    uint32_t const ces[9] = { 0x0F90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_395)
{
    // 10137 003F;	
    // (êÑ∑) AEGEAN WEIGHT BASE UNIT	[0F90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10137, 0x003F };
    uint32_t const ces[9] = { 0x0F90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_396)
{
    // 10137 0061;	
    // (êÑ∑) AEGEAN WEIGHT BASE UNIT	[0F90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10137, 0x0061 };
    uint32_t const ces[9] = { 0x0F90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_397)
{
    // 10137 0041;	
    // (êÑ∑) AEGEAN WEIGHT BASE UNIT	[0F90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10137, 0x0041 };
    uint32_t const ces[9] = { 0x0F90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_398)
{
    // 10137 0062;	
    // (êÑ∑) AEGEAN WEIGHT BASE UNIT	[0F90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10137, 0x0062 };
    uint32_t const ces[9] = { 0x0F90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_399)
{
    // 10138 0021;	
    // (êÑ∏) AEGEAN WEIGHT FIRST SUBUNIT	[0F91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10138, 0x0021 };
    uint32_t const ces[9] = { 0x0F91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_400)
{
    // 10138 003F;	
    // (êÑ∏) AEGEAN WEIGHT FIRST SUBUNIT	[0F91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10138, 0x003F };
    uint32_t const ces[9] = { 0x0F91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_401)
{
    // 10138 0061;	
    // (êÑ∏) AEGEAN WEIGHT FIRST SUBUNIT	[0F91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10138, 0x0061 };
    uint32_t const ces[9] = { 0x0F91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_402)
{
    // 10138 0041;	
    // (êÑ∏) AEGEAN WEIGHT FIRST SUBUNIT	[0F91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10138, 0x0041 };
    uint32_t const ces[9] = { 0x0F91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_403)
{
    // 10138 0062;	
    // (êÑ∏) AEGEAN WEIGHT FIRST SUBUNIT	[0F91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10138, 0x0062 };
    uint32_t const ces[9] = { 0x0F91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_404)
{
    // 10139 0021;	
    // (êÑπ) AEGEAN WEIGHT SECOND SUBUNIT	[0F92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10139, 0x0021 };
    uint32_t const ces[9] = { 0x0F92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_405)
{
    // 10139 003F;	
    // (êÑπ) AEGEAN WEIGHT SECOND SUBUNIT	[0F92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10139, 0x003F };
    uint32_t const ces[9] = { 0x0F92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_406)
{
    // 10139 0061;	
    // (êÑπ) AEGEAN WEIGHT SECOND SUBUNIT	[0F92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10139, 0x0061 };
    uint32_t const ces[9] = { 0x0F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_407)
{
    // 10139 0041;	
    // (êÑπ) AEGEAN WEIGHT SECOND SUBUNIT	[0F92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10139, 0x0041 };
    uint32_t const ces[9] = { 0x0F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_408)
{
    // 10139 0062;	
    // (êÑπ) AEGEAN WEIGHT SECOND SUBUNIT	[0F92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10139, 0x0062 };
    uint32_t const ces[9] = { 0x0F92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_409)
{
    // 1013A 0021;	
    // (êÑ∫) AEGEAN WEIGHT THIRD SUBUNIT	[0F93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013A, 0x0021 };
    uint32_t const ces[9] = { 0x0F93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_410)
{
    // 1013A 003F;	
    // (êÑ∫) AEGEAN WEIGHT THIRD SUBUNIT	[0F93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013A, 0x003F };
    uint32_t const ces[9] = { 0x0F93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_411)
{
    // 1013A 0061;	
    // (êÑ∫) AEGEAN WEIGHT THIRD SUBUNIT	[0F93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013A, 0x0061 };
    uint32_t const ces[9] = { 0x0F93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_412)
{
    // 1013A 0041;	
    // (êÑ∫) AEGEAN WEIGHT THIRD SUBUNIT	[0F93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1013A, 0x0041 };
    uint32_t const ces[9] = { 0x0F93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_413)
{
    // 1013A 0062;	
    // (êÑ∫) AEGEAN WEIGHT THIRD SUBUNIT	[0F93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013A, 0x0062 };
    uint32_t const ces[9] = { 0x0F93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_414)
{
    // 1013B 0021;	
    // (êÑª) AEGEAN WEIGHT FOURTH SUBUNIT	[0F94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013B, 0x0021 };
    uint32_t const ces[9] = { 0x0F94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_415)
{
    // 1013B 003F;	
    // (êÑª) AEGEAN WEIGHT FOURTH SUBUNIT	[0F94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013B, 0x003F };
    uint32_t const ces[9] = { 0x0F94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_416)
{
    // 1013B 0061;	
    // (êÑª) AEGEAN WEIGHT FOURTH SUBUNIT	[0F94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013B, 0x0061 };
    uint32_t const ces[9] = { 0x0F94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_417)
{
    // 1013B 0041;	
    // (êÑª) AEGEAN WEIGHT FOURTH SUBUNIT	[0F94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1013B, 0x0041 };
    uint32_t const ces[9] = { 0x0F94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_418)
{
    // 1013B 0062;	
    // (êÑª) AEGEAN WEIGHT FOURTH SUBUNIT	[0F94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013B, 0x0062 };
    uint32_t const ces[9] = { 0x0F94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_419)
{
    // 1013C 0021;	
    // (êÑº) AEGEAN DRY MEASURE FIRST SUBUNIT	[0F95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013C, 0x0021 };
    uint32_t const ces[9] = { 0x0F95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_420)
{
    // 1013C 003F;	
    // (êÑº) AEGEAN DRY MEASURE FIRST SUBUNIT	[0F95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013C, 0x003F };
    uint32_t const ces[9] = { 0x0F95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_421)
{
    // 1013C 0061;	
    // (êÑº) AEGEAN DRY MEASURE FIRST SUBUNIT	[0F95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013C, 0x0061 };
    uint32_t const ces[9] = { 0x0F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_422)
{
    // 1013C 0041;	
    // (êÑº) AEGEAN DRY MEASURE FIRST SUBUNIT	[0F95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1013C, 0x0041 };
    uint32_t const ces[9] = { 0x0F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_423)
{
    // 1013C 0062;	
    // (êÑº) AEGEAN DRY MEASURE FIRST SUBUNIT	[0F95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013C, 0x0062 };
    uint32_t const ces[9] = { 0x0F95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_424)
{
    // 1013D 0021;	
    // (êÑΩ) AEGEAN LIQUID MEASURE FIRST SUBUNIT	[0F96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013D, 0x0021 };
    uint32_t const ces[9] = { 0x0F96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_425)
{
    // 1013D 003F;	
    // (êÑΩ) AEGEAN LIQUID MEASURE FIRST SUBUNIT	[0F96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013D, 0x003F };
    uint32_t const ces[9] = { 0x0F96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_426)
{
    // 1013D 0061;	
    // (êÑΩ) AEGEAN LIQUID MEASURE FIRST SUBUNIT	[0F96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013D, 0x0061 };
    uint32_t const ces[9] = { 0x0F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_427)
{
    // 1013D 0041;	
    // (êÑΩ) AEGEAN LIQUID MEASURE FIRST SUBUNIT	[0F96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1013D, 0x0041 };
    uint32_t const ces[9] = { 0x0F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_428)
{
    // 1013D 0062;	
    // (êÑΩ) AEGEAN LIQUID MEASURE FIRST SUBUNIT	[0F96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013D, 0x0062 };
    uint32_t const ces[9] = { 0x0F96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_429)
{
    // 1013E 0021;	
    // (êÑæ) AEGEAN MEASURE SECOND SUBUNIT	[0F97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013E, 0x0021 };
    uint32_t const ces[9] = { 0x0F97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_430)
{
    // 1013E 003F;	
    // (êÑæ) AEGEAN MEASURE SECOND SUBUNIT	[0F97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013E, 0x003F };
    uint32_t const ces[9] = { 0x0F97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_431)
{
    // 1013E 0061;	
    // (êÑæ) AEGEAN MEASURE SECOND SUBUNIT	[0F97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013E, 0x0061 };
    uint32_t const ces[9] = { 0x0F97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_432)
{
    // 1013E 0041;	
    // (êÑæ) AEGEAN MEASURE SECOND SUBUNIT	[0F97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1013E, 0x0041 };
    uint32_t const ces[9] = { 0x0F97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_433)
{
    // 1013E 0062;	
    // (êÑæ) AEGEAN MEASURE SECOND SUBUNIT	[0F97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013E, 0x0062 };
    uint32_t const ces[9] = { 0x0F97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_434)
{
    // 1013F 0021;	
    // (êÑø) AEGEAN MEASURE THIRD SUBUNIT	[0F98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013F, 0x0021 };
    uint32_t const ces[9] = { 0x0F98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_435)
{
    // 1013F 003F;	
    // (êÑø) AEGEAN MEASURE THIRD SUBUNIT	[0F98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013F, 0x003F };
    uint32_t const ces[9] = { 0x0F98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_436)
{
    // 1013F 0061;	
    // (êÑø) AEGEAN MEASURE THIRD SUBUNIT	[0F98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013F, 0x0061 };
    uint32_t const ces[9] = { 0x0F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_437)
{
    // 1013F 0041;	
    // (êÑø) AEGEAN MEASURE THIRD SUBUNIT	[0F98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1013F, 0x0041 };
    uint32_t const ces[9] = { 0x0F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_438)
{
    // 1013F 0062;	
    // (êÑø) AEGEAN MEASURE THIRD SUBUNIT	[0F98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1013F, 0x0062 };
    uint32_t const ces[9] = { 0x0F98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_439)
{
    // 10179 0021;	
    // (êÖπ) GREEK YEAR SIGN	[0F99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10179, 0x0021 };
    uint32_t const ces[9] = { 0x0F99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_440)
{
    // 10179 003F;	
    // (êÖπ) GREEK YEAR SIGN	[0F99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10179, 0x003F };
    uint32_t const ces[9] = { 0x0F99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_441)
{
    // 10179 0061;	
    // (êÖπ) GREEK YEAR SIGN	[0F99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10179, 0x0061 };
    uint32_t const ces[9] = { 0x0F99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_442)
{
    // 10179 0041;	
    // (êÖπ) GREEK YEAR SIGN	[0F99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10179, 0x0041 };
    uint32_t const ces[9] = { 0x0F99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_443)
{
    // 10179 0062;	
    // (êÖπ) GREEK YEAR SIGN	[0F99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10179, 0x0062 };
    uint32_t const ces[9] = { 0x0F99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_444)
{
    // 1017A 0021;	
    // (êÖ∫) GREEK TALENT SIGN	[0F9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017A, 0x0021 };
    uint32_t const ces[9] = { 0x0F9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_445)
{
    // 1017A 003F;	
    // (êÖ∫) GREEK TALENT SIGN	[0F9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017A, 0x003F };
    uint32_t const ces[9] = { 0x0F9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_446)
{
    // 1017A 0061;	
    // (êÖ∫) GREEK TALENT SIGN	[0F9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017A, 0x0061 };
    uint32_t const ces[9] = { 0x0F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_447)
{
    // 1017A 0041;	
    // (êÖ∫) GREEK TALENT SIGN	[0F9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1017A, 0x0041 };
    uint32_t const ces[9] = { 0x0F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_448)
{
    // 1017A 0062;	
    // (êÖ∫) GREEK TALENT SIGN	[0F9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017A, 0x0062 };
    uint32_t const ces[9] = { 0x0F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_449)
{
    // 1017B 0021;	
    // (êÖª) GREEK DRACHMA SIGN	[0F9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017B, 0x0021 };
    uint32_t const ces[9] = { 0x0F9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_450)
{
    // 1017B 003F;	
    // (êÖª) GREEK DRACHMA SIGN	[0F9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017B, 0x003F };
    uint32_t const ces[9] = { 0x0F9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_451)
{
    // 1017B 0061;	
    // (êÖª) GREEK DRACHMA SIGN	[0F9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017B, 0x0061 };
    uint32_t const ces[9] = { 0x0F9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_452)
{
    // 1017B 0041;	
    // (êÖª) GREEK DRACHMA SIGN	[0F9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1017B, 0x0041 };
    uint32_t const ces[9] = { 0x0F9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_453)
{
    // 1017B 0062;	
    // (êÖª) GREEK DRACHMA SIGN	[0F9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017B, 0x0062 };
    uint32_t const ces[9] = { 0x0F9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_454)
{
    // 1017C 0021;	
    // (êÖº) GREEK OBOL SIGN	[0F9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017C, 0x0021 };
    uint32_t const ces[9] = { 0x0F9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_455)
{
    // 1017C 003F;	
    // (êÖº) GREEK OBOL SIGN	[0F9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017C, 0x003F };
    uint32_t const ces[9] = { 0x0F9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_456)
{
    // 1017C 0061;	
    // (êÖº) GREEK OBOL SIGN	[0F9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017C, 0x0061 };
    uint32_t const ces[9] = { 0x0F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_457)
{
    // 1017C 0041;	
    // (êÖº) GREEK OBOL SIGN	[0F9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1017C, 0x0041 };
    uint32_t const ces[9] = { 0x0F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_458)
{
    // 1017C 0062;	
    // (êÖº) GREEK OBOL SIGN	[0F9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017C, 0x0062 };
    uint32_t const ces[9] = { 0x0F9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_459)
{
    // 1017D 0021;	
    // (êÖΩ) GREEK TWO OBOLS SIGN	[0F9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017D, 0x0021 };
    uint32_t const ces[9] = { 0x0F9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_460)
{
    // 1017D 003F;	
    // (êÖΩ) GREEK TWO OBOLS SIGN	[0F9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017D, 0x003F };
    uint32_t const ces[9] = { 0x0F9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_461)
{
    // 1017D 0061;	
    // (êÖΩ) GREEK TWO OBOLS SIGN	[0F9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017D, 0x0061 };
    uint32_t const ces[9] = { 0x0F9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_462)
{
    // 1017D 0041;	
    // (êÖΩ) GREEK TWO OBOLS SIGN	[0F9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1017D, 0x0041 };
    uint32_t const ces[9] = { 0x0F9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_463)
{
    // 1017D 0062;	
    // (êÖΩ) GREEK TWO OBOLS SIGN	[0F9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017D, 0x0062 };
    uint32_t const ces[9] = { 0x0F9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_464)
{
    // 1017E 0021;	
    // (êÖæ) GREEK THREE OBOLS SIGN	[0F9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017E, 0x0021 };
    uint32_t const ces[9] = { 0x0F9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_465)
{
    // 1017E 003F;	
    // (êÖæ) GREEK THREE OBOLS SIGN	[0F9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017E, 0x003F };
    uint32_t const ces[9] = { 0x0F9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_466)
{
    // 1017E 0061;	
    // (êÖæ) GREEK THREE OBOLS SIGN	[0F9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017E, 0x0061 };
    uint32_t const ces[9] = { 0x0F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_467)
{
    // 1017E 0041;	
    // (êÖæ) GREEK THREE OBOLS SIGN	[0F9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1017E, 0x0041 };
    uint32_t const ces[9] = { 0x0F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_468)
{
    // 1017E 0062;	
    // (êÖæ) GREEK THREE OBOLS SIGN	[0F9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017E, 0x0062 };
    uint32_t const ces[9] = { 0x0F9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_469)
{
    // 1017F 0021;	
    // (êÖø) GREEK FOUR OBOLS SIGN	[0F9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017F, 0x0021 };
    uint32_t const ces[9] = { 0x0F9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_470)
{
    // 1017F 003F;	
    // (êÖø) GREEK FOUR OBOLS SIGN	[0F9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017F, 0x003F };
    uint32_t const ces[9] = { 0x0F9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_471)
{
    // 1017F 0061;	
    // (êÖø) GREEK FOUR OBOLS SIGN	[0F9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017F, 0x0061 };
    uint32_t const ces[9] = { 0x0F9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_472)
{
    // 1017F 0041;	
    // (êÖø) GREEK FOUR OBOLS SIGN	[0F9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1017F, 0x0041 };
    uint32_t const ces[9] = { 0x0F9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_473)
{
    // 1017F 0062;	
    // (êÖø) GREEK FOUR OBOLS SIGN	[0F9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1017F, 0x0062 };
    uint32_t const ces[9] = { 0x0F9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_474)
{
    // 10180 0021;	
    // (êÜÄ) GREEK FIVE OBOLS SIGN	[0FA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10180, 0x0021 };
    uint32_t const ces[9] = { 0x0FA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_475)
{
    // 10180 003F;	
    // (êÜÄ) GREEK FIVE OBOLS SIGN	[0FA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10180, 0x003F };
    uint32_t const ces[9] = { 0x0FA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_476)
{
    // 10180 0061;	
    // (êÜÄ) GREEK FIVE OBOLS SIGN	[0FA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10180, 0x0061 };
    uint32_t const ces[9] = { 0x0FA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_477)
{
    // 10180 0041;	
    // (êÜÄ) GREEK FIVE OBOLS SIGN	[0FA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10180, 0x0041 };
    uint32_t const ces[9] = { 0x0FA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_478)
{
    // 10180 0062;	
    // (êÜÄ) GREEK FIVE OBOLS SIGN	[0FA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10180, 0x0062 };
    uint32_t const ces[9] = { 0x0FA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_479)
{
    // 10181 0021;	
    // (êÜÅ) GREEK METRETES SIGN	[0FA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10181, 0x0021 };
    uint32_t const ces[9] = { 0x0FA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_480)
{
    // 10181 003F;	
    // (êÜÅ) GREEK METRETES SIGN	[0FA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10181, 0x003F };
    uint32_t const ces[9] = { 0x0FA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_481)
{
    // 10181 0061;	
    // (êÜÅ) GREEK METRETES SIGN	[0FA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10181, 0x0061 };
    uint32_t const ces[9] = { 0x0FA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_482)
{
    // 10181 0041;	
    // (êÜÅ) GREEK METRETES SIGN	[0FA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10181, 0x0041 };
    uint32_t const ces[9] = { 0x0FA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_483)
{
    // 10181 0062;	
    // (êÜÅ) GREEK METRETES SIGN	[0FA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10181, 0x0062 };
    uint32_t const ces[9] = { 0x0FA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_484)
{
    // 10182 0021;	
    // (êÜÇ) GREEK KYATHOS BASE SIGN	[0FA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10182, 0x0021 };
    uint32_t const ces[9] = { 0x0FA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_485)
{
    // 10182 003F;	
    // (êÜÇ) GREEK KYATHOS BASE SIGN	[0FA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10182, 0x003F };
    uint32_t const ces[9] = { 0x0FA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_486)
{
    // 10182 0061;	
    // (êÜÇ) GREEK KYATHOS BASE SIGN	[0FA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10182, 0x0061 };
    uint32_t const ces[9] = { 0x0FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_487)
{
    // 10182 0041;	
    // (êÜÇ) GREEK KYATHOS BASE SIGN	[0FA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10182, 0x0041 };
    uint32_t const ces[9] = { 0x0FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_488)
{
    // 10182 0062;	
    // (êÜÇ) GREEK KYATHOS BASE SIGN	[0FA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10182, 0x0062 };
    uint32_t const ces[9] = { 0x0FA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_489)
{
    // 10183 0021;	
    // (êÜÉ) GREEK LITRA SIGN	[0FA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10183, 0x0021 };
    uint32_t const ces[9] = { 0x0FA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_490)
{
    // 10183 003F;	
    // (êÜÉ) GREEK LITRA SIGN	[0FA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10183, 0x003F };
    uint32_t const ces[9] = { 0x0FA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_491)
{
    // 10183 0061;	
    // (êÜÉ) GREEK LITRA SIGN	[0FA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10183, 0x0061 };
    uint32_t const ces[9] = { 0x0FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_492)
{
    // 10183 0041;	
    // (êÜÉ) GREEK LITRA SIGN	[0FA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10183, 0x0041 };
    uint32_t const ces[9] = { 0x0FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_493)
{
    // 10183 0062;	
    // (êÜÉ) GREEK LITRA SIGN	[0FA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10183, 0x0062 };
    uint32_t const ces[9] = { 0x0FA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_494)
{
    // 10184 0021;	
    // (êÜÑ) GREEK OUNKIA SIGN	[0FA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10184, 0x0021 };
    uint32_t const ces[9] = { 0x0FA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_495)
{
    // 10184 003F;	
    // (êÜÑ) GREEK OUNKIA SIGN	[0FA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10184, 0x003F };
    uint32_t const ces[9] = { 0x0FA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_496)
{
    // 10184 0061;	
    // (êÜÑ) GREEK OUNKIA SIGN	[0FA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10184, 0x0061 };
    uint32_t const ces[9] = { 0x0FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_497)
{
    // 10184 0041;	
    // (êÜÑ) GREEK OUNKIA SIGN	[0FA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10184, 0x0041 };
    uint32_t const ces[9] = { 0x0FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_498)
{
    // 10184 0062;	
    // (êÜÑ) GREEK OUNKIA SIGN	[0FA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10184, 0x0062 };
    uint32_t const ces[9] = { 0x0FA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_046_499)
{
    // 10185 0021;	
    // (êÜÖ) GREEK XESTES SIGN	[0FA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10185, 0x0021 };
    uint32_t const ces[9] = { 0x0FA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

