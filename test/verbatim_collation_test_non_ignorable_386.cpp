// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_386_000)
{
    // 4AE7 003F;	
    // (䫧) CJK UNIFIED IDEOGRAPH-4AE7	[FB80 CAE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_001)
{
    // 4AE7 0061;	
    // (䫧) CJK UNIFIED IDEOGRAPH-4AE7	[FB80 CAE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_002)
{
    // 4AE7 0041;	
    // (䫧) CJK UNIFIED IDEOGRAPH-4AE7	[FB80 CAE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_003)
{
    // 4AE7 0062;	
    // (䫧) CJK UNIFIED IDEOGRAPH-4AE7	[FB80 CAE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_004)
{
    // 4AE8 0021;	
    // (䫨) CJK UNIFIED IDEOGRAPH-4AE8	[FB80 CAE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_005)
{
    // 4AE8 003F;	
    // (䫨) CJK UNIFIED IDEOGRAPH-4AE8	[FB80 CAE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_006)
{
    // 4AE8 0061;	
    // (䫨) CJK UNIFIED IDEOGRAPH-4AE8	[FB80 CAE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_007)
{
    // 4AE8 0041;	
    // (䫨) CJK UNIFIED IDEOGRAPH-4AE8	[FB80 CAE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_008)
{
    // 4AE8 0062;	
    // (䫨) CJK UNIFIED IDEOGRAPH-4AE8	[FB80 CAE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_009)
{
    // 4AE9 0021;	
    // (䫩) CJK UNIFIED IDEOGRAPH-4AE9	[FB80 CAE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_010)
{
    // 4AE9 003F;	
    // (䫩) CJK UNIFIED IDEOGRAPH-4AE9	[FB80 CAE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_011)
{
    // 4AE9 0061;	
    // (䫩) CJK UNIFIED IDEOGRAPH-4AE9	[FB80 CAE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_012)
{
    // 4AE9 0041;	
    // (䫩) CJK UNIFIED IDEOGRAPH-4AE9	[FB80 CAE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_013)
{
    // 4AE9 0062;	
    // (䫩) CJK UNIFIED IDEOGRAPH-4AE9	[FB80 CAE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_014)
{
    // 4AEA 0021;	
    // (䫪) CJK UNIFIED IDEOGRAPH-4AEA	[FB80 CAEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_015)
{
    // 4AEA 003F;	
    // (䫪) CJK UNIFIED IDEOGRAPH-4AEA	[FB80 CAEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_016)
{
    // 4AEA 0061;	
    // (䫪) CJK UNIFIED IDEOGRAPH-4AEA	[FB80 CAEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_017)
{
    // 4AEA 0041;	
    // (䫪) CJK UNIFIED IDEOGRAPH-4AEA	[FB80 CAEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_018)
{
    // 4AEA 0062;	
    // (䫪) CJK UNIFIED IDEOGRAPH-4AEA	[FB80 CAEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_019)
{
    // 4AEB 0021;	
    // (䫫) CJK UNIFIED IDEOGRAPH-4AEB	[FB80 CAEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_020)
{
    // 4AEB 003F;	
    // (䫫) CJK UNIFIED IDEOGRAPH-4AEB	[FB80 CAEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_021)
{
    // 4AEB 0061;	
    // (䫫) CJK UNIFIED IDEOGRAPH-4AEB	[FB80 CAEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_022)
{
    // 4AEB 0041;	
    // (䫫) CJK UNIFIED IDEOGRAPH-4AEB	[FB80 CAEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AEB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_023)
{
    // 4AEB 0062;	
    // (䫫) CJK UNIFIED IDEOGRAPH-4AEB	[FB80 CAEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_024)
{
    // 4AEC 0021;	
    // (䫬) CJK UNIFIED IDEOGRAPH-4AEC	[FB80 CAEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_025)
{
    // 4AEC 003F;	
    // (䫬) CJK UNIFIED IDEOGRAPH-4AEC	[FB80 CAEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_026)
{
    // 4AEC 0061;	
    // (䫬) CJK UNIFIED IDEOGRAPH-4AEC	[FB80 CAEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_027)
{
    // 4AEC 0041;	
    // (䫬) CJK UNIFIED IDEOGRAPH-4AEC	[FB80 CAEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_028)
{
    // 4AEC 0062;	
    // (䫬) CJK UNIFIED IDEOGRAPH-4AEC	[FB80 CAEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_029)
{
    // 4AED 0021;	
    // (䫭) CJK UNIFIED IDEOGRAPH-4AED	[FB80 CAED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_030)
{
    // 4AED 003F;	
    // (䫭) CJK UNIFIED IDEOGRAPH-4AED	[FB80 CAED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_031)
{
    // 4AED 0061;	
    // (䫭) CJK UNIFIED IDEOGRAPH-4AED	[FB80 CAED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_032)
{
    // 4AED 0041;	
    // (䫭) CJK UNIFIED IDEOGRAPH-4AED	[FB80 CAED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_033)
{
    // 4AED 0062;	
    // (䫭) CJK UNIFIED IDEOGRAPH-4AED	[FB80 CAED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_034)
{
    // 4AEE 0021;	
    // (䫮) CJK UNIFIED IDEOGRAPH-4AEE	[FB80 CAEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_035)
{
    // 4AEE 003F;	
    // (䫮) CJK UNIFIED IDEOGRAPH-4AEE	[FB80 CAEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_036)
{
    // 4AEE 0061;	
    // (䫮) CJK UNIFIED IDEOGRAPH-4AEE	[FB80 CAEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_037)
{
    // 4AEE 0041;	
    // (䫮) CJK UNIFIED IDEOGRAPH-4AEE	[FB80 CAEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AEE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_038)
{
    // 4AEE 0062;	
    // (䫮) CJK UNIFIED IDEOGRAPH-4AEE	[FB80 CAEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_039)
{
    // 4AEF 0021;	
    // (䫯) CJK UNIFIED IDEOGRAPH-4AEF	[FB80 CAEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_040)
{
    // 4AEF 003F;	
    // (䫯) CJK UNIFIED IDEOGRAPH-4AEF	[FB80 CAEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_041)
{
    // 4AEF 0061;	
    // (䫯) CJK UNIFIED IDEOGRAPH-4AEF	[FB80 CAEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_042)
{
    // 4AEF 0041;	
    // (䫯) CJK UNIFIED IDEOGRAPH-4AEF	[FB80 CAEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AEF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_043)
{
    // 4AEF 0062;	
    // (䫯) CJK UNIFIED IDEOGRAPH-4AEF	[FB80 CAEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AEF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_044)
{
    // 4AF0 0021;	
    // (䫰) CJK UNIFIED IDEOGRAPH-4AF0	[FB80 CAF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_045)
{
    // 4AF0 003F;	
    // (䫰) CJK UNIFIED IDEOGRAPH-4AF0	[FB80 CAF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_046)
{
    // 4AF0 0061;	
    // (䫰) CJK UNIFIED IDEOGRAPH-4AF0	[FB80 CAF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_047)
{
    // 4AF0 0041;	
    // (䫰) CJK UNIFIED IDEOGRAPH-4AF0	[FB80 CAF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_048)
{
    // 4AF0 0062;	
    // (䫰) CJK UNIFIED IDEOGRAPH-4AF0	[FB80 CAF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_049)
{
    // 4AF1 0021;	
    // (䫱) CJK UNIFIED IDEOGRAPH-4AF1	[FB80 CAF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_050)
{
    // 4AF1 003F;	
    // (䫱) CJK UNIFIED IDEOGRAPH-4AF1	[FB80 CAF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_051)
{
    // 4AF1 0061;	
    // (䫱) CJK UNIFIED IDEOGRAPH-4AF1	[FB80 CAF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_052)
{
    // 4AF1 0041;	
    // (䫱) CJK UNIFIED IDEOGRAPH-4AF1	[FB80 CAF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_053)
{
    // 4AF1 0062;	
    // (䫱) CJK UNIFIED IDEOGRAPH-4AF1	[FB80 CAF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_054)
{
    // 4AF2 0021;	
    // (䫲) CJK UNIFIED IDEOGRAPH-4AF2	[FB80 CAF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_055)
{
    // 4AF2 003F;	
    // (䫲) CJK UNIFIED IDEOGRAPH-4AF2	[FB80 CAF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_056)
{
    // 4AF2 0061;	
    // (䫲) CJK UNIFIED IDEOGRAPH-4AF2	[FB80 CAF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_057)
{
    // 4AF2 0041;	
    // (䫲) CJK UNIFIED IDEOGRAPH-4AF2	[FB80 CAF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_058)
{
    // 4AF2 0062;	
    // (䫲) CJK UNIFIED IDEOGRAPH-4AF2	[FB80 CAF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_059)
{
    // 4AF3 0021;	
    // (䫳) CJK UNIFIED IDEOGRAPH-4AF3	[FB80 CAF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_060)
{
    // 4AF3 003F;	
    // (䫳) CJK UNIFIED IDEOGRAPH-4AF3	[FB80 CAF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_061)
{
    // 4AF3 0061;	
    // (䫳) CJK UNIFIED IDEOGRAPH-4AF3	[FB80 CAF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_062)
{
    // 4AF3 0041;	
    // (䫳) CJK UNIFIED IDEOGRAPH-4AF3	[FB80 CAF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_063)
{
    // 4AF3 0062;	
    // (䫳) CJK UNIFIED IDEOGRAPH-4AF3	[FB80 CAF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_064)
{
    // 4AF4 0021;	
    // (䫴) CJK UNIFIED IDEOGRAPH-4AF4	[FB80 CAF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_065)
{
    // 4AF4 003F;	
    // (䫴) CJK UNIFIED IDEOGRAPH-4AF4	[FB80 CAF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_066)
{
    // 4AF4 0061;	
    // (䫴) CJK UNIFIED IDEOGRAPH-4AF4	[FB80 CAF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_067)
{
    // 4AF4 0041;	
    // (䫴) CJK UNIFIED IDEOGRAPH-4AF4	[FB80 CAF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_068)
{
    // 4AF4 0062;	
    // (䫴) CJK UNIFIED IDEOGRAPH-4AF4	[FB80 CAF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_069)
{
    // 4AF5 0021;	
    // (䫵) CJK UNIFIED IDEOGRAPH-4AF5	[FB80 CAF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_070)
{
    // 4AF5 003F;	
    // (䫵) CJK UNIFIED IDEOGRAPH-4AF5	[FB80 CAF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_071)
{
    // 4AF5 0061;	
    // (䫵) CJK UNIFIED IDEOGRAPH-4AF5	[FB80 CAF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_072)
{
    // 4AF5 0041;	
    // (䫵) CJK UNIFIED IDEOGRAPH-4AF5	[FB80 CAF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_073)
{
    // 4AF5 0062;	
    // (䫵) CJK UNIFIED IDEOGRAPH-4AF5	[FB80 CAF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_074)
{
    // 4AF6 0021;	
    // (䫶) CJK UNIFIED IDEOGRAPH-4AF6	[FB80 CAF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_075)
{
    // 4AF6 003F;	
    // (䫶) CJK UNIFIED IDEOGRAPH-4AF6	[FB80 CAF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_076)
{
    // 4AF6 0061;	
    // (䫶) CJK UNIFIED IDEOGRAPH-4AF6	[FB80 CAF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_077)
{
    // 4AF6 0041;	
    // (䫶) CJK UNIFIED IDEOGRAPH-4AF6	[FB80 CAF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_078)
{
    // 4AF6 0062;	
    // (䫶) CJK UNIFIED IDEOGRAPH-4AF6	[FB80 CAF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_079)
{
    // 4AF7 0021;	
    // (䫷) CJK UNIFIED IDEOGRAPH-4AF7	[FB80 CAF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_080)
{
    // 4AF7 003F;	
    // (䫷) CJK UNIFIED IDEOGRAPH-4AF7	[FB80 CAF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_081)
{
    // 4AF7 0061;	
    // (䫷) CJK UNIFIED IDEOGRAPH-4AF7	[FB80 CAF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_082)
{
    // 4AF7 0041;	
    // (䫷) CJK UNIFIED IDEOGRAPH-4AF7	[FB80 CAF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_083)
{
    // 4AF7 0062;	
    // (䫷) CJK UNIFIED IDEOGRAPH-4AF7	[FB80 CAF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_084)
{
    // 4AF8 0021;	
    // (䫸) CJK UNIFIED IDEOGRAPH-4AF8	[FB80 CAF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_085)
{
    // 4AF8 003F;	
    // (䫸) CJK UNIFIED IDEOGRAPH-4AF8	[FB80 CAF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_086)
{
    // 4AF8 0061;	
    // (䫸) CJK UNIFIED IDEOGRAPH-4AF8	[FB80 CAF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_087)
{
    // 4AF8 0041;	
    // (䫸) CJK UNIFIED IDEOGRAPH-4AF8	[FB80 CAF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_088)
{
    // 4AF8 0062;	
    // (䫸) CJK UNIFIED IDEOGRAPH-4AF8	[FB80 CAF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_089)
{
    // 4AF9 0021;	
    // (䫹) CJK UNIFIED IDEOGRAPH-4AF9	[FB80 CAF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_090)
{
    // 4AF9 003F;	
    // (䫹) CJK UNIFIED IDEOGRAPH-4AF9	[FB80 CAF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_091)
{
    // 4AF9 0061;	
    // (䫹) CJK UNIFIED IDEOGRAPH-4AF9	[FB80 CAF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_092)
{
    // 4AF9 0041;	
    // (䫹) CJK UNIFIED IDEOGRAPH-4AF9	[FB80 CAF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AF9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_093)
{
    // 4AF9 0062;	
    // (䫹) CJK UNIFIED IDEOGRAPH-4AF9	[FB80 CAF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AF9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_094)
{
    // 4AFA 0021;	
    // (䫺) CJK UNIFIED IDEOGRAPH-4AFA	[FB80 CAFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_095)
{
    // 4AFA 003F;	
    // (䫺) CJK UNIFIED IDEOGRAPH-4AFA	[FB80 CAFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_096)
{
    // 4AFA 0061;	
    // (䫺) CJK UNIFIED IDEOGRAPH-4AFA	[FB80 CAFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_097)
{
    // 4AFA 0041;	
    // (䫺) CJK UNIFIED IDEOGRAPH-4AFA	[FB80 CAFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AFA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_098)
{
    // 4AFA 0062;	
    // (䫺) CJK UNIFIED IDEOGRAPH-4AFA	[FB80 CAFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_099)
{
    // 4AFB 0021;	
    // (䫻) CJK UNIFIED IDEOGRAPH-4AFB	[FB80 CAFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_100)
{
    // 4AFB 003F;	
    // (䫻) CJK UNIFIED IDEOGRAPH-4AFB	[FB80 CAFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_101)
{
    // 4AFB 0061;	
    // (䫻) CJK UNIFIED IDEOGRAPH-4AFB	[FB80 CAFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_102)
{
    // 4AFB 0041;	
    // (䫻) CJK UNIFIED IDEOGRAPH-4AFB	[FB80 CAFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AFB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_103)
{
    // 4AFB 0062;	
    // (䫻) CJK UNIFIED IDEOGRAPH-4AFB	[FB80 CAFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_104)
{
    // 4AFC 0021;	
    // (䫼) CJK UNIFIED IDEOGRAPH-4AFC	[FB80 CAFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_105)
{
    // 4AFC 003F;	
    // (䫼) CJK UNIFIED IDEOGRAPH-4AFC	[FB80 CAFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_106)
{
    // 4AFC 0061;	
    // (䫼) CJK UNIFIED IDEOGRAPH-4AFC	[FB80 CAFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_107)
{
    // 4AFC 0041;	
    // (䫼) CJK UNIFIED IDEOGRAPH-4AFC	[FB80 CAFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AFC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_108)
{
    // 4AFC 0062;	
    // (䫼) CJK UNIFIED IDEOGRAPH-4AFC	[FB80 CAFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_109)
{
    // 4AFD 0021;	
    // (䫽) CJK UNIFIED IDEOGRAPH-4AFD	[FB80 CAFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_110)
{
    // 4AFD 003F;	
    // (䫽) CJK UNIFIED IDEOGRAPH-4AFD	[FB80 CAFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_111)
{
    // 4AFD 0061;	
    // (䫽) CJK UNIFIED IDEOGRAPH-4AFD	[FB80 CAFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_112)
{
    // 4AFD 0041;	
    // (䫽) CJK UNIFIED IDEOGRAPH-4AFD	[FB80 CAFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AFD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_113)
{
    // 4AFD 0062;	
    // (䫽) CJK UNIFIED IDEOGRAPH-4AFD	[FB80 CAFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_114)
{
    // 4AFE 0021;	
    // (䫾) CJK UNIFIED IDEOGRAPH-4AFE	[FB80 CAFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_115)
{
    // 4AFE 003F;	
    // (䫾) CJK UNIFIED IDEOGRAPH-4AFE	[FB80 CAFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_116)
{
    // 4AFE 0061;	
    // (䫾) CJK UNIFIED IDEOGRAPH-4AFE	[FB80 CAFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_117)
{
    // 4AFE 0041;	
    // (䫾) CJK UNIFIED IDEOGRAPH-4AFE	[FB80 CAFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AFE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_118)
{
    // 4AFE 0062;	
    // (䫾) CJK UNIFIED IDEOGRAPH-4AFE	[FB80 CAFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_119)
{
    // 4AFF 0021;	
    // (䫿) CJK UNIFIED IDEOGRAPH-4AFF	[FB80 CAFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_120)
{
    // 4AFF 003F;	
    // (䫿) CJK UNIFIED IDEOGRAPH-4AFF	[FB80 CAFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCAFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_121)
{
    // 4AFF 0061;	
    // (䫿) CJK UNIFIED IDEOGRAPH-4AFF	[FB80 CAFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_122)
{
    // 4AFF 0041;	
    // (䫿) CJK UNIFIED IDEOGRAPH-4AFF	[FB80 CAFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4AFF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_123)
{
    // 4AFF 0062;	
    // (䫿) CJK UNIFIED IDEOGRAPH-4AFF	[FB80 CAFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4AFF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCAFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_124)
{
    // 4B00 0021;	
    // (䬀) CJK UNIFIED IDEOGRAPH-4B00	[FB80 CB00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B00, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_125)
{
    // 4B00 003F;	
    // (䬀) CJK UNIFIED IDEOGRAPH-4B00	[FB80 CB00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B00, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_126)
{
    // 4B00 0061;	
    // (䬀) CJK UNIFIED IDEOGRAPH-4B00	[FB80 CB00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B00, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_127)
{
    // 4B00 0041;	
    // (䬀) CJK UNIFIED IDEOGRAPH-4B00	[FB80 CB00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B00, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_128)
{
    // 4B00 0062;	
    // (䬀) CJK UNIFIED IDEOGRAPH-4B00	[FB80 CB00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B00, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_129)
{
    // 4B01 0021;	
    // (䬁) CJK UNIFIED IDEOGRAPH-4B01	[FB80 CB01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B01, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_130)
{
    // 4B01 003F;	
    // (䬁) CJK UNIFIED IDEOGRAPH-4B01	[FB80 CB01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B01, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_131)
{
    // 4B01 0061;	
    // (䬁) CJK UNIFIED IDEOGRAPH-4B01	[FB80 CB01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B01, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_132)
{
    // 4B01 0041;	
    // (䬁) CJK UNIFIED IDEOGRAPH-4B01	[FB80 CB01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B01, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_133)
{
    // 4B01 0062;	
    // (䬁) CJK UNIFIED IDEOGRAPH-4B01	[FB80 CB01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B01, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_134)
{
    // 4B02 0021;	
    // (䬂) CJK UNIFIED IDEOGRAPH-4B02	[FB80 CB02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B02, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_135)
{
    // 4B02 003F;	
    // (䬂) CJK UNIFIED IDEOGRAPH-4B02	[FB80 CB02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B02, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_136)
{
    // 4B02 0061;	
    // (䬂) CJK UNIFIED IDEOGRAPH-4B02	[FB80 CB02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B02, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_137)
{
    // 4B02 0041;	
    // (䬂) CJK UNIFIED IDEOGRAPH-4B02	[FB80 CB02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B02, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_138)
{
    // 4B02 0062;	
    // (䬂) CJK UNIFIED IDEOGRAPH-4B02	[FB80 CB02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B02, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_139)
{
    // 4B03 0021;	
    // (䬃) CJK UNIFIED IDEOGRAPH-4B03	[FB80 CB03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_140)
{
    // 4B03 003F;	
    // (䬃) CJK UNIFIED IDEOGRAPH-4B03	[FB80 CB03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_141)
{
    // 4B03 0061;	
    // (䬃) CJK UNIFIED IDEOGRAPH-4B03	[FB80 CB03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_142)
{
    // 4B03 0041;	
    // (䬃) CJK UNIFIED IDEOGRAPH-4B03	[FB80 CB03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_143)
{
    // 4B03 0062;	
    // (䬃) CJK UNIFIED IDEOGRAPH-4B03	[FB80 CB03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_144)
{
    // 4B04 0021;	
    // (䬄) CJK UNIFIED IDEOGRAPH-4B04	[FB80 CB04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B04, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_145)
{
    // 4B04 003F;	
    // (䬄) CJK UNIFIED IDEOGRAPH-4B04	[FB80 CB04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B04, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_146)
{
    // 4B04 0061;	
    // (䬄) CJK UNIFIED IDEOGRAPH-4B04	[FB80 CB04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B04, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_147)
{
    // 4B04 0041;	
    // (䬄) CJK UNIFIED IDEOGRAPH-4B04	[FB80 CB04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B04, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_148)
{
    // 4B04 0062;	
    // (䬄) CJK UNIFIED IDEOGRAPH-4B04	[FB80 CB04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B04, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_149)
{
    // 4B05 0021;	
    // (䬅) CJK UNIFIED IDEOGRAPH-4B05	[FB80 CB05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B05, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_150)
{
    // 4B05 003F;	
    // (䬅) CJK UNIFIED IDEOGRAPH-4B05	[FB80 CB05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B05, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_151)
{
    // 4B05 0061;	
    // (䬅) CJK UNIFIED IDEOGRAPH-4B05	[FB80 CB05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B05, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_152)
{
    // 4B05 0041;	
    // (䬅) CJK UNIFIED IDEOGRAPH-4B05	[FB80 CB05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B05, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_153)
{
    // 4B05 0062;	
    // (䬅) CJK UNIFIED IDEOGRAPH-4B05	[FB80 CB05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B05, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_154)
{
    // 4B06 0021;	
    // (䬆) CJK UNIFIED IDEOGRAPH-4B06	[FB80 CB06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B06, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_155)
{
    // 4B06 003F;	
    // (䬆) CJK UNIFIED IDEOGRAPH-4B06	[FB80 CB06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B06, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_156)
{
    // 4B06 0061;	
    // (䬆) CJK UNIFIED IDEOGRAPH-4B06	[FB80 CB06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B06, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_157)
{
    // 4B06 0041;	
    // (䬆) CJK UNIFIED IDEOGRAPH-4B06	[FB80 CB06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B06, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_158)
{
    // 4B06 0062;	
    // (䬆) CJK UNIFIED IDEOGRAPH-4B06	[FB80 CB06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B06, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_159)
{
    // 4B07 0021;	
    // (䬇) CJK UNIFIED IDEOGRAPH-4B07	[FB80 CB07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B07, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_160)
{
    // 4B07 003F;	
    // (䬇) CJK UNIFIED IDEOGRAPH-4B07	[FB80 CB07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B07, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_161)
{
    // 4B07 0061;	
    // (䬇) CJK UNIFIED IDEOGRAPH-4B07	[FB80 CB07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B07, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_162)
{
    // 4B07 0041;	
    // (䬇) CJK UNIFIED IDEOGRAPH-4B07	[FB80 CB07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B07, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_163)
{
    // 4B07 0062;	
    // (䬇) CJK UNIFIED IDEOGRAPH-4B07	[FB80 CB07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B07, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_164)
{
    // 4B08 0021;	
    // (䬈) CJK UNIFIED IDEOGRAPH-4B08	[FB80 CB08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_165)
{
    // 4B08 003F;	
    // (䬈) CJK UNIFIED IDEOGRAPH-4B08	[FB80 CB08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_166)
{
    // 4B08 0061;	
    // (䬈) CJK UNIFIED IDEOGRAPH-4B08	[FB80 CB08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_167)
{
    // 4B08 0041;	
    // (䬈) CJK UNIFIED IDEOGRAPH-4B08	[FB80 CB08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_168)
{
    // 4B08 0062;	
    // (䬈) CJK UNIFIED IDEOGRAPH-4B08	[FB80 CB08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_169)
{
    // 4B09 0021;	
    // (䬉) CJK UNIFIED IDEOGRAPH-4B09	[FB80 CB09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B09, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_170)
{
    // 4B09 003F;	
    // (䬉) CJK UNIFIED IDEOGRAPH-4B09	[FB80 CB09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B09, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_171)
{
    // 4B09 0061;	
    // (䬉) CJK UNIFIED IDEOGRAPH-4B09	[FB80 CB09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B09, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_172)
{
    // 4B09 0041;	
    // (䬉) CJK UNIFIED IDEOGRAPH-4B09	[FB80 CB09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B09, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_173)
{
    // 4B09 0062;	
    // (䬉) CJK UNIFIED IDEOGRAPH-4B09	[FB80 CB09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B09, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_174)
{
    // 4B0A 0021;	
    // (䬊) CJK UNIFIED IDEOGRAPH-4B0A	[FB80 CB0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_175)
{
    // 4B0A 003F;	
    // (䬊) CJK UNIFIED IDEOGRAPH-4B0A	[FB80 CB0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_176)
{
    // 4B0A 0061;	
    // (䬊) CJK UNIFIED IDEOGRAPH-4B0A	[FB80 CB0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_177)
{
    // 4B0A 0041;	
    // (䬊) CJK UNIFIED IDEOGRAPH-4B0A	[FB80 CB0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_178)
{
    // 4B0A 0062;	
    // (䬊) CJK UNIFIED IDEOGRAPH-4B0A	[FB80 CB0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_179)
{
    // 4B0B 0021;	
    // (䬋) CJK UNIFIED IDEOGRAPH-4B0B	[FB80 CB0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_180)
{
    // 4B0B 003F;	
    // (䬋) CJK UNIFIED IDEOGRAPH-4B0B	[FB80 CB0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_181)
{
    // 4B0B 0061;	
    // (䬋) CJK UNIFIED IDEOGRAPH-4B0B	[FB80 CB0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_182)
{
    // 4B0B 0041;	
    // (䬋) CJK UNIFIED IDEOGRAPH-4B0B	[FB80 CB0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_183)
{
    // 4B0B 0062;	
    // (䬋) CJK UNIFIED IDEOGRAPH-4B0B	[FB80 CB0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_184)
{
    // 4B0C 0021;	
    // (䬌) CJK UNIFIED IDEOGRAPH-4B0C	[FB80 CB0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_185)
{
    // 4B0C 003F;	
    // (䬌) CJK UNIFIED IDEOGRAPH-4B0C	[FB80 CB0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_186)
{
    // 4B0C 0061;	
    // (䬌) CJK UNIFIED IDEOGRAPH-4B0C	[FB80 CB0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_187)
{
    // 4B0C 0041;	
    // (䬌) CJK UNIFIED IDEOGRAPH-4B0C	[FB80 CB0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_188)
{
    // 4B0C 0062;	
    // (䬌) CJK UNIFIED IDEOGRAPH-4B0C	[FB80 CB0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_189)
{
    // 4B0D 0021;	
    // (䬍) CJK UNIFIED IDEOGRAPH-4B0D	[FB80 CB0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_190)
{
    // 4B0D 003F;	
    // (䬍) CJK UNIFIED IDEOGRAPH-4B0D	[FB80 CB0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_191)
{
    // 4B0D 0061;	
    // (䬍) CJK UNIFIED IDEOGRAPH-4B0D	[FB80 CB0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_192)
{
    // 4B0D 0041;	
    // (䬍) CJK UNIFIED IDEOGRAPH-4B0D	[FB80 CB0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_193)
{
    // 4B0D 0062;	
    // (䬍) CJK UNIFIED IDEOGRAPH-4B0D	[FB80 CB0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_194)
{
    // 4B0E 0021;	
    // (䬎) CJK UNIFIED IDEOGRAPH-4B0E	[FB80 CB0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_195)
{
    // 4B0E 003F;	
    // (䬎) CJK UNIFIED IDEOGRAPH-4B0E	[FB80 CB0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_196)
{
    // 4B0E 0061;	
    // (䬎) CJK UNIFIED IDEOGRAPH-4B0E	[FB80 CB0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_197)
{
    // 4B0E 0041;	
    // (䬎) CJK UNIFIED IDEOGRAPH-4B0E	[FB80 CB0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_198)
{
    // 4B0E 0062;	
    // (䬎) CJK UNIFIED IDEOGRAPH-4B0E	[FB80 CB0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_199)
{
    // 4B0F 0021;	
    // (䬏) CJK UNIFIED IDEOGRAPH-4B0F	[FB80 CB0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_200)
{
    // 4B0F 003F;	
    // (䬏) CJK UNIFIED IDEOGRAPH-4B0F	[FB80 CB0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_201)
{
    // 4B0F 0061;	
    // (䬏) CJK UNIFIED IDEOGRAPH-4B0F	[FB80 CB0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_202)
{
    // 4B0F 0041;	
    // (䬏) CJK UNIFIED IDEOGRAPH-4B0F	[FB80 CB0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_203)
{
    // 4B0F 0062;	
    // (䬏) CJK UNIFIED IDEOGRAPH-4B0F	[FB80 CB0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_204)
{
    // 4B10 0021;	
    // (䬐) CJK UNIFIED IDEOGRAPH-4B10	[FB80 CB10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B10, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_205)
{
    // 4B10 003F;	
    // (䬐) CJK UNIFIED IDEOGRAPH-4B10	[FB80 CB10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B10, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_206)
{
    // 4B10 0061;	
    // (䬐) CJK UNIFIED IDEOGRAPH-4B10	[FB80 CB10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B10, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_207)
{
    // 4B10 0041;	
    // (䬐) CJK UNIFIED IDEOGRAPH-4B10	[FB80 CB10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B10, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_208)
{
    // 4B10 0062;	
    // (䬐) CJK UNIFIED IDEOGRAPH-4B10	[FB80 CB10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B10, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_209)
{
    // 4B11 0021;	
    // (䬑) CJK UNIFIED IDEOGRAPH-4B11	[FB80 CB11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B11, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_210)
{
    // 4B11 003F;	
    // (䬑) CJK UNIFIED IDEOGRAPH-4B11	[FB80 CB11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B11, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_211)
{
    // 4B11 0061;	
    // (䬑) CJK UNIFIED IDEOGRAPH-4B11	[FB80 CB11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B11, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_212)
{
    // 4B11 0041;	
    // (䬑) CJK UNIFIED IDEOGRAPH-4B11	[FB80 CB11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B11, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_213)
{
    // 4B11 0062;	
    // (䬑) CJK UNIFIED IDEOGRAPH-4B11	[FB80 CB11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B11, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_214)
{
    // 4B12 0021;	
    // (䬒) CJK UNIFIED IDEOGRAPH-4B12	[FB80 CB12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B12, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_215)
{
    // 4B12 003F;	
    // (䬒) CJK UNIFIED IDEOGRAPH-4B12	[FB80 CB12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B12, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_216)
{
    // 4B12 0061;	
    // (䬒) CJK UNIFIED IDEOGRAPH-4B12	[FB80 CB12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B12, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_217)
{
    // 4B12 0041;	
    // (䬒) CJK UNIFIED IDEOGRAPH-4B12	[FB80 CB12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B12, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_218)
{
    // 4B12 0062;	
    // (䬒) CJK UNIFIED IDEOGRAPH-4B12	[FB80 CB12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B12, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_219)
{
    // 4B13 0021;	
    // (䬓) CJK UNIFIED IDEOGRAPH-4B13	[FB80 CB13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B13, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_220)
{
    // 4B13 003F;	
    // (䬓) CJK UNIFIED IDEOGRAPH-4B13	[FB80 CB13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B13, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_221)
{
    // 4B13 0061;	
    // (䬓) CJK UNIFIED IDEOGRAPH-4B13	[FB80 CB13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B13, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_222)
{
    // 4B13 0041;	
    // (䬓) CJK UNIFIED IDEOGRAPH-4B13	[FB80 CB13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B13, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_223)
{
    // 4B13 0062;	
    // (䬓) CJK UNIFIED IDEOGRAPH-4B13	[FB80 CB13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B13, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_224)
{
    // 4B14 0021;	
    // (䬔) CJK UNIFIED IDEOGRAPH-4B14	[FB80 CB14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B14, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_225)
{
    // 4B14 003F;	
    // (䬔) CJK UNIFIED IDEOGRAPH-4B14	[FB80 CB14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B14, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_226)
{
    // 4B14 0061;	
    // (䬔) CJK UNIFIED IDEOGRAPH-4B14	[FB80 CB14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B14, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_227)
{
    // 4B14 0041;	
    // (䬔) CJK UNIFIED IDEOGRAPH-4B14	[FB80 CB14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B14, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_228)
{
    // 4B14 0062;	
    // (䬔) CJK UNIFIED IDEOGRAPH-4B14	[FB80 CB14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B14, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_229)
{
    // 4B15 0021;	
    // (䬕) CJK UNIFIED IDEOGRAPH-4B15	[FB80 CB15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B15, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_230)
{
    // 4B15 003F;	
    // (䬕) CJK UNIFIED IDEOGRAPH-4B15	[FB80 CB15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B15, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_231)
{
    // 4B15 0061;	
    // (䬕) CJK UNIFIED IDEOGRAPH-4B15	[FB80 CB15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B15, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_232)
{
    // 4B15 0041;	
    // (䬕) CJK UNIFIED IDEOGRAPH-4B15	[FB80 CB15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B15, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_233)
{
    // 4B15 0062;	
    // (䬕) CJK UNIFIED IDEOGRAPH-4B15	[FB80 CB15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B15, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_234)
{
    // 4B16 0021;	
    // (䬖) CJK UNIFIED IDEOGRAPH-4B16	[FB80 CB16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_235)
{
    // 4B16 003F;	
    // (䬖) CJK UNIFIED IDEOGRAPH-4B16	[FB80 CB16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_236)
{
    // 4B16 0061;	
    // (䬖) CJK UNIFIED IDEOGRAPH-4B16	[FB80 CB16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_237)
{
    // 4B16 0041;	
    // (䬖) CJK UNIFIED IDEOGRAPH-4B16	[FB80 CB16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_238)
{
    // 4B16 0062;	
    // (䬖) CJK UNIFIED IDEOGRAPH-4B16	[FB80 CB16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_239)
{
    // 4B17 0021;	
    // (䬗) CJK UNIFIED IDEOGRAPH-4B17	[FB80 CB17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B17, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_240)
{
    // 4B17 003F;	
    // (䬗) CJK UNIFIED IDEOGRAPH-4B17	[FB80 CB17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B17, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_241)
{
    // 4B17 0061;	
    // (䬗) CJK UNIFIED IDEOGRAPH-4B17	[FB80 CB17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B17, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_242)
{
    // 4B17 0041;	
    // (䬗) CJK UNIFIED IDEOGRAPH-4B17	[FB80 CB17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B17, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_243)
{
    // 4B17 0062;	
    // (䬗) CJK UNIFIED IDEOGRAPH-4B17	[FB80 CB17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B17, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_244)
{
    // 4B18 0021;	
    // (䬘) CJK UNIFIED IDEOGRAPH-4B18	[FB80 CB18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B18, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_245)
{
    // 4B18 003F;	
    // (䬘) CJK UNIFIED IDEOGRAPH-4B18	[FB80 CB18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B18, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_246)
{
    // 4B18 0061;	
    // (䬘) CJK UNIFIED IDEOGRAPH-4B18	[FB80 CB18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B18, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_247)
{
    // 4B18 0041;	
    // (䬘) CJK UNIFIED IDEOGRAPH-4B18	[FB80 CB18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B18, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_248)
{
    // 4B18 0062;	
    // (䬘) CJK UNIFIED IDEOGRAPH-4B18	[FB80 CB18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B18, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_249)
{
    // 4B19 0021;	
    // (䬙) CJK UNIFIED IDEOGRAPH-4B19	[FB80 CB19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B19, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_250)
{
    // 4B19 003F;	
    // (䬙) CJK UNIFIED IDEOGRAPH-4B19	[FB80 CB19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B19, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_251)
{
    // 4B19 0061;	
    // (䬙) CJK UNIFIED IDEOGRAPH-4B19	[FB80 CB19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B19, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_252)
{
    // 4B19 0041;	
    // (䬙) CJK UNIFIED IDEOGRAPH-4B19	[FB80 CB19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B19, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_253)
{
    // 4B19 0062;	
    // (䬙) CJK UNIFIED IDEOGRAPH-4B19	[FB80 CB19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B19, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_254)
{
    // 4B1A 0021;	
    // (䬚) CJK UNIFIED IDEOGRAPH-4B1A	[FB80 CB1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_255)
{
    // 4B1A 003F;	
    // (䬚) CJK UNIFIED IDEOGRAPH-4B1A	[FB80 CB1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_256)
{
    // 4B1A 0061;	
    // (䬚) CJK UNIFIED IDEOGRAPH-4B1A	[FB80 CB1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_257)
{
    // 4B1A 0041;	
    // (䬚) CJK UNIFIED IDEOGRAPH-4B1A	[FB80 CB1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_258)
{
    // 4B1A 0062;	
    // (䬚) CJK UNIFIED IDEOGRAPH-4B1A	[FB80 CB1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_259)
{
    // 4B1B 0021;	
    // (䬛) CJK UNIFIED IDEOGRAPH-4B1B	[FB80 CB1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_260)
{
    // 4B1B 003F;	
    // (䬛) CJK UNIFIED IDEOGRAPH-4B1B	[FB80 CB1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_261)
{
    // 4B1B 0061;	
    // (䬛) CJK UNIFIED IDEOGRAPH-4B1B	[FB80 CB1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_262)
{
    // 4B1B 0041;	
    // (䬛) CJK UNIFIED IDEOGRAPH-4B1B	[FB80 CB1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_263)
{
    // 4B1B 0062;	
    // (䬛) CJK UNIFIED IDEOGRAPH-4B1B	[FB80 CB1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_264)
{
    // 4B1C 0021;	
    // (䬜) CJK UNIFIED IDEOGRAPH-4B1C	[FB80 CB1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_265)
{
    // 4B1C 003F;	
    // (䬜) CJK UNIFIED IDEOGRAPH-4B1C	[FB80 CB1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_266)
{
    // 4B1C 0061;	
    // (䬜) CJK UNIFIED IDEOGRAPH-4B1C	[FB80 CB1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_267)
{
    // 4B1C 0041;	
    // (䬜) CJK UNIFIED IDEOGRAPH-4B1C	[FB80 CB1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_268)
{
    // 4B1C 0062;	
    // (䬜) CJK UNIFIED IDEOGRAPH-4B1C	[FB80 CB1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_269)
{
    // 4B1D 0021;	
    // (䬝) CJK UNIFIED IDEOGRAPH-4B1D	[FB80 CB1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_270)
{
    // 4B1D 003F;	
    // (䬝) CJK UNIFIED IDEOGRAPH-4B1D	[FB80 CB1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_271)
{
    // 4B1D 0061;	
    // (䬝) CJK UNIFIED IDEOGRAPH-4B1D	[FB80 CB1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_272)
{
    // 4B1D 0041;	
    // (䬝) CJK UNIFIED IDEOGRAPH-4B1D	[FB80 CB1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_273)
{
    // 4B1D 0062;	
    // (䬝) CJK UNIFIED IDEOGRAPH-4B1D	[FB80 CB1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_274)
{
    // 4B1E 0021;	
    // (䬞) CJK UNIFIED IDEOGRAPH-4B1E	[FB80 CB1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_275)
{
    // 4B1E 003F;	
    // (䬞) CJK UNIFIED IDEOGRAPH-4B1E	[FB80 CB1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_276)
{
    // 4B1E 0061;	
    // (䬞) CJK UNIFIED IDEOGRAPH-4B1E	[FB80 CB1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_277)
{
    // 4B1E 0041;	
    // (䬞) CJK UNIFIED IDEOGRAPH-4B1E	[FB80 CB1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_278)
{
    // 4B1E 0062;	
    // (䬞) CJK UNIFIED IDEOGRAPH-4B1E	[FB80 CB1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_279)
{
    // 4B1F 0021;	
    // (䬟) CJK UNIFIED IDEOGRAPH-4B1F	[FB80 CB1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_280)
{
    // 4B1F 003F;	
    // (䬟) CJK UNIFIED IDEOGRAPH-4B1F	[FB80 CB1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_281)
{
    // 4B1F 0061;	
    // (䬟) CJK UNIFIED IDEOGRAPH-4B1F	[FB80 CB1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_282)
{
    // 4B1F 0041;	
    // (䬟) CJK UNIFIED IDEOGRAPH-4B1F	[FB80 CB1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_283)
{
    // 4B1F 0062;	
    // (䬟) CJK UNIFIED IDEOGRAPH-4B1F	[FB80 CB1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_284)
{
    // 4B20 0021;	
    // (䬠) CJK UNIFIED IDEOGRAPH-4B20	[FB80 CB20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B20, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_285)
{
    // 4B20 003F;	
    // (䬠) CJK UNIFIED IDEOGRAPH-4B20	[FB80 CB20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B20, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_286)
{
    // 4B20 0061;	
    // (䬠) CJK UNIFIED IDEOGRAPH-4B20	[FB80 CB20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B20, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_287)
{
    // 4B20 0041;	
    // (䬠) CJK UNIFIED IDEOGRAPH-4B20	[FB80 CB20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B20, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_288)
{
    // 4B20 0062;	
    // (䬠) CJK UNIFIED IDEOGRAPH-4B20	[FB80 CB20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B20, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_289)
{
    // 4B21 0021;	
    // (䬡) CJK UNIFIED IDEOGRAPH-4B21	[FB80 CB21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B21, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_290)
{
    // 4B21 003F;	
    // (䬡) CJK UNIFIED IDEOGRAPH-4B21	[FB80 CB21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B21, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_291)
{
    // 4B21 0061;	
    // (䬡) CJK UNIFIED IDEOGRAPH-4B21	[FB80 CB21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B21, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_292)
{
    // 4B21 0041;	
    // (䬡) CJK UNIFIED IDEOGRAPH-4B21	[FB80 CB21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B21, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_293)
{
    // 4B21 0062;	
    // (䬡) CJK UNIFIED IDEOGRAPH-4B21	[FB80 CB21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B21, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_294)
{
    // 4B22 0021;	
    // (䬢) CJK UNIFIED IDEOGRAPH-4B22	[FB80 CB22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B22, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_295)
{
    // 4B22 003F;	
    // (䬢) CJK UNIFIED IDEOGRAPH-4B22	[FB80 CB22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B22, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_296)
{
    // 4B22 0061;	
    // (䬢) CJK UNIFIED IDEOGRAPH-4B22	[FB80 CB22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B22, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_297)
{
    // 4B22 0041;	
    // (䬢) CJK UNIFIED IDEOGRAPH-4B22	[FB80 CB22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B22, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_298)
{
    // 4B22 0062;	
    // (䬢) CJK UNIFIED IDEOGRAPH-4B22	[FB80 CB22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B22, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_299)
{
    // 4B23 0021;	
    // (䬣) CJK UNIFIED IDEOGRAPH-4B23	[FB80 CB23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B23, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_300)
{
    // 4B23 003F;	
    // (䬣) CJK UNIFIED IDEOGRAPH-4B23	[FB80 CB23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B23, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_301)
{
    // 4B23 0061;	
    // (䬣) CJK UNIFIED IDEOGRAPH-4B23	[FB80 CB23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B23, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_302)
{
    // 4B23 0041;	
    // (䬣) CJK UNIFIED IDEOGRAPH-4B23	[FB80 CB23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B23, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_303)
{
    // 4B23 0062;	
    // (䬣) CJK UNIFIED IDEOGRAPH-4B23	[FB80 CB23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B23, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_304)
{
    // 4B24 0021;	
    // (䬤) CJK UNIFIED IDEOGRAPH-4B24	[FB80 CB24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B24, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_305)
{
    // 4B24 003F;	
    // (䬤) CJK UNIFIED IDEOGRAPH-4B24	[FB80 CB24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B24, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_306)
{
    // 4B24 0061;	
    // (䬤) CJK UNIFIED IDEOGRAPH-4B24	[FB80 CB24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B24, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_307)
{
    // 4B24 0041;	
    // (䬤) CJK UNIFIED IDEOGRAPH-4B24	[FB80 CB24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B24, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_308)
{
    // 4B24 0062;	
    // (䬤) CJK UNIFIED IDEOGRAPH-4B24	[FB80 CB24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B24, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_309)
{
    // 4B25 0021;	
    // (䬥) CJK UNIFIED IDEOGRAPH-4B25	[FB80 CB25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B25, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_310)
{
    // 4B25 003F;	
    // (䬥) CJK UNIFIED IDEOGRAPH-4B25	[FB80 CB25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B25, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_311)
{
    // 4B25 0061;	
    // (䬥) CJK UNIFIED IDEOGRAPH-4B25	[FB80 CB25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B25, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_312)
{
    // 4B25 0041;	
    // (䬥) CJK UNIFIED IDEOGRAPH-4B25	[FB80 CB25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B25, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_313)
{
    // 4B25 0062;	
    // (䬥) CJK UNIFIED IDEOGRAPH-4B25	[FB80 CB25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B25, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_314)
{
    // 4B26 0021;	
    // (䬦) CJK UNIFIED IDEOGRAPH-4B26	[FB80 CB26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B26, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_315)
{
    // 4B26 003F;	
    // (䬦) CJK UNIFIED IDEOGRAPH-4B26	[FB80 CB26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B26, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_316)
{
    // 4B26 0061;	
    // (䬦) CJK UNIFIED IDEOGRAPH-4B26	[FB80 CB26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B26, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_317)
{
    // 4B26 0041;	
    // (䬦) CJK UNIFIED IDEOGRAPH-4B26	[FB80 CB26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B26, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_318)
{
    // 4B26 0062;	
    // (䬦) CJK UNIFIED IDEOGRAPH-4B26	[FB80 CB26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B26, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_319)
{
    // 4B27 0021;	
    // (䬧) CJK UNIFIED IDEOGRAPH-4B27	[FB80 CB27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B27, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_320)
{
    // 4B27 003F;	
    // (䬧) CJK UNIFIED IDEOGRAPH-4B27	[FB80 CB27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B27, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_321)
{
    // 4B27 0061;	
    // (䬧) CJK UNIFIED IDEOGRAPH-4B27	[FB80 CB27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B27, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_322)
{
    // 4B27 0041;	
    // (䬧) CJK UNIFIED IDEOGRAPH-4B27	[FB80 CB27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B27, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_323)
{
    // 4B27 0062;	
    // (䬧) CJK UNIFIED IDEOGRAPH-4B27	[FB80 CB27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B27, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_324)
{
    // 4B28 0021;	
    // (䬨) CJK UNIFIED IDEOGRAPH-4B28	[FB80 CB28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B28, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_325)
{
    // 4B28 003F;	
    // (䬨) CJK UNIFIED IDEOGRAPH-4B28	[FB80 CB28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B28, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_326)
{
    // 4B28 0061;	
    // (䬨) CJK UNIFIED IDEOGRAPH-4B28	[FB80 CB28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B28, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_327)
{
    // 4B28 0041;	
    // (䬨) CJK UNIFIED IDEOGRAPH-4B28	[FB80 CB28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B28, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_328)
{
    // 4B28 0062;	
    // (䬨) CJK UNIFIED IDEOGRAPH-4B28	[FB80 CB28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B28, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_329)
{
    // 4B29 0021;	
    // (䬩) CJK UNIFIED IDEOGRAPH-4B29	[FB80 CB29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B29, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_330)
{
    // 4B29 003F;	
    // (䬩) CJK UNIFIED IDEOGRAPH-4B29	[FB80 CB29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B29, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_331)
{
    // 4B29 0061;	
    // (䬩) CJK UNIFIED IDEOGRAPH-4B29	[FB80 CB29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B29, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_332)
{
    // 4B29 0041;	
    // (䬩) CJK UNIFIED IDEOGRAPH-4B29	[FB80 CB29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B29, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_333)
{
    // 4B29 0062;	
    // (䬩) CJK UNIFIED IDEOGRAPH-4B29	[FB80 CB29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B29, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_334)
{
    // 4B2A 0021;	
    // (䬪) CJK UNIFIED IDEOGRAPH-4B2A	[FB80 CB2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_335)
{
    // 4B2A 003F;	
    // (䬪) CJK UNIFIED IDEOGRAPH-4B2A	[FB80 CB2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_336)
{
    // 4B2A 0061;	
    // (䬪) CJK UNIFIED IDEOGRAPH-4B2A	[FB80 CB2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_337)
{
    // 4B2A 0041;	
    // (䬪) CJK UNIFIED IDEOGRAPH-4B2A	[FB80 CB2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_338)
{
    // 4B2A 0062;	
    // (䬪) CJK UNIFIED IDEOGRAPH-4B2A	[FB80 CB2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_339)
{
    // 4B2B 0021;	
    // (䬫) CJK UNIFIED IDEOGRAPH-4B2B	[FB80 CB2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_340)
{
    // 4B2B 003F;	
    // (䬫) CJK UNIFIED IDEOGRAPH-4B2B	[FB80 CB2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_341)
{
    // 4B2B 0061;	
    // (䬫) CJK UNIFIED IDEOGRAPH-4B2B	[FB80 CB2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_342)
{
    // 4B2B 0041;	
    // (䬫) CJK UNIFIED IDEOGRAPH-4B2B	[FB80 CB2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_343)
{
    // 4B2B 0062;	
    // (䬫) CJK UNIFIED IDEOGRAPH-4B2B	[FB80 CB2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_344)
{
    // 4B2C 0021;	
    // (䬬) CJK UNIFIED IDEOGRAPH-4B2C	[FB80 CB2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_345)
{
    // 4B2C 003F;	
    // (䬬) CJK UNIFIED IDEOGRAPH-4B2C	[FB80 CB2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_346)
{
    // 4B2C 0061;	
    // (䬬) CJK UNIFIED IDEOGRAPH-4B2C	[FB80 CB2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_347)
{
    // 4B2C 0041;	
    // (䬬) CJK UNIFIED IDEOGRAPH-4B2C	[FB80 CB2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B2C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_348)
{
    // 4B2C 0062;	
    // (䬬) CJK UNIFIED IDEOGRAPH-4B2C	[FB80 CB2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_349)
{
    // 4B2D 0021;	
    // (䬭) CJK UNIFIED IDEOGRAPH-4B2D	[FB80 CB2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_350)
{
    // 4B2D 003F;	
    // (䬭) CJK UNIFIED IDEOGRAPH-4B2D	[FB80 CB2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_351)
{
    // 4B2D 0061;	
    // (䬭) CJK UNIFIED IDEOGRAPH-4B2D	[FB80 CB2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_352)
{
    // 4B2D 0041;	
    // (䬭) CJK UNIFIED IDEOGRAPH-4B2D	[FB80 CB2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B2D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_353)
{
    // 4B2D 0062;	
    // (䬭) CJK UNIFIED IDEOGRAPH-4B2D	[FB80 CB2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_354)
{
    // 4B2E 0021;	
    // (䬮) CJK UNIFIED IDEOGRAPH-4B2E	[FB80 CB2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_355)
{
    // 4B2E 003F;	
    // (䬮) CJK UNIFIED IDEOGRAPH-4B2E	[FB80 CB2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_356)
{
    // 4B2E 0061;	
    // (䬮) CJK UNIFIED IDEOGRAPH-4B2E	[FB80 CB2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_357)
{
    // 4B2E 0041;	
    // (䬮) CJK UNIFIED IDEOGRAPH-4B2E	[FB80 CB2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B2E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_358)
{
    // 4B2E 0062;	
    // (䬮) CJK UNIFIED IDEOGRAPH-4B2E	[FB80 CB2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_359)
{
    // 4B2F 0021;	
    // (䬯) CJK UNIFIED IDEOGRAPH-4B2F	[FB80 CB2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_360)
{
    // 4B2F 003F;	
    // (䬯) CJK UNIFIED IDEOGRAPH-4B2F	[FB80 CB2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_361)
{
    // 4B2F 0061;	
    // (䬯) CJK UNIFIED IDEOGRAPH-4B2F	[FB80 CB2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_362)
{
    // 4B2F 0041;	
    // (䬯) CJK UNIFIED IDEOGRAPH-4B2F	[FB80 CB2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B2F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_363)
{
    // 4B2F 0062;	
    // (䬯) CJK UNIFIED IDEOGRAPH-4B2F	[FB80 CB2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B2F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_364)
{
    // 4B30 0021;	
    // (䬰) CJK UNIFIED IDEOGRAPH-4B30	[FB80 CB30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B30, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_365)
{
    // 4B30 003F;	
    // (䬰) CJK UNIFIED IDEOGRAPH-4B30	[FB80 CB30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B30, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_366)
{
    // 4B30 0061;	
    // (䬰) CJK UNIFIED IDEOGRAPH-4B30	[FB80 CB30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B30, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_367)
{
    // 4B30 0041;	
    // (䬰) CJK UNIFIED IDEOGRAPH-4B30	[FB80 CB30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B30, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_368)
{
    // 4B30 0062;	
    // (䬰) CJK UNIFIED IDEOGRAPH-4B30	[FB80 CB30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B30, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_369)
{
    // 4B31 0021;	
    // (䬱) CJK UNIFIED IDEOGRAPH-4B31	[FB80 CB31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B31, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_370)
{
    // 4B31 003F;	
    // (䬱) CJK UNIFIED IDEOGRAPH-4B31	[FB80 CB31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B31, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_371)
{
    // 4B31 0061;	
    // (䬱) CJK UNIFIED IDEOGRAPH-4B31	[FB80 CB31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B31, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_372)
{
    // 4B31 0041;	
    // (䬱) CJK UNIFIED IDEOGRAPH-4B31	[FB80 CB31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B31, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_373)
{
    // 4B31 0062;	
    // (䬱) CJK UNIFIED IDEOGRAPH-4B31	[FB80 CB31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B31, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_374)
{
    // 4B32 0021;	
    // (䬲) CJK UNIFIED IDEOGRAPH-4B32	[FB80 CB32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B32, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_375)
{
    // 4B32 003F;	
    // (䬲) CJK UNIFIED IDEOGRAPH-4B32	[FB80 CB32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B32, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_376)
{
    // 4B32 0061;	
    // (䬲) CJK UNIFIED IDEOGRAPH-4B32	[FB80 CB32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B32, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_377)
{
    // 4B32 0041;	
    // (䬲) CJK UNIFIED IDEOGRAPH-4B32	[FB80 CB32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B32, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_378)
{
    // 4B32 0062;	
    // (䬲) CJK UNIFIED IDEOGRAPH-4B32	[FB80 CB32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B32, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_379)
{
    // 4B33 0021;	
    // (䬳) CJK UNIFIED IDEOGRAPH-4B33	[FB80 CB33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B33, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_380)
{
    // 2FA03 0021;	
    // (䬳) CJK COMPATIBILITY IDEOGRAPH-2FA03	[FB80 CB33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_381)
{
    // 4B33 003F;	
    // (䬳) CJK UNIFIED IDEOGRAPH-4B33	[FB80 CB33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B33, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_382)
{
    // 2FA03 003F;	
    // (䬳) CJK COMPATIBILITY IDEOGRAPH-2FA03	[FB80 CB33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_383)
{
    // 4B33 0061;	
    // (䬳) CJK UNIFIED IDEOGRAPH-4B33	[FB80 CB33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B33, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_384)
{
    // 2FA03 0061;	
    // (䬳) CJK COMPATIBILITY IDEOGRAPH-2FA03	[FB80 CB33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_385)
{
    // 4B33 0041;	
    // (䬳) CJK UNIFIED IDEOGRAPH-4B33	[FB80 CB33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B33, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_386)
{
    // 2FA03 0041;	
    // (䬳) CJK COMPATIBILITY IDEOGRAPH-2FA03	[FB80 CB33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_387)
{
    // 4B33 0062;	
    // (䬳) CJK UNIFIED IDEOGRAPH-4B33	[FB80 CB33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B33, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_388)
{
    // 2FA03 0062;	
    // (䬳) CJK COMPATIBILITY IDEOGRAPH-2FA03	[FB80 CB33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_389)
{
    // 4B34 0021;	
    // (䬴) CJK UNIFIED IDEOGRAPH-4B34	[FB80 CB34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B34, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_390)
{
    // 4B34 003F;	
    // (䬴) CJK UNIFIED IDEOGRAPH-4B34	[FB80 CB34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B34, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_391)
{
    // 4B34 0061;	
    // (䬴) CJK UNIFIED IDEOGRAPH-4B34	[FB80 CB34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B34, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_392)
{
    // 4B34 0041;	
    // (䬴) CJK UNIFIED IDEOGRAPH-4B34	[FB80 CB34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B34, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_393)
{
    // 4B34 0062;	
    // (䬴) CJK UNIFIED IDEOGRAPH-4B34	[FB80 CB34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B34, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_394)
{
    // 4B35 0021;	
    // (䬵) CJK UNIFIED IDEOGRAPH-4B35	[FB80 CB35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B35, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_395)
{
    // 4B35 003F;	
    // (䬵) CJK UNIFIED IDEOGRAPH-4B35	[FB80 CB35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B35, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_396)
{
    // 4B35 0061;	
    // (䬵) CJK UNIFIED IDEOGRAPH-4B35	[FB80 CB35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B35, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_397)
{
    // 4B35 0041;	
    // (䬵) CJK UNIFIED IDEOGRAPH-4B35	[FB80 CB35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B35, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_398)
{
    // 4B35 0062;	
    // (䬵) CJK UNIFIED IDEOGRAPH-4B35	[FB80 CB35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B35, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_399)
{
    // 4B36 0021;	
    // (䬶) CJK UNIFIED IDEOGRAPH-4B36	[FB80 CB36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B36, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_400)
{
    // 4B36 003F;	
    // (䬶) CJK UNIFIED IDEOGRAPH-4B36	[FB80 CB36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B36, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_401)
{
    // 4B36 0061;	
    // (䬶) CJK UNIFIED IDEOGRAPH-4B36	[FB80 CB36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B36, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_402)
{
    // 4B36 0041;	
    // (䬶) CJK UNIFIED IDEOGRAPH-4B36	[FB80 CB36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B36, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_403)
{
    // 4B36 0062;	
    // (䬶) CJK UNIFIED IDEOGRAPH-4B36	[FB80 CB36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B36, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_404)
{
    // 4B37 0021;	
    // (䬷) CJK UNIFIED IDEOGRAPH-4B37	[FB80 CB37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B37, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_405)
{
    // 4B37 003F;	
    // (䬷) CJK UNIFIED IDEOGRAPH-4B37	[FB80 CB37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B37, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_406)
{
    // 4B37 0061;	
    // (䬷) CJK UNIFIED IDEOGRAPH-4B37	[FB80 CB37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B37, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_407)
{
    // 4B37 0041;	
    // (䬷) CJK UNIFIED IDEOGRAPH-4B37	[FB80 CB37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B37, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_408)
{
    // 4B37 0062;	
    // (䬷) CJK UNIFIED IDEOGRAPH-4B37	[FB80 CB37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B37, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_409)
{
    // 4B38 0021;	
    // (䬸) CJK UNIFIED IDEOGRAPH-4B38	[FB80 CB38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B38, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_410)
{
    // 4B38 003F;	
    // (䬸) CJK UNIFIED IDEOGRAPH-4B38	[FB80 CB38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B38, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_411)
{
    // 4B38 0061;	
    // (䬸) CJK UNIFIED IDEOGRAPH-4B38	[FB80 CB38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B38, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_412)
{
    // 4B38 0041;	
    // (䬸) CJK UNIFIED IDEOGRAPH-4B38	[FB80 CB38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B38, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_413)
{
    // 4B38 0062;	
    // (䬸) CJK UNIFIED IDEOGRAPH-4B38	[FB80 CB38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B38, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_414)
{
    // 4B39 0021;	
    // (䬹) CJK UNIFIED IDEOGRAPH-4B39	[FB80 CB39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B39, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_415)
{
    // 4B39 003F;	
    // (䬹) CJK UNIFIED IDEOGRAPH-4B39	[FB80 CB39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B39, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_416)
{
    // 4B39 0061;	
    // (䬹) CJK UNIFIED IDEOGRAPH-4B39	[FB80 CB39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B39, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_417)
{
    // 4B39 0041;	
    // (䬹) CJK UNIFIED IDEOGRAPH-4B39	[FB80 CB39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B39, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_418)
{
    // 4B39 0062;	
    // (䬹) CJK UNIFIED IDEOGRAPH-4B39	[FB80 CB39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B39, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_419)
{
    // 4B3A 0021;	
    // (䬺) CJK UNIFIED IDEOGRAPH-4B3A	[FB80 CB3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_420)
{
    // 4B3A 003F;	
    // (䬺) CJK UNIFIED IDEOGRAPH-4B3A	[FB80 CB3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_421)
{
    // 4B3A 0061;	
    // (䬺) CJK UNIFIED IDEOGRAPH-4B3A	[FB80 CB3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_422)
{
    // 4B3A 0041;	
    // (䬺) CJK UNIFIED IDEOGRAPH-4B3A	[FB80 CB3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_423)
{
    // 4B3A 0062;	
    // (䬺) CJK UNIFIED IDEOGRAPH-4B3A	[FB80 CB3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_424)
{
    // 4B3B 0021;	
    // (䬻) CJK UNIFIED IDEOGRAPH-4B3B	[FB80 CB3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_425)
{
    // 4B3B 003F;	
    // (䬻) CJK UNIFIED IDEOGRAPH-4B3B	[FB80 CB3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_426)
{
    // 4B3B 0061;	
    // (䬻) CJK UNIFIED IDEOGRAPH-4B3B	[FB80 CB3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_427)
{
    // 4B3B 0041;	
    // (䬻) CJK UNIFIED IDEOGRAPH-4B3B	[FB80 CB3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B3B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_428)
{
    // 4B3B 0062;	
    // (䬻) CJK UNIFIED IDEOGRAPH-4B3B	[FB80 CB3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_429)
{
    // 4B3C 0021;	
    // (䬼) CJK UNIFIED IDEOGRAPH-4B3C	[FB80 CB3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_430)
{
    // 4B3C 003F;	
    // (䬼) CJK UNIFIED IDEOGRAPH-4B3C	[FB80 CB3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_431)
{
    // 4B3C 0061;	
    // (䬼) CJK UNIFIED IDEOGRAPH-4B3C	[FB80 CB3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_432)
{
    // 4B3C 0041;	
    // (䬼) CJK UNIFIED IDEOGRAPH-4B3C	[FB80 CB3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B3C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_433)
{
    // 4B3C 0062;	
    // (䬼) CJK UNIFIED IDEOGRAPH-4B3C	[FB80 CB3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_434)
{
    // 4B3D 0021;	
    // (䬽) CJK UNIFIED IDEOGRAPH-4B3D	[FB80 CB3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_435)
{
    // 4B3D 003F;	
    // (䬽) CJK UNIFIED IDEOGRAPH-4B3D	[FB80 CB3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_436)
{
    // 4B3D 0061;	
    // (䬽) CJK UNIFIED IDEOGRAPH-4B3D	[FB80 CB3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_437)
{
    // 4B3D 0041;	
    // (䬽) CJK UNIFIED IDEOGRAPH-4B3D	[FB80 CB3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B3D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_438)
{
    // 4B3D 0062;	
    // (䬽) CJK UNIFIED IDEOGRAPH-4B3D	[FB80 CB3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_439)
{
    // 4B3E 0021;	
    // (䬾) CJK UNIFIED IDEOGRAPH-4B3E	[FB80 CB3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_440)
{
    // 4B3E 003F;	
    // (䬾) CJK UNIFIED IDEOGRAPH-4B3E	[FB80 CB3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_441)
{
    // 4B3E 0061;	
    // (䬾) CJK UNIFIED IDEOGRAPH-4B3E	[FB80 CB3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_442)
{
    // 4B3E 0041;	
    // (䬾) CJK UNIFIED IDEOGRAPH-4B3E	[FB80 CB3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B3E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_443)
{
    // 4B3E 0062;	
    // (䬾) CJK UNIFIED IDEOGRAPH-4B3E	[FB80 CB3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_444)
{
    // 4B3F 0021;	
    // (䬿) CJK UNIFIED IDEOGRAPH-4B3F	[FB80 CB3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_445)
{
    // 4B3F 003F;	
    // (䬿) CJK UNIFIED IDEOGRAPH-4B3F	[FB80 CB3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_446)
{
    // 4B3F 0061;	
    // (䬿) CJK UNIFIED IDEOGRAPH-4B3F	[FB80 CB3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_447)
{
    // 4B3F 0041;	
    // (䬿) CJK UNIFIED IDEOGRAPH-4B3F	[FB80 CB3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B3F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_448)
{
    // 4B3F 0062;	
    // (䬿) CJK UNIFIED IDEOGRAPH-4B3F	[FB80 CB3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B3F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_449)
{
    // 4B40 0021;	
    // (䭀) CJK UNIFIED IDEOGRAPH-4B40	[FB80 CB40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B40, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_450)
{
    // 4B40 003F;	
    // (䭀) CJK UNIFIED IDEOGRAPH-4B40	[FB80 CB40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B40, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_451)
{
    // 4B40 0061;	
    // (䭀) CJK UNIFIED IDEOGRAPH-4B40	[FB80 CB40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B40, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_452)
{
    // 4B40 0041;	
    // (䭀) CJK UNIFIED IDEOGRAPH-4B40	[FB80 CB40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B40, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_453)
{
    // 4B40 0062;	
    // (䭀) CJK UNIFIED IDEOGRAPH-4B40	[FB80 CB40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B40, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_454)
{
    // 4B41 0021;	
    // (䭁) CJK UNIFIED IDEOGRAPH-4B41	[FB80 CB41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B41, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_455)
{
    // 4B41 003F;	
    // (䭁) CJK UNIFIED IDEOGRAPH-4B41	[FB80 CB41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B41, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_456)
{
    // 4B41 0061;	
    // (䭁) CJK UNIFIED IDEOGRAPH-4B41	[FB80 CB41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B41, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_457)
{
    // 4B41 0041;	
    // (䭁) CJK UNIFIED IDEOGRAPH-4B41	[FB80 CB41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B41, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_458)
{
    // 4B41 0062;	
    // (䭁) CJK UNIFIED IDEOGRAPH-4B41	[FB80 CB41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B41, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_459)
{
    // 4B42 0021;	
    // (䭂) CJK UNIFIED IDEOGRAPH-4B42	[FB80 CB42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B42, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_460)
{
    // 4B42 003F;	
    // (䭂) CJK UNIFIED IDEOGRAPH-4B42	[FB80 CB42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B42, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_461)
{
    // 4B42 0061;	
    // (䭂) CJK UNIFIED IDEOGRAPH-4B42	[FB80 CB42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B42, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_462)
{
    // 4B42 0041;	
    // (䭂) CJK UNIFIED IDEOGRAPH-4B42	[FB80 CB42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B42, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_463)
{
    // 4B42 0062;	
    // (䭂) CJK UNIFIED IDEOGRAPH-4B42	[FB80 CB42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B42, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_464)
{
    // 4B43 0021;	
    // (䭃) CJK UNIFIED IDEOGRAPH-4B43	[FB80 CB43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B43, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_465)
{
    // 4B43 003F;	
    // (䭃) CJK UNIFIED IDEOGRAPH-4B43	[FB80 CB43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B43, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_466)
{
    // 4B43 0061;	
    // (䭃) CJK UNIFIED IDEOGRAPH-4B43	[FB80 CB43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B43, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_467)
{
    // 4B43 0041;	
    // (䭃) CJK UNIFIED IDEOGRAPH-4B43	[FB80 CB43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B43, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_468)
{
    // 4B43 0062;	
    // (䭃) CJK UNIFIED IDEOGRAPH-4B43	[FB80 CB43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B43, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_469)
{
    // 4B44 0021;	
    // (䭄) CJK UNIFIED IDEOGRAPH-4B44	[FB80 CB44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B44, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_470)
{
    // 4B44 003F;	
    // (䭄) CJK UNIFIED IDEOGRAPH-4B44	[FB80 CB44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B44, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_471)
{
    // 4B44 0061;	
    // (䭄) CJK UNIFIED IDEOGRAPH-4B44	[FB80 CB44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B44, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_472)
{
    // 4B44 0041;	
    // (䭄) CJK UNIFIED IDEOGRAPH-4B44	[FB80 CB44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B44, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_473)
{
    // 4B44 0062;	
    // (䭄) CJK UNIFIED IDEOGRAPH-4B44	[FB80 CB44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B44, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_474)
{
    // 4B45 0021;	
    // (䭅) CJK UNIFIED IDEOGRAPH-4B45	[FB80 CB45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B45, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_475)
{
    // 4B45 003F;	
    // (䭅) CJK UNIFIED IDEOGRAPH-4B45	[FB80 CB45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B45, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_476)
{
    // 4B45 0061;	
    // (䭅) CJK UNIFIED IDEOGRAPH-4B45	[FB80 CB45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B45, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_477)
{
    // 4B45 0041;	
    // (䭅) CJK UNIFIED IDEOGRAPH-4B45	[FB80 CB45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B45, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_478)
{
    // 4B45 0062;	
    // (䭅) CJK UNIFIED IDEOGRAPH-4B45	[FB80 CB45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B45, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_479)
{
    // 4B46 0021;	
    // (䭆) CJK UNIFIED IDEOGRAPH-4B46	[FB80 CB46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B46, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_480)
{
    // 4B46 003F;	
    // (䭆) CJK UNIFIED IDEOGRAPH-4B46	[FB80 CB46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B46, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_481)
{
    // 4B46 0061;	
    // (䭆) CJK UNIFIED IDEOGRAPH-4B46	[FB80 CB46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B46, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_482)
{
    // 4B46 0041;	
    // (䭆) CJK UNIFIED IDEOGRAPH-4B46	[FB80 CB46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B46, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_483)
{
    // 4B46 0062;	
    // (䭆) CJK UNIFIED IDEOGRAPH-4B46	[FB80 CB46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B46, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_484)
{
    // 4B47 0021;	
    // (䭇) CJK UNIFIED IDEOGRAPH-4B47	[FB80 CB47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B47, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_485)
{
    // 4B47 003F;	
    // (䭇) CJK UNIFIED IDEOGRAPH-4B47	[FB80 CB47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B47, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_486)
{
    // 4B47 0061;	
    // (䭇) CJK UNIFIED IDEOGRAPH-4B47	[FB80 CB47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B47, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_487)
{
    // 4B47 0041;	
    // (䭇) CJK UNIFIED IDEOGRAPH-4B47	[FB80 CB47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B47, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_488)
{
    // 4B47 0062;	
    // (䭇) CJK UNIFIED IDEOGRAPH-4B47	[FB80 CB47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B47, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_489)
{
    // 4B48 0021;	
    // (䭈) CJK UNIFIED IDEOGRAPH-4B48	[FB80 CB48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B48, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_490)
{
    // 4B48 003F;	
    // (䭈) CJK UNIFIED IDEOGRAPH-4B48	[FB80 CB48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B48, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_491)
{
    // 4B48 0061;	
    // (䭈) CJK UNIFIED IDEOGRAPH-4B48	[FB80 CB48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B48, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_492)
{
    // 4B48 0041;	
    // (䭈) CJK UNIFIED IDEOGRAPH-4B48	[FB80 CB48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B48, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_493)
{
    // 4B48 0062;	
    // (䭈) CJK UNIFIED IDEOGRAPH-4B48	[FB80 CB48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B48, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_494)
{
    // 4B49 0021;	
    // (䭉) CJK UNIFIED IDEOGRAPH-4B49	[FB80 CB49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B49, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_495)
{
    // 4B49 003F;	
    // (䭉) CJK UNIFIED IDEOGRAPH-4B49	[FB80 CB49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B49, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCB49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_496)
{
    // 4B49 0061;	
    // (䭉) CJK UNIFIED IDEOGRAPH-4B49	[FB80 CB49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B49, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCB49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_497)
{
    // 4B49 0041;	
    // (䭉) CJK UNIFIED IDEOGRAPH-4B49	[FB80 CB49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4B49, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCB49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_498)
{
    // 4B49 0062;	
    // (䭉) CJK UNIFIED IDEOGRAPH-4B49	[FB80 CB49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B49, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCB49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_386_499)
{
    // 4B4A 0021;	
    // (䭊) CJK UNIFIED IDEOGRAPH-4B4A	[FB80 CB4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4B4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCB4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

