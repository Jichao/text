// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_040_000)
{
    // 2B0A 003F;	
    // (⬊) SOUTH EAST BLACK ARROW	[0CE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0A, 0x003F };
    uint32_t const ces[9] = { 0x0CE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_001)
{
    // 2B0A 0061;	
    // (⬊) SOUTH EAST BLACK ARROW	[0CE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0A, 0x0061 };
    uint32_t const ces[9] = { 0x0CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_002)
{
    // 2B0A 0041;	
    // (⬊) SOUTH EAST BLACK ARROW	[0CE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B0A, 0x0041 };
    uint32_t const ces[9] = { 0x0CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_003)
{
    // 2B0A 0062;	
    // (⬊) SOUTH EAST BLACK ARROW	[0CE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0A, 0x0062 };
    uint32_t const ces[9] = { 0x0CE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_004)
{
    // 2B0B 0021;	
    // (⬋) SOUTH WEST BLACK ARROW	[0CEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0B, 0x0021 };
    uint32_t const ces[9] = { 0x0CEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_005)
{
    // 2B0B 003F;	
    // (⬋) SOUTH WEST BLACK ARROW	[0CEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0B, 0x003F };
    uint32_t const ces[9] = { 0x0CEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_006)
{
    // 2B0B 0061;	
    // (⬋) SOUTH WEST BLACK ARROW	[0CEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0B, 0x0061 };
    uint32_t const ces[9] = { 0x0CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_007)
{
    // 2B0B 0041;	
    // (⬋) SOUTH WEST BLACK ARROW	[0CEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B0B, 0x0041 };
    uint32_t const ces[9] = { 0x0CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_008)
{
    // 2B0B 0062;	
    // (⬋) SOUTH WEST BLACK ARROW	[0CEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0B, 0x0062 };
    uint32_t const ces[9] = { 0x0CEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_009)
{
    // 2B0C 0021;	
    // (⬌) LEFT RIGHT BLACK ARROW	[0CEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0C, 0x0021 };
    uint32_t const ces[9] = { 0x0CEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_010)
{
    // 2B0C 003F;	
    // (⬌) LEFT RIGHT BLACK ARROW	[0CEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0C, 0x003F };
    uint32_t const ces[9] = { 0x0CEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_011)
{
    // 2B0C 0061;	
    // (⬌) LEFT RIGHT BLACK ARROW	[0CEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0C, 0x0061 };
    uint32_t const ces[9] = { 0x0CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_012)
{
    // 2B0C 0041;	
    // (⬌) LEFT RIGHT BLACK ARROW	[0CEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B0C, 0x0041 };
    uint32_t const ces[9] = { 0x0CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_013)
{
    // 2B0C 0062;	
    // (⬌) LEFT RIGHT BLACK ARROW	[0CEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0C, 0x0062 };
    uint32_t const ces[9] = { 0x0CEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_014)
{
    // 2B0D 0021;	
    // (⬍) UP DOWN BLACK ARROW	[0CEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0D, 0x0021 };
    uint32_t const ces[9] = { 0x0CEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_015)
{
    // 2B0D 003F;	
    // (⬍) UP DOWN BLACK ARROW	[0CEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0D, 0x003F };
    uint32_t const ces[9] = { 0x0CEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_016)
{
    // 2B0D 0061;	
    // (⬍) UP DOWN BLACK ARROW	[0CEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0D, 0x0061 };
    uint32_t const ces[9] = { 0x0CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_017)
{
    // 2B0D 0041;	
    // (⬍) UP DOWN BLACK ARROW	[0CEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B0D, 0x0041 };
    uint32_t const ces[9] = { 0x0CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_018)
{
    // 2B0D 0062;	
    // (⬍) UP DOWN BLACK ARROW	[0CEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0D, 0x0062 };
    uint32_t const ces[9] = { 0x0CEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_019)
{
    // 2B0E 0021;	
    // (⬎) RIGHTWARDS ARROW WITH TIP DOWNWARDS	[0CED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0E, 0x0021 };
    uint32_t const ces[9] = { 0x0CED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_020)
{
    // 2B0E 003F;	
    // (⬎) RIGHTWARDS ARROW WITH TIP DOWNWARDS	[0CED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0E, 0x003F };
    uint32_t const ces[9] = { 0x0CED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_021)
{
    // 2B0E 0061;	
    // (⬎) RIGHTWARDS ARROW WITH TIP DOWNWARDS	[0CED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0E, 0x0061 };
    uint32_t const ces[9] = { 0x0CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_022)
{
    // 2B0E 0041;	
    // (⬎) RIGHTWARDS ARROW WITH TIP DOWNWARDS	[0CED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B0E, 0x0041 };
    uint32_t const ces[9] = { 0x0CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_023)
{
    // 2B0E 0062;	
    // (⬎) RIGHTWARDS ARROW WITH TIP DOWNWARDS	[0CED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0E, 0x0062 };
    uint32_t const ces[9] = { 0x0CED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_024)
{
    // 2B0F 0021;	
    // (⬏) RIGHTWARDS ARROW WITH TIP UPWARDS	[0CEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0F, 0x0021 };
    uint32_t const ces[9] = { 0x0CEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_025)
{
    // 2B0F 003F;	
    // (⬏) RIGHTWARDS ARROW WITH TIP UPWARDS	[0CEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0F, 0x003F };
    uint32_t const ces[9] = { 0x0CEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_026)
{
    // 2B0F 0061;	
    // (⬏) RIGHTWARDS ARROW WITH TIP UPWARDS	[0CEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0F, 0x0061 };
    uint32_t const ces[9] = { 0x0CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_027)
{
    // 2B0F 0041;	
    // (⬏) RIGHTWARDS ARROW WITH TIP UPWARDS	[0CEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B0F, 0x0041 };
    uint32_t const ces[9] = { 0x0CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_028)
{
    // 2B0F 0062;	
    // (⬏) RIGHTWARDS ARROW WITH TIP UPWARDS	[0CEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B0F, 0x0062 };
    uint32_t const ces[9] = { 0x0CEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_029)
{
    // 2B10 0021;	
    // (⬐) LEFTWARDS ARROW WITH TIP DOWNWARDS	[0CEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B10, 0x0021 };
    uint32_t const ces[9] = { 0x0CEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_030)
{
    // 2B10 003F;	
    // (⬐) LEFTWARDS ARROW WITH TIP DOWNWARDS	[0CEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B10, 0x003F };
    uint32_t const ces[9] = { 0x0CEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_031)
{
    // 2B10 0061;	
    // (⬐) LEFTWARDS ARROW WITH TIP DOWNWARDS	[0CEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B10, 0x0061 };
    uint32_t const ces[9] = { 0x0CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_032)
{
    // 2B10 0041;	
    // (⬐) LEFTWARDS ARROW WITH TIP DOWNWARDS	[0CEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B10, 0x0041 };
    uint32_t const ces[9] = { 0x0CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_033)
{
    // 2B10 0062;	
    // (⬐) LEFTWARDS ARROW WITH TIP DOWNWARDS	[0CEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B10, 0x0062 };
    uint32_t const ces[9] = { 0x0CEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_034)
{
    // 2B11 0021;	
    // (⬑) LEFTWARDS ARROW WITH TIP UPWARDS	[0CF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B11, 0x0021 };
    uint32_t const ces[9] = { 0x0CF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_035)
{
    // 2B11 003F;	
    // (⬑) LEFTWARDS ARROW WITH TIP UPWARDS	[0CF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B11, 0x003F };
    uint32_t const ces[9] = { 0x0CF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_036)
{
    // 2B11 0061;	
    // (⬑) LEFTWARDS ARROW WITH TIP UPWARDS	[0CF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B11, 0x0061 };
    uint32_t const ces[9] = { 0x0CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_037)
{
    // 2B11 0041;	
    // (⬑) LEFTWARDS ARROW WITH TIP UPWARDS	[0CF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B11, 0x0041 };
    uint32_t const ces[9] = { 0x0CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_038)
{
    // 2B11 0062;	
    // (⬑) LEFTWARDS ARROW WITH TIP UPWARDS	[0CF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B11, 0x0062 };
    uint32_t const ces[9] = { 0x0CF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_039)
{
    // 2B12 0021;	
    // (⬒) SQUARE WITH TOP HALF BLACK	[0CF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B12, 0x0021 };
    uint32_t const ces[9] = { 0x0CF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_040)
{
    // 2B12 003F;	
    // (⬒) SQUARE WITH TOP HALF BLACK	[0CF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B12, 0x003F };
    uint32_t const ces[9] = { 0x0CF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_041)
{
    // 2B12 0061;	
    // (⬒) SQUARE WITH TOP HALF BLACK	[0CF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B12, 0x0061 };
    uint32_t const ces[9] = { 0x0CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_042)
{
    // 2B12 0041;	
    // (⬒) SQUARE WITH TOP HALF BLACK	[0CF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B12, 0x0041 };
    uint32_t const ces[9] = { 0x0CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_043)
{
    // 2B12 0062;	
    // (⬒) SQUARE WITH TOP HALF BLACK	[0CF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B12, 0x0062 };
    uint32_t const ces[9] = { 0x0CF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_044)
{
    // 2B13 0021;	
    // (⬓) SQUARE WITH BOTTOM HALF BLACK	[0CF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B13, 0x0021 };
    uint32_t const ces[9] = { 0x0CF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_045)
{
    // 2B13 003F;	
    // (⬓) SQUARE WITH BOTTOM HALF BLACK	[0CF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B13, 0x003F };
    uint32_t const ces[9] = { 0x0CF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_046)
{
    // 2B13 0061;	
    // (⬓) SQUARE WITH BOTTOM HALF BLACK	[0CF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B13, 0x0061 };
    uint32_t const ces[9] = { 0x0CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_047)
{
    // 2B13 0041;	
    // (⬓) SQUARE WITH BOTTOM HALF BLACK	[0CF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B13, 0x0041 };
    uint32_t const ces[9] = { 0x0CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_048)
{
    // 2B13 0062;	
    // (⬓) SQUARE WITH BOTTOM HALF BLACK	[0CF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B13, 0x0062 };
    uint32_t const ces[9] = { 0x0CF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_049)
{
    // 2B14 0021;	
    // (⬔) SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK	[0CF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B14, 0x0021 };
    uint32_t const ces[9] = { 0x0CF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_050)
{
    // 2B14 003F;	
    // (⬔) SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK	[0CF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B14, 0x003F };
    uint32_t const ces[9] = { 0x0CF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_051)
{
    // 2B14 0061;	
    // (⬔) SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK	[0CF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B14, 0x0061 };
    uint32_t const ces[9] = { 0x0CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_052)
{
    // 2B14 0041;	
    // (⬔) SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK	[0CF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B14, 0x0041 };
    uint32_t const ces[9] = { 0x0CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_053)
{
    // 2B14 0062;	
    // (⬔) SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK	[0CF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B14, 0x0062 };
    uint32_t const ces[9] = { 0x0CF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_054)
{
    // 2B15 0021;	
    // (⬕) SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK	[0CF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B15, 0x0021 };
    uint32_t const ces[9] = { 0x0CF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_055)
{
    // 2B15 003F;	
    // (⬕) SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK	[0CF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B15, 0x003F };
    uint32_t const ces[9] = { 0x0CF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_056)
{
    // 2B15 0061;	
    // (⬕) SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK	[0CF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B15, 0x0061 };
    uint32_t const ces[9] = { 0x0CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_057)
{
    // 2B15 0041;	
    // (⬕) SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK	[0CF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B15, 0x0041 };
    uint32_t const ces[9] = { 0x0CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_058)
{
    // 2B15 0062;	
    // (⬕) SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK	[0CF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B15, 0x0062 };
    uint32_t const ces[9] = { 0x0CF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_059)
{
    // 2B16 0021;	
    // (⬖) DIAMOND WITH LEFT HALF BLACK	[0CF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B16, 0x0021 };
    uint32_t const ces[9] = { 0x0CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_060)
{
    // 2B16 003F;	
    // (⬖) DIAMOND WITH LEFT HALF BLACK	[0CF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B16, 0x003F };
    uint32_t const ces[9] = { 0x0CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_061)
{
    // 2B16 0061;	
    // (⬖) DIAMOND WITH LEFT HALF BLACK	[0CF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B16, 0x0061 };
    uint32_t const ces[9] = { 0x0CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_062)
{
    // 2B16 0041;	
    // (⬖) DIAMOND WITH LEFT HALF BLACK	[0CF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B16, 0x0041 };
    uint32_t const ces[9] = { 0x0CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_063)
{
    // 2B16 0062;	
    // (⬖) DIAMOND WITH LEFT HALF BLACK	[0CF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B16, 0x0062 };
    uint32_t const ces[9] = { 0x0CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_064)
{
    // 2B17 0021;	
    // (⬗) DIAMOND WITH RIGHT HALF BLACK	[0CF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B17, 0x0021 };
    uint32_t const ces[9] = { 0x0CF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_065)
{
    // 2B17 003F;	
    // (⬗) DIAMOND WITH RIGHT HALF BLACK	[0CF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B17, 0x003F };
    uint32_t const ces[9] = { 0x0CF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_066)
{
    // 2B17 0061;	
    // (⬗) DIAMOND WITH RIGHT HALF BLACK	[0CF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B17, 0x0061 };
    uint32_t const ces[9] = { 0x0CF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_067)
{
    // 2B17 0041;	
    // (⬗) DIAMOND WITH RIGHT HALF BLACK	[0CF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B17, 0x0041 };
    uint32_t const ces[9] = { 0x0CF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_068)
{
    // 2B17 0062;	
    // (⬗) DIAMOND WITH RIGHT HALF BLACK	[0CF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B17, 0x0062 };
    uint32_t const ces[9] = { 0x0CF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_069)
{
    // 2B18 0021;	
    // (⬘) DIAMOND WITH TOP HALF BLACK	[0CF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B18, 0x0021 };
    uint32_t const ces[9] = { 0x0CF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_070)
{
    // 2B18 003F;	
    // (⬘) DIAMOND WITH TOP HALF BLACK	[0CF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B18, 0x003F };
    uint32_t const ces[9] = { 0x0CF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_071)
{
    // 2B18 0061;	
    // (⬘) DIAMOND WITH TOP HALF BLACK	[0CF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B18, 0x0061 };
    uint32_t const ces[9] = { 0x0CF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_072)
{
    // 2B18 0041;	
    // (⬘) DIAMOND WITH TOP HALF BLACK	[0CF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B18, 0x0041 };
    uint32_t const ces[9] = { 0x0CF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_073)
{
    // 2B18 0062;	
    // (⬘) DIAMOND WITH TOP HALF BLACK	[0CF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B18, 0x0062 };
    uint32_t const ces[9] = { 0x0CF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_074)
{
    // 2B19 0021;	
    // (⬙) DIAMOND WITH BOTTOM HALF BLACK	[0CF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B19, 0x0021 };
    uint32_t const ces[9] = { 0x0CF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_075)
{
    // 2B19 003F;	
    // (⬙) DIAMOND WITH BOTTOM HALF BLACK	[0CF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B19, 0x003F };
    uint32_t const ces[9] = { 0x0CF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_076)
{
    // 2B19 0061;	
    // (⬙) DIAMOND WITH BOTTOM HALF BLACK	[0CF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B19, 0x0061 };
    uint32_t const ces[9] = { 0x0CF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_077)
{
    // 2B19 0041;	
    // (⬙) DIAMOND WITH BOTTOM HALF BLACK	[0CF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B19, 0x0041 };
    uint32_t const ces[9] = { 0x0CF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_078)
{
    // 2B19 0062;	
    // (⬙) DIAMOND WITH BOTTOM HALF BLACK	[0CF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B19, 0x0062 };
    uint32_t const ces[9] = { 0x0CF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_079)
{
    // 2B1A 0021;	
    // (⬚) DOTTED SQUARE	[0CF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1A, 0x0021 };
    uint32_t const ces[9] = { 0x0CF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_080)
{
    // 2B1A 003F;	
    // (⬚) DOTTED SQUARE	[0CF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1A, 0x003F };
    uint32_t const ces[9] = { 0x0CF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_081)
{
    // 2B1A 0061;	
    // (⬚) DOTTED SQUARE	[0CF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1A, 0x0061 };
    uint32_t const ces[9] = { 0x0CF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_082)
{
    // 2B1A 0041;	
    // (⬚) DOTTED SQUARE	[0CF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B1A, 0x0041 };
    uint32_t const ces[9] = { 0x0CF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_083)
{
    // 2B1A 0062;	
    // (⬚) DOTTED SQUARE	[0CF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1A, 0x0062 };
    uint32_t const ces[9] = { 0x0CF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_084)
{
    // 2B1B 0021;	
    // (⬛) BLACK LARGE SQUARE	[0CFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1B, 0x0021 };
    uint32_t const ces[9] = { 0x0CFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_085)
{
    // 2B1B 003F;	
    // (⬛) BLACK LARGE SQUARE	[0CFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1B, 0x003F };
    uint32_t const ces[9] = { 0x0CFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_086)
{
    // 2B1B 0061;	
    // (⬛) BLACK LARGE SQUARE	[0CFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1B, 0x0061 };
    uint32_t const ces[9] = { 0x0CFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_087)
{
    // 2B1B 0041;	
    // (⬛) BLACK LARGE SQUARE	[0CFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B1B, 0x0041 };
    uint32_t const ces[9] = { 0x0CFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_088)
{
    // 2B1B 0062;	
    // (⬛) BLACK LARGE SQUARE	[0CFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1B, 0x0062 };
    uint32_t const ces[9] = { 0x0CFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_089)
{
    // 2B1C 0021;	
    // (⬜) WHITE LARGE SQUARE	[0CFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1C, 0x0021 };
    uint32_t const ces[9] = { 0x0CFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_090)
{
    // 2B1C 003F;	
    // (⬜) WHITE LARGE SQUARE	[0CFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1C, 0x003F };
    uint32_t const ces[9] = { 0x0CFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_091)
{
    // 2B1C 0061;	
    // (⬜) WHITE LARGE SQUARE	[0CFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1C, 0x0061 };
    uint32_t const ces[9] = { 0x0CFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_092)
{
    // 2B1C 0041;	
    // (⬜) WHITE LARGE SQUARE	[0CFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B1C, 0x0041 };
    uint32_t const ces[9] = { 0x0CFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_093)
{
    // 2B1C 0062;	
    // (⬜) WHITE LARGE SQUARE	[0CFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1C, 0x0062 };
    uint32_t const ces[9] = { 0x0CFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_094)
{
    // 2B1D 0021;	
    // (⬝) BLACK VERY SMALL SQUARE	[0CFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1D, 0x0021 };
    uint32_t const ces[9] = { 0x0CFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_095)
{
    // 2B1D 003F;	
    // (⬝) BLACK VERY SMALL SQUARE	[0CFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1D, 0x003F };
    uint32_t const ces[9] = { 0x0CFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_096)
{
    // 2B1D 0061;	
    // (⬝) BLACK VERY SMALL SQUARE	[0CFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1D, 0x0061 };
    uint32_t const ces[9] = { 0x0CFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_097)
{
    // 2B1D 0041;	
    // (⬝) BLACK VERY SMALL SQUARE	[0CFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B1D, 0x0041 };
    uint32_t const ces[9] = { 0x0CFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_098)
{
    // 2B1D 0062;	
    // (⬝) BLACK VERY SMALL SQUARE	[0CFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1D, 0x0062 };
    uint32_t const ces[9] = { 0x0CFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_099)
{
    // 2B1E 0021;	
    // (⬞) WHITE VERY SMALL SQUARE	[0CFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1E, 0x0021 };
    uint32_t const ces[9] = { 0x0CFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_100)
{
    // 2B1E 003F;	
    // (⬞) WHITE VERY SMALL SQUARE	[0CFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1E, 0x003F };
    uint32_t const ces[9] = { 0x0CFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_101)
{
    // 2B1E 0061;	
    // (⬞) WHITE VERY SMALL SQUARE	[0CFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1E, 0x0061 };
    uint32_t const ces[9] = { 0x0CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_102)
{
    // 2B1E 0041;	
    // (⬞) WHITE VERY SMALL SQUARE	[0CFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B1E, 0x0041 };
    uint32_t const ces[9] = { 0x0CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_103)
{
    // 2B1E 0062;	
    // (⬞) WHITE VERY SMALL SQUARE	[0CFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1E, 0x0062 };
    uint32_t const ces[9] = { 0x0CFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_104)
{
    // 2B1F 0021;	
    // (⬟) BLACK PENTAGON	[0CFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1F, 0x0021 };
    uint32_t const ces[9] = { 0x0CFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_105)
{
    // 2B1F 003F;	
    // (⬟) BLACK PENTAGON	[0CFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1F, 0x003F };
    uint32_t const ces[9] = { 0x0CFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_106)
{
    // 2B1F 0061;	
    // (⬟) BLACK PENTAGON	[0CFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1F, 0x0061 };
    uint32_t const ces[9] = { 0x0CFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_107)
{
    // 2B1F 0041;	
    // (⬟) BLACK PENTAGON	[0CFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B1F, 0x0041 };
    uint32_t const ces[9] = { 0x0CFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_108)
{
    // 2B1F 0062;	
    // (⬟) BLACK PENTAGON	[0CFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B1F, 0x0062 };
    uint32_t const ces[9] = { 0x0CFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_109)
{
    // 2B20 0021;	
    // (⬠) WHITE PENTAGON	[0CFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B20, 0x0021 };
    uint32_t const ces[9] = { 0x0CFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_110)
{
    // 2B20 003F;	
    // (⬠) WHITE PENTAGON	[0CFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B20, 0x003F };
    uint32_t const ces[9] = { 0x0CFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_111)
{
    // 2B20 0061;	
    // (⬠) WHITE PENTAGON	[0CFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B20, 0x0061 };
    uint32_t const ces[9] = { 0x0CFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_112)
{
    // 2B20 0041;	
    // (⬠) WHITE PENTAGON	[0CFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B20, 0x0041 };
    uint32_t const ces[9] = { 0x0CFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_113)
{
    // 2B20 0062;	
    // (⬠) WHITE PENTAGON	[0CFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B20, 0x0062 };
    uint32_t const ces[9] = { 0x0CFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_114)
{
    // 2B21 0021;	
    // (⬡) WHITE HEXAGON	[0D00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B21, 0x0021 };
    uint32_t const ces[9] = { 0x0D00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_115)
{
    // 2B21 003F;	
    // (⬡) WHITE HEXAGON	[0D00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B21, 0x003F };
    uint32_t const ces[9] = { 0x0D00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_116)
{
    // 2B21 0061;	
    // (⬡) WHITE HEXAGON	[0D00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B21, 0x0061 };
    uint32_t const ces[9] = { 0x0D00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_117)
{
    // 2B21 0041;	
    // (⬡) WHITE HEXAGON	[0D00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B21, 0x0041 };
    uint32_t const ces[9] = { 0x0D00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_118)
{
    // 2B21 0062;	
    // (⬡) WHITE HEXAGON	[0D00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B21, 0x0062 };
    uint32_t const ces[9] = { 0x0D00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_119)
{
    // 2B22 0021;	
    // (⬢) BLACK HEXAGON	[0D01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B22, 0x0021 };
    uint32_t const ces[9] = { 0x0D01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_120)
{
    // 2B22 003F;	
    // (⬢) BLACK HEXAGON	[0D01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B22, 0x003F };
    uint32_t const ces[9] = { 0x0D01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_121)
{
    // 2B22 0061;	
    // (⬢) BLACK HEXAGON	[0D01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B22, 0x0061 };
    uint32_t const ces[9] = { 0x0D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_122)
{
    // 2B22 0041;	
    // (⬢) BLACK HEXAGON	[0D01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B22, 0x0041 };
    uint32_t const ces[9] = { 0x0D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_123)
{
    // 2B22 0062;	
    // (⬢) BLACK HEXAGON	[0D01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B22, 0x0062 };
    uint32_t const ces[9] = { 0x0D01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_124)
{
    // 2B23 0021;	
    // (⬣) HORIZONTAL BLACK HEXAGON	[0D02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B23, 0x0021 };
    uint32_t const ces[9] = { 0x0D02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_125)
{
    // 2B23 003F;	
    // (⬣) HORIZONTAL BLACK HEXAGON	[0D02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B23, 0x003F };
    uint32_t const ces[9] = { 0x0D02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_126)
{
    // 2B23 0061;	
    // (⬣) HORIZONTAL BLACK HEXAGON	[0D02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B23, 0x0061 };
    uint32_t const ces[9] = { 0x0D02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_127)
{
    // 2B23 0041;	
    // (⬣) HORIZONTAL BLACK HEXAGON	[0D02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B23, 0x0041 };
    uint32_t const ces[9] = { 0x0D02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_128)
{
    // 2B23 0062;	
    // (⬣) HORIZONTAL BLACK HEXAGON	[0D02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B23, 0x0062 };
    uint32_t const ces[9] = { 0x0D02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_129)
{
    // 2B24 0021;	
    // (⬤) BLACK LARGE CIRCLE	[0D03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B24, 0x0021 };
    uint32_t const ces[9] = { 0x0D03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_130)
{
    // 2B24 003F;	
    // (⬤) BLACK LARGE CIRCLE	[0D03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B24, 0x003F };
    uint32_t const ces[9] = { 0x0D03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_131)
{
    // 2B24 0061;	
    // (⬤) BLACK LARGE CIRCLE	[0D03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B24, 0x0061 };
    uint32_t const ces[9] = { 0x0D03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_132)
{
    // 2B24 0041;	
    // (⬤) BLACK LARGE CIRCLE	[0D03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B24, 0x0041 };
    uint32_t const ces[9] = { 0x0D03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_133)
{
    // 2B24 0062;	
    // (⬤) BLACK LARGE CIRCLE	[0D03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B24, 0x0062 };
    uint32_t const ces[9] = { 0x0D03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_134)
{
    // 2B25 0021;	
    // (⬥) BLACK MEDIUM DIAMOND	[0D04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B25, 0x0021 };
    uint32_t const ces[9] = { 0x0D04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_135)
{
    // 2B25 003F;	
    // (⬥) BLACK MEDIUM DIAMOND	[0D04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B25, 0x003F };
    uint32_t const ces[9] = { 0x0D04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_136)
{
    // 2B25 0061;	
    // (⬥) BLACK MEDIUM DIAMOND	[0D04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B25, 0x0061 };
    uint32_t const ces[9] = { 0x0D04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_137)
{
    // 2B25 0041;	
    // (⬥) BLACK MEDIUM DIAMOND	[0D04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B25, 0x0041 };
    uint32_t const ces[9] = { 0x0D04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_138)
{
    // 2B25 0062;	
    // (⬥) BLACK MEDIUM DIAMOND	[0D04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B25, 0x0062 };
    uint32_t const ces[9] = { 0x0D04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_139)
{
    // 2B26 0021;	
    // (⬦) WHITE MEDIUM DIAMOND	[0D05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B26, 0x0021 };
    uint32_t const ces[9] = { 0x0D05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_140)
{
    // 2B26 003F;	
    // (⬦) WHITE MEDIUM DIAMOND	[0D05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B26, 0x003F };
    uint32_t const ces[9] = { 0x0D05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_141)
{
    // 2B26 0061;	
    // (⬦) WHITE MEDIUM DIAMOND	[0D05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B26, 0x0061 };
    uint32_t const ces[9] = { 0x0D05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_142)
{
    // 2B26 0041;	
    // (⬦) WHITE MEDIUM DIAMOND	[0D05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B26, 0x0041 };
    uint32_t const ces[9] = { 0x0D05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_143)
{
    // 2B26 0062;	
    // (⬦) WHITE MEDIUM DIAMOND	[0D05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B26, 0x0062 };
    uint32_t const ces[9] = { 0x0D05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_144)
{
    // 2B27 0021;	
    // (⬧) BLACK MEDIUM LOZENGE	[0D06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B27, 0x0021 };
    uint32_t const ces[9] = { 0x0D06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_145)
{
    // 2B27 003F;	
    // (⬧) BLACK MEDIUM LOZENGE	[0D06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B27, 0x003F };
    uint32_t const ces[9] = { 0x0D06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_146)
{
    // 2B27 0061;	
    // (⬧) BLACK MEDIUM LOZENGE	[0D06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B27, 0x0061 };
    uint32_t const ces[9] = { 0x0D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_147)
{
    // 2B27 0041;	
    // (⬧) BLACK MEDIUM LOZENGE	[0D06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B27, 0x0041 };
    uint32_t const ces[9] = { 0x0D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_148)
{
    // 2B27 0062;	
    // (⬧) BLACK MEDIUM LOZENGE	[0D06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B27, 0x0062 };
    uint32_t const ces[9] = { 0x0D06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_149)
{
    // 2B28 0021;	
    // (⬨) WHITE MEDIUM LOZENGE	[0D07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B28, 0x0021 };
    uint32_t const ces[9] = { 0x0D07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_150)
{
    // 2B28 003F;	
    // (⬨) WHITE MEDIUM LOZENGE	[0D07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B28, 0x003F };
    uint32_t const ces[9] = { 0x0D07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_151)
{
    // 2B28 0061;	
    // (⬨) WHITE MEDIUM LOZENGE	[0D07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B28, 0x0061 };
    uint32_t const ces[9] = { 0x0D07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_152)
{
    // 2B28 0041;	
    // (⬨) WHITE MEDIUM LOZENGE	[0D07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B28, 0x0041 };
    uint32_t const ces[9] = { 0x0D07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_153)
{
    // 2B28 0062;	
    // (⬨) WHITE MEDIUM LOZENGE	[0D07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B28, 0x0062 };
    uint32_t const ces[9] = { 0x0D07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_154)
{
    // 2B29 0021;	
    // (⬩) BLACK SMALL DIAMOND	[0D08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B29, 0x0021 };
    uint32_t const ces[9] = { 0x0D08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_155)
{
    // 2B29 003F;	
    // (⬩) BLACK SMALL DIAMOND	[0D08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B29, 0x003F };
    uint32_t const ces[9] = { 0x0D08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_156)
{
    // 2B29 0061;	
    // (⬩) BLACK SMALL DIAMOND	[0D08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B29, 0x0061 };
    uint32_t const ces[9] = { 0x0D08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_157)
{
    // 2B29 0041;	
    // (⬩) BLACK SMALL DIAMOND	[0D08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B29, 0x0041 };
    uint32_t const ces[9] = { 0x0D08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_158)
{
    // 2B29 0062;	
    // (⬩) BLACK SMALL DIAMOND	[0D08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B29, 0x0062 };
    uint32_t const ces[9] = { 0x0D08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_159)
{
    // 2B2A 0021;	
    // (⬪) BLACK SMALL LOZENGE	[0D09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2A, 0x0021 };
    uint32_t const ces[9] = { 0x0D09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_160)
{
    // 2B2A 003F;	
    // (⬪) BLACK SMALL LOZENGE	[0D09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2A, 0x003F };
    uint32_t const ces[9] = { 0x0D09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_161)
{
    // 2B2A 0061;	
    // (⬪) BLACK SMALL LOZENGE	[0D09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2A, 0x0061 };
    uint32_t const ces[9] = { 0x0D09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_162)
{
    // 2B2A 0041;	
    // (⬪) BLACK SMALL LOZENGE	[0D09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B2A, 0x0041 };
    uint32_t const ces[9] = { 0x0D09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_163)
{
    // 2B2A 0062;	
    // (⬪) BLACK SMALL LOZENGE	[0D09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2A, 0x0062 };
    uint32_t const ces[9] = { 0x0D09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_164)
{
    // 2B2B 0021;	
    // (⬫) WHITE SMALL LOZENGE	[0D0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2B, 0x0021 };
    uint32_t const ces[9] = { 0x0D0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_165)
{
    // 2B2B 003F;	
    // (⬫) WHITE SMALL LOZENGE	[0D0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2B, 0x003F };
    uint32_t const ces[9] = { 0x0D0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_166)
{
    // 2B2B 0061;	
    // (⬫) WHITE SMALL LOZENGE	[0D0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2B, 0x0061 };
    uint32_t const ces[9] = { 0x0D0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_167)
{
    // 2B2B 0041;	
    // (⬫) WHITE SMALL LOZENGE	[0D0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B2B, 0x0041 };
    uint32_t const ces[9] = { 0x0D0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_168)
{
    // 2B2B 0062;	
    // (⬫) WHITE SMALL LOZENGE	[0D0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2B, 0x0062 };
    uint32_t const ces[9] = { 0x0D0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_169)
{
    // 2B2C 0021;	
    // (⬬) BLACK HORIZONTAL ELLIPSE	[0D0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2C, 0x0021 };
    uint32_t const ces[9] = { 0x0D0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_170)
{
    // 2B2C 003F;	
    // (⬬) BLACK HORIZONTAL ELLIPSE	[0D0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2C, 0x003F };
    uint32_t const ces[9] = { 0x0D0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_171)
{
    // 2B2C 0061;	
    // (⬬) BLACK HORIZONTAL ELLIPSE	[0D0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2C, 0x0061 };
    uint32_t const ces[9] = { 0x0D0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_172)
{
    // 2B2C 0041;	
    // (⬬) BLACK HORIZONTAL ELLIPSE	[0D0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B2C, 0x0041 };
    uint32_t const ces[9] = { 0x0D0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_173)
{
    // 2B2C 0062;	
    // (⬬) BLACK HORIZONTAL ELLIPSE	[0D0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2C, 0x0062 };
    uint32_t const ces[9] = { 0x0D0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_174)
{
    // 2B2D 0021;	
    // (⬭) WHITE HORIZONTAL ELLIPSE	[0D0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2D, 0x0021 };
    uint32_t const ces[9] = { 0x0D0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_175)
{
    // 2B2D 003F;	
    // (⬭) WHITE HORIZONTAL ELLIPSE	[0D0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2D, 0x003F };
    uint32_t const ces[9] = { 0x0D0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_176)
{
    // 2B2D 0061;	
    // (⬭) WHITE HORIZONTAL ELLIPSE	[0D0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2D, 0x0061 };
    uint32_t const ces[9] = { 0x0D0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_177)
{
    // 2B2D 0041;	
    // (⬭) WHITE HORIZONTAL ELLIPSE	[0D0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B2D, 0x0041 };
    uint32_t const ces[9] = { 0x0D0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_178)
{
    // 2B2D 0062;	
    // (⬭) WHITE HORIZONTAL ELLIPSE	[0D0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2D, 0x0062 };
    uint32_t const ces[9] = { 0x0D0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_179)
{
    // 2B2E 0021;	
    // (⬮) BLACK VERTICAL ELLIPSE	[0D0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2E, 0x0021 };
    uint32_t const ces[9] = { 0x0D0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_180)
{
    // 2B2E 003F;	
    // (⬮) BLACK VERTICAL ELLIPSE	[0D0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2E, 0x003F };
    uint32_t const ces[9] = { 0x0D0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_181)
{
    // 2B2E 0061;	
    // (⬮) BLACK VERTICAL ELLIPSE	[0D0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2E, 0x0061 };
    uint32_t const ces[9] = { 0x0D0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_182)
{
    // 2B2E 0041;	
    // (⬮) BLACK VERTICAL ELLIPSE	[0D0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B2E, 0x0041 };
    uint32_t const ces[9] = { 0x0D0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_183)
{
    // 2B2E 0062;	
    // (⬮) BLACK VERTICAL ELLIPSE	[0D0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2E, 0x0062 };
    uint32_t const ces[9] = { 0x0D0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_184)
{
    // 2B2F 0021;	
    // (⬯) WHITE VERTICAL ELLIPSE	[0D0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2F, 0x0021 };
    uint32_t const ces[9] = { 0x0D0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_185)
{
    // 2B2F 003F;	
    // (⬯) WHITE VERTICAL ELLIPSE	[0D0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2F, 0x003F };
    uint32_t const ces[9] = { 0x0D0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_186)
{
    // 2B2F 0061;	
    // (⬯) WHITE VERTICAL ELLIPSE	[0D0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2F, 0x0061 };
    uint32_t const ces[9] = { 0x0D0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_187)
{
    // 2B2F 0041;	
    // (⬯) WHITE VERTICAL ELLIPSE	[0D0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B2F, 0x0041 };
    uint32_t const ces[9] = { 0x0D0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_188)
{
    // 2B2F 0062;	
    // (⬯) WHITE VERTICAL ELLIPSE	[0D0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B2F, 0x0062 };
    uint32_t const ces[9] = { 0x0D0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_189)
{
    // 2B30 0021;	
    // (⬰) LEFT ARROW WITH SMALL CIRCLE	[0D0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B30, 0x0021 };
    uint32_t const ces[9] = { 0x0D0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_190)
{
    // 2B30 003F;	
    // (⬰) LEFT ARROW WITH SMALL CIRCLE	[0D0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B30, 0x003F };
    uint32_t const ces[9] = { 0x0D0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_191)
{
    // 2B30 0061;	
    // (⬰) LEFT ARROW WITH SMALL CIRCLE	[0D0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B30, 0x0061 };
    uint32_t const ces[9] = { 0x0D0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_192)
{
    // 2B30 0041;	
    // (⬰) LEFT ARROW WITH SMALL CIRCLE	[0D0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B30, 0x0041 };
    uint32_t const ces[9] = { 0x0D0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_193)
{
    // 2B30 0062;	
    // (⬰) LEFT ARROW WITH SMALL CIRCLE	[0D0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B30, 0x0062 };
    uint32_t const ces[9] = { 0x0D0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_194)
{
    // 2B31 0021;	
    // (⬱) THREE LEFTWARDS ARROWS	[0D10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B31, 0x0021 };
    uint32_t const ces[9] = { 0x0D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_195)
{
    // 2B31 003F;	
    // (⬱) THREE LEFTWARDS ARROWS	[0D10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B31, 0x003F };
    uint32_t const ces[9] = { 0x0D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_196)
{
    // 2B31 0061;	
    // (⬱) THREE LEFTWARDS ARROWS	[0D10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B31, 0x0061 };
    uint32_t const ces[9] = { 0x0D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_197)
{
    // 2B31 0041;	
    // (⬱) THREE LEFTWARDS ARROWS	[0D10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B31, 0x0041 };
    uint32_t const ces[9] = { 0x0D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_198)
{
    // 2B31 0062;	
    // (⬱) THREE LEFTWARDS ARROWS	[0D10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B31, 0x0062 };
    uint32_t const ces[9] = { 0x0D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_199)
{
    // 2B32 0021;	
    // (⬲) LEFT ARROW WITH CIRCLED PLUS	[0D11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B32, 0x0021 };
    uint32_t const ces[9] = { 0x0D11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_200)
{
    // 2B32 003F;	
    // (⬲) LEFT ARROW WITH CIRCLED PLUS	[0D11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B32, 0x003F };
    uint32_t const ces[9] = { 0x0D11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_201)
{
    // 2B32 0061;	
    // (⬲) LEFT ARROW WITH CIRCLED PLUS	[0D11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B32, 0x0061 };
    uint32_t const ces[9] = { 0x0D11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_202)
{
    // 2B32 0041;	
    // (⬲) LEFT ARROW WITH CIRCLED PLUS	[0D11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B32, 0x0041 };
    uint32_t const ces[9] = { 0x0D11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_203)
{
    // 2B32 0062;	
    // (⬲) LEFT ARROW WITH CIRCLED PLUS	[0D11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B32, 0x0062 };
    uint32_t const ces[9] = { 0x0D11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_204)
{
    // 2B33 0021;	
    // (⬳) LONG LEFTWARDS SQUIGGLE ARROW	[0D12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B33, 0x0021 };
    uint32_t const ces[9] = { 0x0D12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_205)
{
    // 2B33 003F;	
    // (⬳) LONG LEFTWARDS SQUIGGLE ARROW	[0D12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B33, 0x003F };
    uint32_t const ces[9] = { 0x0D12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_206)
{
    // 2B33 0061;	
    // (⬳) LONG LEFTWARDS SQUIGGLE ARROW	[0D12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B33, 0x0061 };
    uint32_t const ces[9] = { 0x0D12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_207)
{
    // 2B33 0041;	
    // (⬳) LONG LEFTWARDS SQUIGGLE ARROW	[0D12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B33, 0x0041 };
    uint32_t const ces[9] = { 0x0D12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_208)
{
    // 2B33 0062;	
    // (⬳) LONG LEFTWARDS SQUIGGLE ARROW	[0D12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B33, 0x0062 };
    uint32_t const ces[9] = { 0x0D12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_209)
{
    // 2B34 0021;	
    // (⬴) LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0D13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B34, 0x0021 };
    uint32_t const ces[9] = { 0x0D13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_210)
{
    // 2B34 003F;	
    // (⬴) LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0D13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B34, 0x003F };
    uint32_t const ces[9] = { 0x0D13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_211)
{
    // 2B34 0061;	
    // (⬴) LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0D13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B34, 0x0061 };
    uint32_t const ces[9] = { 0x0D13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_212)
{
    // 2B34 0041;	
    // (⬴) LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0D13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B34, 0x0041 };
    uint32_t const ces[9] = { 0x0D13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_213)
{
    // 2B34 0062;	
    // (⬴) LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0D13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B34, 0x0062 };
    uint32_t const ces[9] = { 0x0D13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_214)
{
    // 2B35 0021;	
    // (⬵) LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0D14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B35, 0x0021 };
    uint32_t const ces[9] = { 0x0D14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_215)
{
    // 2B35 003F;	
    // (⬵) LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0D14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B35, 0x003F };
    uint32_t const ces[9] = { 0x0D14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_216)
{
    // 2B35 0061;	
    // (⬵) LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0D14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B35, 0x0061 };
    uint32_t const ces[9] = { 0x0D14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_217)
{
    // 2B35 0041;	
    // (⬵) LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0D14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B35, 0x0041 };
    uint32_t const ces[9] = { 0x0D14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_218)
{
    // 2B35 0062;	
    // (⬵) LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0D14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B35, 0x0062 };
    uint32_t const ces[9] = { 0x0D14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_219)
{
    // 2B36 0021;	
    // (⬶) LEFTWARDS TWO-HEADED ARROW FROM BAR	[0D15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B36, 0x0021 };
    uint32_t const ces[9] = { 0x0D15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_220)
{
    // 2B36 003F;	
    // (⬶) LEFTWARDS TWO-HEADED ARROW FROM BAR	[0D15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B36, 0x003F };
    uint32_t const ces[9] = { 0x0D15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_221)
{
    // 2B36 0061;	
    // (⬶) LEFTWARDS TWO-HEADED ARROW FROM BAR	[0D15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B36, 0x0061 };
    uint32_t const ces[9] = { 0x0D15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_222)
{
    // 2B36 0041;	
    // (⬶) LEFTWARDS TWO-HEADED ARROW FROM BAR	[0D15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B36, 0x0041 };
    uint32_t const ces[9] = { 0x0D15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_223)
{
    // 2B36 0062;	
    // (⬶) LEFTWARDS TWO-HEADED ARROW FROM BAR	[0D15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B36, 0x0062 };
    uint32_t const ces[9] = { 0x0D15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_224)
{
    // 2B37 0021;	
    // (⬷) LEFTWARDS TWO-HEADED TRIPLE DASH ARROW	[0D16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B37, 0x0021 };
    uint32_t const ces[9] = { 0x0D16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_225)
{
    // 2B37 003F;	
    // (⬷) LEFTWARDS TWO-HEADED TRIPLE DASH ARROW	[0D16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B37, 0x003F };
    uint32_t const ces[9] = { 0x0D16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_226)
{
    // 2B37 0061;	
    // (⬷) LEFTWARDS TWO-HEADED TRIPLE DASH ARROW	[0D16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B37, 0x0061 };
    uint32_t const ces[9] = { 0x0D16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_227)
{
    // 2B37 0041;	
    // (⬷) LEFTWARDS TWO-HEADED TRIPLE DASH ARROW	[0D16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B37, 0x0041 };
    uint32_t const ces[9] = { 0x0D16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_228)
{
    // 2B37 0062;	
    // (⬷) LEFTWARDS TWO-HEADED TRIPLE DASH ARROW	[0D16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B37, 0x0062 };
    uint32_t const ces[9] = { 0x0D16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_229)
{
    // 2B38 0021;	
    // (⬸) LEFTWARDS ARROW WITH DOTTED STEM	[0D17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B38, 0x0021 };
    uint32_t const ces[9] = { 0x0D17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_230)
{
    // 2B38 003F;	
    // (⬸) LEFTWARDS ARROW WITH DOTTED STEM	[0D17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B38, 0x003F };
    uint32_t const ces[9] = { 0x0D17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_231)
{
    // 2B38 0061;	
    // (⬸) LEFTWARDS ARROW WITH DOTTED STEM	[0D17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B38, 0x0061 };
    uint32_t const ces[9] = { 0x0D17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_232)
{
    // 2B38 0041;	
    // (⬸) LEFTWARDS ARROW WITH DOTTED STEM	[0D17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B38, 0x0041 };
    uint32_t const ces[9] = { 0x0D17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_233)
{
    // 2B38 0062;	
    // (⬸) LEFTWARDS ARROW WITH DOTTED STEM	[0D17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B38, 0x0062 };
    uint32_t const ces[9] = { 0x0D17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_234)
{
    // 2B39 0021;	
    // (⬹) LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0D18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B39, 0x0021 };
    uint32_t const ces[9] = { 0x0D18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_235)
{
    // 2B39 003F;	
    // (⬹) LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0D18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B39, 0x003F };
    uint32_t const ces[9] = { 0x0D18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_236)
{
    // 2B39 0061;	
    // (⬹) LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0D18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B39, 0x0061 };
    uint32_t const ces[9] = { 0x0D18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_237)
{
    // 2B39 0041;	
    // (⬹) LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0D18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B39, 0x0041 };
    uint32_t const ces[9] = { 0x0D18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_238)
{
    // 2B39 0062;	
    // (⬹) LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0D18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B39, 0x0062 };
    uint32_t const ces[9] = { 0x0D18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_239)
{
    // 2B3A 0021;	
    // (⬺) LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3A, 0x0021 };
    uint32_t const ces[9] = { 0x0D19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_240)
{
    // 2B3A 003F;	
    // (⬺) LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3A, 0x003F };
    uint32_t const ces[9] = { 0x0D19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_241)
{
    // 2B3A 0061;	
    // (⬺) LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3A, 0x0061 };
    uint32_t const ces[9] = { 0x0D19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_242)
{
    // 2B3A 0041;	
    // (⬺) LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B3A, 0x0041 };
    uint32_t const ces[9] = { 0x0D19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_243)
{
    // 2B3A 0062;	
    // (⬺) LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3A, 0x0062 };
    uint32_t const ces[9] = { 0x0D19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_244)
{
    // 2B3B 0021;	
    // (⬻) LEFTWARDS TWO-HEADED ARROW WITH TAIL	[0D1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3B, 0x0021 };
    uint32_t const ces[9] = { 0x0D1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_245)
{
    // 2B3B 003F;	
    // (⬻) LEFTWARDS TWO-HEADED ARROW WITH TAIL	[0D1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3B, 0x003F };
    uint32_t const ces[9] = { 0x0D1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_246)
{
    // 2B3B 0061;	
    // (⬻) LEFTWARDS TWO-HEADED ARROW WITH TAIL	[0D1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3B, 0x0061 };
    uint32_t const ces[9] = { 0x0D1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_247)
{
    // 2B3B 0041;	
    // (⬻) LEFTWARDS TWO-HEADED ARROW WITH TAIL	[0D1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B3B, 0x0041 };
    uint32_t const ces[9] = { 0x0D1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_248)
{
    // 2B3B 0062;	
    // (⬻) LEFTWARDS TWO-HEADED ARROW WITH TAIL	[0D1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3B, 0x0062 };
    uint32_t const ces[9] = { 0x0D1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_249)
{
    // 2B3C 0021;	
    // (⬼) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0D1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3C, 0x0021 };
    uint32_t const ces[9] = { 0x0D1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_250)
{
    // 2B3C 003F;	
    // (⬼) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0D1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3C, 0x003F };
    uint32_t const ces[9] = { 0x0D1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_251)
{
    // 2B3C 0061;	
    // (⬼) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0D1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3C, 0x0061 };
    uint32_t const ces[9] = { 0x0D1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_252)
{
    // 2B3C 0041;	
    // (⬼) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0D1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B3C, 0x0041 };
    uint32_t const ces[9] = { 0x0D1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_253)
{
    // 2B3C 0062;	
    // (⬼) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0D1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3C, 0x0062 };
    uint32_t const ces[9] = { 0x0D1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_254)
{
    // 2B3D 0021;	
    // (⬽) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3D, 0x0021 };
    uint32_t const ces[9] = { 0x0D1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_255)
{
    // 2B3D 003F;	
    // (⬽) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3D, 0x003F };
    uint32_t const ces[9] = { 0x0D1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_256)
{
    // 2B3D 0061;	
    // (⬽) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3D, 0x0061 };
    uint32_t const ces[9] = { 0x0D1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_257)
{
    // 2B3D 0041;	
    // (⬽) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B3D, 0x0041 };
    uint32_t const ces[9] = { 0x0D1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_258)
{
    // 2B3D 0062;	
    // (⬽) LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0D1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3D, 0x0062 };
    uint32_t const ces[9] = { 0x0D1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_259)
{
    // 2B3E 0021;	
    // (⬾) LEFTWARDS ARROW THROUGH X	[0D1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3E, 0x0021 };
    uint32_t const ces[9] = { 0x0D1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_260)
{
    // 2B3E 003F;	
    // (⬾) LEFTWARDS ARROW THROUGH X	[0D1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3E, 0x003F };
    uint32_t const ces[9] = { 0x0D1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_261)
{
    // 2B3E 0061;	
    // (⬾) LEFTWARDS ARROW THROUGH X	[0D1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3E, 0x0061 };
    uint32_t const ces[9] = { 0x0D1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_262)
{
    // 2B3E 0041;	
    // (⬾) LEFTWARDS ARROW THROUGH X	[0D1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B3E, 0x0041 };
    uint32_t const ces[9] = { 0x0D1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_263)
{
    // 2B3E 0062;	
    // (⬾) LEFTWARDS ARROW THROUGH X	[0D1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3E, 0x0062 };
    uint32_t const ces[9] = { 0x0D1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_264)
{
    // 2B3F 0021;	
    // (⬿) WAVE ARROW POINTING DIRECTLY LEFT	[0D1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3F, 0x0021 };
    uint32_t const ces[9] = { 0x0D1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_265)
{
    // 2B3F 003F;	
    // (⬿) WAVE ARROW POINTING DIRECTLY LEFT	[0D1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3F, 0x003F };
    uint32_t const ces[9] = { 0x0D1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_266)
{
    // 2B3F 0061;	
    // (⬿) WAVE ARROW POINTING DIRECTLY LEFT	[0D1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3F, 0x0061 };
    uint32_t const ces[9] = { 0x0D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_267)
{
    // 2B3F 0041;	
    // (⬿) WAVE ARROW POINTING DIRECTLY LEFT	[0D1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B3F, 0x0041 };
    uint32_t const ces[9] = { 0x0D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_268)
{
    // 2B3F 0062;	
    // (⬿) WAVE ARROW POINTING DIRECTLY LEFT	[0D1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B3F, 0x0062 };
    uint32_t const ces[9] = { 0x0D1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_269)
{
    // 2B40 0021;	
    // (⭀) EQUALS SIGN ABOVE LEFTWARDS ARROW	[0D1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B40, 0x0021 };
    uint32_t const ces[9] = { 0x0D1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_270)
{
    // 2B40 003F;	
    // (⭀) EQUALS SIGN ABOVE LEFTWARDS ARROW	[0D1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B40, 0x003F };
    uint32_t const ces[9] = { 0x0D1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_271)
{
    // 2B40 0061;	
    // (⭀) EQUALS SIGN ABOVE LEFTWARDS ARROW	[0D1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B40, 0x0061 };
    uint32_t const ces[9] = { 0x0D1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_272)
{
    // 2B40 0041;	
    // (⭀) EQUALS SIGN ABOVE LEFTWARDS ARROW	[0D1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B40, 0x0041 };
    uint32_t const ces[9] = { 0x0D1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_273)
{
    // 2B40 0062;	
    // (⭀) EQUALS SIGN ABOVE LEFTWARDS ARROW	[0D1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B40, 0x0062 };
    uint32_t const ces[9] = { 0x0D1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_274)
{
    // 2B41 0021;	
    // (⭁) REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B41, 0x0021 };
    uint32_t const ces[9] = { 0x0D20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_275)
{
    // 2B41 003F;	
    // (⭁) REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B41, 0x003F };
    uint32_t const ces[9] = { 0x0D20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_276)
{
    // 2B41 0061;	
    // (⭁) REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B41, 0x0061 };
    uint32_t const ces[9] = { 0x0D20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_277)
{
    // 2B41 0041;	
    // (⭁) REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B41, 0x0041 };
    uint32_t const ces[9] = { 0x0D20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_278)
{
    // 2B41 0062;	
    // (⭁) REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B41, 0x0062 };
    uint32_t const ces[9] = { 0x0D20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_279)
{
    // 2B42 0021;	
    // (⭂) LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B42, 0x0021 };
    uint32_t const ces[9] = { 0x0D21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_280)
{
    // 2B42 003F;	
    // (⭂) LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B42, 0x003F };
    uint32_t const ces[9] = { 0x0D21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_281)
{
    // 2B42 0061;	
    // (⭂) LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B42, 0x0061 };
    uint32_t const ces[9] = { 0x0D21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_282)
{
    // 2B42 0041;	
    // (⭂) LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B42, 0x0041 };
    uint32_t const ces[9] = { 0x0D21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_283)
{
    // 2B42 0062;	
    // (⭂) LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B42, 0x0062 };
    uint32_t const ces[9] = { 0x0D21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_284)
{
    // 2B43 0021;	
    // (⭃) RIGHTWARDS ARROW THROUGH GREATER-THAN	[0D22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B43, 0x0021 };
    uint32_t const ces[9] = { 0x0D22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_285)
{
    // 2B43 003F;	
    // (⭃) RIGHTWARDS ARROW THROUGH GREATER-THAN	[0D22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B43, 0x003F };
    uint32_t const ces[9] = { 0x0D22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_286)
{
    // 2B43 0061;	
    // (⭃) RIGHTWARDS ARROW THROUGH GREATER-THAN	[0D22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B43, 0x0061 };
    uint32_t const ces[9] = { 0x0D22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_287)
{
    // 2B43 0041;	
    // (⭃) RIGHTWARDS ARROW THROUGH GREATER-THAN	[0D22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B43, 0x0041 };
    uint32_t const ces[9] = { 0x0D22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_288)
{
    // 2B43 0062;	
    // (⭃) RIGHTWARDS ARROW THROUGH GREATER-THAN	[0D22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B43, 0x0062 };
    uint32_t const ces[9] = { 0x0D22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_289)
{
    // 2B44 0021;	
    // (⭄) RIGHTWARDS ARROW THROUGH SUPERSET	[0D23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B44, 0x0021 };
    uint32_t const ces[9] = { 0x0D23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_290)
{
    // 2B44 003F;	
    // (⭄) RIGHTWARDS ARROW THROUGH SUPERSET	[0D23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B44, 0x003F };
    uint32_t const ces[9] = { 0x0D23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_291)
{
    // 2B44 0061;	
    // (⭄) RIGHTWARDS ARROW THROUGH SUPERSET	[0D23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B44, 0x0061 };
    uint32_t const ces[9] = { 0x0D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_292)
{
    // 2B44 0041;	
    // (⭄) RIGHTWARDS ARROW THROUGH SUPERSET	[0D23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B44, 0x0041 };
    uint32_t const ces[9] = { 0x0D23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_293)
{
    // 2B44 0062;	
    // (⭄) RIGHTWARDS ARROW THROUGH SUPERSET	[0D23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B44, 0x0062 };
    uint32_t const ces[9] = { 0x0D23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_294)
{
    // 2B45 0021;	
    // (⭅) LEFTWARDS QUADRUPLE ARROW	[0D24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B45, 0x0021 };
    uint32_t const ces[9] = { 0x0D24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_295)
{
    // 2B45 003F;	
    // (⭅) LEFTWARDS QUADRUPLE ARROW	[0D24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B45, 0x003F };
    uint32_t const ces[9] = { 0x0D24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_296)
{
    // 2B45 0061;	
    // (⭅) LEFTWARDS QUADRUPLE ARROW	[0D24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B45, 0x0061 };
    uint32_t const ces[9] = { 0x0D24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_297)
{
    // 2B45 0041;	
    // (⭅) LEFTWARDS QUADRUPLE ARROW	[0D24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B45, 0x0041 };
    uint32_t const ces[9] = { 0x0D24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_298)
{
    // 2B45 0062;	
    // (⭅) LEFTWARDS QUADRUPLE ARROW	[0D24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B45, 0x0062 };
    uint32_t const ces[9] = { 0x0D24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_299)
{
    // 2B46 0021;	
    // (⭆) RIGHTWARDS QUADRUPLE ARROW	[0D25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B46, 0x0021 };
    uint32_t const ces[9] = { 0x0D25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_300)
{
    // 2B46 003F;	
    // (⭆) RIGHTWARDS QUADRUPLE ARROW	[0D25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B46, 0x003F };
    uint32_t const ces[9] = { 0x0D25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_301)
{
    // 2B46 0061;	
    // (⭆) RIGHTWARDS QUADRUPLE ARROW	[0D25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B46, 0x0061 };
    uint32_t const ces[9] = { 0x0D25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_302)
{
    // 2B46 0041;	
    // (⭆) RIGHTWARDS QUADRUPLE ARROW	[0D25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B46, 0x0041 };
    uint32_t const ces[9] = { 0x0D25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_303)
{
    // 2B46 0062;	
    // (⭆) RIGHTWARDS QUADRUPLE ARROW	[0D25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B46, 0x0062 };
    uint32_t const ces[9] = { 0x0D25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_304)
{
    // 2B47 0021;	
    // (⭇) REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0D26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B47, 0x0021 };
    uint32_t const ces[9] = { 0x0D26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_305)
{
    // 2B47 003F;	
    // (⭇) REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0D26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B47, 0x003F };
    uint32_t const ces[9] = { 0x0D26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_306)
{
    // 2B47 0061;	
    // (⭇) REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0D26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B47, 0x0061 };
    uint32_t const ces[9] = { 0x0D26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_307)
{
    // 2B47 0041;	
    // (⭇) REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0D26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B47, 0x0041 };
    uint32_t const ces[9] = { 0x0D26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_308)
{
    // 2B47 0062;	
    // (⭇) REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW	[0D26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B47, 0x0062 };
    uint32_t const ces[9] = { 0x0D26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_309)
{
    // 2B48 0021;	
    // (⭈) RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B48, 0x0021 };
    uint32_t const ces[9] = { 0x0D27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_310)
{
    // 2B48 003F;	
    // (⭈) RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B48, 0x003F };
    uint32_t const ces[9] = { 0x0D27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_311)
{
    // 2B48 0061;	
    // (⭈) RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B48, 0x0061 };
    uint32_t const ces[9] = { 0x0D27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_312)
{
    // 2B48 0041;	
    // (⭈) RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B48, 0x0041 };
    uint32_t const ces[9] = { 0x0D27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_313)
{
    // 2B48 0062;	
    // (⭈) RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO	[0D27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B48, 0x0062 };
    uint32_t const ces[9] = { 0x0D27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_314)
{
    // 2B49 0021;	
    // (⭉) TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B49, 0x0021 };
    uint32_t const ces[9] = { 0x0D28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_315)
{
    // 2B49 003F;	
    // (⭉) TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B49, 0x003F };
    uint32_t const ces[9] = { 0x0D28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_316)
{
    // 2B49 0061;	
    // (⭉) TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B49, 0x0061 };
    uint32_t const ces[9] = { 0x0D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_317)
{
    // 2B49 0041;	
    // (⭉) TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B49, 0x0041 };
    uint32_t const ces[9] = { 0x0D28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_318)
{
    // 2B49 0062;	
    // (⭉) TILDE OPERATOR ABOVE LEFTWARDS ARROW	[0D28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B49, 0x0062 };
    uint32_t const ces[9] = { 0x0D28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_319)
{
    // 2B4A 0021;	
    // (⭊) LEFTWARDS ARROW ABOVE ALMOST EQUAL TO	[0D29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4A, 0x0021 };
    uint32_t const ces[9] = { 0x0D29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_320)
{
    // 2B4A 003F;	
    // (⭊) LEFTWARDS ARROW ABOVE ALMOST EQUAL TO	[0D29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4A, 0x003F };
    uint32_t const ces[9] = { 0x0D29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_321)
{
    // 2B4A 0061;	
    // (⭊) LEFTWARDS ARROW ABOVE ALMOST EQUAL TO	[0D29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4A, 0x0061 };
    uint32_t const ces[9] = { 0x0D29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_322)
{
    // 2B4A 0041;	
    // (⭊) LEFTWARDS ARROW ABOVE ALMOST EQUAL TO	[0D29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B4A, 0x0041 };
    uint32_t const ces[9] = { 0x0D29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_323)
{
    // 2B4A 0062;	
    // (⭊) LEFTWARDS ARROW ABOVE ALMOST EQUAL TO	[0D29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4A, 0x0062 };
    uint32_t const ces[9] = { 0x0D29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_324)
{
    // 2B4B 0021;	
    // (⭋) LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4B, 0x0021 };
    uint32_t const ces[9] = { 0x0D2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_325)
{
    // 2B4B 003F;	
    // (⭋) LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4B, 0x003F };
    uint32_t const ces[9] = { 0x0D2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_326)
{
    // 2B4B 0061;	
    // (⭋) LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4B, 0x0061 };
    uint32_t const ces[9] = { 0x0D2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_327)
{
    // 2B4B 0041;	
    // (⭋) LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B4B, 0x0041 };
    uint32_t const ces[9] = { 0x0D2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_328)
{
    // 2B4B 0062;	
    // (⭋) LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4B, 0x0062 };
    uint32_t const ces[9] = { 0x0D2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_329)
{
    // 2B4C 0021;	
    // (⭌) RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4C, 0x0021 };
    uint32_t const ces[9] = { 0x0D2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_330)
{
    // 2B4C 003F;	
    // (⭌) RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4C, 0x003F };
    uint32_t const ces[9] = { 0x0D2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_331)
{
    // 2B4C 0061;	
    // (⭌) RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4C, 0x0061 };
    uint32_t const ces[9] = { 0x0D2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_332)
{
    // 2B4C 0041;	
    // (⭌) RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B4C, 0x0041 };
    uint32_t const ces[9] = { 0x0D2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_333)
{
    // 2B4C 0062;	
    // (⭌) RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR	[0D2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4C, 0x0062 };
    uint32_t const ces[9] = { 0x0D2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_334)
{
    // 2B4D 0021;	
    // (⭍) DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW	[0D2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4D, 0x0021 };
    uint32_t const ces[9] = { 0x0D2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_335)
{
    // 2B4D 003F;	
    // (⭍) DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW	[0D2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4D, 0x003F };
    uint32_t const ces[9] = { 0x0D2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_336)
{
    // 2B4D 0061;	
    // (⭍) DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW	[0D2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4D, 0x0061 };
    uint32_t const ces[9] = { 0x0D2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_337)
{
    // 2B4D 0041;	
    // (⭍) DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW	[0D2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B4D, 0x0041 };
    uint32_t const ces[9] = { 0x0D2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_338)
{
    // 2B4D 0062;	
    // (⭍) DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW	[0D2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4D, 0x0062 };
    uint32_t const ces[9] = { 0x0D2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_339)
{
    // 2B4E 0021;	
    // (⭎) SHORT SLANTED NORTH ARROW	[0D2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4E, 0x0021 };
    uint32_t const ces[9] = { 0x0D2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_340)
{
    // 2B4E 003F;	
    // (⭎) SHORT SLANTED NORTH ARROW	[0D2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4E, 0x003F };
    uint32_t const ces[9] = { 0x0D2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_341)
{
    // 2B4E 0061;	
    // (⭎) SHORT SLANTED NORTH ARROW	[0D2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4E, 0x0061 };
    uint32_t const ces[9] = { 0x0D2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_342)
{
    // 2B4E 0041;	
    // (⭎) SHORT SLANTED NORTH ARROW	[0D2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B4E, 0x0041 };
    uint32_t const ces[9] = { 0x0D2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_343)
{
    // 2B4E 0062;	
    // (⭎) SHORT SLANTED NORTH ARROW	[0D2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4E, 0x0062 };
    uint32_t const ces[9] = { 0x0D2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_344)
{
    // 2B4F 0021;	
    // (⭏) SHORT BACKSLANTED SOUTH ARROW	[0D2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4F, 0x0021 };
    uint32_t const ces[9] = { 0x0D2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_345)
{
    // 2B4F 003F;	
    // (⭏) SHORT BACKSLANTED SOUTH ARROW	[0D2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4F, 0x003F };
    uint32_t const ces[9] = { 0x0D2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_346)
{
    // 2B4F 0061;	
    // (⭏) SHORT BACKSLANTED SOUTH ARROW	[0D2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4F, 0x0061 };
    uint32_t const ces[9] = { 0x0D2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_347)
{
    // 2B4F 0041;	
    // (⭏) SHORT BACKSLANTED SOUTH ARROW	[0D2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B4F, 0x0041 };
    uint32_t const ces[9] = { 0x0D2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_348)
{
    // 2B4F 0062;	
    // (⭏) SHORT BACKSLANTED SOUTH ARROW	[0D2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B4F, 0x0062 };
    uint32_t const ces[9] = { 0x0D2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_349)
{
    // 2B50 0021;	
    // (⭐) WHITE MEDIUM STAR	[0D2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B50, 0x0021 };
    uint32_t const ces[9] = { 0x0D2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_350)
{
    // 2B50 003F;	
    // (⭐) WHITE MEDIUM STAR	[0D2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B50, 0x003F };
    uint32_t const ces[9] = { 0x0D2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_351)
{
    // 2B50 0061;	
    // (⭐) WHITE MEDIUM STAR	[0D2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B50, 0x0061 };
    uint32_t const ces[9] = { 0x0D2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_352)
{
    // 2B50 0041;	
    // (⭐) WHITE MEDIUM STAR	[0D2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B50, 0x0041 };
    uint32_t const ces[9] = { 0x0D2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_353)
{
    // 2B50 0062;	
    // (⭐) WHITE MEDIUM STAR	[0D2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B50, 0x0062 };
    uint32_t const ces[9] = { 0x0D2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_354)
{
    // 2B51 0021;	
    // (⭑) BLACK SMALL STAR	[0D30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B51, 0x0021 };
    uint32_t const ces[9] = { 0x0D30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_355)
{
    // 2B51 003F;	
    // (⭑) BLACK SMALL STAR	[0D30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B51, 0x003F };
    uint32_t const ces[9] = { 0x0D30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_356)
{
    // 2B51 0061;	
    // (⭑) BLACK SMALL STAR	[0D30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B51, 0x0061 };
    uint32_t const ces[9] = { 0x0D30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_357)
{
    // 2B51 0041;	
    // (⭑) BLACK SMALL STAR	[0D30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B51, 0x0041 };
    uint32_t const ces[9] = { 0x0D30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_358)
{
    // 2B51 0062;	
    // (⭑) BLACK SMALL STAR	[0D30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B51, 0x0062 };
    uint32_t const ces[9] = { 0x0D30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_359)
{
    // 2B52 0021;	
    // (⭒) WHITE SMALL STAR	[0D31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B52, 0x0021 };
    uint32_t const ces[9] = { 0x0D31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_360)
{
    // 2B52 003F;	
    // (⭒) WHITE SMALL STAR	[0D31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B52, 0x003F };
    uint32_t const ces[9] = { 0x0D31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_361)
{
    // 2B52 0061;	
    // (⭒) WHITE SMALL STAR	[0D31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B52, 0x0061 };
    uint32_t const ces[9] = { 0x0D31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_362)
{
    // 2B52 0041;	
    // (⭒) WHITE SMALL STAR	[0D31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B52, 0x0041 };
    uint32_t const ces[9] = { 0x0D31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_363)
{
    // 2B52 0062;	
    // (⭒) WHITE SMALL STAR	[0D31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B52, 0x0062 };
    uint32_t const ces[9] = { 0x0D31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_364)
{
    // 2B53 0021;	
    // (⭓) BLACK RIGHT-POINTING PENTAGON	[0D32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B53, 0x0021 };
    uint32_t const ces[9] = { 0x0D32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_365)
{
    // 2B53 003F;	
    // (⭓) BLACK RIGHT-POINTING PENTAGON	[0D32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B53, 0x003F };
    uint32_t const ces[9] = { 0x0D32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_366)
{
    // 2B53 0061;	
    // (⭓) BLACK RIGHT-POINTING PENTAGON	[0D32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B53, 0x0061 };
    uint32_t const ces[9] = { 0x0D32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_367)
{
    // 2B53 0041;	
    // (⭓) BLACK RIGHT-POINTING PENTAGON	[0D32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B53, 0x0041 };
    uint32_t const ces[9] = { 0x0D32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_368)
{
    // 2B53 0062;	
    // (⭓) BLACK RIGHT-POINTING PENTAGON	[0D32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B53, 0x0062 };
    uint32_t const ces[9] = { 0x0D32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_369)
{
    // 2B54 0021;	
    // (⭔) WHITE RIGHT-POINTING PENTAGON	[0D33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B54, 0x0021 };
    uint32_t const ces[9] = { 0x0D33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_370)
{
    // 2B54 003F;	
    // (⭔) WHITE RIGHT-POINTING PENTAGON	[0D33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B54, 0x003F };
    uint32_t const ces[9] = { 0x0D33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_371)
{
    // 2B54 0061;	
    // (⭔) WHITE RIGHT-POINTING PENTAGON	[0D33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B54, 0x0061 };
    uint32_t const ces[9] = { 0x0D33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_372)
{
    // 2B54 0041;	
    // (⭔) WHITE RIGHT-POINTING PENTAGON	[0D33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B54, 0x0041 };
    uint32_t const ces[9] = { 0x0D33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_373)
{
    // 2B54 0062;	
    // (⭔) WHITE RIGHT-POINTING PENTAGON	[0D33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B54, 0x0062 };
    uint32_t const ces[9] = { 0x0D33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_374)
{
    // 2B55 0021;	
    // (⭕) HEAVY LARGE CIRCLE	[0D34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B55, 0x0021 };
    uint32_t const ces[9] = { 0x0D34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_375)
{
    // 2B55 003F;	
    // (⭕) HEAVY LARGE CIRCLE	[0D34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B55, 0x003F };
    uint32_t const ces[9] = { 0x0D34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_376)
{
    // 2B55 0061;	
    // (⭕) HEAVY LARGE CIRCLE	[0D34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B55, 0x0061 };
    uint32_t const ces[9] = { 0x0D34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_377)
{
    // 2B55 0041;	
    // (⭕) HEAVY LARGE CIRCLE	[0D34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B55, 0x0041 };
    uint32_t const ces[9] = { 0x0D34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_378)
{
    // 2B55 0062;	
    // (⭕) HEAVY LARGE CIRCLE	[0D34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B55, 0x0062 };
    uint32_t const ces[9] = { 0x0D34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_379)
{
    // 2B56 0021;	
    // (⭖) HEAVY OVAL WITH OVAL INSIDE	[0D35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B56, 0x0021 };
    uint32_t const ces[9] = { 0x0D35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_380)
{
    // 2B56 003F;	
    // (⭖) HEAVY OVAL WITH OVAL INSIDE	[0D35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B56, 0x003F };
    uint32_t const ces[9] = { 0x0D35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_381)
{
    // 2B56 0061;	
    // (⭖) HEAVY OVAL WITH OVAL INSIDE	[0D35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B56, 0x0061 };
    uint32_t const ces[9] = { 0x0D35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_382)
{
    // 2B56 0041;	
    // (⭖) HEAVY OVAL WITH OVAL INSIDE	[0D35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B56, 0x0041 };
    uint32_t const ces[9] = { 0x0D35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_383)
{
    // 2B56 0062;	
    // (⭖) HEAVY OVAL WITH OVAL INSIDE	[0D35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B56, 0x0062 };
    uint32_t const ces[9] = { 0x0D35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_384)
{
    // 2B57 0021;	
    // (⭗) HEAVY CIRCLE WITH CIRCLE INSIDE	[0D36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B57, 0x0021 };
    uint32_t const ces[9] = { 0x0D36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_385)
{
    // 2B57 003F;	
    // (⭗) HEAVY CIRCLE WITH CIRCLE INSIDE	[0D36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B57, 0x003F };
    uint32_t const ces[9] = { 0x0D36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_386)
{
    // 2B57 0061;	
    // (⭗) HEAVY CIRCLE WITH CIRCLE INSIDE	[0D36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B57, 0x0061 };
    uint32_t const ces[9] = { 0x0D36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_387)
{
    // 2B57 0041;	
    // (⭗) HEAVY CIRCLE WITH CIRCLE INSIDE	[0D36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B57, 0x0041 };
    uint32_t const ces[9] = { 0x0D36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_388)
{
    // 2B57 0062;	
    // (⭗) HEAVY CIRCLE WITH CIRCLE INSIDE	[0D36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B57, 0x0062 };
    uint32_t const ces[9] = { 0x0D36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_389)
{
    // 2B58 0021;	
    // (⭘) HEAVY CIRCLE	[0D37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B58, 0x0021 };
    uint32_t const ces[9] = { 0x0D37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_390)
{
    // 2B58 003F;	
    // (⭘) HEAVY CIRCLE	[0D37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B58, 0x003F };
    uint32_t const ces[9] = { 0x0D37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_391)
{
    // 2B58 0061;	
    // (⭘) HEAVY CIRCLE	[0D37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B58, 0x0061 };
    uint32_t const ces[9] = { 0x0D37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_392)
{
    // 2B58 0041;	
    // (⭘) HEAVY CIRCLE	[0D37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B58, 0x0041 };
    uint32_t const ces[9] = { 0x0D37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_393)
{
    // 2B58 0062;	
    // (⭘) HEAVY CIRCLE	[0D37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B58, 0x0062 };
    uint32_t const ces[9] = { 0x0D37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_394)
{
    // 2B59 0021;	
    // (⭙) HEAVY CIRCLED SALTIRE	[0D38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B59, 0x0021 };
    uint32_t const ces[9] = { 0x0D38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_395)
{
    // 2B59 003F;	
    // (⭙) HEAVY CIRCLED SALTIRE	[0D38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B59, 0x003F };
    uint32_t const ces[9] = { 0x0D38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_396)
{
    // 2B59 0061;	
    // (⭙) HEAVY CIRCLED SALTIRE	[0D38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B59, 0x0061 };
    uint32_t const ces[9] = { 0x0D38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_397)
{
    // 2B59 0041;	
    // (⭙) HEAVY CIRCLED SALTIRE	[0D38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B59, 0x0041 };
    uint32_t const ces[9] = { 0x0D38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_398)
{
    // 2B59 0062;	
    // (⭙) HEAVY CIRCLED SALTIRE	[0D38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B59, 0x0062 };
    uint32_t const ces[9] = { 0x0D38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_399)
{
    // 2B5A 0021;	
    // (⭚) SLANTED NORTH ARROW WITH HOOKED HEAD	[0D39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5A, 0x0021 };
    uint32_t const ces[9] = { 0x0D39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_400)
{
    // 2B5A 003F;	
    // (⭚) SLANTED NORTH ARROW WITH HOOKED HEAD	[0D39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5A, 0x003F };
    uint32_t const ces[9] = { 0x0D39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_401)
{
    // 2B5A 0061;	
    // (⭚) SLANTED NORTH ARROW WITH HOOKED HEAD	[0D39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5A, 0x0061 };
    uint32_t const ces[9] = { 0x0D39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_402)
{
    // 2B5A 0041;	
    // (⭚) SLANTED NORTH ARROW WITH HOOKED HEAD	[0D39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B5A, 0x0041 };
    uint32_t const ces[9] = { 0x0D39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_403)
{
    // 2B5A 0062;	
    // (⭚) SLANTED NORTH ARROW WITH HOOKED HEAD	[0D39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5A, 0x0062 };
    uint32_t const ces[9] = { 0x0D39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_404)
{
    // 2B5B 0021;	
    // (⭛) BACKSLANTED SOUTH ARROW WITH HOOKED TAIL	[0D3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5B, 0x0021 };
    uint32_t const ces[9] = { 0x0D3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_405)
{
    // 2B5B 003F;	
    // (⭛) BACKSLANTED SOUTH ARROW WITH HOOKED TAIL	[0D3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5B, 0x003F };
    uint32_t const ces[9] = { 0x0D3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_406)
{
    // 2B5B 0061;	
    // (⭛) BACKSLANTED SOUTH ARROW WITH HOOKED TAIL	[0D3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5B, 0x0061 };
    uint32_t const ces[9] = { 0x0D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_407)
{
    // 2B5B 0041;	
    // (⭛) BACKSLANTED SOUTH ARROW WITH HOOKED TAIL	[0D3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B5B, 0x0041 };
    uint32_t const ces[9] = { 0x0D3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_408)
{
    // 2B5B 0062;	
    // (⭛) BACKSLANTED SOUTH ARROW WITH HOOKED TAIL	[0D3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5B, 0x0062 };
    uint32_t const ces[9] = { 0x0D3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_409)
{
    // 2B5C 0021;	
    // (⭜) SLANTED NORTH ARROW WITH HORIZONTAL TAIL	[0D3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5C, 0x0021 };
    uint32_t const ces[9] = { 0x0D3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_410)
{
    // 2B5C 003F;	
    // (⭜) SLANTED NORTH ARROW WITH HORIZONTAL TAIL	[0D3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5C, 0x003F };
    uint32_t const ces[9] = { 0x0D3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_411)
{
    // 2B5C 0061;	
    // (⭜) SLANTED NORTH ARROW WITH HORIZONTAL TAIL	[0D3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5C, 0x0061 };
    uint32_t const ces[9] = { 0x0D3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_412)
{
    // 2B5C 0041;	
    // (⭜) SLANTED NORTH ARROW WITH HORIZONTAL TAIL	[0D3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B5C, 0x0041 };
    uint32_t const ces[9] = { 0x0D3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_413)
{
    // 2B5C 0062;	
    // (⭜) SLANTED NORTH ARROW WITH HORIZONTAL TAIL	[0D3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5C, 0x0062 };
    uint32_t const ces[9] = { 0x0D3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_414)
{
    // 2B5D 0021;	
    // (⭝) BACKSLANTED SOUTH ARROW WITH HORIZONTAL TAIL	[0D3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5D, 0x0021 };
    uint32_t const ces[9] = { 0x0D3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_415)
{
    // 2B5D 003F;	
    // (⭝) BACKSLANTED SOUTH ARROW WITH HORIZONTAL TAIL	[0D3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5D, 0x003F };
    uint32_t const ces[9] = { 0x0D3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_416)
{
    // 2B5D 0061;	
    // (⭝) BACKSLANTED SOUTH ARROW WITH HORIZONTAL TAIL	[0D3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5D, 0x0061 };
    uint32_t const ces[9] = { 0x0D3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_417)
{
    // 2B5D 0041;	
    // (⭝) BACKSLANTED SOUTH ARROW WITH HORIZONTAL TAIL	[0D3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B5D, 0x0041 };
    uint32_t const ces[9] = { 0x0D3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_418)
{
    // 2B5D 0062;	
    // (⭝) BACKSLANTED SOUTH ARROW WITH HORIZONTAL TAIL	[0D3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5D, 0x0062 };
    uint32_t const ces[9] = { 0x0D3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_419)
{
    // 2B5E 0021;	
    // (⭞) BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5E, 0x0021 };
    uint32_t const ces[9] = { 0x0D3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_420)
{
    // 2B5E 003F;	
    // (⭞) BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5E, 0x003F };
    uint32_t const ces[9] = { 0x0D3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_421)
{
    // 2B5E 0061;	
    // (⭞) BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5E, 0x0061 };
    uint32_t const ces[9] = { 0x0D3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_422)
{
    // 2B5E 0041;	
    // (⭞) BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B5E, 0x0041 };
    uint32_t const ces[9] = { 0x0D3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_423)
{
    // 2B5E 0062;	
    // (⭞) BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5E, 0x0062 };
    uint32_t const ces[9] = { 0x0D3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_424)
{
    // 2B5F 0021;	
    // (⭟) SHORT BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5F, 0x0021 };
    uint32_t const ces[9] = { 0x0D3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_425)
{
    // 2B5F 003F;	
    // (⭟) SHORT BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5F, 0x003F };
    uint32_t const ces[9] = { 0x0D3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_426)
{
    // 2B5F 0061;	
    // (⭟) SHORT BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5F, 0x0061 };
    uint32_t const ces[9] = { 0x0D3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_427)
{
    // 2B5F 0041;	
    // (⭟) SHORT BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B5F, 0x0041 };
    uint32_t const ces[9] = { 0x0D3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_428)
{
    // 2B5F 0062;	
    // (⭟) SHORT BENT ARROW POINTING DOWNWARDS THEN NORTH EAST	[0D3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B5F, 0x0062 };
    uint32_t const ces[9] = { 0x0D3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_429)
{
    // 2B60 0021;	
    // (⭠) LEFTWARDS TRIANGLE-HEADED ARROW	[0D3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B60, 0x0021 };
    uint32_t const ces[9] = { 0x0D3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_430)
{
    // 2B60 003F;	
    // (⭠) LEFTWARDS TRIANGLE-HEADED ARROW	[0D3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B60, 0x003F };
    uint32_t const ces[9] = { 0x0D3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_431)
{
    // 2B60 0061;	
    // (⭠) LEFTWARDS TRIANGLE-HEADED ARROW	[0D3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B60, 0x0061 };
    uint32_t const ces[9] = { 0x0D3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_432)
{
    // 2B60 0041;	
    // (⭠) LEFTWARDS TRIANGLE-HEADED ARROW	[0D3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B60, 0x0041 };
    uint32_t const ces[9] = { 0x0D3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_433)
{
    // 2B60 0062;	
    // (⭠) LEFTWARDS TRIANGLE-HEADED ARROW	[0D3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B60, 0x0062 };
    uint32_t const ces[9] = { 0x0D3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_434)
{
    // 2B61 0021;	
    // (⭡) UPWARDS TRIANGLE-HEADED ARROW	[0D40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B61, 0x0021 };
    uint32_t const ces[9] = { 0x0D40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_435)
{
    // 2B61 003F;	
    // (⭡) UPWARDS TRIANGLE-HEADED ARROW	[0D40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B61, 0x003F };
    uint32_t const ces[9] = { 0x0D40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_436)
{
    // 2B61 0061;	
    // (⭡) UPWARDS TRIANGLE-HEADED ARROW	[0D40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B61, 0x0061 };
    uint32_t const ces[9] = { 0x0D40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_437)
{
    // 2B61 0041;	
    // (⭡) UPWARDS TRIANGLE-HEADED ARROW	[0D40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B61, 0x0041 };
    uint32_t const ces[9] = { 0x0D40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_438)
{
    // 2B61 0062;	
    // (⭡) UPWARDS TRIANGLE-HEADED ARROW	[0D40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B61, 0x0062 };
    uint32_t const ces[9] = { 0x0D40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_439)
{
    // 2B62 0021;	
    // (⭢) RIGHTWARDS TRIANGLE-HEADED ARROW	[0D41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B62, 0x0021 };
    uint32_t const ces[9] = { 0x0D41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_440)
{
    // 2B62 003F;	
    // (⭢) RIGHTWARDS TRIANGLE-HEADED ARROW	[0D41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B62, 0x003F };
    uint32_t const ces[9] = { 0x0D41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_441)
{
    // 2B62 0061;	
    // (⭢) RIGHTWARDS TRIANGLE-HEADED ARROW	[0D41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B62, 0x0061 };
    uint32_t const ces[9] = { 0x0D41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_442)
{
    // 2B62 0041;	
    // (⭢) RIGHTWARDS TRIANGLE-HEADED ARROW	[0D41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B62, 0x0041 };
    uint32_t const ces[9] = { 0x0D41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_443)
{
    // 2B62 0062;	
    // (⭢) RIGHTWARDS TRIANGLE-HEADED ARROW	[0D41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B62, 0x0062 };
    uint32_t const ces[9] = { 0x0D41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_444)
{
    // 2B63 0021;	
    // (⭣) DOWNWARDS TRIANGLE-HEADED ARROW	[0D42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B63, 0x0021 };
    uint32_t const ces[9] = { 0x0D42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_445)
{
    // 2B63 003F;	
    // (⭣) DOWNWARDS TRIANGLE-HEADED ARROW	[0D42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B63, 0x003F };
    uint32_t const ces[9] = { 0x0D42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_446)
{
    // 2B63 0061;	
    // (⭣) DOWNWARDS TRIANGLE-HEADED ARROW	[0D42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B63, 0x0061 };
    uint32_t const ces[9] = { 0x0D42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_447)
{
    // 2B63 0041;	
    // (⭣) DOWNWARDS TRIANGLE-HEADED ARROW	[0D42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B63, 0x0041 };
    uint32_t const ces[9] = { 0x0D42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_448)
{
    // 2B63 0062;	
    // (⭣) DOWNWARDS TRIANGLE-HEADED ARROW	[0D42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B63, 0x0062 };
    uint32_t const ces[9] = { 0x0D42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_449)
{
    // 2B64 0021;	
    // (⭤) LEFT RIGHT TRIANGLE-HEADED ARROW	[0D43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B64, 0x0021 };
    uint32_t const ces[9] = { 0x0D43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_450)
{
    // 2B64 003F;	
    // (⭤) LEFT RIGHT TRIANGLE-HEADED ARROW	[0D43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B64, 0x003F };
    uint32_t const ces[9] = { 0x0D43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_451)
{
    // 2B64 0061;	
    // (⭤) LEFT RIGHT TRIANGLE-HEADED ARROW	[0D43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B64, 0x0061 };
    uint32_t const ces[9] = { 0x0D43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_452)
{
    // 2B64 0041;	
    // (⭤) LEFT RIGHT TRIANGLE-HEADED ARROW	[0D43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B64, 0x0041 };
    uint32_t const ces[9] = { 0x0D43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_453)
{
    // 2B64 0062;	
    // (⭤) LEFT RIGHT TRIANGLE-HEADED ARROW	[0D43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B64, 0x0062 };
    uint32_t const ces[9] = { 0x0D43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_454)
{
    // 2B65 0021;	
    // (⭥) UP DOWN TRIANGLE-HEADED ARROW	[0D44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B65, 0x0021 };
    uint32_t const ces[9] = { 0x0D44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_455)
{
    // 2B65 003F;	
    // (⭥) UP DOWN TRIANGLE-HEADED ARROW	[0D44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B65, 0x003F };
    uint32_t const ces[9] = { 0x0D44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_456)
{
    // 2B65 0061;	
    // (⭥) UP DOWN TRIANGLE-HEADED ARROW	[0D44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B65, 0x0061 };
    uint32_t const ces[9] = { 0x0D44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_457)
{
    // 2B65 0041;	
    // (⭥) UP DOWN TRIANGLE-HEADED ARROW	[0D44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B65, 0x0041 };
    uint32_t const ces[9] = { 0x0D44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_458)
{
    // 2B65 0062;	
    // (⭥) UP DOWN TRIANGLE-HEADED ARROW	[0D44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B65, 0x0062 };
    uint32_t const ces[9] = { 0x0D44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_459)
{
    // 2B66 0021;	
    // (⭦) NORTH WEST TRIANGLE-HEADED ARROW	[0D45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B66, 0x0021 };
    uint32_t const ces[9] = { 0x0D45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_460)
{
    // 2B66 003F;	
    // (⭦) NORTH WEST TRIANGLE-HEADED ARROW	[0D45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B66, 0x003F };
    uint32_t const ces[9] = { 0x0D45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_461)
{
    // 2B66 0061;	
    // (⭦) NORTH WEST TRIANGLE-HEADED ARROW	[0D45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B66, 0x0061 };
    uint32_t const ces[9] = { 0x0D45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_462)
{
    // 2B66 0041;	
    // (⭦) NORTH WEST TRIANGLE-HEADED ARROW	[0D45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B66, 0x0041 };
    uint32_t const ces[9] = { 0x0D45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_463)
{
    // 2B66 0062;	
    // (⭦) NORTH WEST TRIANGLE-HEADED ARROW	[0D45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B66, 0x0062 };
    uint32_t const ces[9] = { 0x0D45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_464)
{
    // 2B67 0021;	
    // (⭧) NORTH EAST TRIANGLE-HEADED ARROW	[0D46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B67, 0x0021 };
    uint32_t const ces[9] = { 0x0D46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_465)
{
    // 2B67 003F;	
    // (⭧) NORTH EAST TRIANGLE-HEADED ARROW	[0D46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B67, 0x003F };
    uint32_t const ces[9] = { 0x0D46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_466)
{
    // 2B67 0061;	
    // (⭧) NORTH EAST TRIANGLE-HEADED ARROW	[0D46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B67, 0x0061 };
    uint32_t const ces[9] = { 0x0D46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_467)
{
    // 2B67 0041;	
    // (⭧) NORTH EAST TRIANGLE-HEADED ARROW	[0D46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B67, 0x0041 };
    uint32_t const ces[9] = { 0x0D46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_468)
{
    // 2B67 0062;	
    // (⭧) NORTH EAST TRIANGLE-HEADED ARROW	[0D46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B67, 0x0062 };
    uint32_t const ces[9] = { 0x0D46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_469)
{
    // 2B68 0021;	
    // (⭨) SOUTH EAST TRIANGLE-HEADED ARROW	[0D47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B68, 0x0021 };
    uint32_t const ces[9] = { 0x0D47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_470)
{
    // 2B68 003F;	
    // (⭨) SOUTH EAST TRIANGLE-HEADED ARROW	[0D47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B68, 0x003F };
    uint32_t const ces[9] = { 0x0D47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_471)
{
    // 2B68 0061;	
    // (⭨) SOUTH EAST TRIANGLE-HEADED ARROW	[0D47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B68, 0x0061 };
    uint32_t const ces[9] = { 0x0D47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_472)
{
    // 2B68 0041;	
    // (⭨) SOUTH EAST TRIANGLE-HEADED ARROW	[0D47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B68, 0x0041 };
    uint32_t const ces[9] = { 0x0D47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_473)
{
    // 2B68 0062;	
    // (⭨) SOUTH EAST TRIANGLE-HEADED ARROW	[0D47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B68, 0x0062 };
    uint32_t const ces[9] = { 0x0D47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_474)
{
    // 2B69 0021;	
    // (⭩) SOUTH WEST TRIANGLE-HEADED ARROW	[0D48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B69, 0x0021 };
    uint32_t const ces[9] = { 0x0D48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_475)
{
    // 2B69 003F;	
    // (⭩) SOUTH WEST TRIANGLE-HEADED ARROW	[0D48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B69, 0x003F };
    uint32_t const ces[9] = { 0x0D48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_476)
{
    // 2B69 0061;	
    // (⭩) SOUTH WEST TRIANGLE-HEADED ARROW	[0D48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B69, 0x0061 };
    uint32_t const ces[9] = { 0x0D48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_477)
{
    // 2B69 0041;	
    // (⭩) SOUTH WEST TRIANGLE-HEADED ARROW	[0D48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B69, 0x0041 };
    uint32_t const ces[9] = { 0x0D48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_478)
{
    // 2B69 0062;	
    // (⭩) SOUTH WEST TRIANGLE-HEADED ARROW	[0D48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B69, 0x0062 };
    uint32_t const ces[9] = { 0x0D48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_479)
{
    // 2B6A 0021;	
    // (⭪) LEFTWARDS TRIANGLE-HEADED DASHED ARROW	[0D49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6A, 0x0021 };
    uint32_t const ces[9] = { 0x0D49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_480)
{
    // 2B6A 003F;	
    // (⭪) LEFTWARDS TRIANGLE-HEADED DASHED ARROW	[0D49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6A, 0x003F };
    uint32_t const ces[9] = { 0x0D49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_481)
{
    // 2B6A 0061;	
    // (⭪) LEFTWARDS TRIANGLE-HEADED DASHED ARROW	[0D49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6A, 0x0061 };
    uint32_t const ces[9] = { 0x0D49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_482)
{
    // 2B6A 0041;	
    // (⭪) LEFTWARDS TRIANGLE-HEADED DASHED ARROW	[0D49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B6A, 0x0041 };
    uint32_t const ces[9] = { 0x0D49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_483)
{
    // 2B6A 0062;	
    // (⭪) LEFTWARDS TRIANGLE-HEADED DASHED ARROW	[0D49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6A, 0x0062 };
    uint32_t const ces[9] = { 0x0D49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_484)
{
    // 2B6B 0021;	
    // (⭫) UPWARDS TRIANGLE-HEADED DASHED ARROW	[0D4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6B, 0x0021 };
    uint32_t const ces[9] = { 0x0D4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_485)
{
    // 2B6B 003F;	
    // (⭫) UPWARDS TRIANGLE-HEADED DASHED ARROW	[0D4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6B, 0x003F };
    uint32_t const ces[9] = { 0x0D4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_486)
{
    // 2B6B 0061;	
    // (⭫) UPWARDS TRIANGLE-HEADED DASHED ARROW	[0D4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6B, 0x0061 };
    uint32_t const ces[9] = { 0x0D4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_487)
{
    // 2B6B 0041;	
    // (⭫) UPWARDS TRIANGLE-HEADED DASHED ARROW	[0D4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B6B, 0x0041 };
    uint32_t const ces[9] = { 0x0D4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_488)
{
    // 2B6B 0062;	
    // (⭫) UPWARDS TRIANGLE-HEADED DASHED ARROW	[0D4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6B, 0x0062 };
    uint32_t const ces[9] = { 0x0D4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_489)
{
    // 2B6C 0021;	
    // (⭬) RIGHTWARDS TRIANGLE-HEADED DASHED ARROW	[0D4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6C, 0x0021 };
    uint32_t const ces[9] = { 0x0D4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_490)
{
    // 2B6C 003F;	
    // (⭬) RIGHTWARDS TRIANGLE-HEADED DASHED ARROW	[0D4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6C, 0x003F };
    uint32_t const ces[9] = { 0x0D4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_491)
{
    // 2B6C 0061;	
    // (⭬) RIGHTWARDS TRIANGLE-HEADED DASHED ARROW	[0D4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6C, 0x0061 };
    uint32_t const ces[9] = { 0x0D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_492)
{
    // 2B6C 0041;	
    // (⭬) RIGHTWARDS TRIANGLE-HEADED DASHED ARROW	[0D4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B6C, 0x0041 };
    uint32_t const ces[9] = { 0x0D4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_493)
{
    // 2B6C 0062;	
    // (⭬) RIGHTWARDS TRIANGLE-HEADED DASHED ARROW	[0D4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6C, 0x0062 };
    uint32_t const ces[9] = { 0x0D4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_494)
{
    // 2B6D 0021;	
    // (⭭) DOWNWARDS TRIANGLE-HEADED DASHED ARROW	[0D4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6D, 0x0021 };
    uint32_t const ces[9] = { 0x0D4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_495)
{
    // 2B6D 003F;	
    // (⭭) DOWNWARDS TRIANGLE-HEADED DASHED ARROW	[0D4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6D, 0x003F };
    uint32_t const ces[9] = { 0x0D4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_496)
{
    // 2B6D 0061;	
    // (⭭) DOWNWARDS TRIANGLE-HEADED DASHED ARROW	[0D4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6D, 0x0061 };
    uint32_t const ces[9] = { 0x0D4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_497)
{
    // 2B6D 0041;	
    // (⭭) DOWNWARDS TRIANGLE-HEADED DASHED ARROW	[0D4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B6D, 0x0041 };
    uint32_t const ces[9] = { 0x0D4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_498)
{
    // 2B6D 0062;	
    // (⭭) DOWNWARDS TRIANGLE-HEADED DASHED ARROW	[0D4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6D, 0x0062 };
    uint32_t const ces[9] = { 0x0D4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_040_499)
{
    // 2B6E 0021;	
    // (⭮) CLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6E, 0x0021 };
    uint32_t const ces[9] = { 0x0D4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

