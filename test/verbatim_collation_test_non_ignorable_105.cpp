// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_105_000)
{
    // 1EC3 0334;	
    // (ể) LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 | 0020 004A 0027 003B | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC3, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_001)
{
    // 0045 0302 0309 0334;	
    // (Ể) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING HOOK ABOVE	[1D10 | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0302, 0x0309, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_002)
{
    // 0045 0302 0334 0309;	
    // (Ê̴) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0302, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_003)
{
    // 00CA 0309 0334;	
    // (Ể) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING HOOK ABOVE	[1D10 | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00CA, 0x0309, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_004)
{
    // 1EC2 0334;	
    // (Ể) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC2, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_005)
{
    // 0065 030C 0334;	
    // (ě) LATIN SMALL LETTER E, COMBINING CARON	[1D10 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_006)
{
    // 0065 0334 030C;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_007)
{
    // 011B 0334;	
    // (ě) LATIN SMALL LETTER E WITH CARON	[1D10 | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011B, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_008)
{
    // 0045 030C 0334;	
    // (Ě) LATIN CAPITAL LETTER E, COMBINING CARON	[1D10 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_009)
{
    // 0045 0334 030C;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_010)
{
    // 011A 0334;	
    // (Ě) LATIN CAPITAL LETTER E WITH CARON	[1D10 | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011A, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_011)
{
    // 0065 0308 0334;	
    // (ë) LATIN SMALL LETTER E, COMBINING DIAERESIS	[1D10 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_012)
{
    // 0065 0334 0308;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_013)
{
    // 00EB 0334;	
    // (ë) LATIN SMALL LETTER E WITH DIAERESIS	[1D10 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EB, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_014)
{
    // 0045 0308 0334;	
    // (Ë) LATIN CAPITAL LETTER E, COMBINING DIAERESIS	[1D10 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_015)
{
    // 0045 0334 0308;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_016)
{
    // 00CB 0334;	
    // (Ë) LATIN CAPITAL LETTER E WITH DIAERESIS	[1D10 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CB, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_017)
{
    // 0065 0303 0334;	
    // (ẽ) LATIN SMALL LETTER E, COMBINING TILDE	[1D10 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_018)
{
    // 0065 0334 0303;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_019)
{
    // 1EBD 0334;	
    // (ẽ) LATIN SMALL LETTER E WITH TILDE	[1D10 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBD, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_020)
{
    // 0045 0303 0334;	
    // (Ẽ) LATIN CAPITAL LETTER E, COMBINING TILDE	[1D10 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_021)
{
    // 0045 0334 0303;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_022)
{
    // 1EBC 0334;	
    // (Ẽ) LATIN CAPITAL LETTER E WITH TILDE	[1D10 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBC, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_023)
{
    // 0065 0307 0334;	
    // (ė) LATIN SMALL LETTER E, COMBINING DOT ABOVE	[1D10 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_024)
{
    // 0065 0334 0307;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_025)
{
    // 0117 0334;	
    // (ė) LATIN SMALL LETTER E WITH DOT ABOVE	[1D10 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0117, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_026)
{
    // 0045 0307 0334;	
    // (Ė) LATIN CAPITAL LETTER E, COMBINING DOT ABOVE	[1D10 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_027)
{
    // 0045 0334 0307;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_028)
{
    // 0116 0334;	
    // (Ė) LATIN CAPITAL LETTER E WITH DOT ABOVE	[1D10 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0116, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_029)
{
    // 0065 0327 0334;	
    // (ȩ) LATIN SMALL LETTER E, COMBINING CEDILLA	[1D10 | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0327, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_030)
{
    // 0065 0334 0327;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0327 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_031)
{
    // 0229 0334;	
    // (ȩ) LATIN SMALL LETTER E WITH CEDILLA	[1D10 | 0020 004A 0030 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0229, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_032)
{
    // 0045 0327 0334;	
    // (Ȩ) LATIN CAPITAL LETTER E, COMBINING CEDILLA	[1D10 | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0327, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_033)
{
    // 0045 0334 0327;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0327 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_034)
{
    // 0228 0334;	
    // (Ȩ) LATIN CAPITAL LETTER E WITH CEDILLA	[1D10 | 0020 004A 0030 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0228, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_035)
{
    // 0065 0334 0327 0306;	
    // (ȩ̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY, COMBINING CEDILLA	[1D10 | 0020 004A 0030 0026 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0065, 0x0334, 0x0327, 0x0306 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_036)
{
    // 0115 0327 0334;	
    // (ḝ) LATIN SMALL LETTER E WITH BREVE, COMBINING CEDILLA	[1D10 | 0020 004A 0030 0026 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0115, 0x0327, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_037)
{
    // 0229 0334 0306;	
    // (ȩ̴) LATIN SMALL LETTER E WITH CEDILLA, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0030 0026 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0229, 0x0334, 0x0306 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_038)
{
    // 1E1D 0334;	
    // (ḝ) LATIN SMALL LETTER E WITH CEDILLA AND BREVE	[1D10 | 0020 004A 0030 0026 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1D, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_039)
{
    // 0045 0306 0327 0334;	
    // (Ḝ) LATIN CAPITAL LETTER E, COMBINING BREVE, COMBINING CEDILLA	[1D10 | 0020 004A 0030 0026 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0306, 0x0327, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_040)
{
    // 0114 0327 0334;	
    // (Ḝ) LATIN CAPITAL LETTER E WITH BREVE, COMBINING CEDILLA	[1D10 | 0020 004A 0030 0026 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0114, 0x0327, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_041)
{
    // 0114 0334 0327;	
    // (Ĕ̴) LATIN CAPITAL LETTER E WITH BREVE, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0030 0026 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0114, 0x0334, 0x0327 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_042)
{
    // 0228 0334 0306;	
    // (Ȩ̴) LATIN CAPITAL LETTER E WITH CEDILLA, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0030 0026 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0228, 0x0334, 0x0306 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0030, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_043)
{
    // 0065 0328 0334;	
    // (ę) LATIN SMALL LETTER E, COMBINING OGONEK	[1D10 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0328, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_044)
{
    // 0065 0334 0328;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0328 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_045)
{
    // 0119 0334;	
    // (ę) LATIN SMALL LETTER E WITH OGONEK	[1D10 | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0119, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_046)
{
    // 0045 0328 0334;	
    // (Ę) LATIN CAPITAL LETTER E, COMBINING OGONEK	[1D10 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0328, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_047)
{
    // 0045 0334 0328;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0328 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_048)
{
    // 0118 0334;	
    // (Ę) LATIN CAPITAL LETTER E WITH OGONEK	[1D10 | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0118, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_049)
{
    // 0065 0304 0334;	
    // (ē) LATIN SMALL LETTER E, COMBINING MACRON	[1D10 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_050)
{
    // 0065 0334 0304;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_051)
{
    // 0113 0334;	
    // (ē) LATIN SMALL LETTER E WITH MACRON	[1D10 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0113, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_052)
{
    // 0045 0304 0334;	
    // (Ē) LATIN CAPITAL LETTER E, COMBINING MACRON	[1D10 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_053)
{
    // 0045 0334 0304;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_054)
{
    // 0112 0334;	
    // (Ē) LATIN CAPITAL LETTER E WITH MACRON	[1D10 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0112, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_055)
{
    // 0113 0301 0334;	
    // (ḗ) LATIN SMALL LETTER E WITH MACRON, COMBINING ACUTE ACCENT	[1D10 | 0020 004A 0032 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0113, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_056)
{
    // 0113 0334 0301;	
    // (ē̴) LATIN SMALL LETTER E WITH MACRON, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0113, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_057)
{
    // 0113 0334 0341;	
    // (ē̴) LATIN SMALL LETTER E WITH MACRON, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0113, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_058)
{
    // 0113 0341 0334;	
    // (ḗ) LATIN SMALL LETTER E WITH MACRON, COMBINING ACUTE TONE MARK	[1D10 | 0020 004A 0032 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0113, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_059)
{
    // 0045 0304 0334 0301;	
    // (Ē̴) LATIN CAPITAL LETTER E, COMBINING MACRON, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0304, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_060)
{
    // 0045 0334 0304 0301;	
    // (Ē̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY, COMBINING MACRON	[1D10 | 0020 004A 0032 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0334, 0x0304, 0x0301 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_061)
{
    // 0112 0301 0334;	
    // (Ḗ) LATIN CAPITAL LETTER E WITH MACRON, COMBINING ACUTE ACCENT	[1D10 | 0020 004A 0032 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0112, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_062)
{
    // 0112 0341 0334;	
    // (Ḗ) LATIN CAPITAL LETTER E WITH MACRON, COMBINING ACUTE TONE MARK	[1D10 | 0020 004A 0032 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0112, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_063)
{
    // 0065 0304 0334 0300;	
    // (ē̴) LATIN SMALL LETTER E, COMBINING MACRON, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0065, 0x0304, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_064)
{
    // 0065 0304 0334 0340;	
    // (ē̴) LATIN SMALL LETTER E, COMBINING MACRON, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0065, 0x0304, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_065)
{
    // 0065 0334 0304 0300;	
    // (ē̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY, COMBINING MACRON	[1D10 | 0020 004A 0032 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0065, 0x0334, 0x0304, 0x0300 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_066)
{
    // 0065 0334 0304 0340;	
    // (ē̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY, COMBINING MACRON	[1D10 | 0020 004A 0032 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0065, 0x0334, 0x0304, 0x0340 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_067)
{
    // 0045 0304 0334 0300;	
    // (Ē̴) LATIN CAPITAL LETTER E, COMBINING MACRON, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0304, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_068)
{
    // 0045 0304 0334 0340;	
    // (Ē̴) LATIN CAPITAL LETTER E, COMBINING MACRON, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0032 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0304, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_069)
{
    // 0045 0334 0304 0300;	
    // (Ē̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY, COMBINING MACRON	[1D10 | 0020 004A 0032 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0334, 0x0304, 0x0300 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_070)
{
    // 0045 0334 0304 0340;	
    // (Ē̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY, COMBINING MACRON	[1D10 | 0020 004A 0032 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0334, 0x0304, 0x0340 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0032, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_071)
{
    // 0065 0309 0334;	
    // (ẻ) LATIN SMALL LETTER E, COMBINING HOOK ABOVE	[1D10 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_072)
{
    // 0065 0334 0309;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_073)
{
    // 1EBB 0334;	
    // (ẻ) LATIN SMALL LETTER E WITH HOOK ABOVE	[1D10 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBB, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_074)
{
    // 0045 0309 0334;	
    // (Ẻ) LATIN CAPITAL LETTER E, COMBINING HOOK ABOVE	[1D10 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_075)
{
    // 0045 0334 0309;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_076)
{
    // 1EBA 0334;	
    // (Ẻ) LATIN CAPITAL LETTER E WITH HOOK ABOVE	[1D10 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBA, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_077)
{
    // 0065 030F 0334;	
    // (ȅ) LATIN SMALL LETTER E, COMBINING DOUBLE GRAVE ACCENT	[1D10 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_078)
{
    // 0065 0334 030F;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_079)
{
    // 0205 0334;	
    // (ȅ) LATIN SMALL LETTER E WITH DOUBLE GRAVE	[1D10 | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0205, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_080)
{
    // 0045 030F 0334;	
    // (Ȅ) LATIN CAPITAL LETTER E, COMBINING DOUBLE GRAVE ACCENT	[1D10 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_081)
{
    // 0045 0334 030F;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_082)
{
    // 0204 0334;	
    // (Ȅ) LATIN CAPITAL LETTER E WITH DOUBLE GRAVE	[1D10 | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0204, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_083)
{
    // 0065 0311 0334;	
    // (ȇ) LATIN SMALL LETTER E, COMBINING INVERTED BREVE	[1D10 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0311, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_084)
{
    // 0065 0334 0311;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0311 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_085)
{
    // 0207 0334;	
    // (ȇ) LATIN SMALL LETTER E WITH INVERTED BREVE	[1D10 | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0207, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_086)
{
    // 0045 0311 0334;	
    // (Ȇ) LATIN CAPITAL LETTER E, COMBINING INVERTED BREVE	[1D10 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0311, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_087)
{
    // 0045 0334 0311;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0311 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_088)
{
    // 0206 0334;	
    // (Ȇ) LATIN CAPITAL LETTER E WITH INVERTED BREVE	[1D10 | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0206, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_089)
{
    // 0065 0323 0334;	
    // (ẹ) LATIN SMALL LETTER E, COMBINING DOT BELOW	[1D10 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_090)
{
    // 0065 0334 0323;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_091)
{
    // 1EB9 0334;	
    // (ẹ) LATIN SMALL LETTER E WITH DOT BELOW	[1D10 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB9, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_092)
{
    // 0045 0323 0334;	
    // (Ẹ) LATIN CAPITAL LETTER E, COMBINING DOT BELOW	[1D10 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_093)
{
    // 0045 0334 0323;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_094)
{
    // 1EB8 0334;	
    // (Ẹ) LATIN CAPITAL LETTER E WITH DOT BELOW	[1D10 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EB8, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_095)
{
    // 0065 0302 0334 0323;	
    // (ê̴) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0065, 0x0302, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_096)
{
    // 0065 0323 0334 0302;	
    // (ẹ̴) LATIN SMALL LETTER E, COMBINING DOT BELOW, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0065, 0x0323, 0x0334, 0x0302 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_097)
{
    // 0065 0334 0323 0302;	
    // (ẹ̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY, COMBINING DOT BELOW	[1D10 | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0065, 0x0334, 0x0323, 0x0302 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_098)
{
    // 1EB9 0334 0302;	
    // (ẹ̴) LATIN SMALL LETTER E WITH DOT BELOW, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1EB9, 0x0334, 0x0302 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_099)
{
    // 0045 0302 0323 0334;	
    // (Ệ) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING DOT BELOW	[1D10 | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0302, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_100)
{
    // 0045 0302 0334 0323;	
    // (Ê̴) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0302, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_101)
{
    // 0045 0334 0323 0302;	
    // (Ẹ̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY, COMBINING DOT BELOW	[1D10 | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0045, 0x0334, 0x0323, 0x0302 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_102)
{
    // 1EB8 0334 0302;	
    // (Ẹ̴) LATIN CAPITAL LETTER E WITH DOT BELOW, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1EB8, 0x0334, 0x0302 };
    uint32_t const ces[12] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_103)
{
    // 0065 032D 0334;	
    // (ḙ) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT BELOW	[1D10 | 0020 004A 0046 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x032D, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_104)
{
    // 0065 0334 032D;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0046 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x032D };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_105)
{
    // 1E19 0334;	
    // (ḙ) LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW	[1D10 | 0020 004A 0046 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E19, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_106)
{
    // 0045 032D 0334;	
    // (Ḙ) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT BELOW	[1D10 | 0020 004A 0046 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x032D, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_107)
{
    // 0045 0334 032D;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0046 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x032D };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_108)
{
    // 1E18 0334;	
    // (Ḙ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW	[1D10 | 0020 004A 0046 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E18, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0046, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_109)
{
    // 0065 0330 0334;	
    // (ḛ) LATIN SMALL LETTER E, COMBINING TILDE BELOW	[1D10 | 0020 004A 0048 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0330, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_110)
{
    // 0065 0334 0330;	
    // (e̴) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0048 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0065, 0x0334, 0x0330 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_111)
{
    // 1E1B 0334;	
    // (ḛ) LATIN SMALL LETTER E WITH TILDE BELOW	[1D10 | 0020 004A 0048 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1B, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_112)
{
    // 0045 0330 0334;	
    // (Ḛ) LATIN CAPITAL LETTER E, COMBINING TILDE BELOW	[1D10 | 0020 004A 0048 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0330, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_113)
{
    // 0045 0334 0330;	
    // (E̴) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0048 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0045, 0x0334, 0x0330 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_114)
{
    // 1E1A 0334;	
    // (Ḛ) LATIN CAPITAL LETTER E WITH TILDE BELOW	[1D10 | 0020 004A 0048 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1A, 0x0334 };
    uint32_t const ces[10] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0048, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_115)
{
    // 0334 0364;	
    // (ͤ) COMBINING LATIN SMALL LETTER E	[1D10 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x0364 };
    uint32_t const ces[8] = { 0x1D10, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_116)
{
    // 0364 0334;	
    // (ͤ) COMBINING LATIN SMALL LETTER E	[1D10 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0364, 0x0334 };
    uint32_t const ces[8] = { 0x1D10, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_117)
{
    // 0065 0021;	
    // (e) LATIN SMALL LETTER E	[1D10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0065, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_118)
{
    // FF45 0021;	
    // (ｅ) FULLWIDTH LATIN SMALL LETTER E	[1D10 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF45, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_119)
{
    // 0364 0021;	
    // (ͤ) COMBINING LATIN SMALL LETTER E	[1D10 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0364, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_120)
{
    // 212F 0021;	
    // (ℯ) SCRIPT SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x212F, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_121)
{
    // 2147 0021;	
    // (ⅇ) DOUBLE-STRUCK ITALIC SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2147, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_122)
{
    // 1D41E 0021;	
    // (𝐞) MATHEMATICAL BOLD SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41E, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_123)
{
    // 1D452 0021;	
    // (𝑒) MATHEMATICAL ITALIC SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D452, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_124)
{
    // 1D486 0021;	
    // (𝒆) MATHEMATICAL BOLD ITALIC SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D486, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_125)
{
    // 1D4EE 0021;	
    // (𝓮) MATHEMATICAL BOLD SCRIPT SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EE, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_126)
{
    // 1D522 0021;	
    // (𝔢) MATHEMATICAL FRAKTUR SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D522, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_127)
{
    // 1D556 0021;	
    // (𝕖) MATHEMATICAL DOUBLE-STRUCK SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D556, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_128)
{
    // 1D58A 0021;	
    // (𝖊) MATHEMATICAL BOLD FRAKTUR SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58A, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_129)
{
    // 1D5BE 0021;	
    // (𝖾) MATHEMATICAL SANS-SERIF SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BE, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_130)
{
    // 1D5F2 0021;	
    // (𝗲) MATHEMATICAL SANS-SERIF BOLD SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F2, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_131)
{
    // 1D626 0021;	
    // (𝘦) MATHEMATICAL SANS-SERIF ITALIC SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D626, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_132)
{
    // 1D65A 0021;	
    // (𝙚) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65A, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_133)
{
    // 1D68E 0021;	
    // (𝚎) MATHEMATICAL MONOSPACE SMALL E	[1D10 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68E, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_134)
{
    // 24D4 0021;	
    // (ⓔ) CIRCLED LATIN SMALL LETTER E	[1D10 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D4, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_135)
{
    // 0045 0021;	
    // (E) LATIN CAPITAL LETTER E	[1D10 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0045, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_136)
{
    // FF25 0021;	
    // (Ｅ) FULLWIDTH LATIN CAPITAL LETTER E	[1D10 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF25, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_137)
{
    // 2130 0021;	
    // (ℰ) SCRIPT CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2130, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_138)
{
    // 1D404 0021;	
    // (𝐄) MATHEMATICAL BOLD CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D404, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_139)
{
    // 1D438 0021;	
    // (𝐸) MATHEMATICAL ITALIC CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D438, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_140)
{
    // 1D46C 0021;	
    // (𝑬) MATHEMATICAL BOLD ITALIC CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46C, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_141)
{
    // 1D4D4 0021;	
    // (𝓔) MATHEMATICAL BOLD SCRIPT CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D4, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_142)
{
    // 1D508 0021;	
    // (𝔈) MATHEMATICAL FRAKTUR CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D508, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_143)
{
    // 1D53C 0021;	
    // (𝔼) MATHEMATICAL DOUBLE-STRUCK CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53C, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_144)
{
    // 1D570 0021;	
    // (𝕰) MATHEMATICAL BOLD FRAKTUR CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D570, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_145)
{
    // 1D5A4 0021;	
    // (𝖤) MATHEMATICAL SANS-SERIF CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A4, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_146)
{
    // 1D5D8 0021;	
    // (𝗘) MATHEMATICAL SANS-SERIF BOLD CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D8, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_147)
{
    // 1D60C 0021;	
    // (𝘌) MATHEMATICAL SANS-SERIF ITALIC CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60C, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_148)
{
    // 1D640 0021;	
    // (𝙀) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D640, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_149)
{
    // 1D674 0021;	
    // (𝙴) MATHEMATICAL MONOSPACE CAPITAL E	[1D10 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D674, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_150)
{
    // 24BA 0021;	
    // (Ⓔ) CIRCLED LATIN CAPITAL LETTER E	[1D10 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BA, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_151)
{
    // 1F154 0021;	
    // (🅔) NEGATIVE CIRCLED LATIN CAPITAL LETTER E	[1D10 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F154, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_152)
{
    // 1D49 0021;	
    // (ᵉ) MODIFIER LETTER SMALL E	[1D10 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D49, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_153)
{
    // 2091 0021;	
    // (ₑ) LATIN SUBSCRIPT SMALL LETTER E	[1D10 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2091, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_154)
{
    // 1D31 0021;	
    // (ᴱ) MODIFIER LETTER CAPITAL E	[1D10 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D31, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_155)
{
    // 1F134 0021;	
    // (🄴) SQUARED LATIN CAPITAL LETTER E	[1D10 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F134, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_156)
{
    // 1F174 0021;	
    // (🅴) NEGATIVE SQUARED LATIN CAPITAL LETTER E	[1D10 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F174, 0x0021 };
    uint32_t const ces[9] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_157)
{
    // 00E9 0021;	
    // (é) LATIN SMALL LETTER E WITH ACUTE	[1D10 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E9, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_158)
{
    // 00C9 0021;	
    // (É) LATIN CAPITAL LETTER E WITH ACUTE	[1D10 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C9, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_159)
{
    // 00E8 0021;	
    // (è) LATIN SMALL LETTER E WITH GRAVE	[1D10 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E8, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_160)
{
    // 00C8 0021;	
    // (È) LATIN CAPITAL LETTER E WITH GRAVE	[1D10 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C8, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_161)
{
    // 0115 0021;	
    // (ĕ) LATIN SMALL LETTER E WITH BREVE	[1D10 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0115, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_162)
{
    // 0114 0021;	
    // (Ĕ) LATIN CAPITAL LETTER E WITH BREVE	[1D10 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0114, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_163)
{
    // 00EA 0021;	
    // (ê) LATIN SMALL LETTER E WITH CIRCUMFLEX	[1D10 0261 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EA, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_164)
{
    // 00CA 0021;	
    // (Ê) LATIN CAPITAL LETTER E WITH CIRCUMFLEX	[1D10 0261 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CA, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_165)
{
    // 1EBF 0021;	
    // (ế) LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 0261 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBF, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_166)
{
    // 1EBE 0021;	
    // (Ế) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 0261 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBE, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_167)
{
    // 1EC1 0021;	
    // (ề) LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 0261 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC1, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_168)
{
    // 1EC0 0021;	
    // (Ề) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 0261 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC0, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_169)
{
    // 1EC5 0021;	
    // (ễ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 0261 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC5, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_170)
{
    // 1EC4 0021;	
    // (Ễ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 0261 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC4, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_171)
{
    // 1EC3 0021;	
    // (ể) LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 0261 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC3, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_172)
{
    // 1EC2 0021;	
    // (Ể) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 0261 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC2, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_173)
{
    // 011B 0021;	
    // (ě) LATIN SMALL LETTER E WITH CARON	[1D10 0261 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011B, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_174)
{
    // 011A 0021;	
    // (Ě) LATIN CAPITAL LETTER E WITH CARON	[1D10 0261 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011A, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_175)
{
    // 00EB 0021;	
    // (ë) LATIN SMALL LETTER E WITH DIAERESIS	[1D10 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EB, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_176)
{
    // 00CB 0021;	
    // (Ë) LATIN CAPITAL LETTER E WITH DIAERESIS	[1D10 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CB, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_177)
{
    // 1EBD 0021;	
    // (ẽ) LATIN SMALL LETTER E WITH TILDE	[1D10 0261 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBD, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_178)
{
    // 1EBC 0021;	
    // (Ẽ) LATIN CAPITAL LETTER E WITH TILDE	[1D10 0261 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBC, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_179)
{
    // 0117 0021;	
    // (ė) LATIN SMALL LETTER E WITH DOT ABOVE	[1D10 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0117, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_180)
{
    // 0116 0021;	
    // (Ė) LATIN CAPITAL LETTER E WITH DOT ABOVE	[1D10 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0116, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_181)
{
    // 0229 0021;	
    // (ȩ) LATIN SMALL LETTER E WITH CEDILLA	[1D10 0261 | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0229, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_182)
{
    // 0228 0021;	
    // (Ȩ) LATIN CAPITAL LETTER E WITH CEDILLA	[1D10 0261 | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0228, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_183)
{
    // 1E1D 0021;	
    // (ḝ) LATIN SMALL LETTER E WITH CEDILLA AND BREVE	[1D10 0261 | 0020 0030 0026 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1D, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_184)
{
    // 1E1C 0021;	
    // (Ḝ) LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE	[1D10 0261 | 0020 0030 0026 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1C, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_185)
{
    // 0119 0021;	
    // (ę) LATIN SMALL LETTER E WITH OGONEK	[1D10 0261 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0119, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_186)
{
    // 0118 0021;	
    // (Ę) LATIN CAPITAL LETTER E WITH OGONEK	[1D10 0261 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0118, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_187)
{
    // 0113 0021;	
    // (ē) LATIN SMALL LETTER E WITH MACRON	[1D10 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0113, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_188)
{
    // 0112 0021;	
    // (Ē) LATIN CAPITAL LETTER E WITH MACRON	[1D10 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0112, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_189)
{
    // 1E17 0021;	
    // (ḗ) LATIN SMALL LETTER E WITH MACRON AND ACUTE	[1D10 0261 | 0020 0032 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E17, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_190)
{
    // 1E16 0021;	
    // (Ḗ) LATIN CAPITAL LETTER E WITH MACRON AND ACUTE	[1D10 0261 | 0020 0032 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E16, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_191)
{
    // 1E15 0021;	
    // (ḕ) LATIN SMALL LETTER E WITH MACRON AND GRAVE	[1D10 0261 | 0020 0032 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E15, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_192)
{
    // 1E14 0021;	
    // (Ḕ) LATIN CAPITAL LETTER E WITH MACRON AND GRAVE	[1D10 0261 | 0020 0032 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E14, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_193)
{
    // 1EBB 0021;	
    // (ẻ) LATIN SMALL LETTER E WITH HOOK ABOVE	[1D10 0261 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBB, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_194)
{
    // 1EBA 0021;	
    // (Ẻ) LATIN CAPITAL LETTER E WITH HOOK ABOVE	[1D10 0261 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBA, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_195)
{
    // 0205 0021;	
    // (ȅ) LATIN SMALL LETTER E WITH DOUBLE GRAVE	[1D10 0261 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0205, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_196)
{
    // 0204 0021;	
    // (Ȅ) LATIN CAPITAL LETTER E WITH DOUBLE GRAVE	[1D10 0261 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0204, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_197)
{
    // 0207 0021;	
    // (ȇ) LATIN SMALL LETTER E WITH INVERTED BREVE	[1D10 0261 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0207, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_198)
{
    // 0206 0021;	
    // (Ȇ) LATIN CAPITAL LETTER E WITH INVERTED BREVE	[1D10 0261 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0206, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_199)
{
    // 1EB9 0021;	
    // (ẹ) LATIN SMALL LETTER E WITH DOT BELOW	[1D10 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB9, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_200)
{
    // 1EB8 0021;	
    // (Ẹ) LATIN CAPITAL LETTER E WITH DOT BELOW	[1D10 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EB8, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_201)
{
    // 1EC7 0021;	
    // (ệ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 0261 | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC7, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_202)
{
    // 1EC6 0021;	
    // (Ệ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 0261 | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC6, 0x0021 };
    uint32_t const ces[13] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_203)
{
    // 1E19 0021;	
    // (ḙ) LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW	[1D10 0261 | 0020 0046 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E19, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_204)
{
    // 1E18 0021;	
    // (Ḙ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW	[1D10 0261 | 0020 0046 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E18, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_205)
{
    // 1E1B 0021;	
    // (ḛ) LATIN SMALL LETTER E WITH TILDE BELOW	[1D10 0261 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1B, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_206)
{
    // 1E1A 0021;	
    // (Ḛ) LATIN CAPITAL LETTER E WITH TILDE BELOW	[1D10 0261 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1A, 0x0021 };
    uint32_t const ces[11] = { 0x1D10, 0x0261, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_207)
{
    // 0065 003F;	
    // (e) LATIN SMALL LETTER E	[1D10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0065, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_208)
{
    // FF45 003F;	
    // (ｅ) FULLWIDTH LATIN SMALL LETTER E	[1D10 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF45, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_209)
{
    // 0364 003F;	
    // (ͤ) COMBINING LATIN SMALL LETTER E	[1D10 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0364, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_210)
{
    // 212F 003F;	
    // (ℯ) SCRIPT SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x212F, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_211)
{
    // 2147 003F;	
    // (ⅇ) DOUBLE-STRUCK ITALIC SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2147, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_212)
{
    // 1D41E 003F;	
    // (𝐞) MATHEMATICAL BOLD SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41E, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_213)
{
    // 1D452 003F;	
    // (𝑒) MATHEMATICAL ITALIC SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D452, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_214)
{
    // 1D486 003F;	
    // (𝒆) MATHEMATICAL BOLD ITALIC SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D486, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_215)
{
    // 1D4EE 003F;	
    // (𝓮) MATHEMATICAL BOLD SCRIPT SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EE, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_216)
{
    // 1D522 003F;	
    // (𝔢) MATHEMATICAL FRAKTUR SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D522, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_217)
{
    // 1D556 003F;	
    // (𝕖) MATHEMATICAL DOUBLE-STRUCK SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D556, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_218)
{
    // 1D58A 003F;	
    // (𝖊) MATHEMATICAL BOLD FRAKTUR SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58A, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_219)
{
    // 1D5BE 003F;	
    // (𝖾) MATHEMATICAL SANS-SERIF SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BE, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_220)
{
    // 1D5F2 003F;	
    // (𝗲) MATHEMATICAL SANS-SERIF BOLD SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F2, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_221)
{
    // 1D626 003F;	
    // (𝘦) MATHEMATICAL SANS-SERIF ITALIC SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D626, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_222)
{
    // 1D65A 003F;	
    // (𝙚) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65A, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_223)
{
    // 1D68E 003F;	
    // (𝚎) MATHEMATICAL MONOSPACE SMALL E	[1D10 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68E, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_224)
{
    // 24D4 003F;	
    // (ⓔ) CIRCLED LATIN SMALL LETTER E	[1D10 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D4, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_225)
{
    // 0045 003F;	
    // (E) LATIN CAPITAL LETTER E	[1D10 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0045, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_226)
{
    // FF25 003F;	
    // (Ｅ) FULLWIDTH LATIN CAPITAL LETTER E	[1D10 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF25, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_227)
{
    // 2130 003F;	
    // (ℰ) SCRIPT CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2130, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_228)
{
    // 1D404 003F;	
    // (𝐄) MATHEMATICAL BOLD CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D404, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_229)
{
    // 1D438 003F;	
    // (𝐸) MATHEMATICAL ITALIC CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D438, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_230)
{
    // 1D46C 003F;	
    // (𝑬) MATHEMATICAL BOLD ITALIC CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46C, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_231)
{
    // 1D4D4 003F;	
    // (𝓔) MATHEMATICAL BOLD SCRIPT CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D4, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_232)
{
    // 1D508 003F;	
    // (𝔈) MATHEMATICAL FRAKTUR CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D508, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_233)
{
    // 1D53C 003F;	
    // (𝔼) MATHEMATICAL DOUBLE-STRUCK CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53C, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_234)
{
    // 1D570 003F;	
    // (𝕰) MATHEMATICAL BOLD FRAKTUR CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D570, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_235)
{
    // 1D5A4 003F;	
    // (𝖤) MATHEMATICAL SANS-SERIF CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A4, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_236)
{
    // 1D5D8 003F;	
    // (𝗘) MATHEMATICAL SANS-SERIF BOLD CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D8, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_237)
{
    // 1D60C 003F;	
    // (𝘌) MATHEMATICAL SANS-SERIF ITALIC CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60C, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_238)
{
    // 1D640 003F;	
    // (𝙀) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D640, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_239)
{
    // 1D674 003F;	
    // (𝙴) MATHEMATICAL MONOSPACE CAPITAL E	[1D10 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D674, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_240)
{
    // 24BA 003F;	
    // (Ⓔ) CIRCLED LATIN CAPITAL LETTER E	[1D10 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BA, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_241)
{
    // 1F154 003F;	
    // (🅔) NEGATIVE CIRCLED LATIN CAPITAL LETTER E	[1D10 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F154, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_242)
{
    // 1D49 003F;	
    // (ᵉ) MODIFIER LETTER SMALL E	[1D10 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D49, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_243)
{
    // 2091 003F;	
    // (ₑ) LATIN SUBSCRIPT SMALL LETTER E	[1D10 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2091, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_244)
{
    // 1D31 003F;	
    // (ᴱ) MODIFIER LETTER CAPITAL E	[1D10 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D31, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_245)
{
    // 1F134 003F;	
    // (🄴) SQUARED LATIN CAPITAL LETTER E	[1D10 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F134, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_246)
{
    // 1F174 003F;	
    // (🅴) NEGATIVE SQUARED LATIN CAPITAL LETTER E	[1D10 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F174, 0x003F };
    uint32_t const ces[9] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_247)
{
    // 00E9 003F;	
    // (é) LATIN SMALL LETTER E WITH ACUTE	[1D10 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E9, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_248)
{
    // 00C9 003F;	
    // (É) LATIN CAPITAL LETTER E WITH ACUTE	[1D10 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C9, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_249)
{
    // 00E8 003F;	
    // (è) LATIN SMALL LETTER E WITH GRAVE	[1D10 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E8, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_250)
{
    // 00C8 003F;	
    // (È) LATIN CAPITAL LETTER E WITH GRAVE	[1D10 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C8, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_251)
{
    // 0115 003F;	
    // (ĕ) LATIN SMALL LETTER E WITH BREVE	[1D10 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0115, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_252)
{
    // 0114 003F;	
    // (Ĕ) LATIN CAPITAL LETTER E WITH BREVE	[1D10 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0114, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_253)
{
    // 00EA 003F;	
    // (ê) LATIN SMALL LETTER E WITH CIRCUMFLEX	[1D10 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EA, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_254)
{
    // 00CA 003F;	
    // (Ê) LATIN CAPITAL LETTER E WITH CIRCUMFLEX	[1D10 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CA, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_255)
{
    // 1EBF 003F;	
    // (ế) LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 0267 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBF, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_256)
{
    // 1EBE 003F;	
    // (Ế) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 0267 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBE, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_257)
{
    // 1EC1 003F;	
    // (ề) LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 0267 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC1, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_258)
{
    // 1EC0 003F;	
    // (Ề) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 0267 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC0, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_259)
{
    // 1EC5 003F;	
    // (ễ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 0267 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC5, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_260)
{
    // 1EC4 003F;	
    // (Ễ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 0267 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC4, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_261)
{
    // 1EC3 003F;	
    // (ể) LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 0267 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC3, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_262)
{
    // 1EC2 003F;	
    // (Ể) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 0267 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC2, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_263)
{
    // 011B 003F;	
    // (ě) LATIN SMALL LETTER E WITH CARON	[1D10 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011B, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_264)
{
    // 011A 003F;	
    // (Ě) LATIN CAPITAL LETTER E WITH CARON	[1D10 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011A, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_265)
{
    // 00EB 003F;	
    // (ë) LATIN SMALL LETTER E WITH DIAERESIS	[1D10 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EB, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_266)
{
    // 00CB 003F;	
    // (Ë) LATIN CAPITAL LETTER E WITH DIAERESIS	[1D10 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CB, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_267)
{
    // 1EBD 003F;	
    // (ẽ) LATIN SMALL LETTER E WITH TILDE	[1D10 0267 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBD, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_268)
{
    // 1EBC 003F;	
    // (Ẽ) LATIN CAPITAL LETTER E WITH TILDE	[1D10 0267 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBC, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_269)
{
    // 0117 003F;	
    // (ė) LATIN SMALL LETTER E WITH DOT ABOVE	[1D10 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0117, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_270)
{
    // 0116 003F;	
    // (Ė) LATIN CAPITAL LETTER E WITH DOT ABOVE	[1D10 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0116, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_271)
{
    // 0229 003F;	
    // (ȩ) LATIN SMALL LETTER E WITH CEDILLA	[1D10 0267 | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0229, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_272)
{
    // 0228 003F;	
    // (Ȩ) LATIN CAPITAL LETTER E WITH CEDILLA	[1D10 0267 | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0228, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_273)
{
    // 1E1D 003F;	
    // (ḝ) LATIN SMALL LETTER E WITH CEDILLA AND BREVE	[1D10 0267 | 0020 0030 0026 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1D, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_274)
{
    // 1E1C 003F;	
    // (Ḝ) LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE	[1D10 0267 | 0020 0030 0026 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1C, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_275)
{
    // 0119 003F;	
    // (ę) LATIN SMALL LETTER E WITH OGONEK	[1D10 0267 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0119, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_276)
{
    // 0118 003F;	
    // (Ę) LATIN CAPITAL LETTER E WITH OGONEK	[1D10 0267 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0118, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_277)
{
    // 0113 003F;	
    // (ē) LATIN SMALL LETTER E WITH MACRON	[1D10 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0113, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_278)
{
    // 0112 003F;	
    // (Ē) LATIN CAPITAL LETTER E WITH MACRON	[1D10 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0112, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_279)
{
    // 1E17 003F;	
    // (ḗ) LATIN SMALL LETTER E WITH MACRON AND ACUTE	[1D10 0267 | 0020 0032 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E17, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_280)
{
    // 1E16 003F;	
    // (Ḗ) LATIN CAPITAL LETTER E WITH MACRON AND ACUTE	[1D10 0267 | 0020 0032 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E16, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_281)
{
    // 1E15 003F;	
    // (ḕ) LATIN SMALL LETTER E WITH MACRON AND GRAVE	[1D10 0267 | 0020 0032 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E15, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_282)
{
    // 1E14 003F;	
    // (Ḕ) LATIN CAPITAL LETTER E WITH MACRON AND GRAVE	[1D10 0267 | 0020 0032 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E14, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_283)
{
    // 1EBB 003F;	
    // (ẻ) LATIN SMALL LETTER E WITH HOOK ABOVE	[1D10 0267 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBB, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_284)
{
    // 1EBA 003F;	
    // (Ẻ) LATIN CAPITAL LETTER E WITH HOOK ABOVE	[1D10 0267 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBA, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_285)
{
    // 0205 003F;	
    // (ȅ) LATIN SMALL LETTER E WITH DOUBLE GRAVE	[1D10 0267 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0205, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_286)
{
    // 0204 003F;	
    // (Ȅ) LATIN CAPITAL LETTER E WITH DOUBLE GRAVE	[1D10 0267 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0204, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_287)
{
    // 0207 003F;	
    // (ȇ) LATIN SMALL LETTER E WITH INVERTED BREVE	[1D10 0267 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0207, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_288)
{
    // 0206 003F;	
    // (Ȇ) LATIN CAPITAL LETTER E WITH INVERTED BREVE	[1D10 0267 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0206, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_289)
{
    // 1EB9 003F;	
    // (ẹ) LATIN SMALL LETTER E WITH DOT BELOW	[1D10 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB9, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_290)
{
    // 1EB8 003F;	
    // (Ẹ) LATIN CAPITAL LETTER E WITH DOT BELOW	[1D10 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EB8, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_291)
{
    // 1EC7 003F;	
    // (ệ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 0267 | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC7, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_292)
{
    // 1EC6 003F;	
    // (Ệ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 0267 | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC6, 0x003F };
    uint32_t const ces[13] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_293)
{
    // 1E19 003F;	
    // (ḙ) LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW	[1D10 0267 | 0020 0046 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E19, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_294)
{
    // 1E18 003F;	
    // (Ḙ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW	[1D10 0267 | 0020 0046 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E18, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_295)
{
    // 1E1B 003F;	
    // (ḛ) LATIN SMALL LETTER E WITH TILDE BELOW	[1D10 0267 | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1B, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_296)
{
    // 1E1A 003F;	
    // (Ḛ) LATIN CAPITAL LETTER E WITH TILDE BELOW	[1D10 0267 | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1A, 0x003F };
    uint32_t const ces[11] = { 0x1D10, 0x0267, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_297)
{
    // 0065 0061;	
    // (e) LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0065, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_298)
{
    // 0065 0041;	
    // (e) LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0065, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_299)
{
    // FF45 0061;	
    // (ｅ) FULLWIDTH LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF45, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_300)
{
    // FF45 0041;	
    // (ｅ) FULLWIDTH LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF45, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_301)
{
    // 0364 0061;	
    // (ͤ) COMBINING LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0364, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_302)
{
    // 0364 0041;	
    // (ͤ) COMBINING LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0364, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_303)
{
    // 212F 0061;	
    // (ℯ) SCRIPT SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x212F, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_304)
{
    // 2147 0061;	
    // (ⅇ) DOUBLE-STRUCK ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2147, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_305)
{
    // 1D41E 0061;	
    // (𝐞) MATHEMATICAL BOLD SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41E, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_306)
{
    // 1D452 0061;	
    // (𝑒) MATHEMATICAL ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D452, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_307)
{
    // 1D486 0061;	
    // (𝒆) MATHEMATICAL BOLD ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D486, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_308)
{
    // 1D4EE 0061;	
    // (𝓮) MATHEMATICAL BOLD SCRIPT SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EE, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_309)
{
    // 1D522 0061;	
    // (𝔢) MATHEMATICAL FRAKTUR SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D522, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_310)
{
    // 1D556 0061;	
    // (𝕖) MATHEMATICAL DOUBLE-STRUCK SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D556, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_311)
{
    // 1D58A 0061;	
    // (𝖊) MATHEMATICAL BOLD FRAKTUR SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58A, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_312)
{
    // 1D5BE 0061;	
    // (𝖾) MATHEMATICAL SANS-SERIF SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BE, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_313)
{
    // 1D5F2 0061;	
    // (𝗲) MATHEMATICAL SANS-SERIF BOLD SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F2, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_314)
{
    // 1D626 0061;	
    // (𝘦) MATHEMATICAL SANS-SERIF ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D626, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_315)
{
    // 1D65A 0061;	
    // (𝙚) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65A, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_316)
{
    // 1D68E 0061;	
    // (𝚎) MATHEMATICAL MONOSPACE SMALL E	[1D10 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68E, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_317)
{
    // 212F 0041;	
    // (ℯ) SCRIPT SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x212F, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_318)
{
    // 2147 0041;	
    // (ⅇ) DOUBLE-STRUCK ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x2147, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_319)
{
    // 1D41E 0041;	
    // (𝐞) MATHEMATICAL BOLD SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D41E, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_320)
{
    // 1D452 0041;	
    // (𝑒) MATHEMATICAL ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D452, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_321)
{
    // 1D486 0041;	
    // (𝒆) MATHEMATICAL BOLD ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D486, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_322)
{
    // 1D4EE 0041;	
    // (𝓮) MATHEMATICAL BOLD SCRIPT SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4EE, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_323)
{
    // 1D522 0041;	
    // (𝔢) MATHEMATICAL FRAKTUR SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D522, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_324)
{
    // 1D556 0041;	
    // (𝕖) MATHEMATICAL DOUBLE-STRUCK SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D556, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_325)
{
    // 1D58A 0041;	
    // (𝖊) MATHEMATICAL BOLD FRAKTUR SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D58A, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_326)
{
    // 1D5BE 0041;	
    // (𝖾) MATHEMATICAL SANS-SERIF SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5BE, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_327)
{
    // 1D5F2 0041;	
    // (𝗲) MATHEMATICAL SANS-SERIF BOLD SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5F2, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_328)
{
    // 1D626 0041;	
    // (𝘦) MATHEMATICAL SANS-SERIF ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D626, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_329)
{
    // 1D65A 0041;	
    // (𝙚) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D65A, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_330)
{
    // 1D68E 0041;	
    // (𝚎) MATHEMATICAL MONOSPACE SMALL E	[1D10 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D68E, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_331)
{
    // 24D4 0061;	
    // (ⓔ) CIRCLED LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D4, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_332)
{
    // 24D4 0041;	
    // (ⓔ) CIRCLED LATIN SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24D4, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_333)
{
    // 0045 0061;	
    // (E) LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0045, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_334)
{
    // 0045 0041;	
    // (E) LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0045, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_335)
{
    // FF25 0061;	
    // (Ｅ) FULLWIDTH LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF25, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_336)
{
    // FF25 0041;	
    // (Ｅ) FULLWIDTH LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF25, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_337)
{
    // 2130 0061;	
    // (ℰ) SCRIPT CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2130, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_338)
{
    // 1D404 0061;	
    // (𝐄) MATHEMATICAL BOLD CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D404, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_339)
{
    // 1D438 0061;	
    // (𝐸) MATHEMATICAL ITALIC CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D438, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_340)
{
    // 1D46C 0061;	
    // (𝑬) MATHEMATICAL BOLD ITALIC CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D46C, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_341)
{
    // 1D4D4 0061;	
    // (𝓔) MATHEMATICAL BOLD SCRIPT CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D4, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_342)
{
    // 1D508 0061;	
    // (𝔈) MATHEMATICAL FRAKTUR CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D508, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_343)
{
    // 1D53C 0061;	
    // (𝔼) MATHEMATICAL DOUBLE-STRUCK CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D53C, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_344)
{
    // 1D570 0061;	
    // (𝕰) MATHEMATICAL BOLD FRAKTUR CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D570, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_345)
{
    // 1D5A4 0061;	
    // (𝖤) MATHEMATICAL SANS-SERIF CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A4, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_346)
{
    // 1D5D8 0061;	
    // (𝗘) MATHEMATICAL SANS-SERIF BOLD CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D8, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_347)
{
    // 1D60C 0061;	
    // (𝘌) MATHEMATICAL SANS-SERIF ITALIC CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D60C, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_348)
{
    // 1D640 0061;	
    // (𝙀) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D640, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_349)
{
    // 1D674 0061;	
    // (𝙴) MATHEMATICAL MONOSPACE CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D674, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_350)
{
    // 2130 0041;	
    // (ℰ) SCRIPT CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x2130, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_351)
{
    // 1D404 0041;	
    // (𝐄) MATHEMATICAL BOLD CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D404, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_352)
{
    // 1D438 0041;	
    // (𝐸) MATHEMATICAL ITALIC CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D438, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_353)
{
    // 1D46C 0041;	
    // (𝑬) MATHEMATICAL BOLD ITALIC CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D46C, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_354)
{
    // 1D4D4 0041;	
    // (𝓔) MATHEMATICAL BOLD SCRIPT CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4D4, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_355)
{
    // 1D508 0041;	
    // (𝔈) MATHEMATICAL FRAKTUR CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D508, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_356)
{
    // 1D53C 0041;	
    // (𝔼) MATHEMATICAL DOUBLE-STRUCK CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D53C, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_357)
{
    // 1D570 0041;	
    // (𝕰) MATHEMATICAL BOLD FRAKTUR CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D570, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_358)
{
    // 1D5A4 0041;	
    // (𝖤) MATHEMATICAL SANS-SERIF CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5A4, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_359)
{
    // 1D5D8 0041;	
    // (𝗘) MATHEMATICAL SANS-SERIF BOLD CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5D8, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_360)
{
    // 1D60C 0041;	
    // (𝘌) MATHEMATICAL SANS-SERIF ITALIC CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D60C, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_361)
{
    // 1D640 0041;	
    // (𝙀) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D640, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_362)
{
    // 1D674 0041;	
    // (𝙴) MATHEMATICAL MONOSPACE CAPITAL E	[1D10 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D674, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_363)
{
    // 24BA 0061;	
    // (Ⓔ) CIRCLED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24BA, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_364)
{
    // 1F154 0061;	
    // (🅔) NEGATIVE CIRCLED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F154, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_365)
{
    // 24BA 0041;	
    // (Ⓔ) CIRCLED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24BA, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_366)
{
    // 1F154 0041;	
    // (🅔) NEGATIVE CIRCLED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F154, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_367)
{
    // 1D49 0061;	
    // (ᵉ) MODIFIER LETTER SMALL E	[1D10 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D49, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_368)
{
    // 1D49 0041;	
    // (ᵉ) MODIFIER LETTER SMALL E	[1D10 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D49, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_369)
{
    // 2091 0061;	
    // (ₑ) LATIN SUBSCRIPT SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2091, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_370)
{
    // 2091 0041;	
    // (ₑ) LATIN SUBSCRIPT SMALL LETTER E	[1D10 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2091, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_371)
{
    // 1D31 0061;	
    // (ᴱ) MODIFIER LETTER CAPITAL E	[1D10 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D31, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_372)
{
    // 1F134 0061;	
    // (🄴) SQUARED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F134, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_373)
{
    // 1F174 0061;	
    // (🅴) NEGATIVE SQUARED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F174, 0x0061 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_374)
{
    // 1D31 0041;	
    // (ᴱ) MODIFIER LETTER CAPITAL E	[1D10 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1D31, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_375)
{
    // 1F134 0041;	
    // (🄴) SQUARED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F134, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_376)
{
    // 1F174 0041;	
    // (🅴) NEGATIVE SQUARED LATIN CAPITAL LETTER E	[1D10 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F174, 0x0041 };
    uint32_t const ces[9] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_377)
{
    // 00E9 0061;	
    // (é) LATIN SMALL LETTER E WITH ACUTE	[1D10 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E9, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_378)
{
    // 00E9 0041;	
    // (é) LATIN SMALL LETTER E WITH ACUTE	[1D10 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00E9, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_379)
{
    // 00C9 0061;	
    // (É) LATIN CAPITAL LETTER E WITH ACUTE	[1D10 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C9, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_380)
{
    // 00C9 0041;	
    // (É) LATIN CAPITAL LETTER E WITH ACUTE	[1D10 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00C9, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_381)
{
    // 00E8 0061;	
    // (è) LATIN SMALL LETTER E WITH GRAVE	[1D10 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E8, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_382)
{
    // 00E8 0041;	
    // (è) LATIN SMALL LETTER E WITH GRAVE	[1D10 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00E8, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_383)
{
    // 00C8 0061;	
    // (È) LATIN CAPITAL LETTER E WITH GRAVE	[1D10 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C8, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_384)
{
    // 00C8 0041;	
    // (È) LATIN CAPITAL LETTER E WITH GRAVE	[1D10 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00C8, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_385)
{
    // 0115 0061;	
    // (ĕ) LATIN SMALL LETTER E WITH BREVE	[1D10 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0115, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_386)
{
    // 0115 0041;	
    // (ĕ) LATIN SMALL LETTER E WITH BREVE	[1D10 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0115, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_387)
{
    // 0114 0061;	
    // (Ĕ) LATIN CAPITAL LETTER E WITH BREVE	[1D10 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0114, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_388)
{
    // 0114 0041;	
    // (Ĕ) LATIN CAPITAL LETTER E WITH BREVE	[1D10 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0114, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_389)
{
    // 00EA 0061;	
    // (ê) LATIN SMALL LETTER E WITH CIRCUMFLEX	[1D10 1CAD | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EA, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_390)
{
    // 00EA 0041;	
    // (ê) LATIN SMALL LETTER E WITH CIRCUMFLEX	[1D10 1CAD | 0020 0027 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00EA, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_391)
{
    // 00CA 0061;	
    // (Ê) LATIN CAPITAL LETTER E WITH CIRCUMFLEX	[1D10 1CAD | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CA, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_392)
{
    // 00CA 0041;	
    // (Ê) LATIN CAPITAL LETTER E WITH CIRCUMFLEX	[1D10 1CAD | 0020 0027 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00CA, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_393)
{
    // 1EBF 0061;	
    // (ế) LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 1CAD | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBF, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_394)
{
    // 1EBF 0041;	
    // (ế) LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 1CAD | 0020 0027 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EBF, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_395)
{
    // 1EBE 0061;	
    // (Ế) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 1CAD | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBE, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_396)
{
    // 1EBE 0041;	
    // (Ế) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE	[1D10 1CAD | 0020 0027 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EBE, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_397)
{
    // 1EC1 0061;	
    // (ề) LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 1CAD | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC1, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_398)
{
    // 1EC1 0041;	
    // (ề) LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 1CAD | 0020 0027 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC1, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_399)
{
    // 1EC0 0061;	
    // (Ề) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 1CAD | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC0, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_400)
{
    // 1EC0 0041;	
    // (Ề) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 1CAD | 0020 0027 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC0, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_401)
{
    // 1EC5 0061;	
    // (ễ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 1CAD | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC5, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_402)
{
    // 1EC5 0041;	
    // (ễ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 1CAD | 0020 0027 002D 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC5, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_403)
{
    // 1EC4 0061;	
    // (Ễ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 1CAD | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC4, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_404)
{
    // 1EC4 0041;	
    // (Ễ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 1CAD | 0020 0027 002D 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC4, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_405)
{
    // 1EC3 0061;	
    // (ể) LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 1CAD | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC3, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_406)
{
    // 1EC3 0041;	
    // (ể) LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 1CAD | 0020 0027 003B 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC3, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_407)
{
    // 1EC2 0061;	
    // (Ể) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 1CAD | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC2, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_408)
{
    // 1EC2 0041;	
    // (Ể) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE	[1D10 1CAD | 0020 0027 003B 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC2, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_409)
{
    // 011B 0061;	
    // (ě) LATIN SMALL LETTER E WITH CARON	[1D10 1CAD | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x011B, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_410)
{
    // 011B 0041;	
    // (ě) LATIN SMALL LETTER E WITH CARON	[1D10 1CAD | 0020 0028 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x011B, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_411)
{
    // 011A 0061;	
    // (Ě) LATIN CAPITAL LETTER E WITH CARON	[1D10 1CAD | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x011A, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_412)
{
    // 011A 0041;	
    // (Ě) LATIN CAPITAL LETTER E WITH CARON	[1D10 1CAD | 0020 0028 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x011A, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_413)
{
    // 00EB 0061;	
    // (ë) LATIN SMALL LETTER E WITH DIAERESIS	[1D10 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00EB, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_414)
{
    // 00EB 0041;	
    // (ë) LATIN SMALL LETTER E WITH DIAERESIS	[1D10 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00EB, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_415)
{
    // 00CB 0061;	
    // (Ë) LATIN CAPITAL LETTER E WITH DIAERESIS	[1D10 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00CB, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_416)
{
    // 00CB 0041;	
    // (Ë) LATIN CAPITAL LETTER E WITH DIAERESIS	[1D10 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00CB, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_417)
{
    // 1EBD 0061;	
    // (ẽ) LATIN SMALL LETTER E WITH TILDE	[1D10 1CAD | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBD, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_418)
{
    // 1EBD 0041;	
    // (ẽ) LATIN SMALL LETTER E WITH TILDE	[1D10 1CAD | 0020 002D 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EBD, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_419)
{
    // 1EBC 0061;	
    // (Ẽ) LATIN CAPITAL LETTER E WITH TILDE	[1D10 1CAD | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBC, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_420)
{
    // 1EBC 0041;	
    // (Ẽ) LATIN CAPITAL LETTER E WITH TILDE	[1D10 1CAD | 0020 002D 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EBC, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_421)
{
    // 0117 0061;	
    // (ė) LATIN SMALL LETTER E WITH DOT ABOVE	[1D10 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0117, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_422)
{
    // 0117 0041;	
    // (ė) LATIN SMALL LETTER E WITH DOT ABOVE	[1D10 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0117, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_423)
{
    // 0116 0061;	
    // (Ė) LATIN CAPITAL LETTER E WITH DOT ABOVE	[1D10 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0116, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_424)
{
    // 0116 0041;	
    // (Ė) LATIN CAPITAL LETTER E WITH DOT ABOVE	[1D10 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0116, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_425)
{
    // 0229 0061;	
    // (ȩ) LATIN SMALL LETTER E WITH CEDILLA	[1D10 1CAD | 0020 0030 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0229, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_426)
{
    // 0229 0041;	
    // (ȩ) LATIN SMALL LETTER E WITH CEDILLA	[1D10 1CAD | 0020 0030 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0229, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_427)
{
    // 0228 0061;	
    // (Ȩ) LATIN CAPITAL LETTER E WITH CEDILLA	[1D10 1CAD | 0020 0030 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0228, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_428)
{
    // 0228 0041;	
    // (Ȩ) LATIN CAPITAL LETTER E WITH CEDILLA	[1D10 1CAD | 0020 0030 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0228, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_429)
{
    // 1E1D 0061;	
    // (ḝ) LATIN SMALL LETTER E WITH CEDILLA AND BREVE	[1D10 1CAD | 0020 0030 0026 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1D, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_430)
{
    // 1E1D 0041;	
    // (ḝ) LATIN SMALL LETTER E WITH CEDILLA AND BREVE	[1D10 1CAD | 0020 0030 0026 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E1D, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_431)
{
    // 1E1C 0061;	
    // (Ḝ) LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE	[1D10 1CAD | 0020 0030 0026 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1C, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_432)
{
    // 1E1C 0041;	
    // (Ḝ) LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE	[1D10 1CAD | 0020 0030 0026 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E1C, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_433)
{
    // 0119 0061;	
    // (ę) LATIN SMALL LETTER E WITH OGONEK	[1D10 1CAD | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0119, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_434)
{
    // 0119 0041;	
    // (ę) LATIN SMALL LETTER E WITH OGONEK	[1D10 1CAD | 0020 0031 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0119, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_435)
{
    // 0118 0061;	
    // (Ę) LATIN CAPITAL LETTER E WITH OGONEK	[1D10 1CAD | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0118, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_436)
{
    // 0118 0041;	
    // (Ę) LATIN CAPITAL LETTER E WITH OGONEK	[1D10 1CAD | 0020 0031 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0118, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_437)
{
    // 0113 0061;	
    // (ē) LATIN SMALL LETTER E WITH MACRON	[1D10 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0113, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_438)
{
    // 0113 0041;	
    // (ē) LATIN SMALL LETTER E WITH MACRON	[1D10 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0113, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_439)
{
    // 0112 0061;	
    // (Ē) LATIN CAPITAL LETTER E WITH MACRON	[1D10 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0112, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_440)
{
    // 0112 0041;	
    // (Ē) LATIN CAPITAL LETTER E WITH MACRON	[1D10 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0112, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_441)
{
    // 1E17 0061;	
    // (ḗ) LATIN SMALL LETTER E WITH MACRON AND ACUTE	[1D10 1CAD | 0020 0032 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E17, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_442)
{
    // 1E17 0041;	
    // (ḗ) LATIN SMALL LETTER E WITH MACRON AND ACUTE	[1D10 1CAD | 0020 0032 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E17, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_443)
{
    // 1E16 0061;	
    // (Ḗ) LATIN CAPITAL LETTER E WITH MACRON AND ACUTE	[1D10 1CAD | 0020 0032 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E16, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_444)
{
    // 1E16 0041;	
    // (Ḗ) LATIN CAPITAL LETTER E WITH MACRON AND ACUTE	[1D10 1CAD | 0020 0032 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E16, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_445)
{
    // 1E15 0061;	
    // (ḕ) LATIN SMALL LETTER E WITH MACRON AND GRAVE	[1D10 1CAD | 0020 0032 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E15, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_446)
{
    // 1E15 0041;	
    // (ḕ) LATIN SMALL LETTER E WITH MACRON AND GRAVE	[1D10 1CAD | 0020 0032 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E15, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_447)
{
    // 1E14 0061;	
    // (Ḕ) LATIN CAPITAL LETTER E WITH MACRON AND GRAVE	[1D10 1CAD | 0020 0032 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E14, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_448)
{
    // 1E14 0041;	
    // (Ḕ) LATIN CAPITAL LETTER E WITH MACRON AND GRAVE	[1D10 1CAD | 0020 0032 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E14, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_449)
{
    // 1EBB 0061;	
    // (ẻ) LATIN SMALL LETTER E WITH HOOK ABOVE	[1D10 1CAD | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EBB, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_450)
{
    // 1EBB 0041;	
    // (ẻ) LATIN SMALL LETTER E WITH HOOK ABOVE	[1D10 1CAD | 0020 003B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EBB, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_451)
{
    // 1EBA 0061;	
    // (Ẻ) LATIN CAPITAL LETTER E WITH HOOK ABOVE	[1D10 1CAD | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EBA, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_452)
{
    // 1EBA 0041;	
    // (Ẻ) LATIN CAPITAL LETTER E WITH HOOK ABOVE	[1D10 1CAD | 0020 003B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EBA, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_453)
{
    // 0205 0061;	
    // (ȅ) LATIN SMALL LETTER E WITH DOUBLE GRAVE	[1D10 1CAD | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0205, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_454)
{
    // 0205 0041;	
    // (ȅ) LATIN SMALL LETTER E WITH DOUBLE GRAVE	[1D10 1CAD | 0020 003C 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0205, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_455)
{
    // 0204 0061;	
    // (Ȅ) LATIN CAPITAL LETTER E WITH DOUBLE GRAVE	[1D10 1CAD | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0204, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_456)
{
    // 0204 0041;	
    // (Ȅ) LATIN CAPITAL LETTER E WITH DOUBLE GRAVE	[1D10 1CAD | 0020 003C 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0204, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_457)
{
    // 0207 0061;	
    // (ȇ) LATIN SMALL LETTER E WITH INVERTED BREVE	[1D10 1CAD | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0207, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_458)
{
    // 0207 0041;	
    // (ȇ) LATIN SMALL LETTER E WITH INVERTED BREVE	[1D10 1CAD | 0020 003E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0207, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_459)
{
    // 0206 0061;	
    // (Ȇ) LATIN CAPITAL LETTER E WITH INVERTED BREVE	[1D10 1CAD | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0206, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_460)
{
    // 0206 0041;	
    // (Ȇ) LATIN CAPITAL LETTER E WITH INVERTED BREVE	[1D10 1CAD | 0020 003E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0206, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_461)
{
    // 1EB9 0061;	
    // (ẹ) LATIN SMALL LETTER E WITH DOT BELOW	[1D10 1CAD | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB9, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_462)
{
    // 1EB9 0041;	
    // (ẹ) LATIN SMALL LETTER E WITH DOT BELOW	[1D10 1CAD | 0020 0042 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB9, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_463)
{
    // 1EB8 0061;	
    // (Ẹ) LATIN CAPITAL LETTER E WITH DOT BELOW	[1D10 1CAD | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EB8, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_464)
{
    // 1EB8 0041;	
    // (Ẹ) LATIN CAPITAL LETTER E WITH DOT BELOW	[1D10 1CAD | 0020 0042 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EB8, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_465)
{
    // 1EC7 0061;	
    // (ệ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 1CAD | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC7, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_466)
{
    // 1EC7 0041;	
    // (ệ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 1CAD | 0020 0042 0027 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC7, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_467)
{
    // 1EC6 0061;	
    // (Ệ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 1CAD | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EC6, 0x0061 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_468)
{
    // 1EC6 0041;	
    // (Ệ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW	[1D10 1CAD | 0020 0042 0027 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EC6, 0x0041 };
    uint32_t const ces[13] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_469)
{
    // 1E19 0061;	
    // (ḙ) LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW	[1D10 1CAD | 0020 0046 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E19, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_470)
{
    // 1E19 0041;	
    // (ḙ) LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW	[1D10 1CAD | 0020 0046 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E19, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_471)
{
    // 1E18 0061;	
    // (Ḙ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW	[1D10 1CAD | 0020 0046 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E18, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_472)
{
    // 1E18 0041;	
    // (Ḙ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW	[1D10 1CAD | 0020 0046 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E18, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_473)
{
    // 1E1B 0061;	
    // (ḛ) LATIN SMALL LETTER E WITH TILDE BELOW	[1D10 1CAD | 0020 0048 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E1B, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_474)
{
    // 1E1B 0041;	
    // (ḛ) LATIN SMALL LETTER E WITH TILDE BELOW	[1D10 1CAD | 0020 0048 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E1B, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_475)
{
    // 1E1A 0061;	
    // (Ḛ) LATIN CAPITAL LETTER E WITH TILDE BELOW	[1D10 1CAD | 0020 0048 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E1A, 0x0061 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_476)
{
    // 1E1A 0041;	
    // (Ḛ) LATIN CAPITAL LETTER E WITH TILDE BELOW	[1D10 1CAD | 0020 0048 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E1A, 0x0041 };
    uint32_t const ces[11] = { 0x1D10, 0x1CAD, 0x0000, 0x0020, 0x0048, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_477)
{
    // 0065 0062;	
    // (e) LATIN SMALL LETTER E	[1D10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0065, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_478)
{
    // FF45 0062;	
    // (ｅ) FULLWIDTH LATIN SMALL LETTER E	[1D10 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF45, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_479)
{
    // 0364 0062;	
    // (ͤ) COMBINING LATIN SMALL LETTER E	[1D10 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0364, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_480)
{
    // 212F 0062;	
    // (ℯ) SCRIPT SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x212F, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_481)
{
    // 2147 0062;	
    // (ⅇ) DOUBLE-STRUCK ITALIC SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x2147, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_482)
{
    // 1D41E 0062;	
    // (𝐞) MATHEMATICAL BOLD SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41E, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_483)
{
    // 1D452 0062;	
    // (𝑒) MATHEMATICAL ITALIC SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D452, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_484)
{
    // 1D486 0062;	
    // (𝒆) MATHEMATICAL BOLD ITALIC SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D486, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_485)
{
    // 1D4EE 0062;	
    // (𝓮) MATHEMATICAL BOLD SCRIPT SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EE, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_486)
{
    // 1D522 0062;	
    // (𝔢) MATHEMATICAL FRAKTUR SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D522, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_487)
{
    // 1D556 0062;	
    // (𝕖) MATHEMATICAL DOUBLE-STRUCK SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D556, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_488)
{
    // 1D58A 0062;	
    // (𝖊) MATHEMATICAL BOLD FRAKTUR SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D58A, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_489)
{
    // 1D5BE 0062;	
    // (𝖾) MATHEMATICAL SANS-SERIF SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BE, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_490)
{
    // 1D5F2 0062;	
    // (𝗲) MATHEMATICAL SANS-SERIF BOLD SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5F2, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_491)
{
    // 1D626 0062;	
    // (𝘦) MATHEMATICAL SANS-SERIF ITALIC SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D626, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_492)
{
    // 1D65A 0062;	
    // (𝙚) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D65A, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_493)
{
    // 1D68E 0062;	
    // (𝚎) MATHEMATICAL MONOSPACE SMALL E	[1D10 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68E, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_494)
{
    // 24D4 0062;	
    // (ⓔ) CIRCLED LATIN SMALL LETTER E	[1D10 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D4, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_495)
{
    // 0045 0062;	
    // (E) LATIN CAPITAL LETTER E	[1D10 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0045, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_496)
{
    // FF25 0062;	
    // (Ｅ) FULLWIDTH LATIN CAPITAL LETTER E	[1D10 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF25, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_497)
{
    // 2130 0062;	
    // (ℰ) SCRIPT CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x2130, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_498)
{
    // 1D404 0062;	
    // (𝐄) MATHEMATICAL BOLD CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D404, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_105_499)
{
    // 1D438 0062;	
    // (𝐸) MATHEMATICAL ITALIC CAPITAL E	[1D10 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D438, 0x0062 };
    uint32_t const ces[9] = { 0x1D10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

