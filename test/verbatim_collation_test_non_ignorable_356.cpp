// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_356_000)
{
    // 3F50 003F;	
    // (㽐) CJK UNIFIED IDEOGRAPH-3F50	[FB80 BF50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F50, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_001)
{
    // 3F50 0061;	
    // (㽐) CJK UNIFIED IDEOGRAPH-3F50	[FB80 BF50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F50, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_002)
{
    // 3F50 0041;	
    // (㽐) CJK UNIFIED IDEOGRAPH-3F50	[FB80 BF50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F50, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_003)
{
    // 3F50 0062;	
    // (㽐) CJK UNIFIED IDEOGRAPH-3F50	[FB80 BF50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F50, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_004)
{
    // 3F51 0021;	
    // (㽑) CJK UNIFIED IDEOGRAPH-3F51	[FB80 BF51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F51, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_005)
{
    // 3F51 003F;	
    // (㽑) CJK UNIFIED IDEOGRAPH-3F51	[FB80 BF51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F51, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_006)
{
    // 3F51 0061;	
    // (㽑) CJK UNIFIED IDEOGRAPH-3F51	[FB80 BF51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F51, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_007)
{
    // 3F51 0041;	
    // (㽑) CJK UNIFIED IDEOGRAPH-3F51	[FB80 BF51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F51, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_008)
{
    // 3F51 0062;	
    // (㽑) CJK UNIFIED IDEOGRAPH-3F51	[FB80 BF51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F51, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_009)
{
    // 3F52 0021;	
    // (㽒) CJK UNIFIED IDEOGRAPH-3F52	[FB80 BF52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F52, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_010)
{
    // 3F52 003F;	
    // (㽒) CJK UNIFIED IDEOGRAPH-3F52	[FB80 BF52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F52, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_011)
{
    // 3F52 0061;	
    // (㽒) CJK UNIFIED IDEOGRAPH-3F52	[FB80 BF52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F52, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_012)
{
    // 3F52 0041;	
    // (㽒) CJK UNIFIED IDEOGRAPH-3F52	[FB80 BF52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F52, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_013)
{
    // 3F52 0062;	
    // (㽒) CJK UNIFIED IDEOGRAPH-3F52	[FB80 BF52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F52, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_014)
{
    // 3F53 0021;	
    // (㽓) CJK UNIFIED IDEOGRAPH-3F53	[FB80 BF53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F53, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_015)
{
    // 3F53 003F;	
    // (㽓) CJK UNIFIED IDEOGRAPH-3F53	[FB80 BF53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F53, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_016)
{
    // 3F53 0061;	
    // (㽓) CJK UNIFIED IDEOGRAPH-3F53	[FB80 BF53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F53, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_017)
{
    // 3F53 0041;	
    // (㽓) CJK UNIFIED IDEOGRAPH-3F53	[FB80 BF53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F53, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_018)
{
    // 3F53 0062;	
    // (㽓) CJK UNIFIED IDEOGRAPH-3F53	[FB80 BF53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F53, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_019)
{
    // 3F54 0021;	
    // (㽔) CJK UNIFIED IDEOGRAPH-3F54	[FB80 BF54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F54, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_020)
{
    // 3F54 003F;	
    // (㽔) CJK UNIFIED IDEOGRAPH-3F54	[FB80 BF54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F54, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_021)
{
    // 3F54 0061;	
    // (㽔) CJK UNIFIED IDEOGRAPH-3F54	[FB80 BF54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F54, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_022)
{
    // 3F54 0041;	
    // (㽔) CJK UNIFIED IDEOGRAPH-3F54	[FB80 BF54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F54, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_023)
{
    // 3F54 0062;	
    // (㽔) CJK UNIFIED IDEOGRAPH-3F54	[FB80 BF54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F54, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_024)
{
    // 3F55 0021;	
    // (㽕) CJK UNIFIED IDEOGRAPH-3F55	[FB80 BF55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F55, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_025)
{
    // 3F55 003F;	
    // (㽕) CJK UNIFIED IDEOGRAPH-3F55	[FB80 BF55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F55, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_026)
{
    // 3F55 0061;	
    // (㽕) CJK UNIFIED IDEOGRAPH-3F55	[FB80 BF55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F55, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_027)
{
    // 3F55 0041;	
    // (㽕) CJK UNIFIED IDEOGRAPH-3F55	[FB80 BF55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F55, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_028)
{
    // 3F55 0062;	
    // (㽕) CJK UNIFIED IDEOGRAPH-3F55	[FB80 BF55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F55, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_029)
{
    // 3F56 0021;	
    // (㽖) CJK UNIFIED IDEOGRAPH-3F56	[FB80 BF56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F56, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_030)
{
    // 3F56 003F;	
    // (㽖) CJK UNIFIED IDEOGRAPH-3F56	[FB80 BF56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F56, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_031)
{
    // 3F56 0061;	
    // (㽖) CJK UNIFIED IDEOGRAPH-3F56	[FB80 BF56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F56, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_032)
{
    // 3F56 0041;	
    // (㽖) CJK UNIFIED IDEOGRAPH-3F56	[FB80 BF56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F56, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_033)
{
    // 3F56 0062;	
    // (㽖) CJK UNIFIED IDEOGRAPH-3F56	[FB80 BF56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F56, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_034)
{
    // 3F57 0021;	
    // (㽗) CJK UNIFIED IDEOGRAPH-3F57	[FB80 BF57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F57, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_035)
{
    // 3F57 003F;	
    // (㽗) CJK UNIFIED IDEOGRAPH-3F57	[FB80 BF57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F57, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_036)
{
    // 3F57 0061;	
    // (㽗) CJK UNIFIED IDEOGRAPH-3F57	[FB80 BF57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F57, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_037)
{
    // 3F57 0041;	
    // (㽗) CJK UNIFIED IDEOGRAPH-3F57	[FB80 BF57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F57, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_038)
{
    // 3F57 0062;	
    // (㽗) CJK UNIFIED IDEOGRAPH-3F57	[FB80 BF57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F57, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_039)
{
    // 3F58 0021;	
    // (㽘) CJK UNIFIED IDEOGRAPH-3F58	[FB80 BF58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F58, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_040)
{
    // 3F58 003F;	
    // (㽘) CJK UNIFIED IDEOGRAPH-3F58	[FB80 BF58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F58, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_041)
{
    // 3F58 0061;	
    // (㽘) CJK UNIFIED IDEOGRAPH-3F58	[FB80 BF58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F58, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_042)
{
    // 3F58 0041;	
    // (㽘) CJK UNIFIED IDEOGRAPH-3F58	[FB80 BF58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F58, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_043)
{
    // 3F58 0062;	
    // (㽘) CJK UNIFIED IDEOGRAPH-3F58	[FB80 BF58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F58, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_044)
{
    // 3F59 0021;	
    // (㽙) CJK UNIFIED IDEOGRAPH-3F59	[FB80 BF59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F59, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_045)
{
    // 3F59 003F;	
    // (㽙) CJK UNIFIED IDEOGRAPH-3F59	[FB80 BF59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F59, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_046)
{
    // 3F59 0061;	
    // (㽙) CJK UNIFIED IDEOGRAPH-3F59	[FB80 BF59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F59, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_047)
{
    // 3F59 0041;	
    // (㽙) CJK UNIFIED IDEOGRAPH-3F59	[FB80 BF59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F59, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_048)
{
    // 3F59 0062;	
    // (㽙) CJK UNIFIED IDEOGRAPH-3F59	[FB80 BF59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F59, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_049)
{
    // 3F5A 0021;	
    // (㽚) CJK UNIFIED IDEOGRAPH-3F5A	[FB80 BF5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_050)
{
    // 3F5A 003F;	
    // (㽚) CJK UNIFIED IDEOGRAPH-3F5A	[FB80 BF5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_051)
{
    // 3F5A 0061;	
    // (㽚) CJK UNIFIED IDEOGRAPH-3F5A	[FB80 BF5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_052)
{
    // 3F5A 0041;	
    // (㽚) CJK UNIFIED IDEOGRAPH-3F5A	[FB80 BF5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F5A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_053)
{
    // 3F5A 0062;	
    // (㽚) CJK UNIFIED IDEOGRAPH-3F5A	[FB80 BF5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_054)
{
    // 3F5B 0021;	
    // (㽛) CJK UNIFIED IDEOGRAPH-3F5B	[FB80 BF5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_055)
{
    // 3F5B 003F;	
    // (㽛) CJK UNIFIED IDEOGRAPH-3F5B	[FB80 BF5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_056)
{
    // 3F5B 0061;	
    // (㽛) CJK UNIFIED IDEOGRAPH-3F5B	[FB80 BF5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_057)
{
    // 3F5B 0041;	
    // (㽛) CJK UNIFIED IDEOGRAPH-3F5B	[FB80 BF5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F5B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_058)
{
    // 3F5B 0062;	
    // (㽛) CJK UNIFIED IDEOGRAPH-3F5B	[FB80 BF5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_059)
{
    // 3F5C 0021;	
    // (㽜) CJK UNIFIED IDEOGRAPH-3F5C	[FB80 BF5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_060)
{
    // 3F5C 003F;	
    // (㽜) CJK UNIFIED IDEOGRAPH-3F5C	[FB80 BF5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_061)
{
    // 3F5C 0061;	
    // (㽜) CJK UNIFIED IDEOGRAPH-3F5C	[FB80 BF5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_062)
{
    // 3F5C 0041;	
    // (㽜) CJK UNIFIED IDEOGRAPH-3F5C	[FB80 BF5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F5C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_063)
{
    // 3F5C 0062;	
    // (㽜) CJK UNIFIED IDEOGRAPH-3F5C	[FB80 BF5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_064)
{
    // 3F5D 0021;	
    // (㽝) CJK UNIFIED IDEOGRAPH-3F5D	[FB80 BF5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_065)
{
    // 3F5D 003F;	
    // (㽝) CJK UNIFIED IDEOGRAPH-3F5D	[FB80 BF5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_066)
{
    // 3F5D 0061;	
    // (㽝) CJK UNIFIED IDEOGRAPH-3F5D	[FB80 BF5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_067)
{
    // 3F5D 0041;	
    // (㽝) CJK UNIFIED IDEOGRAPH-3F5D	[FB80 BF5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F5D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_068)
{
    // 3F5D 0062;	
    // (㽝) CJK UNIFIED IDEOGRAPH-3F5D	[FB80 BF5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_069)
{
    // 3F5E 0021;	
    // (㽞) CJK UNIFIED IDEOGRAPH-3F5E	[FB80 BF5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_070)
{
    // 3F5E 003F;	
    // (㽞) CJK UNIFIED IDEOGRAPH-3F5E	[FB80 BF5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_071)
{
    // 3F5E 0061;	
    // (㽞) CJK UNIFIED IDEOGRAPH-3F5E	[FB80 BF5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_072)
{
    // 3F5E 0041;	
    // (㽞) CJK UNIFIED IDEOGRAPH-3F5E	[FB80 BF5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F5E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_073)
{
    // 3F5E 0062;	
    // (㽞) CJK UNIFIED IDEOGRAPH-3F5E	[FB80 BF5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_074)
{
    // 3F5F 0021;	
    // (㽟) CJK UNIFIED IDEOGRAPH-3F5F	[FB80 BF5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_075)
{
    // 3F5F 003F;	
    // (㽟) CJK UNIFIED IDEOGRAPH-3F5F	[FB80 BF5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_076)
{
    // 3F5F 0061;	
    // (㽟) CJK UNIFIED IDEOGRAPH-3F5F	[FB80 BF5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_077)
{
    // 3F5F 0041;	
    // (㽟) CJK UNIFIED IDEOGRAPH-3F5F	[FB80 BF5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_078)
{
    // 3F5F 0062;	
    // (㽟) CJK UNIFIED IDEOGRAPH-3F5F	[FB80 BF5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_079)
{
    // 3F60 0021;	
    // (㽠) CJK UNIFIED IDEOGRAPH-3F60	[FB80 BF60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F60, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_080)
{
    // 3F60 003F;	
    // (㽠) CJK UNIFIED IDEOGRAPH-3F60	[FB80 BF60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F60, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_081)
{
    // 3F60 0061;	
    // (㽠) CJK UNIFIED IDEOGRAPH-3F60	[FB80 BF60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F60, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_082)
{
    // 3F60 0041;	
    // (㽠) CJK UNIFIED IDEOGRAPH-3F60	[FB80 BF60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F60, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_083)
{
    // 3F60 0062;	
    // (㽠) CJK UNIFIED IDEOGRAPH-3F60	[FB80 BF60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F60, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_084)
{
    // 3F61 0021;	
    // (㽡) CJK UNIFIED IDEOGRAPH-3F61	[FB80 BF61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F61, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_085)
{
    // 3F61 003F;	
    // (㽡) CJK UNIFIED IDEOGRAPH-3F61	[FB80 BF61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_086)
{
    // 3F61 0061;	
    // (㽡) CJK UNIFIED IDEOGRAPH-3F61	[FB80 BF61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_087)
{
    // 3F61 0041;	
    // (㽡) CJK UNIFIED IDEOGRAPH-3F61	[FB80 BF61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_088)
{
    // 3F61 0062;	
    // (㽡) CJK UNIFIED IDEOGRAPH-3F61	[FB80 BF61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_089)
{
    // 3F62 0021;	
    // (㽢) CJK UNIFIED IDEOGRAPH-3F62	[FB80 BF62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_090)
{
    // 3F62 003F;	
    // (㽢) CJK UNIFIED IDEOGRAPH-3F62	[FB80 BF62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_091)
{
    // 3F62 0061;	
    // (㽢) CJK UNIFIED IDEOGRAPH-3F62	[FB80 BF62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_092)
{
    // 3F62 0041;	
    // (㽢) CJK UNIFIED IDEOGRAPH-3F62	[FB80 BF62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_093)
{
    // 3F62 0062;	
    // (㽢) CJK UNIFIED IDEOGRAPH-3F62	[FB80 BF62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_094)
{
    // 3F63 0021;	
    // (㽣) CJK UNIFIED IDEOGRAPH-3F63	[FB80 BF63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_095)
{
    // 3F63 003F;	
    // (㽣) CJK UNIFIED IDEOGRAPH-3F63	[FB80 BF63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_096)
{
    // 3F63 0061;	
    // (㽣) CJK UNIFIED IDEOGRAPH-3F63	[FB80 BF63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_097)
{
    // 3F63 0041;	
    // (㽣) CJK UNIFIED IDEOGRAPH-3F63	[FB80 BF63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_098)
{
    // 3F63 0062;	
    // (㽣) CJK UNIFIED IDEOGRAPH-3F63	[FB80 BF63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_099)
{
    // 3F64 0021;	
    // (㽤) CJK UNIFIED IDEOGRAPH-3F64	[FB80 BF64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_100)
{
    // 3F64 003F;	
    // (㽤) CJK UNIFIED IDEOGRAPH-3F64	[FB80 BF64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_101)
{
    // 3F64 0061;	
    // (㽤) CJK UNIFIED IDEOGRAPH-3F64	[FB80 BF64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_102)
{
    // 3F64 0041;	
    // (㽤) CJK UNIFIED IDEOGRAPH-3F64	[FB80 BF64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_103)
{
    // 3F64 0062;	
    // (㽤) CJK UNIFIED IDEOGRAPH-3F64	[FB80 BF64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_104)
{
    // 3F65 0021;	
    // (㽥) CJK UNIFIED IDEOGRAPH-3F65	[FB80 BF65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_105)
{
    // 3F65 003F;	
    // (㽥) CJK UNIFIED IDEOGRAPH-3F65	[FB80 BF65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_106)
{
    // 3F65 0061;	
    // (㽥) CJK UNIFIED IDEOGRAPH-3F65	[FB80 BF65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_107)
{
    // 3F65 0041;	
    // (㽥) CJK UNIFIED IDEOGRAPH-3F65	[FB80 BF65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_108)
{
    // 3F65 0062;	
    // (㽥) CJK UNIFIED IDEOGRAPH-3F65	[FB80 BF65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_109)
{
    // 3F66 0021;	
    // (㽦) CJK UNIFIED IDEOGRAPH-3F66	[FB80 BF66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_110)
{
    // 3F66 003F;	
    // (㽦) CJK UNIFIED IDEOGRAPH-3F66	[FB80 BF66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_111)
{
    // 3F66 0061;	
    // (㽦) CJK UNIFIED IDEOGRAPH-3F66	[FB80 BF66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_112)
{
    // 3F66 0041;	
    // (㽦) CJK UNIFIED IDEOGRAPH-3F66	[FB80 BF66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_113)
{
    // 3F66 0062;	
    // (㽦) CJK UNIFIED IDEOGRAPH-3F66	[FB80 BF66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_114)
{
    // 3F67 0021;	
    // (㽧) CJK UNIFIED IDEOGRAPH-3F67	[FB80 BF67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_115)
{
    // 3F67 003F;	
    // (㽧) CJK UNIFIED IDEOGRAPH-3F67	[FB80 BF67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_116)
{
    // 3F67 0061;	
    // (㽧) CJK UNIFIED IDEOGRAPH-3F67	[FB80 BF67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_117)
{
    // 3F67 0041;	
    // (㽧) CJK UNIFIED IDEOGRAPH-3F67	[FB80 BF67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_118)
{
    // 3F67 0062;	
    // (㽧) CJK UNIFIED IDEOGRAPH-3F67	[FB80 BF67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_119)
{
    // 3F68 0021;	
    // (㽨) CJK UNIFIED IDEOGRAPH-3F68	[FB80 BF68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_120)
{
    // 3F68 003F;	
    // (㽨) CJK UNIFIED IDEOGRAPH-3F68	[FB80 BF68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_121)
{
    // 3F68 0061;	
    // (㽨) CJK UNIFIED IDEOGRAPH-3F68	[FB80 BF68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_122)
{
    // 3F68 0041;	
    // (㽨) CJK UNIFIED IDEOGRAPH-3F68	[FB80 BF68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_123)
{
    // 3F68 0062;	
    // (㽨) CJK UNIFIED IDEOGRAPH-3F68	[FB80 BF68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_124)
{
    // 3F69 0021;	
    // (㽩) CJK UNIFIED IDEOGRAPH-3F69	[FB80 BF69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_125)
{
    // 3F69 003F;	
    // (㽩) CJK UNIFIED IDEOGRAPH-3F69	[FB80 BF69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_126)
{
    // 3F69 0061;	
    // (㽩) CJK UNIFIED IDEOGRAPH-3F69	[FB80 BF69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_127)
{
    // 3F69 0041;	
    // (㽩) CJK UNIFIED IDEOGRAPH-3F69	[FB80 BF69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_128)
{
    // 3F69 0062;	
    // (㽩) CJK UNIFIED IDEOGRAPH-3F69	[FB80 BF69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_129)
{
    // 3F6A 0021;	
    // (㽪) CJK UNIFIED IDEOGRAPH-3F6A	[FB80 BF6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_130)
{
    // 3F6A 003F;	
    // (㽪) CJK UNIFIED IDEOGRAPH-3F6A	[FB80 BF6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_131)
{
    // 3F6A 0061;	
    // (㽪) CJK UNIFIED IDEOGRAPH-3F6A	[FB80 BF6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_132)
{
    // 3F6A 0041;	
    // (㽪) CJK UNIFIED IDEOGRAPH-3F6A	[FB80 BF6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_133)
{
    // 3F6A 0062;	
    // (㽪) CJK UNIFIED IDEOGRAPH-3F6A	[FB80 BF6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_134)
{
    // 3F6B 0021;	
    // (㽫) CJK UNIFIED IDEOGRAPH-3F6B	[FB80 BF6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_135)
{
    // 3F6B 003F;	
    // (㽫) CJK UNIFIED IDEOGRAPH-3F6B	[FB80 BF6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_136)
{
    // 3F6B 0061;	
    // (㽫) CJK UNIFIED IDEOGRAPH-3F6B	[FB80 BF6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_137)
{
    // 3F6B 0041;	
    // (㽫) CJK UNIFIED IDEOGRAPH-3F6B	[FB80 BF6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_138)
{
    // 3F6B 0062;	
    // (㽫) CJK UNIFIED IDEOGRAPH-3F6B	[FB80 BF6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_139)
{
    // 3F6C 0021;	
    // (㽬) CJK UNIFIED IDEOGRAPH-3F6C	[FB80 BF6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_140)
{
    // 3F6C 003F;	
    // (㽬) CJK UNIFIED IDEOGRAPH-3F6C	[FB80 BF6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_141)
{
    // 3F6C 0061;	
    // (㽬) CJK UNIFIED IDEOGRAPH-3F6C	[FB80 BF6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_142)
{
    // 3F6C 0041;	
    // (㽬) CJK UNIFIED IDEOGRAPH-3F6C	[FB80 BF6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_143)
{
    // 3F6C 0062;	
    // (㽬) CJK UNIFIED IDEOGRAPH-3F6C	[FB80 BF6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_144)
{
    // 3F6D 0021;	
    // (㽭) CJK UNIFIED IDEOGRAPH-3F6D	[FB80 BF6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_145)
{
    // 3F6D 003F;	
    // (㽭) CJK UNIFIED IDEOGRAPH-3F6D	[FB80 BF6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_146)
{
    // 3F6D 0061;	
    // (㽭) CJK UNIFIED IDEOGRAPH-3F6D	[FB80 BF6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_147)
{
    // 3F6D 0041;	
    // (㽭) CJK UNIFIED IDEOGRAPH-3F6D	[FB80 BF6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_148)
{
    // 3F6D 0062;	
    // (㽭) CJK UNIFIED IDEOGRAPH-3F6D	[FB80 BF6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_149)
{
    // 3F6E 0021;	
    // (㽮) CJK UNIFIED IDEOGRAPH-3F6E	[FB80 BF6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_150)
{
    // 3F6E 003F;	
    // (㽮) CJK UNIFIED IDEOGRAPH-3F6E	[FB80 BF6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_151)
{
    // 3F6E 0061;	
    // (㽮) CJK UNIFIED IDEOGRAPH-3F6E	[FB80 BF6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_152)
{
    // 3F6E 0041;	
    // (㽮) CJK UNIFIED IDEOGRAPH-3F6E	[FB80 BF6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_153)
{
    // 3F6E 0062;	
    // (㽮) CJK UNIFIED IDEOGRAPH-3F6E	[FB80 BF6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_154)
{
    // 3F6F 0021;	
    // (㽯) CJK UNIFIED IDEOGRAPH-3F6F	[FB80 BF6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_155)
{
    // 3F6F 003F;	
    // (㽯) CJK UNIFIED IDEOGRAPH-3F6F	[FB80 BF6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_156)
{
    // 3F6F 0061;	
    // (㽯) CJK UNIFIED IDEOGRAPH-3F6F	[FB80 BF6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_157)
{
    // 3F6F 0041;	
    // (㽯) CJK UNIFIED IDEOGRAPH-3F6F	[FB80 BF6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_158)
{
    // 3F6F 0062;	
    // (㽯) CJK UNIFIED IDEOGRAPH-3F6F	[FB80 BF6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_159)
{
    // 3F70 0021;	
    // (㽰) CJK UNIFIED IDEOGRAPH-3F70	[FB80 BF70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_160)
{
    // 3F70 003F;	
    // (㽰) CJK UNIFIED IDEOGRAPH-3F70	[FB80 BF70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_161)
{
    // 3F70 0061;	
    // (㽰) CJK UNIFIED IDEOGRAPH-3F70	[FB80 BF70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_162)
{
    // 3F70 0041;	
    // (㽰) CJK UNIFIED IDEOGRAPH-3F70	[FB80 BF70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_163)
{
    // 3F70 0062;	
    // (㽰) CJK UNIFIED IDEOGRAPH-3F70	[FB80 BF70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_164)
{
    // 3F71 0021;	
    // (㽱) CJK UNIFIED IDEOGRAPH-3F71	[FB80 BF71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_165)
{
    // 3F71 003F;	
    // (㽱) CJK UNIFIED IDEOGRAPH-3F71	[FB80 BF71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_166)
{
    // 3F71 0061;	
    // (㽱) CJK UNIFIED IDEOGRAPH-3F71	[FB80 BF71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_167)
{
    // 3F71 0041;	
    // (㽱) CJK UNIFIED IDEOGRAPH-3F71	[FB80 BF71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_168)
{
    // 3F71 0062;	
    // (㽱) CJK UNIFIED IDEOGRAPH-3F71	[FB80 BF71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_169)
{
    // 3F72 0021;	
    // (㽲) CJK UNIFIED IDEOGRAPH-3F72	[FB80 BF72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_170)
{
    // 3F72 003F;	
    // (㽲) CJK UNIFIED IDEOGRAPH-3F72	[FB80 BF72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_171)
{
    // 3F72 0061;	
    // (㽲) CJK UNIFIED IDEOGRAPH-3F72	[FB80 BF72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_172)
{
    // 3F72 0041;	
    // (㽲) CJK UNIFIED IDEOGRAPH-3F72	[FB80 BF72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_173)
{
    // 3F72 0062;	
    // (㽲) CJK UNIFIED IDEOGRAPH-3F72	[FB80 BF72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_174)
{
    // 3F73 0021;	
    // (㽳) CJK UNIFIED IDEOGRAPH-3F73	[FB80 BF73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_175)
{
    // 3F73 003F;	
    // (㽳) CJK UNIFIED IDEOGRAPH-3F73	[FB80 BF73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_176)
{
    // 3F73 0061;	
    // (㽳) CJK UNIFIED IDEOGRAPH-3F73	[FB80 BF73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_177)
{
    // 3F73 0041;	
    // (㽳) CJK UNIFIED IDEOGRAPH-3F73	[FB80 BF73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_178)
{
    // 3F73 0062;	
    // (㽳) CJK UNIFIED IDEOGRAPH-3F73	[FB80 BF73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_179)
{
    // 3F74 0021;	
    // (㽴) CJK UNIFIED IDEOGRAPH-3F74	[FB80 BF74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_180)
{
    // 3F74 003F;	
    // (㽴) CJK UNIFIED IDEOGRAPH-3F74	[FB80 BF74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_181)
{
    // 3F74 0061;	
    // (㽴) CJK UNIFIED IDEOGRAPH-3F74	[FB80 BF74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_182)
{
    // 3F74 0041;	
    // (㽴) CJK UNIFIED IDEOGRAPH-3F74	[FB80 BF74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_183)
{
    // 3F74 0062;	
    // (㽴) CJK UNIFIED IDEOGRAPH-3F74	[FB80 BF74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_184)
{
    // 3F75 0021;	
    // (㽵) CJK UNIFIED IDEOGRAPH-3F75	[FB80 BF75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_185)
{
    // 3F75 003F;	
    // (㽵) CJK UNIFIED IDEOGRAPH-3F75	[FB80 BF75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_186)
{
    // 3F75 0061;	
    // (㽵) CJK UNIFIED IDEOGRAPH-3F75	[FB80 BF75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_187)
{
    // 3F75 0041;	
    // (㽵) CJK UNIFIED IDEOGRAPH-3F75	[FB80 BF75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_188)
{
    // 3F75 0062;	
    // (㽵) CJK UNIFIED IDEOGRAPH-3F75	[FB80 BF75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_189)
{
    // 3F76 0021;	
    // (㽶) CJK UNIFIED IDEOGRAPH-3F76	[FB80 BF76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_190)
{
    // 3F76 003F;	
    // (㽶) CJK UNIFIED IDEOGRAPH-3F76	[FB80 BF76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_191)
{
    // 3F76 0061;	
    // (㽶) CJK UNIFIED IDEOGRAPH-3F76	[FB80 BF76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_192)
{
    // 3F76 0041;	
    // (㽶) CJK UNIFIED IDEOGRAPH-3F76	[FB80 BF76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_193)
{
    // 3F76 0062;	
    // (㽶) CJK UNIFIED IDEOGRAPH-3F76	[FB80 BF76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_194)
{
    // 3F77 0021;	
    // (㽷) CJK UNIFIED IDEOGRAPH-3F77	[FB80 BF77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_195)
{
    // 3F77 003F;	
    // (㽷) CJK UNIFIED IDEOGRAPH-3F77	[FB80 BF77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_196)
{
    // 3F77 0061;	
    // (㽷) CJK UNIFIED IDEOGRAPH-3F77	[FB80 BF77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_197)
{
    // 3F77 0041;	
    // (㽷) CJK UNIFIED IDEOGRAPH-3F77	[FB80 BF77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_198)
{
    // 3F77 0062;	
    // (㽷) CJK UNIFIED IDEOGRAPH-3F77	[FB80 BF77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_199)
{
    // 3F78 0021;	
    // (㽸) CJK UNIFIED IDEOGRAPH-3F78	[FB80 BF78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_200)
{
    // 3F78 003F;	
    // (㽸) CJK UNIFIED IDEOGRAPH-3F78	[FB80 BF78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_201)
{
    // 3F78 0061;	
    // (㽸) CJK UNIFIED IDEOGRAPH-3F78	[FB80 BF78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_202)
{
    // 3F78 0041;	
    // (㽸) CJK UNIFIED IDEOGRAPH-3F78	[FB80 BF78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_203)
{
    // 3F78 0062;	
    // (㽸) CJK UNIFIED IDEOGRAPH-3F78	[FB80 BF78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_204)
{
    // 3F79 0021;	
    // (㽹) CJK UNIFIED IDEOGRAPH-3F79	[FB80 BF79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_205)
{
    // 3F79 003F;	
    // (㽹) CJK UNIFIED IDEOGRAPH-3F79	[FB80 BF79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_206)
{
    // 3F79 0061;	
    // (㽹) CJK UNIFIED IDEOGRAPH-3F79	[FB80 BF79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_207)
{
    // 3F79 0041;	
    // (㽹) CJK UNIFIED IDEOGRAPH-3F79	[FB80 BF79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_208)
{
    // 3F79 0062;	
    // (㽹) CJK UNIFIED IDEOGRAPH-3F79	[FB80 BF79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_209)
{
    // 3F7A 0021;	
    // (㽺) CJK UNIFIED IDEOGRAPH-3F7A	[FB80 BF7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_210)
{
    // 3F7A 003F;	
    // (㽺) CJK UNIFIED IDEOGRAPH-3F7A	[FB80 BF7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_211)
{
    // 3F7A 0061;	
    // (㽺) CJK UNIFIED IDEOGRAPH-3F7A	[FB80 BF7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_212)
{
    // 3F7A 0041;	
    // (㽺) CJK UNIFIED IDEOGRAPH-3F7A	[FB80 BF7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_213)
{
    // 3F7A 0062;	
    // (㽺) CJK UNIFIED IDEOGRAPH-3F7A	[FB80 BF7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_214)
{
    // 3F7B 0021;	
    // (㽻) CJK UNIFIED IDEOGRAPH-3F7B	[FB80 BF7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_215)
{
    // 3F7B 003F;	
    // (㽻) CJK UNIFIED IDEOGRAPH-3F7B	[FB80 BF7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_216)
{
    // 3F7B 0061;	
    // (㽻) CJK UNIFIED IDEOGRAPH-3F7B	[FB80 BF7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_217)
{
    // 3F7B 0041;	
    // (㽻) CJK UNIFIED IDEOGRAPH-3F7B	[FB80 BF7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_218)
{
    // 3F7B 0062;	
    // (㽻) CJK UNIFIED IDEOGRAPH-3F7B	[FB80 BF7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_219)
{
    // 3F7C 0021;	
    // (㽼) CJK UNIFIED IDEOGRAPH-3F7C	[FB80 BF7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_220)
{
    // 3F7C 003F;	
    // (㽼) CJK UNIFIED IDEOGRAPH-3F7C	[FB80 BF7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_221)
{
    // 3F7C 0061;	
    // (㽼) CJK UNIFIED IDEOGRAPH-3F7C	[FB80 BF7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_222)
{
    // 3F7C 0041;	
    // (㽼) CJK UNIFIED IDEOGRAPH-3F7C	[FB80 BF7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_223)
{
    // 3F7C 0062;	
    // (㽼) CJK UNIFIED IDEOGRAPH-3F7C	[FB80 BF7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_224)
{
    // 3F7D 0021;	
    // (㽽) CJK UNIFIED IDEOGRAPH-3F7D	[FB80 BF7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_225)
{
    // 3F7D 003F;	
    // (㽽) CJK UNIFIED IDEOGRAPH-3F7D	[FB80 BF7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_226)
{
    // 3F7D 0061;	
    // (㽽) CJK UNIFIED IDEOGRAPH-3F7D	[FB80 BF7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_227)
{
    // 3F7D 0041;	
    // (㽽) CJK UNIFIED IDEOGRAPH-3F7D	[FB80 BF7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_228)
{
    // 3F7D 0062;	
    // (㽽) CJK UNIFIED IDEOGRAPH-3F7D	[FB80 BF7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_229)
{
    // 3F7E 0021;	
    // (㽾) CJK UNIFIED IDEOGRAPH-3F7E	[FB80 BF7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_230)
{
    // 3F7E 003F;	
    // (㽾) CJK UNIFIED IDEOGRAPH-3F7E	[FB80 BF7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_231)
{
    // 3F7E 0061;	
    // (㽾) CJK UNIFIED IDEOGRAPH-3F7E	[FB80 BF7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_232)
{
    // 3F7E 0041;	
    // (㽾) CJK UNIFIED IDEOGRAPH-3F7E	[FB80 BF7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_233)
{
    // 3F7E 0062;	
    // (㽾) CJK UNIFIED IDEOGRAPH-3F7E	[FB80 BF7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_234)
{
    // 3F7F 0021;	
    // (㽿) CJK UNIFIED IDEOGRAPH-3F7F	[FB80 BF7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_235)
{
    // 3F7F 003F;	
    // (㽿) CJK UNIFIED IDEOGRAPH-3F7F	[FB80 BF7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_236)
{
    // 3F7F 0061;	
    // (㽿) CJK UNIFIED IDEOGRAPH-3F7F	[FB80 BF7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_237)
{
    // 3F7F 0041;	
    // (㽿) CJK UNIFIED IDEOGRAPH-3F7F	[FB80 BF7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_238)
{
    // 3F7F 0062;	
    // (㽿) CJK UNIFIED IDEOGRAPH-3F7F	[FB80 BF7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_239)
{
    // 3F80 0021;	
    // (㾀) CJK UNIFIED IDEOGRAPH-3F80	[FB80 BF80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_240)
{
    // 3F80 003F;	
    // (㾀) CJK UNIFIED IDEOGRAPH-3F80	[FB80 BF80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_241)
{
    // 3F80 0061;	
    // (㾀) CJK UNIFIED IDEOGRAPH-3F80	[FB80 BF80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_242)
{
    // 3F80 0041;	
    // (㾀) CJK UNIFIED IDEOGRAPH-3F80	[FB80 BF80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_243)
{
    // 3F80 0062;	
    // (㾀) CJK UNIFIED IDEOGRAPH-3F80	[FB80 BF80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_244)
{
    // 3F81 0021;	
    // (㾁) CJK UNIFIED IDEOGRAPH-3F81	[FB80 BF81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_245)
{
    // 3F81 003F;	
    // (㾁) CJK UNIFIED IDEOGRAPH-3F81	[FB80 BF81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_246)
{
    // 3F81 0061;	
    // (㾁) CJK UNIFIED IDEOGRAPH-3F81	[FB80 BF81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_247)
{
    // 3F81 0041;	
    // (㾁) CJK UNIFIED IDEOGRAPH-3F81	[FB80 BF81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_248)
{
    // 3F81 0062;	
    // (㾁) CJK UNIFIED IDEOGRAPH-3F81	[FB80 BF81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_249)
{
    // 3F82 0021;	
    // (㾂) CJK UNIFIED IDEOGRAPH-3F82	[FB80 BF82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_250)
{
    // 3F82 003F;	
    // (㾂) CJK UNIFIED IDEOGRAPH-3F82	[FB80 BF82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_251)
{
    // 3F82 0061;	
    // (㾂) CJK UNIFIED IDEOGRAPH-3F82	[FB80 BF82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_252)
{
    // 3F82 0041;	
    // (㾂) CJK UNIFIED IDEOGRAPH-3F82	[FB80 BF82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_253)
{
    // 3F82 0062;	
    // (㾂) CJK UNIFIED IDEOGRAPH-3F82	[FB80 BF82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_254)
{
    // 3F83 0021;	
    // (㾃) CJK UNIFIED IDEOGRAPH-3F83	[FB80 BF83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_255)
{
    // 3F83 003F;	
    // (㾃) CJK UNIFIED IDEOGRAPH-3F83	[FB80 BF83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_256)
{
    // 3F83 0061;	
    // (㾃) CJK UNIFIED IDEOGRAPH-3F83	[FB80 BF83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_257)
{
    // 3F83 0041;	
    // (㾃) CJK UNIFIED IDEOGRAPH-3F83	[FB80 BF83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_258)
{
    // 3F83 0062;	
    // (㾃) CJK UNIFIED IDEOGRAPH-3F83	[FB80 BF83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_259)
{
    // 3F84 0021;	
    // (㾄) CJK UNIFIED IDEOGRAPH-3F84	[FB80 BF84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_260)
{
    // 3F84 003F;	
    // (㾄) CJK UNIFIED IDEOGRAPH-3F84	[FB80 BF84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_261)
{
    // 3F84 0061;	
    // (㾄) CJK UNIFIED IDEOGRAPH-3F84	[FB80 BF84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_262)
{
    // 3F84 0041;	
    // (㾄) CJK UNIFIED IDEOGRAPH-3F84	[FB80 BF84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_263)
{
    // 3F84 0062;	
    // (㾄) CJK UNIFIED IDEOGRAPH-3F84	[FB80 BF84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_264)
{
    // 3F85 0021;	
    // (㾅) CJK UNIFIED IDEOGRAPH-3F85	[FB80 BF85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_265)
{
    // 3F85 003F;	
    // (㾅) CJK UNIFIED IDEOGRAPH-3F85	[FB80 BF85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_266)
{
    // 3F85 0061;	
    // (㾅) CJK UNIFIED IDEOGRAPH-3F85	[FB80 BF85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_267)
{
    // 3F85 0041;	
    // (㾅) CJK UNIFIED IDEOGRAPH-3F85	[FB80 BF85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_268)
{
    // 3F85 0062;	
    // (㾅) CJK UNIFIED IDEOGRAPH-3F85	[FB80 BF85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_269)
{
    // 3F86 0021;	
    // (㾆) CJK UNIFIED IDEOGRAPH-3F86	[FB80 BF86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_270)
{
    // 3F86 003F;	
    // (㾆) CJK UNIFIED IDEOGRAPH-3F86	[FB80 BF86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_271)
{
    // 3F86 0061;	
    // (㾆) CJK UNIFIED IDEOGRAPH-3F86	[FB80 BF86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_272)
{
    // 3F86 0041;	
    // (㾆) CJK UNIFIED IDEOGRAPH-3F86	[FB80 BF86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_273)
{
    // 3F86 0062;	
    // (㾆) CJK UNIFIED IDEOGRAPH-3F86	[FB80 BF86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_274)
{
    // 3F87 0021;	
    // (㾇) CJK UNIFIED IDEOGRAPH-3F87	[FB80 BF87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_275)
{
    // 3F87 003F;	
    // (㾇) CJK UNIFIED IDEOGRAPH-3F87	[FB80 BF87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_276)
{
    // 3F87 0061;	
    // (㾇) CJK UNIFIED IDEOGRAPH-3F87	[FB80 BF87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_277)
{
    // 3F87 0041;	
    // (㾇) CJK UNIFIED IDEOGRAPH-3F87	[FB80 BF87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_278)
{
    // 3F87 0062;	
    // (㾇) CJK UNIFIED IDEOGRAPH-3F87	[FB80 BF87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_279)
{
    // 3F88 0021;	
    // (㾈) CJK UNIFIED IDEOGRAPH-3F88	[FB80 BF88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_280)
{
    // 3F88 003F;	
    // (㾈) CJK UNIFIED IDEOGRAPH-3F88	[FB80 BF88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_281)
{
    // 3F88 0061;	
    // (㾈) CJK UNIFIED IDEOGRAPH-3F88	[FB80 BF88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_282)
{
    // 3F88 0041;	
    // (㾈) CJK UNIFIED IDEOGRAPH-3F88	[FB80 BF88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_283)
{
    // 3F88 0062;	
    // (㾈) CJK UNIFIED IDEOGRAPH-3F88	[FB80 BF88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_284)
{
    // 3F89 0021;	
    // (㾉) CJK UNIFIED IDEOGRAPH-3F89	[FB80 BF89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_285)
{
    // 3F89 003F;	
    // (㾉) CJK UNIFIED IDEOGRAPH-3F89	[FB80 BF89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_286)
{
    // 3F89 0061;	
    // (㾉) CJK UNIFIED IDEOGRAPH-3F89	[FB80 BF89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_287)
{
    // 3F89 0041;	
    // (㾉) CJK UNIFIED IDEOGRAPH-3F89	[FB80 BF89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_288)
{
    // 3F89 0062;	
    // (㾉) CJK UNIFIED IDEOGRAPH-3F89	[FB80 BF89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_289)
{
    // 3F8A 0021;	
    // (㾊) CJK UNIFIED IDEOGRAPH-3F8A	[FB80 BF8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_290)
{
    // 3F8A 003F;	
    // (㾊) CJK UNIFIED IDEOGRAPH-3F8A	[FB80 BF8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_291)
{
    // 3F8A 0061;	
    // (㾊) CJK UNIFIED IDEOGRAPH-3F8A	[FB80 BF8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_292)
{
    // 3F8A 0041;	
    // (㾊) CJK UNIFIED IDEOGRAPH-3F8A	[FB80 BF8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_293)
{
    // 3F8A 0062;	
    // (㾊) CJK UNIFIED IDEOGRAPH-3F8A	[FB80 BF8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_294)
{
    // 3F8B 0021;	
    // (㾋) CJK UNIFIED IDEOGRAPH-3F8B	[FB80 BF8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_295)
{
    // 3F8B 003F;	
    // (㾋) CJK UNIFIED IDEOGRAPH-3F8B	[FB80 BF8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_296)
{
    // 3F8B 0061;	
    // (㾋) CJK UNIFIED IDEOGRAPH-3F8B	[FB80 BF8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_297)
{
    // 3F8B 0041;	
    // (㾋) CJK UNIFIED IDEOGRAPH-3F8B	[FB80 BF8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_298)
{
    // 3F8B 0062;	
    // (㾋) CJK UNIFIED IDEOGRAPH-3F8B	[FB80 BF8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_299)
{
    // 3F8C 0021;	
    // (㾌) CJK UNIFIED IDEOGRAPH-3F8C	[FB80 BF8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_300)
{
    // 3F8C 003F;	
    // (㾌) CJK UNIFIED IDEOGRAPH-3F8C	[FB80 BF8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_301)
{
    // 3F8C 0061;	
    // (㾌) CJK UNIFIED IDEOGRAPH-3F8C	[FB80 BF8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_302)
{
    // 3F8C 0041;	
    // (㾌) CJK UNIFIED IDEOGRAPH-3F8C	[FB80 BF8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_303)
{
    // 3F8C 0062;	
    // (㾌) CJK UNIFIED IDEOGRAPH-3F8C	[FB80 BF8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_304)
{
    // 3F8D 0021;	
    // (㾍) CJK UNIFIED IDEOGRAPH-3F8D	[FB80 BF8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_305)
{
    // 3F8D 003F;	
    // (㾍) CJK UNIFIED IDEOGRAPH-3F8D	[FB80 BF8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_306)
{
    // 3F8D 0061;	
    // (㾍) CJK UNIFIED IDEOGRAPH-3F8D	[FB80 BF8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_307)
{
    // 3F8D 0041;	
    // (㾍) CJK UNIFIED IDEOGRAPH-3F8D	[FB80 BF8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_308)
{
    // 3F8D 0062;	
    // (㾍) CJK UNIFIED IDEOGRAPH-3F8D	[FB80 BF8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_309)
{
    // 3F8E 0021;	
    // (㾎) CJK UNIFIED IDEOGRAPH-3F8E	[FB80 BF8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_310)
{
    // 3F8E 003F;	
    // (㾎) CJK UNIFIED IDEOGRAPH-3F8E	[FB80 BF8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_311)
{
    // 3F8E 0061;	
    // (㾎) CJK UNIFIED IDEOGRAPH-3F8E	[FB80 BF8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_312)
{
    // 3F8E 0041;	
    // (㾎) CJK UNIFIED IDEOGRAPH-3F8E	[FB80 BF8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_313)
{
    // 3F8E 0062;	
    // (㾎) CJK UNIFIED IDEOGRAPH-3F8E	[FB80 BF8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_314)
{
    // 3F8F 0021;	
    // (㾏) CJK UNIFIED IDEOGRAPH-3F8F	[FB80 BF8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_315)
{
    // 3F8F 003F;	
    // (㾏) CJK UNIFIED IDEOGRAPH-3F8F	[FB80 BF8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_316)
{
    // 3F8F 0061;	
    // (㾏) CJK UNIFIED IDEOGRAPH-3F8F	[FB80 BF8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_317)
{
    // 3F8F 0041;	
    // (㾏) CJK UNIFIED IDEOGRAPH-3F8F	[FB80 BF8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_318)
{
    // 3F8F 0062;	
    // (㾏) CJK UNIFIED IDEOGRAPH-3F8F	[FB80 BF8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_319)
{
    // 3F90 0021;	
    // (㾐) CJK UNIFIED IDEOGRAPH-3F90	[FB80 BF90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_320)
{
    // 3F90 003F;	
    // (㾐) CJK UNIFIED IDEOGRAPH-3F90	[FB80 BF90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_321)
{
    // 3F90 0061;	
    // (㾐) CJK UNIFIED IDEOGRAPH-3F90	[FB80 BF90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_322)
{
    // 3F90 0041;	
    // (㾐) CJK UNIFIED IDEOGRAPH-3F90	[FB80 BF90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_323)
{
    // 3F90 0062;	
    // (㾐) CJK UNIFIED IDEOGRAPH-3F90	[FB80 BF90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_324)
{
    // 3F91 0021;	
    // (㾑) CJK UNIFIED IDEOGRAPH-3F91	[FB80 BF91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_325)
{
    // 3F91 003F;	
    // (㾑) CJK UNIFIED IDEOGRAPH-3F91	[FB80 BF91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_326)
{
    // 3F91 0061;	
    // (㾑) CJK UNIFIED IDEOGRAPH-3F91	[FB80 BF91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_327)
{
    // 3F91 0041;	
    // (㾑) CJK UNIFIED IDEOGRAPH-3F91	[FB80 BF91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_328)
{
    // 3F91 0062;	
    // (㾑) CJK UNIFIED IDEOGRAPH-3F91	[FB80 BF91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_329)
{
    // 3F92 0021;	
    // (㾒) CJK UNIFIED IDEOGRAPH-3F92	[FB80 BF92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_330)
{
    // 3F92 003F;	
    // (㾒) CJK UNIFIED IDEOGRAPH-3F92	[FB80 BF92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_331)
{
    // 3F92 0061;	
    // (㾒) CJK UNIFIED IDEOGRAPH-3F92	[FB80 BF92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_332)
{
    // 3F92 0041;	
    // (㾒) CJK UNIFIED IDEOGRAPH-3F92	[FB80 BF92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_333)
{
    // 3F92 0062;	
    // (㾒) CJK UNIFIED IDEOGRAPH-3F92	[FB80 BF92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_334)
{
    // 3F93 0021;	
    // (㾓) CJK UNIFIED IDEOGRAPH-3F93	[FB80 BF93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_335)
{
    // 3F93 003F;	
    // (㾓) CJK UNIFIED IDEOGRAPH-3F93	[FB80 BF93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_336)
{
    // 3F93 0061;	
    // (㾓) CJK UNIFIED IDEOGRAPH-3F93	[FB80 BF93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_337)
{
    // 3F93 0041;	
    // (㾓) CJK UNIFIED IDEOGRAPH-3F93	[FB80 BF93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_338)
{
    // 3F93 0062;	
    // (㾓) CJK UNIFIED IDEOGRAPH-3F93	[FB80 BF93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_339)
{
    // 3F94 0021;	
    // (㾔) CJK UNIFIED IDEOGRAPH-3F94	[FB80 BF94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_340)
{
    // 3F94 003F;	
    // (㾔) CJK UNIFIED IDEOGRAPH-3F94	[FB80 BF94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_341)
{
    // 3F94 0061;	
    // (㾔) CJK UNIFIED IDEOGRAPH-3F94	[FB80 BF94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_342)
{
    // 3F94 0041;	
    // (㾔) CJK UNIFIED IDEOGRAPH-3F94	[FB80 BF94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_343)
{
    // 3F94 0062;	
    // (㾔) CJK UNIFIED IDEOGRAPH-3F94	[FB80 BF94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_344)
{
    // 3F95 0021;	
    // (㾕) CJK UNIFIED IDEOGRAPH-3F95	[FB80 BF95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_345)
{
    // 3F95 003F;	
    // (㾕) CJK UNIFIED IDEOGRAPH-3F95	[FB80 BF95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_346)
{
    // 3F95 0061;	
    // (㾕) CJK UNIFIED IDEOGRAPH-3F95	[FB80 BF95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_347)
{
    // 3F95 0041;	
    // (㾕) CJK UNIFIED IDEOGRAPH-3F95	[FB80 BF95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_348)
{
    // 3F95 0062;	
    // (㾕) CJK UNIFIED IDEOGRAPH-3F95	[FB80 BF95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_349)
{
    // 3F96 0021;	
    // (㾖) CJK UNIFIED IDEOGRAPH-3F96	[FB80 BF96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_350)
{
    // 3F96 003F;	
    // (㾖) CJK UNIFIED IDEOGRAPH-3F96	[FB80 BF96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_351)
{
    // 3F96 0061;	
    // (㾖) CJK UNIFIED IDEOGRAPH-3F96	[FB80 BF96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_352)
{
    // 3F96 0041;	
    // (㾖) CJK UNIFIED IDEOGRAPH-3F96	[FB80 BF96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_353)
{
    // 3F96 0062;	
    // (㾖) CJK UNIFIED IDEOGRAPH-3F96	[FB80 BF96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_354)
{
    // 3F97 0021;	
    // (㾗) CJK UNIFIED IDEOGRAPH-3F97	[FB80 BF97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_355)
{
    // 3F97 003F;	
    // (㾗) CJK UNIFIED IDEOGRAPH-3F97	[FB80 BF97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_356)
{
    // 3F97 0061;	
    // (㾗) CJK UNIFIED IDEOGRAPH-3F97	[FB80 BF97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_357)
{
    // 3F97 0041;	
    // (㾗) CJK UNIFIED IDEOGRAPH-3F97	[FB80 BF97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_358)
{
    // 3F97 0062;	
    // (㾗) CJK UNIFIED IDEOGRAPH-3F97	[FB80 BF97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_359)
{
    // 3F98 0021;	
    // (㾘) CJK UNIFIED IDEOGRAPH-3F98	[FB80 BF98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_360)
{
    // 3F98 003F;	
    // (㾘) CJK UNIFIED IDEOGRAPH-3F98	[FB80 BF98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_361)
{
    // 3F98 0061;	
    // (㾘) CJK UNIFIED IDEOGRAPH-3F98	[FB80 BF98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_362)
{
    // 3F98 0041;	
    // (㾘) CJK UNIFIED IDEOGRAPH-3F98	[FB80 BF98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_363)
{
    // 3F98 0062;	
    // (㾘) CJK UNIFIED IDEOGRAPH-3F98	[FB80 BF98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_364)
{
    // 3F99 0021;	
    // (㾙) CJK UNIFIED IDEOGRAPH-3F99	[FB80 BF99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_365)
{
    // 3F99 003F;	
    // (㾙) CJK UNIFIED IDEOGRAPH-3F99	[FB80 BF99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_366)
{
    // 3F99 0061;	
    // (㾙) CJK UNIFIED IDEOGRAPH-3F99	[FB80 BF99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_367)
{
    // 3F99 0041;	
    // (㾙) CJK UNIFIED IDEOGRAPH-3F99	[FB80 BF99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_368)
{
    // 3F99 0062;	
    // (㾙) CJK UNIFIED IDEOGRAPH-3F99	[FB80 BF99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_369)
{
    // 3F9A 0021;	
    // (㾚) CJK UNIFIED IDEOGRAPH-3F9A	[FB80 BF9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_370)
{
    // 3F9A 003F;	
    // (㾚) CJK UNIFIED IDEOGRAPH-3F9A	[FB80 BF9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_371)
{
    // 3F9A 0061;	
    // (㾚) CJK UNIFIED IDEOGRAPH-3F9A	[FB80 BF9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_372)
{
    // 3F9A 0041;	
    // (㾚) CJK UNIFIED IDEOGRAPH-3F9A	[FB80 BF9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_373)
{
    // 3F9A 0062;	
    // (㾚) CJK UNIFIED IDEOGRAPH-3F9A	[FB80 BF9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_374)
{
    // 3F9B 0021;	
    // (㾛) CJK UNIFIED IDEOGRAPH-3F9B	[FB80 BF9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_375)
{
    // 3F9B 003F;	
    // (㾛) CJK UNIFIED IDEOGRAPH-3F9B	[FB80 BF9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_376)
{
    // 3F9B 0061;	
    // (㾛) CJK UNIFIED IDEOGRAPH-3F9B	[FB80 BF9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_377)
{
    // 3F9B 0041;	
    // (㾛) CJK UNIFIED IDEOGRAPH-3F9B	[FB80 BF9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_378)
{
    // 3F9B 0062;	
    // (㾛) CJK UNIFIED IDEOGRAPH-3F9B	[FB80 BF9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_379)
{
    // 3F9C 0021;	
    // (㾜) CJK UNIFIED IDEOGRAPH-3F9C	[FB80 BF9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_380)
{
    // 3F9C 003F;	
    // (㾜) CJK UNIFIED IDEOGRAPH-3F9C	[FB80 BF9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_381)
{
    // 3F9C 0061;	
    // (㾜) CJK UNIFIED IDEOGRAPH-3F9C	[FB80 BF9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_382)
{
    // 3F9C 0041;	
    // (㾜) CJK UNIFIED IDEOGRAPH-3F9C	[FB80 BF9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_383)
{
    // 3F9C 0062;	
    // (㾜) CJK UNIFIED IDEOGRAPH-3F9C	[FB80 BF9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_384)
{
    // 3F9D 0021;	
    // (㾝) CJK UNIFIED IDEOGRAPH-3F9D	[FB80 BF9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_385)
{
    // 3F9D 003F;	
    // (㾝) CJK UNIFIED IDEOGRAPH-3F9D	[FB80 BF9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_386)
{
    // 3F9D 0061;	
    // (㾝) CJK UNIFIED IDEOGRAPH-3F9D	[FB80 BF9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_387)
{
    // 3F9D 0041;	
    // (㾝) CJK UNIFIED IDEOGRAPH-3F9D	[FB80 BF9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_388)
{
    // 3F9D 0062;	
    // (㾝) CJK UNIFIED IDEOGRAPH-3F9D	[FB80 BF9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_389)
{
    // 3F9E 0021;	
    // (㾞) CJK UNIFIED IDEOGRAPH-3F9E	[FB80 BF9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_390)
{
    // 3F9E 003F;	
    // (㾞) CJK UNIFIED IDEOGRAPH-3F9E	[FB80 BF9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_391)
{
    // 3F9E 0061;	
    // (㾞) CJK UNIFIED IDEOGRAPH-3F9E	[FB80 BF9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_392)
{
    // 3F9E 0041;	
    // (㾞) CJK UNIFIED IDEOGRAPH-3F9E	[FB80 BF9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_393)
{
    // 3F9E 0062;	
    // (㾞) CJK UNIFIED IDEOGRAPH-3F9E	[FB80 BF9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_394)
{
    // 3F9F 0021;	
    // (㾟) CJK UNIFIED IDEOGRAPH-3F9F	[FB80 BF9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_395)
{
    // 3F9F 003F;	
    // (㾟) CJK UNIFIED IDEOGRAPH-3F9F	[FB80 BF9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBF9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_396)
{
    // 3F9F 0061;	
    // (㾟) CJK UNIFIED IDEOGRAPH-3F9F	[FB80 BF9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_397)
{
    // 3F9F 0041;	
    // (㾟) CJK UNIFIED IDEOGRAPH-3F9F	[FB80 BF9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3F9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_398)
{
    // 3F9F 0062;	
    // (㾟) CJK UNIFIED IDEOGRAPH-3F9F	[FB80 BF9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3F9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBF9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_399)
{
    // 3FA0 0021;	
    // (㾠) CJK UNIFIED IDEOGRAPH-3FA0	[FB80 BFA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_400)
{
    // 3FA0 003F;	
    // (㾠) CJK UNIFIED IDEOGRAPH-3FA0	[FB80 BFA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_401)
{
    // 3FA0 0061;	
    // (㾠) CJK UNIFIED IDEOGRAPH-3FA0	[FB80 BFA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_402)
{
    // 3FA0 0041;	
    // (㾠) CJK UNIFIED IDEOGRAPH-3FA0	[FB80 BFA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_403)
{
    // 3FA0 0062;	
    // (㾠) CJK UNIFIED IDEOGRAPH-3FA0	[FB80 BFA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_404)
{
    // 3FA1 0021;	
    // (㾡) CJK UNIFIED IDEOGRAPH-3FA1	[FB80 BFA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_405)
{
    // 3FA1 003F;	
    // (㾡) CJK UNIFIED IDEOGRAPH-3FA1	[FB80 BFA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_406)
{
    // 3FA1 0061;	
    // (㾡) CJK UNIFIED IDEOGRAPH-3FA1	[FB80 BFA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_407)
{
    // 3FA1 0041;	
    // (㾡) CJK UNIFIED IDEOGRAPH-3FA1	[FB80 BFA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_408)
{
    // 3FA1 0062;	
    // (㾡) CJK UNIFIED IDEOGRAPH-3FA1	[FB80 BFA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_409)
{
    // 3FA2 0021;	
    // (㾢) CJK UNIFIED IDEOGRAPH-3FA2	[FB80 BFA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_410)
{
    // 3FA2 003F;	
    // (㾢) CJK UNIFIED IDEOGRAPH-3FA2	[FB80 BFA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_411)
{
    // 3FA2 0061;	
    // (㾢) CJK UNIFIED IDEOGRAPH-3FA2	[FB80 BFA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_412)
{
    // 3FA2 0041;	
    // (㾢) CJK UNIFIED IDEOGRAPH-3FA2	[FB80 BFA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_413)
{
    // 3FA2 0062;	
    // (㾢) CJK UNIFIED IDEOGRAPH-3FA2	[FB80 BFA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_414)
{
    // 3FA3 0021;	
    // (㾣) CJK UNIFIED IDEOGRAPH-3FA3	[FB80 BFA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_415)
{
    // 3FA3 003F;	
    // (㾣) CJK UNIFIED IDEOGRAPH-3FA3	[FB80 BFA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_416)
{
    // 3FA3 0061;	
    // (㾣) CJK UNIFIED IDEOGRAPH-3FA3	[FB80 BFA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_417)
{
    // 3FA3 0041;	
    // (㾣) CJK UNIFIED IDEOGRAPH-3FA3	[FB80 BFA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_418)
{
    // 3FA3 0062;	
    // (㾣) CJK UNIFIED IDEOGRAPH-3FA3	[FB80 BFA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_419)
{
    // 3FA4 0021;	
    // (㾤) CJK UNIFIED IDEOGRAPH-3FA4	[FB80 BFA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_420)
{
    // 3FA4 003F;	
    // (㾤) CJK UNIFIED IDEOGRAPH-3FA4	[FB80 BFA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_421)
{
    // 3FA4 0061;	
    // (㾤) CJK UNIFIED IDEOGRAPH-3FA4	[FB80 BFA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_422)
{
    // 3FA4 0041;	
    // (㾤) CJK UNIFIED IDEOGRAPH-3FA4	[FB80 BFA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_423)
{
    // 3FA4 0062;	
    // (㾤) CJK UNIFIED IDEOGRAPH-3FA4	[FB80 BFA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_424)
{
    // 3FA5 0021;	
    // (㾥) CJK UNIFIED IDEOGRAPH-3FA5	[FB80 BFA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_425)
{
    // 3FA5 003F;	
    // (㾥) CJK UNIFIED IDEOGRAPH-3FA5	[FB80 BFA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_426)
{
    // 3FA5 0061;	
    // (㾥) CJK UNIFIED IDEOGRAPH-3FA5	[FB80 BFA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_427)
{
    // 3FA5 0041;	
    // (㾥) CJK UNIFIED IDEOGRAPH-3FA5	[FB80 BFA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_428)
{
    // 3FA5 0062;	
    // (㾥) CJK UNIFIED IDEOGRAPH-3FA5	[FB80 BFA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_429)
{
    // 3FA6 0021;	
    // (㾦) CJK UNIFIED IDEOGRAPH-3FA6	[FB80 BFA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_430)
{
    // 3FA6 003F;	
    // (㾦) CJK UNIFIED IDEOGRAPH-3FA6	[FB80 BFA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_431)
{
    // 3FA6 0061;	
    // (㾦) CJK UNIFIED IDEOGRAPH-3FA6	[FB80 BFA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_432)
{
    // 3FA6 0041;	
    // (㾦) CJK UNIFIED IDEOGRAPH-3FA6	[FB80 BFA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_433)
{
    // 3FA6 0062;	
    // (㾦) CJK UNIFIED IDEOGRAPH-3FA6	[FB80 BFA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_434)
{
    // 3FA7 0021;	
    // (㾧) CJK UNIFIED IDEOGRAPH-3FA7	[FB80 BFA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_435)
{
    // 3FA7 003F;	
    // (㾧) CJK UNIFIED IDEOGRAPH-3FA7	[FB80 BFA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_436)
{
    // 3FA7 0061;	
    // (㾧) CJK UNIFIED IDEOGRAPH-3FA7	[FB80 BFA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_437)
{
    // 3FA7 0041;	
    // (㾧) CJK UNIFIED IDEOGRAPH-3FA7	[FB80 BFA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_438)
{
    // 3FA7 0062;	
    // (㾧) CJK UNIFIED IDEOGRAPH-3FA7	[FB80 BFA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_439)
{
    // 3FA8 0021;	
    // (㾨) CJK UNIFIED IDEOGRAPH-3FA8	[FB80 BFA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_440)
{
    // 3FA8 003F;	
    // (㾨) CJK UNIFIED IDEOGRAPH-3FA8	[FB80 BFA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_441)
{
    // 3FA8 0061;	
    // (㾨) CJK UNIFIED IDEOGRAPH-3FA8	[FB80 BFA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_442)
{
    // 3FA8 0041;	
    // (㾨) CJK UNIFIED IDEOGRAPH-3FA8	[FB80 BFA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_443)
{
    // 3FA8 0062;	
    // (㾨) CJK UNIFIED IDEOGRAPH-3FA8	[FB80 BFA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_444)
{
    // 3FA9 0021;	
    // (㾩) CJK UNIFIED IDEOGRAPH-3FA9	[FB80 BFA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_445)
{
    // 3FA9 003F;	
    // (㾩) CJK UNIFIED IDEOGRAPH-3FA9	[FB80 BFA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_446)
{
    // 3FA9 0061;	
    // (㾩) CJK UNIFIED IDEOGRAPH-3FA9	[FB80 BFA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_447)
{
    // 3FA9 0041;	
    // (㾩) CJK UNIFIED IDEOGRAPH-3FA9	[FB80 BFA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_448)
{
    // 3FA9 0062;	
    // (㾩) CJK UNIFIED IDEOGRAPH-3FA9	[FB80 BFA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_449)
{
    // 3FAA 0021;	
    // (㾪) CJK UNIFIED IDEOGRAPH-3FAA	[FB80 BFAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_450)
{
    // 3FAA 003F;	
    // (㾪) CJK UNIFIED IDEOGRAPH-3FAA	[FB80 BFAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_451)
{
    // 3FAA 0061;	
    // (㾪) CJK UNIFIED IDEOGRAPH-3FAA	[FB80 BFAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_452)
{
    // 3FAA 0041;	
    // (㾪) CJK UNIFIED IDEOGRAPH-3FAA	[FB80 BFAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_453)
{
    // 3FAA 0062;	
    // (㾪) CJK UNIFIED IDEOGRAPH-3FAA	[FB80 BFAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_454)
{
    // 3FAB 0021;	
    // (㾫) CJK UNIFIED IDEOGRAPH-3FAB	[FB80 BFAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_455)
{
    // 3FAB 003F;	
    // (㾫) CJK UNIFIED IDEOGRAPH-3FAB	[FB80 BFAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_456)
{
    // 3FAB 0061;	
    // (㾫) CJK UNIFIED IDEOGRAPH-3FAB	[FB80 BFAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_457)
{
    // 3FAB 0041;	
    // (㾫) CJK UNIFIED IDEOGRAPH-3FAB	[FB80 BFAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_458)
{
    // 3FAB 0062;	
    // (㾫) CJK UNIFIED IDEOGRAPH-3FAB	[FB80 BFAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_459)
{
    // 3FAC 0021;	
    // (㾬) CJK UNIFIED IDEOGRAPH-3FAC	[FB80 BFAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_460)
{
    // 3FAC 003F;	
    // (㾬) CJK UNIFIED IDEOGRAPH-3FAC	[FB80 BFAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_461)
{
    // 3FAC 0061;	
    // (㾬) CJK UNIFIED IDEOGRAPH-3FAC	[FB80 BFAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_462)
{
    // 3FAC 0041;	
    // (㾬) CJK UNIFIED IDEOGRAPH-3FAC	[FB80 BFAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_463)
{
    // 3FAC 0062;	
    // (㾬) CJK UNIFIED IDEOGRAPH-3FAC	[FB80 BFAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_464)
{
    // 3FAD 0021;	
    // (㾭) CJK UNIFIED IDEOGRAPH-3FAD	[FB80 BFAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_465)
{
    // 3FAD 003F;	
    // (㾭) CJK UNIFIED IDEOGRAPH-3FAD	[FB80 BFAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_466)
{
    // 3FAD 0061;	
    // (㾭) CJK UNIFIED IDEOGRAPH-3FAD	[FB80 BFAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_467)
{
    // 3FAD 0041;	
    // (㾭) CJK UNIFIED IDEOGRAPH-3FAD	[FB80 BFAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_468)
{
    // 3FAD 0062;	
    // (㾭) CJK UNIFIED IDEOGRAPH-3FAD	[FB80 BFAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_469)
{
    // 3FAE 0021;	
    // (㾮) CJK UNIFIED IDEOGRAPH-3FAE	[FB80 BFAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_470)
{
    // 3FAE 003F;	
    // (㾮) CJK UNIFIED IDEOGRAPH-3FAE	[FB80 BFAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_471)
{
    // 3FAE 0061;	
    // (㾮) CJK UNIFIED IDEOGRAPH-3FAE	[FB80 BFAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_472)
{
    // 3FAE 0041;	
    // (㾮) CJK UNIFIED IDEOGRAPH-3FAE	[FB80 BFAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_473)
{
    // 3FAE 0062;	
    // (㾮) CJK UNIFIED IDEOGRAPH-3FAE	[FB80 BFAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_474)
{
    // 3FAF 0021;	
    // (㾯) CJK UNIFIED IDEOGRAPH-3FAF	[FB80 BFAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_475)
{
    // 3FAF 003F;	
    // (㾯) CJK UNIFIED IDEOGRAPH-3FAF	[FB80 BFAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_476)
{
    // 3FAF 0061;	
    // (㾯) CJK UNIFIED IDEOGRAPH-3FAF	[FB80 BFAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_477)
{
    // 3FAF 0041;	
    // (㾯) CJK UNIFIED IDEOGRAPH-3FAF	[FB80 BFAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_478)
{
    // 3FAF 0062;	
    // (㾯) CJK UNIFIED IDEOGRAPH-3FAF	[FB80 BFAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_479)
{
    // 3FB0 0021;	
    // (㾰) CJK UNIFIED IDEOGRAPH-3FB0	[FB80 BFB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_480)
{
    // 3FB0 003F;	
    // (㾰) CJK UNIFIED IDEOGRAPH-3FB0	[FB80 BFB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_481)
{
    // 3FB0 0061;	
    // (㾰) CJK UNIFIED IDEOGRAPH-3FB0	[FB80 BFB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_482)
{
    // 3FB0 0041;	
    // (㾰) CJK UNIFIED IDEOGRAPH-3FB0	[FB80 BFB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_483)
{
    // 3FB0 0062;	
    // (㾰) CJK UNIFIED IDEOGRAPH-3FB0	[FB80 BFB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_484)
{
    // 3FB1 0021;	
    // (㾱) CJK UNIFIED IDEOGRAPH-3FB1	[FB80 BFB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_485)
{
    // 3FB1 003F;	
    // (㾱) CJK UNIFIED IDEOGRAPH-3FB1	[FB80 BFB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_486)
{
    // 3FB1 0061;	
    // (㾱) CJK UNIFIED IDEOGRAPH-3FB1	[FB80 BFB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_487)
{
    // 3FB1 0041;	
    // (㾱) CJK UNIFIED IDEOGRAPH-3FB1	[FB80 BFB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_488)
{
    // 3FB1 0062;	
    // (㾱) CJK UNIFIED IDEOGRAPH-3FB1	[FB80 BFB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_489)
{
    // 3FB2 0021;	
    // (㾲) CJK UNIFIED IDEOGRAPH-3FB2	[FB80 BFB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_490)
{
    // 3FB2 003F;	
    // (㾲) CJK UNIFIED IDEOGRAPH-3FB2	[FB80 BFB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_491)
{
    // 3FB2 0061;	
    // (㾲) CJK UNIFIED IDEOGRAPH-3FB2	[FB80 BFB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_492)
{
    // 3FB2 0041;	
    // (㾲) CJK UNIFIED IDEOGRAPH-3FB2	[FB80 BFB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_493)
{
    // 3FB2 0062;	
    // (㾲) CJK UNIFIED IDEOGRAPH-3FB2	[FB80 BFB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_494)
{
    // 3FB3 0021;	
    // (㾳) CJK UNIFIED IDEOGRAPH-3FB3	[FB80 BFB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_495)
{
    // 3FB3 003F;	
    // (㾳) CJK UNIFIED IDEOGRAPH-3FB3	[FB80 BFB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBFB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_496)
{
    // 3FB3 0061;	
    // (㾳) CJK UNIFIED IDEOGRAPH-3FB3	[FB80 BFB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_497)
{
    // 3FB3 0041;	
    // (㾳) CJK UNIFIED IDEOGRAPH-3FB3	[FB80 BFB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_498)
{
    // 3FB3 0062;	
    // (㾳) CJK UNIFIED IDEOGRAPH-3FB3	[FB80 BFB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_356_499)
{
    // 3FB4 0021;	
    // (㾴) CJK UNIFIED IDEOGRAPH-3FB4	[FB80 BFB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBFB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

