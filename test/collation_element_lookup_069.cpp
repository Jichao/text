// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_069_000)
{
    // 2A4B  ; [*0C2E.0020.0002] 
    // INTERSECTION BESIDE AND JOINED WITH INTERSECTION

    uint32_t const cps[1] = { 0x2a4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_001)
{
    // 2A4C  ; [*0C2F.0020.0002] 
    // CLOSED UNION WITH SERIFS

    uint32_t const cps[1] = { 0x2a4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_002)
{
    // 2A4D  ; [*0C30.0020.0002] 
    // CLOSED INTERSECTION WITH SERIFS

    uint32_t const cps[1] = { 0x2a4d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc30), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_003)
{
    // 2A4E  ; [*0C31.0020.0002] 
    // DOUBLE SQUARE INTERSECTION

    uint32_t const cps[1] = { 0x2a4e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc31), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_004)
{
    // 2A4F  ; [*0C32.0020.0002] 
    // DOUBLE SQUARE UNION

    uint32_t const cps[1] = { 0x2a4f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc32), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_005)
{
    // 2A50  ; [*0C33.0020.0002] 
    // CLOSED UNION WITH SERIFS AND SMASH PRODUCT

    uint32_t const cps[1] = { 0x2a50 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc33), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_006)
{
    // 2A51  ; [*0C34.0020.0002] 
    // LOGICAL AND WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2a51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc34), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_007)
{
    // 2A52  ; [*0C35.0020.0002] 
    // LOGICAL OR WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2a52 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc35), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_008)
{
    // 2A53  ; [*0C36.0020.0002] 
    // DOUBLE LOGICAL AND

    uint32_t const cps[1] = { 0x2a53 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc36), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_009)
{
    // 2A54  ; [*0C37.0020.0002] 
    // DOUBLE LOGICAL OR

    uint32_t const cps[1] = { 0x2a54 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc37), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_010)
{
    // 2A55  ; [*0C38.0020.0002] 
    // TWO INTERSECTING LOGICAL AND

    uint32_t const cps[1] = { 0x2a55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc38), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_011)
{
    // 2A56  ; [*0C39.0020.0002] 
    // TWO INTERSECTING LOGICAL OR

    uint32_t const cps[1] = { 0x2a56 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc39), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_012)
{
    // 2A57  ; [*0C3A.0020.0002] 
    // SLOPING LARGE OR

    uint32_t const cps[1] = { 0x2a57 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_013)
{
    // 2A58  ; [*0C3B.0020.0002] 
    // SLOPING LARGE AND

    uint32_t const cps[1] = { 0x2a58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_014)
{
    // 2A59  ; [*0C3C.0020.0002] 
    // LOGICAL OR OVERLAPPING LOGICAL AND

    uint32_t const cps[1] = { 0x2a59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_015)
{
    // 2A5A  ; [*0C3D.0020.0002] 
    // LOGICAL AND WITH MIDDLE STEM

    uint32_t const cps[1] = { 0x2a5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_016)
{
    // 2A5B  ; [*0C3E.0020.0002] 
    // LOGICAL OR WITH MIDDLE STEM

    uint32_t const cps[1] = { 0x2a5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_017)
{
    // 2A5C  ; [*0C3F.0020.0002] 
    // LOGICAL AND WITH HORIZONTAL DASH

    uint32_t const cps[1] = { 0x2a5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_018)
{
    // 2A5D  ; [*0C40.0020.0002] 
    // LOGICAL OR WITH HORIZONTAL DASH

    uint32_t const cps[1] = { 0x2a5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc40), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_019)
{
    // 2A5E  ; [*0C41.0020.0002] 
    // LOGICAL AND WITH DOUBLE OVERBAR

    uint32_t const cps[1] = { 0x2a5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc41), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_020)
{
    // 2A5F  ; [*0C42.0020.0002] 
    // LOGICAL AND WITH UNDERBAR

    uint32_t const cps[1] = { 0x2a5f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc42), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_021)
{
    // 2A60  ; [*0C43.0020.0002] 
    // LOGICAL AND WITH DOUBLE UNDERBAR

    uint32_t const cps[1] = { 0x2a60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc43), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_022)
{
    // 2A61  ; [*0C44.0020.0002] 
    // SMALL VEE WITH UNDERBAR

    uint32_t const cps[1] = { 0x2a61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc44), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_023)
{
    // 2A62  ; [*0C45.0020.0002] 
    // LOGICAL OR WITH DOUBLE OVERBAR

    uint32_t const cps[1] = { 0x2a62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc45), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_024)
{
    // 2A63  ; [*0C46.0020.0002] 
    // LOGICAL OR WITH DOUBLE UNDERBAR

    uint32_t const cps[1] = { 0x2a63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc46), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_025)
{
    // 2A64  ; [*0C47.0020.0002] 
    // Z NOTATION DOMAIN ANTIRESTRICTION

    uint32_t const cps[1] = { 0x2a64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc47), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_026)
{
    // 2A65  ; [*0C48.0020.0002] 
    // Z NOTATION RANGE ANTIRESTRICTION

    uint32_t const cps[1] = { 0x2a65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc48), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_027)
{
    // 2A66  ; [*0C49.0020.0002] 
    // EQUALS SIGN WITH DOT BELOW

    uint32_t const cps[1] = { 0x2a66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc49), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_028)
{
    // 2A67  ; [*0C4A.0020.0002] 
    // IDENTICAL WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2a67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_029)
{
    // 2A68  ; [*0C4B.0020.0002] 
    // TRIPLE HORIZONTAL BAR WITH DOUBLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x2a68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_030)
{
    // 2A69  ; [*0C4C.0020.0002] 
    // TRIPLE HORIZONTAL BAR WITH TRIPLE VERTICAL STROKE

    uint32_t const cps[1] = { 0x2a69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_031)
{
    // 2A6A  ; [*0C4D.0020.0002] 
    // TILDE OPERATOR WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2a6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_032)
{
    // 2A6B  ; [*0C4E.0020.0002] 
    // TILDE OPERATOR WITH RISING DOTS

    uint32_t const cps[1] = { 0x2a6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_033)
{
    // 2A6C  ; [*0C4F.0020.0002] 
    // SIMILAR MINUS SIMILAR

    uint32_t const cps[1] = { 0x2a6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_034)
{
    // 2A6D  ; [*0C50.0020.0002] 
    // CONGRUENT WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2a6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc50), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_035)
{
    // 2A6E  ; [*0C51.0020.0002] 
    // EQUALS WITH ASTERISK

    uint32_t const cps[1] = { 0x2a6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc51), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_036)
{
    // 2A6F  ; [*0C52.0020.0002] 
    // ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT

    uint32_t const cps[1] = { 0x2a6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc52), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_037)
{
    // 2A70  ; [*0C53.0020.0002] 
    // APPROXIMATELY EQUAL OR EQUAL TO

    uint32_t const cps[1] = { 0x2a70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc53), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_038)
{
    // 2A71  ; [*0C54.0020.0002] 
    // EQUALS SIGN ABOVE PLUS SIGN

    uint32_t const cps[1] = { 0x2a71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc54), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_039)
{
    // 2A72  ; [*0C55.0020.0002] 
    // PLUS SIGN ABOVE EQUALS SIGN

    uint32_t const cps[1] = { 0x2a72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc55), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_040)
{
    // 2A73  ; [*0C56.0020.0002] 
    // EQUALS SIGN ABOVE TILDE OPERATOR

    uint32_t const cps[1] = { 0x2a73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc56), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_041)
{
    // 2A74  ; [*023A.0020.0004][*023A.0020.0004][*0631.0020.0004] 
    // DOUBLE COLON EQUAL

    uint32_t const cps[1] = { 0x2a74 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x23a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x23a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x631), uint8_t(0x0), uint8_t(0x4)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_069_042)
{
    // 2A75  ; [*0631.0020.0004][*0631.0020.0004] 
    // TWO CONSECUTIVE EQUALS SIGNS

    uint32_t const cps[1] = { 0x2a75 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x631), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x631), uint8_t(0x0), uint8_t(0x4)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_069_043)
{
    // 2A76  ; [*0631.0020.0004][*0631.0020.0004][*0631.0020.0004] 
    // THREE CONSECUTIVE EQUALS SIGNS

    uint32_t const cps[1] = { 0x2a76 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x631), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x631), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x631), uint8_t(0x0), uint8_t(0x4)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_069_044)
{
    // 2A77  ; [*0C57.0020.0002] 
    // EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW

    uint32_t const cps[1] = { 0x2a77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc57), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_045)
{
    // 2A78  ; [*0C58.0020.0002] 
    // EQUIVALENT WITH FOUR DOTS ABOVE

    uint32_t const cps[1] = { 0x2a78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc58), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_046)
{
    // 2A79  ; [*0C59.0020.0002] 
    // LESS-THAN WITH CIRCLE INSIDE

    uint32_t const cps[1] = { 0x2a79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc59), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_047)
{
    // 2A7A  ; [*0C5A.0020.0002] 
    // GREATER-THAN WITH CIRCLE INSIDE

    uint32_t const cps[1] = { 0x2a7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_048)
{
    // 2A7B  ; [*0C5B.0020.0002] 
    // LESS-THAN WITH QUESTION MARK ABOVE

    uint32_t const cps[1] = { 0x2a7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_049)
{
    // 2A7C  ; [*0C5C.0020.0002] 
    // GREATER-THAN WITH QUESTION MARK ABOVE

    uint32_t const cps[1] = { 0x2a7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_050)
{
    // 2A7D  ; [*0C5D.0020.0002] 
    // LESS-THAN OR SLANTED EQUAL TO

    uint32_t const cps[1] = { 0x2a7d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_051)
{
    // 2A7E  ; [*0C5E.0020.0002] 
    // GREATER-THAN OR SLANTED EQUAL TO

    uint32_t const cps[1] = { 0x2a7e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_052)
{
    // 2A7F  ; [*0C5F.0020.0002] 
    // LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE

    uint32_t const cps[1] = { 0x2a7f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_053)
{
    // 2A80  ; [*0C60.0020.0002] 
    // GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE

    uint32_t const cps[1] = { 0x2a80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc60), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_054)
{
    // 2A81  ; [*0C61.0020.0002] 
    // LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2a81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc61), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_055)
{
    // 2A82  ; [*0C62.0020.0002] 
    // GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2a82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc62), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_056)
{
    // 2A83  ; [*0C63.0020.0002] 
    // LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT

    uint32_t const cps[1] = { 0x2a83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc63), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_057)
{
    // 2A84  ; [*0C64.0020.0002] 
    // GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT

    uint32_t const cps[1] = { 0x2a84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc64), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_058)
{
    // 2A85  ; [*0C65.0020.0002] 
    // LESS-THAN OR APPROXIMATE

    uint32_t const cps[1] = { 0x2a85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc65), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_059)
{
    // 2A86  ; [*0C66.0020.0002] 
    // GREATER-THAN OR APPROXIMATE

    uint32_t const cps[1] = { 0x2a86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc66), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_060)
{
    // 2A87  ; [*0C67.0020.0002] 
    // LESS-THAN AND SINGLE-LINE NOT EQUAL TO

    uint32_t const cps[1] = { 0x2a87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc67), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_061)
{
    // 2A88  ; [*0C68.0020.0002] 
    // GREATER-THAN AND SINGLE-LINE NOT EQUAL TO

    uint32_t const cps[1] = { 0x2a88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc68), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_062)
{
    // 2A89  ; [*0C69.0020.0002] 
    // LESS-THAN AND NOT APPROXIMATE

    uint32_t const cps[1] = { 0x2a89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc69), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_063)
{
    // 2A8A  ; [*0C6A.0020.0002] 
    // GREATER-THAN AND NOT APPROXIMATE

    uint32_t const cps[1] = { 0x2a8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_064)
{
    // 2A8B  ; [*0C6B.0020.0002] 
    // LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN

    uint32_t const cps[1] = { 0x2a8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_065)
{
    // 2A8C  ; [*0C6C.0020.0002] 
    // GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN

    uint32_t const cps[1] = { 0x2a8c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_066)
{
    // 2A8D  ; [*0C6D.0020.0002] 
    // LESS-THAN ABOVE SIMILAR OR EQUAL

    uint32_t const cps[1] = { 0x2a8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_067)
{
    // 2A8E  ; [*0C6E.0020.0002] 
    // GREATER-THAN ABOVE SIMILAR OR EQUAL

    uint32_t const cps[1] = { 0x2a8e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_068)
{
    // 2A8F  ; [*0C6F.0020.0002] 
    // LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN

    uint32_t const cps[1] = { 0x2a8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_069)
{
    // 2A90  ; [*0C70.0020.0002] 
    // GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN

    uint32_t const cps[1] = { 0x2a90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc70), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_070)
{
    // 2A91  ; [*0C71.0020.0002] 
    // LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL

    uint32_t const cps[1] = { 0x2a91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc71), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_071)
{
    // 2A92  ; [*0C72.0020.0002] 
    // GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL

    uint32_t const cps[1] = { 0x2a92 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc72), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_072)
{
    // 2A93  ; [*0C73.0020.0002] 
    // LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL

    uint32_t const cps[1] = { 0x2a93 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc73), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_073)
{
    // 2A94  ; [*0C74.0020.0002] 
    // GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL

    uint32_t const cps[1] = { 0x2a94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc74), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_074)
{
    // 2A95  ; [*0C75.0020.0002] 
    // SLANTED EQUAL TO OR LESS-THAN

    uint32_t const cps[1] = { 0x2a95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc75), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_075)
{
    // 2A96  ; [*0C76.0020.0002] 
    // SLANTED EQUAL TO OR GREATER-THAN

    uint32_t const cps[1] = { 0x2a96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc76), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_076)
{
    // 2A97  ; [*0C77.0020.0002] 
    // SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE

    uint32_t const cps[1] = { 0x2a97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc77), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_077)
{
    // 2A98  ; [*0C78.0020.0002] 
    // SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE

    uint32_t const cps[1] = { 0x2a98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc78), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_078)
{
    // 2A99  ; [*0C79.0020.0002] 
    // DOUBLE-LINE EQUAL TO OR LESS-THAN

    uint32_t const cps[1] = { 0x2a99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc79), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_079)
{
    // 2A9A  ; [*0C7A.0020.0002] 
    // DOUBLE-LINE EQUAL TO OR GREATER-THAN

    uint32_t const cps[1] = { 0x2a9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_080)
{
    // 2A9B  ; [*0C7B.0020.0002] 
    // DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN

    uint32_t const cps[1] = { 0x2a9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_081)
{
    // 2A9C  ; [*0C7C.0020.0002] 
    // DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN

    uint32_t const cps[1] = { 0x2a9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_082)
{
    // 2A9D  ; [*0C7D.0020.0002] 
    // SIMILAR OR LESS-THAN

    uint32_t const cps[1] = { 0x2a9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_083)
{
    // 2A9E  ; [*0C7E.0020.0002] 
    // SIMILAR OR GREATER-THAN

    uint32_t const cps[1] = { 0x2a9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_084)
{
    // 2A9F  ; [*0C7F.0020.0002] 
    // SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN

    uint32_t const cps[1] = { 0x2a9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_085)
{
    // 2AA0  ; [*0C80.0020.0002] 
    // SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN

    uint32_t const cps[1] = { 0x2aa0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc80), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_086)
{
    // 2AA1  ; [*0C81.0020.0002] 
    // DOUBLE NESTED LESS-THAN

    uint32_t const cps[1] = { 0x2aa1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc81), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_087)
{
    // 2AA2  ; [*0C82.0020.0002] 
    // DOUBLE NESTED GREATER-THAN

    uint32_t const cps[1] = { 0x2aa2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc82), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_088)
{
    // 2AA3  ; [*0C83.0020.0002] 
    // DOUBLE NESTED LESS-THAN WITH UNDERBAR

    uint32_t const cps[1] = { 0x2aa3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc83), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_089)
{
    // 2AA4  ; [*0C84.0020.0002] 
    // GREATER-THAN OVERLAPPING LESS-THAN

    uint32_t const cps[1] = { 0x2aa4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc84), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_090)
{
    // 2AA5  ; [*0C85.0020.0002] 
    // GREATER-THAN BESIDE LESS-THAN

    uint32_t const cps[1] = { 0x2aa5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc85), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_091)
{
    // 2AA6  ; [*0C86.0020.0002] 
    // LESS-THAN CLOSED BY CURVE

    uint32_t const cps[1] = { 0x2aa6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc86), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_092)
{
    // 2AA7  ; [*0C87.0020.0002] 
    // GREATER-THAN CLOSED BY CURVE

    uint32_t const cps[1] = { 0x2aa7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc87), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_093)
{
    // 2AA8  ; [*0C88.0020.0002] 
    // LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL

    uint32_t const cps[1] = { 0x2aa8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc88), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_094)
{
    // 2AA9  ; [*0C89.0020.0002] 
    // GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL

    uint32_t const cps[1] = { 0x2aa9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc89), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_095)
{
    // 2AAA  ; [*0C8A.0020.0002] 
    // SMALLER THAN

    uint32_t const cps[1] = { 0x2aaa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_096)
{
    // 2AAB  ; [*0C8B.0020.0002] 
    // LARGER THAN

    uint32_t const cps[1] = { 0x2aab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_097)
{
    // 2AAC  ; [*0C8C.0020.0002] 
    // SMALLER THAN OR EQUAL TO

    uint32_t const cps[1] = { 0x2aac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_098)
{
    // 2AAD  ; [*0C8D.0020.0002] 
    // LARGER THAN OR EQUAL TO

    uint32_t const cps[1] = { 0x2aad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_099)
{
    // 2AAE  ; [*0C8E.0020.0002] 
    // EQUALS SIGN WITH BUMPY ABOVE

    uint32_t const cps[1] = { 0x2aae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_100)
{
    // 2AAF  ; [*0C8F.0020.0002] 
    // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN

    uint32_t const cps[1] = { 0x2aaf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_101)
{
    // 2AB0  ; [*0C90.0020.0002] 
    // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN

    uint32_t const cps[1] = { 0x2ab0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc90), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_102)
{
    // 2AB1  ; [*0C91.0020.0002] 
    // PRECEDES ABOVE SINGLE-LINE NOT EQUAL TO

    uint32_t const cps[1] = { 0x2ab1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc91), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_103)
{
    // 2AB2  ; [*0C92.0020.0002] 
    // SUCCEEDS ABOVE SINGLE-LINE NOT EQUAL TO

    uint32_t const cps[1] = { 0x2ab2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc92), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_104)
{
    // 2AB3  ; [*0C93.0020.0002] 
    // PRECEDES ABOVE EQUALS SIGN

    uint32_t const cps[1] = { 0x2ab3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc93), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_105)
{
    // 2AB4  ; [*0C94.0020.0002] 
    // SUCCEEDS ABOVE EQUALS SIGN

    uint32_t const cps[1] = { 0x2ab4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc94), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_106)
{
    // 2AB5  ; [*0C95.0020.0002] 
    // PRECEDES ABOVE NOT EQUAL TO

    uint32_t const cps[1] = { 0x2ab5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc95), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_107)
{
    // 2AB6  ; [*0C96.0020.0002] 
    // SUCCEEDS ABOVE NOT EQUAL TO

    uint32_t const cps[1] = { 0x2ab6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc96), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_108)
{
    // 2AB7  ; [*0C97.0020.0002] 
    // PRECEDES ABOVE ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2ab7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc97), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_109)
{
    // 2AB8  ; [*0C98.0020.0002] 
    // SUCCEEDS ABOVE ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2ab8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc98), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_110)
{
    // 2AB9  ; [*0C99.0020.0002] 
    // PRECEDES ABOVE NOT ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2ab9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc99), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_111)
{
    // 2ABA  ; [*0C9A.0020.0002] 
    // SUCCEEDS ABOVE NOT ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2aba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_112)
{
    // 2ABB  ; [*0C9B.0020.0002] 
    // DOUBLE PRECEDES

    uint32_t const cps[1] = { 0x2abb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_113)
{
    // 2ABC  ; [*0C9C.0020.0002] 
    // DOUBLE SUCCEEDS

    uint32_t const cps[1] = { 0x2abc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_114)
{
    // 2ABD  ; [*0C9D.0020.0002] 
    // SUBSET WITH DOT

    uint32_t const cps[1] = { 0x2abd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_115)
{
    // 2ABE  ; [*0C9E.0020.0002] 
    // SUPERSET WITH DOT

    uint32_t const cps[1] = { 0x2abe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_116)
{
    // 2ABF  ; [*0C9F.0020.0002] 
    // SUBSET WITH PLUS SIGN BELOW

    uint32_t const cps[1] = { 0x2abf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xc9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_117)
{
    // 2AC0  ; [*0CA0.0020.0002] 
    // SUPERSET WITH PLUS SIGN BELOW

    uint32_t const cps[1] = { 0x2ac0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_118)
{
    // 2AC1  ; [*0CA1.0020.0002] 
    // SUBSET WITH MULTIPLICATION SIGN BELOW

    uint32_t const cps[1] = { 0x2ac1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_119)
{
    // 2AC2  ; [*0CA2.0020.0002] 
    // SUPERSET WITH MULTIPLICATION SIGN BELOW

    uint32_t const cps[1] = { 0x2ac2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_120)
{
    // 2AC3  ; [*0CA3.0020.0002] 
    // SUBSET OF OR EQUAL TO WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2ac3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_121)
{
    // 2AC4  ; [*0CA4.0020.0002] 
    // SUPERSET OF OR EQUAL TO WITH DOT ABOVE

    uint32_t const cps[1] = { 0x2ac4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_122)
{
    // 2AC5  ; [*0CA5.0020.0002] 
    // SUBSET OF ABOVE EQUALS SIGN

    uint32_t const cps[1] = { 0x2ac5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_123)
{
    // 2AC6  ; [*0CA6.0020.0002] 
    // SUPERSET OF ABOVE EQUALS SIGN

    uint32_t const cps[1] = { 0x2ac6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_124)
{
    // 2AC7  ; [*0CA7.0020.0002] 
    // SUBSET OF ABOVE TILDE OPERATOR

    uint32_t const cps[1] = { 0x2ac7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_125)
{
    // 2AC8  ; [*0CA8.0020.0002] 
    // SUPERSET OF ABOVE TILDE OPERATOR

    uint32_t const cps[1] = { 0x2ac8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_126)
{
    // 2AC9  ; [*0CA9.0020.0002] 
    // SUBSET OF ABOVE ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2ac9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_127)
{
    // 2ACA  ; [*0CAA.0020.0002] 
    // SUPERSET OF ABOVE ALMOST EQUAL TO

    uint32_t const cps[1] = { 0x2aca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcaa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_128)
{
    // 2ACB  ; [*0CAB.0020.0002] 
    // SUBSET OF ABOVE NOT EQUAL TO

    uint32_t const cps[1] = { 0x2acb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_129)
{
    // 2ACC  ; [*0CAC.0020.0002] 
    // SUPERSET OF ABOVE NOT EQUAL TO

    uint32_t const cps[1] = { 0x2acc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_130)
{
    // 2ACD  ; [*0CAD.0020.0002] 
    // SQUARE LEFT OPEN BOX OPERATOR

    uint32_t const cps[1] = { 0x2acd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcad), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_131)
{
    // 2ACE  ; [*0CAE.0020.0002] 
    // SQUARE RIGHT OPEN BOX OPERATOR

    uint32_t const cps[1] = { 0x2ace };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcae), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_132)
{
    // 2ACF  ; [*0CAF.0020.0002] 
    // CLOSED SUBSET

    uint32_t const cps[1] = { 0x2acf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcaf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_133)
{
    // 2AD0  ; [*0CB0.0020.0002] 
    // CLOSED SUPERSET

    uint32_t const cps[1] = { 0x2ad0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_134)
{
    // 2AD1  ; [*0CB1.0020.0002] 
    // CLOSED SUBSET OR EQUAL TO

    uint32_t const cps[1] = { 0x2ad1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_135)
{
    // 2AD2  ; [*0CB2.0020.0002] 
    // CLOSED SUPERSET OR EQUAL TO

    uint32_t const cps[1] = { 0x2ad2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_136)
{
    // 2AD3  ; [*0CB3.0020.0002] 
    // SUBSET ABOVE SUPERSET

    uint32_t const cps[1] = { 0x2ad3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_137)
{
    // 2AD4  ; [*0CB4.0020.0002] 
    // SUPERSET ABOVE SUBSET

    uint32_t const cps[1] = { 0x2ad4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_138)
{
    // 2AD5  ; [*0CB5.0020.0002] 
    // SUBSET ABOVE SUBSET

    uint32_t const cps[1] = { 0x2ad5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_139)
{
    // 2AD6  ; [*0CB6.0020.0002] 
    // SUPERSET ABOVE SUPERSET

    uint32_t const cps[1] = { 0x2ad6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_140)
{
    // 2AD7  ; [*0CB7.0020.0002] 
    // SUPERSET BESIDE SUBSET

    uint32_t const cps[1] = { 0x2ad7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_141)
{
    // 2AD8  ; [*0CB8.0020.0002] 
    // SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET

    uint32_t const cps[1] = { 0x2ad8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_142)
{
    // 2AD9  ; [*0CB9.0020.0002] 
    // ELEMENT OF OPENING DOWNWARDS

    uint32_t const cps[1] = { 0x2ad9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_143)
{
    // 2ADA  ; [*0CBA.0020.0002] 
    // PITCHFORK WITH TEE TOP

    uint32_t const cps[1] = { 0x2ada };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcba), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_144)
{
    // 2ADB  ; [*0CBB.0020.0002] 
    // TRANSVERSAL INTERSECTION

    uint32_t const cps[1] = { 0x2adb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_145)
{
    // 2ADC  ; [*0CBC.0020.0002][.0000.002F.0002] 
    // FORKING

    uint32_t const cps[1] = { 0x2adc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0xcbc), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xf), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_069_146)
{
    // 2ADD  ; [*0CBC.0020.0002] 
    // NONFORKING

    uint32_t const cps[1] = { 0x2add };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcbc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_147)
{
    // 2ADE  ; [*0CBD.0020.0002] 
    // SHORT LEFT TACK

    uint32_t const cps[1] = { 0x2ade };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcbd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_148)
{
    // 2ADF  ; [*0CBE.0020.0002] 
    // SHORT DOWN TACK

    uint32_t const cps[1] = { 0x2adf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcbe), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_069_149)
{
    // 2AE0  ; [*0CBF.0020.0002] 
    // SHORT UP TACK

    uint32_t const cps[1] = { 0x2ae0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xcbf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

