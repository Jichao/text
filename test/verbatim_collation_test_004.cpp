// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_004_000)
{
    uint32_t const cps[2] = { 0x05AF, 0x0021 };

    // 05AF 0021;	
    // (֯) HEBREW MARK MASORA CIRCLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AF 0021;	
    // (֯) HEBREW MARK MASORA CIRCLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_001)
{
    uint32_t const cps[2] = { 0x05BD, 0x0021 };

    // 05BD 0021;	
    // (ֽ) HEBREW POINT METEG	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05BD 0021;	
    // (ֽ) HEBREW POINT METEG	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_002)
{
    uint32_t const cps[2] = { 0x05C4, 0x0021 };

    // 05C4 0021;	
    // (ׄ) HEBREW MARK UPPER DOT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05C4 0021;	
    // (ׄ) HEBREW MARK UPPER DOT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_003)
{
    uint32_t const cps[2] = { 0x05C5, 0x0021 };

    // 05C5 0021;	
    // (ׅ) HEBREW MARK LOWER DOT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05C5 0021;	
    // (ׅ) HEBREW MARK LOWER DOT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_004)
{
    uint32_t const cps[2] = { 0x0600, 0x0021 };

    // 0600 0021;	
    // ('\u0600') ARABIC NUMBER SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0600 0021;	
    // ('\u0600') ARABIC NUMBER SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_005)
{
    uint32_t const cps[2] = { 0x0601, 0x0021 };

    // 0601 0021;	
    // ('\u0601') ARABIC SIGN SANAH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0601 0021;	
    // ('\u0601') ARABIC SIGN SANAH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_006)
{
    uint32_t const cps[2] = { 0x0602, 0x0021 };

    // 0602 0021;	
    // ('\u0602') ARABIC FOOTNOTE MARKER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0602 0021;	
    // ('\u0602') ARABIC FOOTNOTE MARKER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_007)
{
    uint32_t const cps[2] = { 0x0603, 0x0021 };

    // 0603 0021;	
    // ('\u0603') ARABIC SIGN SAFHA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0603 0021;	
    // ('\u0603') ARABIC SIGN SAFHA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_008)
{
    uint32_t const cps[2] = { 0x0604, 0x0021 };

    // 0604 0021;	
    // ('\u0604') ARABIC SIGN SAMVAT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0604 0021;	
    // ('\u0604') ARABIC SIGN SAMVAT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_009)
{
    uint32_t const cps[2] = { 0x0605, 0x0021 };

    // 0605 0021;	
    // ('\u0605') ARABIC NUMBER MARK ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0605 0021;	
    // ('\u0605') ARABIC NUMBER MARK ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_010)
{
    uint32_t const cps[2] = { 0x0610, 0x0021 };

    // 0610 0021;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0610 0021;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_011)
{
    uint32_t const cps[2] = { 0x0611, 0x0021 };

    // 0611 0021;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0611 0021;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_012)
{
    uint32_t const cps[2] = { 0x0612, 0x0021 };

    // 0612 0021;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0612 0021;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_013)
{
    uint32_t const cps[2] = { 0x0613, 0x0021 };

    // 0613 0021;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0613 0021;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_014)
{
    uint32_t const cps[2] = { 0x0614, 0x0021 };

    // 0614 0021;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0614 0021;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_015)
{
    uint32_t const cps[2] = { 0x0615, 0x0021 };

    // 0615 0021;	
    // (ؕ) ARABIC SMALL HIGH TAH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0615 0021;	
    // (ؕ) ARABIC SMALL HIGH TAH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_016)
{
    uint32_t const cps[2] = { 0x0616, 0x0021 };

    // 0616 0021;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0616 0021;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_017)
{
    uint32_t const cps[2] = { 0x0617, 0x0021 };

    // 0617 0021;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0617 0021;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_018)
{
    uint32_t const cps[2] = { 0x0618, 0x0021 };

    // 0618 0021;	
    // (ؘ) ARABIC SMALL FATHA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0618 0021;	
    // (ؘ) ARABIC SMALL FATHA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_019)
{
    uint32_t const cps[2] = { 0x0619, 0x0021 };

    // 0619 0021;	
    // (ؙ) ARABIC SMALL DAMMA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0619 0021;	
    // (ؙ) ARABIC SMALL DAMMA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_020)
{
    uint32_t const cps[2] = { 0x061A, 0x0021 };

    // 061A 0021;	
    // (ؚ) ARABIC SMALL KASRA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 061A 0021;	
    // (ؚ) ARABIC SMALL KASRA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_021)
{
    uint32_t const cps[2] = { 0x061C, 0x0021 };

    // 061C 0021;	
    // ('\u061C') ARABIC LETTER MARK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 061C 0021;	
    // ('\u061C') ARABIC LETTER MARK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_022)
{
    uint32_t const cps[2] = { 0x0640, 0x0021 };

    // 0640 0021;	
    // (‎‎ـ‎‎) ARABIC TATWEEL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0640 0021;	
    // (‎‎ـ‎‎) ARABIC TATWEEL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_023)
{
    uint32_t const cps[2] = { 0x06D6, 0x0021 };

    // 06D6 0021;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D6 0021;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_024)
{
    uint32_t const cps[2] = { 0x06D7, 0x0021 };

    // 06D7 0021;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D7 0021;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_025)
{
    uint32_t const cps[2] = { 0x06D8, 0x0021 };

    // 06D8 0021;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D8 0021;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_026)
{
    uint32_t const cps[2] = { 0x06D9, 0x0021 };

    // 06D9 0021;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D9 0021;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_027)
{
    uint32_t const cps[2] = { 0x06DA, 0x0021 };

    // 06DA 0021;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DA 0021;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_028)
{
    uint32_t const cps[2] = { 0x06DB, 0x0021 };

    // 06DB 0021;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DB 0021;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_029)
{
    uint32_t const cps[2] = { 0x06DC, 0x0021 };

    // 06DC 0021;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DC 0021;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_030)
{
    uint32_t const cps[2] = { 0x06DD, 0x0021 };

    // 06DD 0021;	
    // ('\u06DD') ARABIC END OF AYAH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DD 0021;	
    // ('\u06DD') ARABIC END OF AYAH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_031)
{
    uint32_t const cps[2] = { 0x06DF, 0x0021 };

    // 06DF 0021;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DF 0021;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_032)
{
    uint32_t const cps[2] = { 0x06E0, 0x0021 };

    // 06E0 0021;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E0 0021;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_033)
{
    uint32_t const cps[2] = { 0x06E1, 0x0021 };

    // 06E1 0021;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E1 0021;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_034)
{
    uint32_t const cps[2] = { 0x06E2, 0x0021 };

    // 06E2 0021;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E2 0021;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_035)
{
    uint32_t const cps[2] = { 0x06E3, 0x0021 };

    // 06E3 0021;	
    // (ۣ) ARABIC SMALL LOW SEEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E3 0021;	
    // (ۣ) ARABIC SMALL LOW SEEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_036)
{
    uint32_t const cps[2] = { 0x06E4, 0x0021 };

    // 06E4 0021;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E4 0021;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_037)
{
    uint32_t const cps[2] = { 0x06E7, 0x0021 };

    // 06E7 0021;	
    // (ۧ) ARABIC SMALL HIGH YEH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E7 0021;	
    // (ۧ) ARABIC SMALL HIGH YEH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_038)
{
    uint32_t const cps[2] = { 0x06E8, 0x0021 };

    // 06E8 0021;	
    // (ۨ) ARABIC SMALL HIGH NOON	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E8 0021;	
    // (ۨ) ARABIC SMALL HIGH NOON	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_039)
{
    uint32_t const cps[2] = { 0x06EA, 0x0021 };

    // 06EA 0021;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EA 0021;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_040)
{
    uint32_t const cps[2] = { 0x06EB, 0x0021 };

    // 06EB 0021;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EB 0021;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_041)
{
    uint32_t const cps[2] = { 0x06EC, 0x0021 };

    // 06EC 0021;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EC 0021;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_042)
{
    uint32_t const cps[2] = { 0x06ED, 0x0021 };

    // 06ED 0021;	
    // (ۭ) ARABIC SMALL LOW MEEM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06ED 0021;	
    // (ۭ) ARABIC SMALL LOW MEEM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_043)
{
    uint32_t const cps[2] = { 0x070F, 0x0021 };

    // 070F 0021;	
    // ('\u070F') SYRIAC ABBREVIATION MARK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 070F 0021;	
    // ('\u070F') SYRIAC ABBREVIATION MARK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_044)
{
    uint32_t const cps[2] = { 0x0740, 0x0021 };

    // 0740 0021;	
    // (݀) SYRIAC FEMININE DOT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0740 0021;	
    // (݀) SYRIAC FEMININE DOT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_045)
{
    uint32_t const cps[2] = { 0x0743, 0x0021 };

    // 0743 0021;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0743 0021;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_046)
{
    uint32_t const cps[2] = { 0x0744, 0x0021 };

    // 0744 0021;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0744 0021;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_047)
{
    uint32_t const cps[2] = { 0x0747, 0x0021 };

    // 0747 0021;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0747 0021;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_048)
{
    uint32_t const cps[2] = { 0x0748, 0x0021 };

    // 0748 0021;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0748 0021;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_049)
{
    uint32_t const cps[2] = { 0x0749, 0x0021 };

    // 0749 0021;	
    // (݉) SYRIAC MUSIC	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0749 0021;	
    // (݉) SYRIAC MUSIC	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_050)
{
    uint32_t const cps[2] = { 0x074A, 0x0021 };

    // 074A 0021;	
    // (݊) SYRIAC BARREKH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 074A 0021;	
    // (݊) SYRIAC BARREKH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_051)
{
    uint32_t const cps[2] = { 0x07FA, 0x0021 };

    // 07FA 0021;	
    // (‎‎ߺ‎‎) NKO LAJANYALAN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 07FA 0021;	
    // (‎‎ߺ‎‎) NKO LAJANYALAN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_052)
{
    uint32_t const cps[2] = { 0x08D4, 0x0021 };

    // 08D4 0021;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D4 0021;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_053)
{
    uint32_t const cps[2] = { 0x08D5, 0x0021 };

    // 08D5 0021;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D5 0021;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_054)
{
    uint32_t const cps[2] = { 0x08D6, 0x0021 };

    // 08D6 0021;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D6 0021;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_055)
{
    uint32_t const cps[2] = { 0x08D7, 0x0021 };

    // 08D7 0021;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D7 0021;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_056)
{
    uint32_t const cps[2] = { 0x08D8, 0x0021 };

    // 08D8 0021;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D8 0021;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_057)
{
    uint32_t const cps[2] = { 0x08D9, 0x0021 };

    // 08D9 0021;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D9 0021;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_058)
{
    uint32_t const cps[2] = { 0x08DA, 0x0021 };

    // 08DA 0021;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DA 0021;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_059)
{
    uint32_t const cps[2] = { 0x08DB, 0x0021 };

    // 08DB 0021;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DB 0021;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_060)
{
    uint32_t const cps[2] = { 0x08DC, 0x0021 };

    // 08DC 0021;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DC 0021;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_061)
{
    uint32_t const cps[2] = { 0x08DD, 0x0021 };

    // 08DD 0021;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DD 0021;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_062)
{
    uint32_t const cps[2] = { 0x08DE, 0x0021 };

    // 08DE 0021;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DE 0021;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_063)
{
    uint32_t const cps[2] = { 0x08DF, 0x0021 };

    // 08DF 0021;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DF 0021;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_064)
{
    uint32_t const cps[2] = { 0x08E0, 0x0021 };

    // 08E0 0021;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E0 0021;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_065)
{
    uint32_t const cps[2] = { 0x08E1, 0x0021 };

    // 08E1 0021;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E1 0021;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_066)
{
    uint32_t const cps[2] = { 0x08E2, 0x0021 };

    // 08E2 0021;	
    // ('\u08E2') ARABIC DISPUTED END OF AYAH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E2 0021;	
    // ('\u08E2') ARABIC DISPUTED END OF AYAH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_067)
{
    uint32_t const cps[2] = { 0x08EA, 0x0021 };

    // 08EA 0021;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EA 0021;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_068)
{
    uint32_t const cps[2] = { 0x08EB, 0x0021 };

    // 08EB 0021;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EB 0021;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_069)
{
    uint32_t const cps[2] = { 0x08EC, 0x0021 };

    // 08EC 0021;	
    // (࣬) ARABIC TONE LOOP ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EC 0021;	
    // (࣬) ARABIC TONE LOOP ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_070)
{
    uint32_t const cps[2] = { 0x08ED, 0x0021 };

    // 08ED 0021;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08ED 0021;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_071)
{
    uint32_t const cps[2] = { 0x08EE, 0x0021 };

    // 08EE 0021;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EE 0021;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_072)
{
    uint32_t const cps[2] = { 0x08EF, 0x0021 };

    // 08EF 0021;	
    // (࣯) ARABIC TONE LOOP BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EF 0021;	
    // (࣯) ARABIC TONE LOOP BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_073)
{
    uint32_t const cps[2] = { 0x08F3, 0x0021 };

    // 08F3 0021;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08F3 0021;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_074)
{
    uint32_t const cps[2] = { 0x0951, 0x0021 };

    // 0951 0021;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0951 0021;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_075)
{
    uint32_t const cps[2] = { 0x0952, 0x0021 };

    // 0952 0021;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0952 0021;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_076)
{
    uint32_t const cps[2] = { 0x0F18, 0x0021 };

    // 0F18 0021;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F18 0021;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_077)
{
    uint32_t const cps[2] = { 0x0F19, 0x0021 };

    // 0F19 0021;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F19 0021;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_078)
{
    uint32_t const cps[2] = { 0x0F35, 0x0021 };

    // 0F35 0021;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F35 0021;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_079)
{
    uint32_t const cps[2] = { 0x0F37, 0x0021 };

    // 0F37 0021;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F37 0021;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_080)
{
    uint32_t const cps[2] = { 0x0F3E, 0x0021 };

    // 0F3E 0021;	
    // (༾) TIBETAN SIGN YAR TSHES	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F3E 0021;	
    // (༾) TIBETAN SIGN YAR TSHES	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_081)
{
    uint32_t const cps[2] = { 0x0F3F, 0x0021 };

    // 0F3F 0021;	
    // (༿) TIBETAN SIGN MAR TSHES	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F3F 0021;	
    // (༿) TIBETAN SIGN MAR TSHES	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_082)
{
    uint32_t const cps[2] = { 0x0F82, 0x0021 };

    // 0F82 0021;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F82 0021;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_083)
{
    uint32_t const cps[2] = { 0x0F83, 0x0021 };

    // 0F83 0021;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F83 0021;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_084)
{
    uint32_t const cps[2] = { 0x0F86, 0x0021 };

    // 0F86 0021;	
    // (྆) TIBETAN SIGN LCI RTAGS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F86 0021;	
    // (྆) TIBETAN SIGN LCI RTAGS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_085)
{
    uint32_t const cps[2] = { 0x0F87, 0x0021 };

    // 0F87 0021;	
    // (྇) TIBETAN SIGN YANG RTAGS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F87 0021;	
    // (྇) TIBETAN SIGN YANG RTAGS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_086)
{
    uint32_t const cps[2] = { 0x0FC6, 0x0021 };

    // 0FC6 0021;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0FC6 0021;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_087)
{
    uint32_t const cps[2] = { 0x17B4, 0x0021 };

    // 17B4 0021;	
    // (឴) KHMER VOWEL INHERENT AQ	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17B4 0021;	
    // (឴) KHMER VOWEL INHERENT AQ	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_088)
{
    uint32_t const cps[2] = { 0x17B5, 0x0021 };

    // 17B5 0021;	
    // (឵) KHMER VOWEL INHERENT AA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17B5 0021;	
    // (឵) KHMER VOWEL INHERENT AA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_089)
{
    uint32_t const cps[2] = { 0x17D3, 0x0021 };

    // 17D3 0021;	
    // (៓) KHMER SIGN BATHAMASAT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17D3 0021;	
    // (៓) KHMER SIGN BATHAMASAT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_090)
{
    uint32_t const cps[2] = { 0x180A, 0x0021 };

    // 180A 0021;	
    // (᠊) MONGOLIAN NIRUGU	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180A 0021;	
    // (᠊) MONGOLIAN NIRUGU	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_091)
{
    uint32_t const cps[2] = { 0x180B, 0x0021 };

    // 180B 0021;	
    // (᠋) MONGOLIAN FREE VARIATION SELECTOR ONE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180B 0021;	
    // (᠋) MONGOLIAN FREE VARIATION SELECTOR ONE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_092)
{
    uint32_t const cps[2] = { 0x180C, 0x0021 };

    // 180C 0021;	
    // (᠌) MONGOLIAN FREE VARIATION SELECTOR TWO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180C 0021;	
    // (᠌) MONGOLIAN FREE VARIATION SELECTOR TWO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_093)
{
    uint32_t const cps[2] = { 0x180D, 0x0021 };

    // 180D 0021;	
    // (᠍) MONGOLIAN FREE VARIATION SELECTOR THREE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180D 0021;	
    // (᠍) MONGOLIAN FREE VARIATION SELECTOR THREE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_094)
{
    uint32_t const cps[2] = { 0x180E, 0x0021 };

    // 180E 0021;	
    // ('\u180E') MONGOLIAN VOWEL SEPARATOR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180E 0021;	
    // ('\u180E') MONGOLIAN VOWEL SEPARATOR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_095)
{
    uint32_t const cps[2] = { 0x1A7F, 0x0021 };

    // 1A7F 0021;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A7F 0021;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_096)
{
    uint32_t const cps[2] = { 0x1B6B, 0x0021 };

    // 1B6B 0021;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6B 0021;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_097)
{
    uint32_t const cps[2] = { 0x1B6C, 0x0021 };

    // 1B6C 0021;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6C 0021;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_098)
{
    uint32_t const cps[2] = { 0x1B6D, 0x0021 };

    // 1B6D 0021;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6D 0021;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_099)
{
    uint32_t const cps[2] = { 0x1B6E, 0x0021 };

    // 1B6E 0021;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6E 0021;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_100)
{
    uint32_t const cps[2] = { 0x1B6F, 0x0021 };

    // 1B6F 0021;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6F 0021;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_101)
{
    uint32_t const cps[2] = { 0x1B70, 0x0021 };

    // 1B70 0021;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B70 0021;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_102)
{
    uint32_t const cps[2] = { 0x1B71, 0x0021 };

    // 1B71 0021;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B71 0021;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_103)
{
    uint32_t const cps[2] = { 0x1B72, 0x0021 };

    // 1B72 0021;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B72 0021;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_104)
{
    uint32_t const cps[2] = { 0x1B73, 0x0021 };

    // 1B73 0021;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B73 0021;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_105)
{
    uint32_t const cps[2] = { 0x1CD0, 0x0021 };

    // 1CD0 0021;	
    // (᳐) VEDIC TONE KARSHANA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD0 0021;	
    // (᳐) VEDIC TONE KARSHANA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_106)
{
    uint32_t const cps[2] = { 0x1CD1, 0x0021 };

    // 1CD1 0021;	
    // (᳑) VEDIC TONE SHARA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD1 0021;	
    // (᳑) VEDIC TONE SHARA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_107)
{
    uint32_t const cps[2] = { 0x1CD2, 0x0021 };

    // 1CD2 0021;	
    // (᳒) VEDIC TONE PRENKHA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD2 0021;	
    // (᳒) VEDIC TONE PRENKHA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_108)
{
    uint32_t const cps[2] = { 0x1CD3, 0x0021 };

    // 1CD3 0021;	
    // (᳓) VEDIC SIGN NIHSHVASA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD3 0021;	
    // (᳓) VEDIC SIGN NIHSHVASA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_109)
{
    uint32_t const cps[2] = { 0x1CD4, 0x0021 };

    // 1CD4 0021;	
    // (᳔) VEDIC SIGN YAJURVEDIC MIDLINE SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD4 0021;	
    // (᳔) VEDIC SIGN YAJURVEDIC MIDLINE SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_110)
{
    uint32_t const cps[2] = { 0x1CD5, 0x0021 };

    // 1CD5 0021;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD5 0021;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_111)
{
    uint32_t const cps[2] = { 0x1CD6, 0x0021 };

    // 1CD6 0021;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD6 0021;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_112)
{
    uint32_t const cps[2] = { 0x1CD7, 0x0021 };

    // 1CD7 0021;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD7 0021;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_113)
{
    uint32_t const cps[2] = { 0x1CD8, 0x0021 };

    // 1CD8 0021;	
    // (᳘) VEDIC TONE CANDRA BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD8 0021;	
    // (᳘) VEDIC TONE CANDRA BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_114)
{
    uint32_t const cps[2] = { 0x1CD9, 0x0021 };

    // 1CD9 0021;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD9 0021;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_115)
{
    uint32_t const cps[2] = { 0x1CDA, 0x0021 };

    // 1CDA 0021;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDA 0021;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_116)
{
    uint32_t const cps[2] = { 0x1CDB, 0x0021 };

    // 1CDB 0021;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDB 0021;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_117)
{
    uint32_t const cps[2] = { 0x1CDC, 0x0021 };

    // 1CDC 0021;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDC 0021;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_118)
{
    uint32_t const cps[2] = { 0x1CDD, 0x0021 };

    // 1CDD 0021;	
    // (᳝) VEDIC TONE DOT BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDD 0021;	
    // (᳝) VEDIC TONE DOT BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_119)
{
    uint32_t const cps[2] = { 0x1CDE, 0x0021 };

    // 1CDE 0021;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDE 0021;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_120)
{
    uint32_t const cps[2] = { 0x1CDF, 0x0021 };

    // 1CDF 0021;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDF 0021;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_121)
{
    uint32_t const cps[2] = { 0x1CE0, 0x0021 };

    // 1CE0 0021;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE0 0021;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_122)
{
    uint32_t const cps[2] = { 0x1CE1, 0x0021 };

    // 1CE1 0021;	
    // (᳡) VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE1 0021;	
    // (᳡) VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_123)
{
    uint32_t const cps[2] = { 0x1CE2, 0x0021 };

    // 1CE2 0021;	
    // (᳢) VEDIC SIGN VISARGA SVARITA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE2 0021;	
    // (᳢) VEDIC SIGN VISARGA SVARITA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_124)
{
    uint32_t const cps[2] = { 0x1CE3, 0x0021 };

    // 1CE3 0021;	
    // (᳣) VEDIC SIGN VISARGA UDATTA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE3 0021;	
    // (᳣) VEDIC SIGN VISARGA UDATTA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_125)
{
    uint32_t const cps[2] = { 0x1CE4, 0x0021 };

    // 1CE4 0021;	
    // (᳤) VEDIC SIGN REVERSED VISARGA UDATTA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE4 0021;	
    // (᳤) VEDIC SIGN REVERSED VISARGA UDATTA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_126)
{
    uint32_t const cps[2] = { 0x1CE5, 0x0021 };

    // 1CE5 0021;	
    // (᳥) VEDIC SIGN VISARGA ANUDATTA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE5 0021;	
    // (᳥) VEDIC SIGN VISARGA ANUDATTA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_127)
{
    uint32_t const cps[2] = { 0x1CE6, 0x0021 };

    // 1CE6 0021;	
    // (᳦) VEDIC SIGN REVERSED VISARGA ANUDATTA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE6 0021;	
    // (᳦) VEDIC SIGN REVERSED VISARGA ANUDATTA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_128)
{
    uint32_t const cps[2] = { 0x1CE7, 0x0021 };

    // 1CE7 0021;	
    // (᳧) VEDIC SIGN VISARGA UDATTA WITH TAIL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE7 0021;	
    // (᳧) VEDIC SIGN VISARGA UDATTA WITH TAIL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_129)
{
    uint32_t const cps[2] = { 0x1CE8, 0x0021 };

    // 1CE8 0021;	
    // (᳨) VEDIC SIGN VISARGA ANUDATTA WITH TAIL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE8 0021;	
    // (᳨) VEDIC SIGN VISARGA ANUDATTA WITH TAIL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_130)
{
    uint32_t const cps[2] = { 0x1CF4, 0x0021 };

    // 1CF4 0021;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF4 0021;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_131)
{
    uint32_t const cps[2] = { 0x1CF7, 0x0021 };

    // 1CF7 0021;	
    // (᳷) VEDIC SIGN ATIKRAMA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF7 0021;	
    // (᳷) VEDIC SIGN ATIKRAMA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_132)
{
    uint32_t const cps[2] = { 0x1CF8, 0x0021 };

    // 1CF8 0021;	
    // (᳸) VEDIC TONE RING ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF8 0021;	
    // (᳸) VEDIC TONE RING ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_133)
{
    uint32_t const cps[2] = { 0x1CF9, 0x0021 };

    // 1CF9 0021;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF9 0021;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_134)
{
    uint32_t const cps[2] = { 0x200B, 0x0021 };

    // 200B 0021;	
    // ('\u200B') ZERO WIDTH SPACE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200B 0021;	
    // ('\u200B') ZERO WIDTH SPACE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_135)
{
    uint32_t const cps[2] = { 0x200C, 0x0021 };

    // 200C 0021;	
    // ('\u200C') ZERO WIDTH NON-JOINER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200C 0021;	
    // ('\u200C') ZERO WIDTH NON-JOINER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_136)
{
    uint32_t const cps[2] = { 0x200D, 0x0021 };

    // 200D 0021;	
    // ('\u200D') ZERO WIDTH JOINER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200D 0021;	
    // ('\u200D') ZERO WIDTH JOINER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_137)
{
    uint32_t const cps[2] = { 0x200E, 0x0021 };

    // 200E 0021;	
    // ('\u200E') LEFT-TO-RIGHT MARK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200E 0021;	
    // ('\u200E') LEFT-TO-RIGHT MARK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_138)
{
    uint32_t const cps[2] = { 0x200F, 0x0021 };

    // 200F 0021;	
    // ('\u200F') RIGHT-TO-LEFT MARK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200F 0021;	
    // ('\u200F') RIGHT-TO-LEFT MARK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_139)
{
    uint32_t const cps[2] = { 0x202A, 0x0021 };

    // 202A 0021;	
    // ('\u202A') LEFT-TO-RIGHT EMBEDDING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202A 0021;	
    // ('\u202A') LEFT-TO-RIGHT EMBEDDING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_140)
{
    uint32_t const cps[2] = { 0x202B, 0x0021 };

    // 202B 0021;	
    // ('\u202B') RIGHT-TO-LEFT EMBEDDING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202B 0021;	
    // ('\u202B') RIGHT-TO-LEFT EMBEDDING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_141)
{
    uint32_t const cps[2] = { 0x202C, 0x0021 };

    // 202C 0021;	
    // ('\u202C') POP DIRECTIONAL FORMATTING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202C 0021;	
    // ('\u202C') POP DIRECTIONAL FORMATTING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_142)
{
    uint32_t const cps[2] = { 0x202D, 0x0021 };

    // 202D 0021;	
    // ('\u202D') LEFT-TO-RIGHT OVERRIDE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202D 0021;	
    // ('\u202D') LEFT-TO-RIGHT OVERRIDE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_143)
{
    uint32_t const cps[2] = { 0x202E, 0x0021 };

    // 202E 0021;	
    // ('\u202E') RIGHT-TO-LEFT OVERRIDE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202E 0021;	
    // ('\u202E') RIGHT-TO-LEFT OVERRIDE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_144)
{
    uint32_t const cps[2] = { 0x2060, 0x0021 };

    // 2060 0021;	
    // ('\u2060') WORD JOINER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2060 0021;	
    // ('\u2060') WORD JOINER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_145)
{
    uint32_t const cps[2] = { 0x2061, 0x0021 };

    // 2061 0021;	
    // ('\u2061') FUNCTION APPLICATION	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2061 0021;	
    // ('\u2061') FUNCTION APPLICATION	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_146)
{
    uint32_t const cps[2] = { 0x2062, 0x0021 };

    // 2062 0021;	
    // ('\u2062') INVISIBLE TIMES	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2062 0021;	
    // ('\u2062') INVISIBLE TIMES	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_147)
{
    uint32_t const cps[2] = { 0x2063, 0x0021 };

    // 2063 0021;	
    // ('\u2063') INVISIBLE SEPARATOR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2063 0021;	
    // ('\u2063') INVISIBLE SEPARATOR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_148)
{
    uint32_t const cps[2] = { 0x2064, 0x0021 };

    // 2064 0021;	
    // ('\u2064') INVISIBLE PLUS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2064 0021;	
    // ('\u2064') INVISIBLE PLUS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_149)
{
    uint32_t const cps[2] = { 0x2066, 0x0021 };

    // 2066 0021;	
    // ('\u2066') LEFT-TO-RIGHT ISOLATE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2066 0021;	
    // ('\u2066') LEFT-TO-RIGHT ISOLATE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_150)
{
    uint32_t const cps[2] = { 0x2067, 0x0021 };

    // 2067 0021;	
    // ('\u2067') RIGHT-TO-LEFT ISOLATE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2067 0021;	
    // ('\u2067') RIGHT-TO-LEFT ISOLATE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_151)
{
    uint32_t const cps[2] = { 0x2068, 0x0021 };

    // 2068 0021;	
    // ('\u2068') FIRST STRONG ISOLATE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2068 0021;	
    // ('\u2068') FIRST STRONG ISOLATE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_152)
{
    uint32_t const cps[2] = { 0x2069, 0x0021 };

    // 2069 0021;	
    // ('\u2069') POP DIRECTIONAL ISOLATE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2069 0021;	
    // ('\u2069') POP DIRECTIONAL ISOLATE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_153)
{
    uint32_t const cps[2] = { 0x206A, 0x0021 };

    // 206A 0021;	
    // ('\u206A') INHIBIT SYMMETRIC SWAPPING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206A 0021;	
    // ('\u206A') INHIBIT SYMMETRIC SWAPPING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_154)
{
    uint32_t const cps[2] = { 0x206B, 0x0021 };

    // 206B 0021;	
    // ('\u206B') ACTIVATE SYMMETRIC SWAPPING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206B 0021;	
    // ('\u206B') ACTIVATE SYMMETRIC SWAPPING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_155)
{
    uint32_t const cps[2] = { 0x206C, 0x0021 };

    // 206C 0021;	
    // ('\u206C') INHIBIT ARABIC FORM SHAPING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206C 0021;	
    // ('\u206C') INHIBIT ARABIC FORM SHAPING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_156)
{
    uint32_t const cps[2] = { 0x206D, 0x0021 };

    // 206D 0021;	
    // ('\u206D') ACTIVATE ARABIC FORM SHAPING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206D 0021;	
    // ('\u206D') ACTIVATE ARABIC FORM SHAPING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_157)
{
    uint32_t const cps[2] = { 0x206E, 0x0021 };

    // 206E 0021;	
    // ('\u206E') NATIONAL DIGIT SHAPES	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206E 0021;	
    // ('\u206E') NATIONAL DIGIT SHAPES	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_158)
{
    uint32_t const cps[2] = { 0x206F, 0x0021 };

    // 206F 0021;	
    // ('\u206F') NOMINAL DIGIT SHAPES	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206F 0021;	
    // ('\u206F') NOMINAL DIGIT SHAPES	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_159)
{
    uint32_t const cps[2] = { 0x2D7F, 0x0021 };

    // 2D7F 0021;	
    // (⵿) TIFINAGH CONSONANT JOINER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2D7F 0021;	
    // (⵿) TIFINAGH CONSONANT JOINER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_160)
{
    uint32_t const cps[2] = { 0xA670, 0x0021 };

    // A670 0021;	
    // (꙰) COMBINING CYRILLIC TEN MILLIONS SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A670 0021;	
    // (꙰) COMBINING CYRILLIC TEN MILLIONS SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_161)
{
    uint32_t const cps[2] = { 0xA671, 0x0021 };

    // A671 0021;	
    // (꙱) COMBINING CYRILLIC HUNDRED MILLIONS SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A671 0021;	
    // (꙱) COMBINING CYRILLIC HUNDRED MILLIONS SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_162)
{
    uint32_t const cps[2] = { 0xA672, 0x0021 };

    // A672 0021;	
    // (꙲) COMBINING CYRILLIC THOUSAND MILLIONS SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A672 0021;	
    // (꙲) COMBINING CYRILLIC THOUSAND MILLIONS SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_163)
{
    uint32_t const cps[2] = { 0xA8E0, 0x0021 };

    // A8E0 0021;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E0 0021;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_164)
{
    uint32_t const cps[2] = { 0xA8E1, 0x0021 };

    // A8E1 0021;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E1 0021;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_165)
{
    uint32_t const cps[2] = { 0xA8E2, 0x0021 };

    // A8E2 0021;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E2 0021;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_166)
{
    uint32_t const cps[2] = { 0xA8E3, 0x0021 };

    // A8E3 0021;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E3 0021;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_167)
{
    uint32_t const cps[2] = { 0xA8E4, 0x0021 };

    // A8E4 0021;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E4 0021;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_168)
{
    uint32_t const cps[2] = { 0xA8E5, 0x0021 };

    // A8E5 0021;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E5 0021;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_169)
{
    uint32_t const cps[2] = { 0xA8E6, 0x0021 };

    // A8E6 0021;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E6 0021;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_170)
{
    uint32_t const cps[2] = { 0xA8E7, 0x0021 };

    // A8E7 0021;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E7 0021;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_171)
{
    uint32_t const cps[2] = { 0xA8E8, 0x0021 };

    // A8E8 0021;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E8 0021;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_172)
{
    uint32_t const cps[2] = { 0xA8E9, 0x0021 };

    // A8E9 0021;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E9 0021;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_173)
{
    uint32_t const cps[2] = { 0xA8EA, 0x0021 };

    // A8EA 0021;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EA 0021;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_174)
{
    uint32_t const cps[2] = { 0xA8EB, 0x0021 };

    // A8EB 0021;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EB 0021;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_175)
{
    uint32_t const cps[2] = { 0xA8EC, 0x0021 };

    // A8EC 0021;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EC 0021;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_176)
{
    uint32_t const cps[2] = { 0xA8ED, 0x0021 };

    // A8ED 0021;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8ED 0021;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_177)
{
    uint32_t const cps[2] = { 0xA8EE, 0x0021 };

    // A8EE 0021;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EE 0021;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_178)
{
    uint32_t const cps[2] = { 0xA8EF, 0x0021 };

    // A8EF 0021;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EF 0021;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_179)
{
    uint32_t const cps[2] = { 0xA8F0, 0x0021 };

    // A8F0 0021;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8F0 0021;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_180)
{
    uint32_t const cps[2] = { 0xA8F1, 0x0021 };

    // A8F1 0021;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8F1 0021;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_181)
{
    uint32_t const cps[2] = { 0xFE00, 0x0021 };

    // FE00 0021;	
    // (︀) VARIATION SELECTOR-1	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE00 0021;	
    // (︀) VARIATION SELECTOR-1	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_182)
{
    uint32_t const cps[2] = { 0xFE01, 0x0021 };

    // FE01 0021;	
    // (︁) VARIATION SELECTOR-2	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE01 0021;	
    // (︁) VARIATION SELECTOR-2	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_183)
{
    uint32_t const cps[2] = { 0xFE02, 0x0021 };

    // FE02 0021;	
    // (︂) VARIATION SELECTOR-3	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE02 0021;	
    // (︂) VARIATION SELECTOR-3	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_184)
{
    uint32_t const cps[2] = { 0xFE03, 0x0021 };

    // FE03 0021;	
    // (︃) VARIATION SELECTOR-4	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE03 0021;	
    // (︃) VARIATION SELECTOR-4	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_185)
{
    uint32_t const cps[2] = { 0xFE04, 0x0021 };

    // FE04 0021;	
    // (︄) VARIATION SELECTOR-5	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE04 0021;	
    // (︄) VARIATION SELECTOR-5	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_186)
{
    uint32_t const cps[2] = { 0xFE05, 0x0021 };

    // FE05 0021;	
    // (︅) VARIATION SELECTOR-6	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE05 0021;	
    // (︅) VARIATION SELECTOR-6	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_187)
{
    uint32_t const cps[2] = { 0xFE06, 0x0021 };

    // FE06 0021;	
    // (︆) VARIATION SELECTOR-7	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE06 0021;	
    // (︆) VARIATION SELECTOR-7	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_188)
{
    uint32_t const cps[2] = { 0xFE07, 0x0021 };

    // FE07 0021;	
    // (︇) VARIATION SELECTOR-8	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE07 0021;	
    // (︇) VARIATION SELECTOR-8	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_189)
{
    uint32_t const cps[2] = { 0xFE08, 0x0021 };

    // FE08 0021;	
    // (︈) VARIATION SELECTOR-9	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE08 0021;	
    // (︈) VARIATION SELECTOR-9	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_190)
{
    uint32_t const cps[2] = { 0xFE09, 0x0021 };

    // FE09 0021;	
    // (︉) VARIATION SELECTOR-10	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE09 0021;	
    // (︉) VARIATION SELECTOR-10	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_191)
{
    uint32_t const cps[2] = { 0xFE0A, 0x0021 };

    // FE0A 0021;	
    // (︊) VARIATION SELECTOR-11	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0A 0021;	
    // (︊) VARIATION SELECTOR-11	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_192)
{
    uint32_t const cps[2] = { 0xFE0B, 0x0021 };

    // FE0B 0021;	
    // (︋) VARIATION SELECTOR-12	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0B 0021;	
    // (︋) VARIATION SELECTOR-12	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_193)
{
    uint32_t const cps[2] = { 0xFE0C, 0x0021 };

    // FE0C 0021;	
    // (︌) VARIATION SELECTOR-13	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0C 0021;	
    // (︌) VARIATION SELECTOR-13	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_194)
{
    uint32_t const cps[2] = { 0xFE0D, 0x0021 };

    // FE0D 0021;	
    // (︍) VARIATION SELECTOR-14	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0D 0021;	
    // (︍) VARIATION SELECTOR-14	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_195)
{
    uint32_t const cps[2] = { 0xFE0E, 0x0021 };

    // FE0E 0021;	
    // (︎) VARIATION SELECTOR-15	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0E 0021;	
    // (︎) VARIATION SELECTOR-15	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_196)
{
    uint32_t const cps[2] = { 0xFE0F, 0x0021 };

    // FE0F 0021;	
    // (️) VARIATION SELECTOR-16	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0F 0021;	
    // (️) VARIATION SELECTOR-16	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_197)
{
    uint32_t const cps[2] = { 0xFE21, 0x0021 };

    // FE21 0021;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE21 0021;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_198)
{
    uint32_t const cps[2] = { 0xFE23, 0x0021 };

    // FE23 0021;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE23 0021;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_199)
{
    uint32_t const cps[2] = { 0xFE24, 0x0021 };

    // FE24 0021;	
    // (︤) COMBINING MACRON LEFT HALF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE24 0021;	
    // (︤) COMBINING MACRON LEFT HALF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_200)
{
    uint32_t const cps[2] = { 0xFE25, 0x0021 };

    // FE25 0021;	
    // (︥) COMBINING MACRON RIGHT HALF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE25 0021;	
    // (︥) COMBINING MACRON RIGHT HALF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_201)
{
    uint32_t const cps[2] = { 0xFE26, 0x0021 };

    // FE26 0021;	
    // (︦) COMBINING CONJOINING MACRON	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE26 0021;	
    // (︦) COMBINING CONJOINING MACRON	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_202)
{
    uint32_t const cps[2] = { 0xFE28, 0x0021 };

    // FE28 0021;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE28 0021;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_203)
{
    uint32_t const cps[2] = { 0xFE2A, 0x0021 };

    // FE2A 0021;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2A 0021;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_204)
{
    uint32_t const cps[2] = { 0xFE2B, 0x0021 };

    // FE2B 0021;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2B 0021;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_205)
{
    uint32_t const cps[2] = { 0xFE2C, 0x0021 };

    // FE2C 0021;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2C 0021;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_206)
{
    uint32_t const cps[2] = { 0xFE2D, 0x0021 };

    // FE2D 0021;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2D 0021;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_207)
{
    uint32_t const cps[2] = { 0xFE2F, 0x0021 };

    // FE2F 0021;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2F 0021;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_208)
{
    uint32_t const cps[2] = { 0xFE73, 0x0021 };

    // FE73 0021;	
    // (‎‎ﹳ‎‎) ARABIC TAIL FRAGMENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE73 0021;	
    // (‎‎ﹳ‎‎) ARABIC TAIL FRAGMENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_209)
{
    uint32_t const cps[2] = { 0xFEFF, 0x0021 };

    // FEFF 0021;	
    // ('\uFEFF') ZERO WIDTH NO-BREAK SPACE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FEFF 0021;	
    // ('\uFEFF') ZERO WIDTH NO-BREAK SPACE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_210)
{
    uint32_t const cps[2] = { 0xFFF9, 0x0021 };

    // FFF9 0021;	
    // ('\uFFF9') INTERLINEAR ANNOTATION ANCHOR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFF9 0021;	
    // ('\uFFF9') INTERLINEAR ANNOTATION ANCHOR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_211)
{
    uint32_t const cps[2] = { 0xFFFA, 0x0021 };

    // FFFA 0021;	
    // ('\uFFFA') INTERLINEAR ANNOTATION SEPARATOR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFFA 0021;	
    // ('\uFFFA') INTERLINEAR ANNOTATION SEPARATOR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_212)
{
    uint32_t const cps[2] = { 0xFFFB, 0x0021 };

    // FFFB 0021;	
    // ('\uFFFB') INTERLINEAR ANNOTATION TERMINATOR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFFB 0021;	
    // ('\uFFFB') INTERLINEAR ANNOTATION TERMINATOR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_213)
{
    uint32_t const cps[2] = { 0x102E0, 0x0021 };

    // 102E0 0021;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 102E0 0021;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_214)
{
    uint32_t const cps[2] = { 0x110BD, 0x0021 };

    // 110BD 0021;	
    // ('\U000110BD') KAITHI NUMBER SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 110BD 0021;	
    // ('\U000110BD') KAITHI NUMBER SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_215)
{
    uint32_t const cps[2] = { 0x11366, 0x0021 };

    // 11366 0021;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11366 0021;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_216)
{
    uint32_t const cps[2] = { 0x11367, 0x0021 };

    // 11367 0021;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11367 0021;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_217)
{
    uint32_t const cps[2] = { 0x11368, 0x0021 };

    // 11368 0021;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11368 0021;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_218)
{
    uint32_t const cps[2] = { 0x11369, 0x0021 };

    // 11369 0021;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11369 0021;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_219)
{
    uint32_t const cps[2] = { 0x1136A, 0x0021 };

    // 1136A 0021;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136A 0021;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_220)
{
    uint32_t const cps[2] = { 0x1136B, 0x0021 };

    // 1136B 0021;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136B 0021;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_221)
{
    uint32_t const cps[2] = { 0x1136C, 0x0021 };

    // 1136C 0021;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136C 0021;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_222)
{
    uint32_t const cps[2] = { 0x11370, 0x0021 };

    // 11370 0021;	
    // (𑍰) COMBINING GRANTHA LETTER A	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11370 0021;	
    // (𑍰) COMBINING GRANTHA LETTER A	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_223)
{
    uint32_t const cps[2] = { 0x11371, 0x0021 };

    // 11371 0021;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11371 0021;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_224)
{
    uint32_t const cps[2] = { 0x11372, 0x0021 };

    // 11372 0021;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11372 0021;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_225)
{
    uint32_t const cps[2] = { 0x11373, 0x0021 };

    // 11373 0021;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11373 0021;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_226)
{
    uint32_t const cps[2] = { 0x11374, 0x0021 };

    // 11374 0021;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11374 0021;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_227)
{
    uint32_t const cps[2] = { 0x1BCA0, 0x0021 };

    // 1BCA0 0021;	
    // ('\U0001BCA0') SHORTHAND FORMAT LETTER OVERLAP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA0 0021;	
    // ('\U0001BCA0') SHORTHAND FORMAT LETTER OVERLAP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_228)
{
    uint32_t const cps[2] = { 0x1BCA1, 0x0021 };

    // 1BCA1 0021;	
    // ('\U0001BCA1') SHORTHAND FORMAT CONTINUING OVERLAP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA1 0021;	
    // ('\U0001BCA1') SHORTHAND FORMAT CONTINUING OVERLAP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_229)
{
    uint32_t const cps[2] = { 0x1BCA2, 0x0021 };

    // 1BCA2 0021;	
    // ('\U0001BCA2') SHORTHAND FORMAT DOWN STEP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA2 0021;	
    // ('\U0001BCA2') SHORTHAND FORMAT DOWN STEP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_230)
{
    uint32_t const cps[2] = { 0x1BCA3, 0x0021 };

    // 1BCA3 0021;	
    // ('\U0001BCA3') SHORTHAND FORMAT UP STEP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA3 0021;	
    // ('\U0001BCA3') SHORTHAND FORMAT UP STEP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_231)
{
    uint32_t const cps[2] = { 0x1D165, 0x0021 };

    // 1D165 0021;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D165 0021;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_232)
{
    uint32_t const cps[2] = { 0x1D166, 0x0021 };

    // 1D166 0021;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D166 0021;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_233)
{
    uint32_t const cps[2] = { 0x1D167, 0x0021 };

    // 1D167 0021;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D167 0021;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_234)
{
    uint32_t const cps[2] = { 0x1D168, 0x0021 };

    // 1D168 0021;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D168 0021;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_235)
{
    uint32_t const cps[2] = { 0x1D169, 0x0021 };

    // 1D169 0021;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D169 0021;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_236)
{
    uint32_t const cps[2] = { 0x1D16D, 0x0021 };

    // 1D16D 0021;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16D 0021;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_237)
{
    uint32_t const cps[2] = { 0x1D16E, 0x0021 };

    // 1D16E 0021;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16E 0021;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_238)
{
    uint32_t const cps[2] = { 0x1D16F, 0x0021 };

    // 1D16F 0021;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16F 0021;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_239)
{
    uint32_t const cps[2] = { 0x1D170, 0x0021 };

    // 1D170 0021;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D170 0021;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_240)
{
    uint32_t const cps[2] = { 0x1D171, 0x0021 };

    // 1D171 0021;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D171 0021;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_241)
{
    uint32_t const cps[2] = { 0x1D172, 0x0021 };

    // 1D172 0021;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D172 0021;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_242)
{
    uint32_t const cps[2] = { 0x1D173, 0x0021 };

    // 1D173 0021;	
    // ('\U0001D173') MUSICAL SYMBOL BEGIN BEAM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D173 0021;	
    // ('\U0001D173') MUSICAL SYMBOL BEGIN BEAM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_243)
{
    uint32_t const cps[2] = { 0x1D174, 0x0021 };

    // 1D174 0021;	
    // ('\U0001D174') MUSICAL SYMBOL END BEAM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D174 0021;	
    // ('\U0001D174') MUSICAL SYMBOL END BEAM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_244)
{
    uint32_t const cps[2] = { 0x1D175, 0x0021 };

    // 1D175 0021;	
    // ('\U0001D175') MUSICAL SYMBOL BEGIN TIE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D175 0021;	
    // ('\U0001D175') MUSICAL SYMBOL BEGIN TIE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_245)
{
    uint32_t const cps[2] = { 0x1D176, 0x0021 };

    // 1D176 0021;	
    // ('\U0001D176') MUSICAL SYMBOL END TIE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D176 0021;	
    // ('\U0001D176') MUSICAL SYMBOL END TIE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_246)
{
    uint32_t const cps[2] = { 0x1D177, 0x0021 };

    // 1D177 0021;	
    // ('\U0001D177') MUSICAL SYMBOL BEGIN SLUR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D177 0021;	
    // ('\U0001D177') MUSICAL SYMBOL BEGIN SLUR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_247)
{
    uint32_t const cps[2] = { 0x1D178, 0x0021 };

    // 1D178 0021;	
    // ('\U0001D178') MUSICAL SYMBOL END SLUR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D178 0021;	
    // ('\U0001D178') MUSICAL SYMBOL END SLUR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_248)
{
    uint32_t const cps[2] = { 0x1D179, 0x0021 };

    // 1D179 0021;	
    // ('\U0001D179') MUSICAL SYMBOL BEGIN PHRASE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D179 0021;	
    // ('\U0001D179') MUSICAL SYMBOL BEGIN PHRASE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_249)
{
    uint32_t const cps[2] = { 0x1D17A, 0x0021 };

    // 1D17A 0021;	
    // ('\U0001D17A') MUSICAL SYMBOL END PHRASE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17A 0021;	
    // ('\U0001D17A') MUSICAL SYMBOL END PHRASE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_250)
{
    uint32_t const cps[2] = { 0x1D17B, 0x0021 };

    // 1D17B 0021;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17B 0021;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_251)
{
    uint32_t const cps[2] = { 0x1D17C, 0x0021 };

    // 1D17C 0021;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17C 0021;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_252)
{
    uint32_t const cps[2] = { 0x1D17D, 0x0021 };

    // 1D17D 0021;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17D 0021;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_253)
{
    uint32_t const cps[2] = { 0x1D17E, 0x0021 };

    // 1D17E 0021;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17E 0021;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_254)
{
    uint32_t const cps[2] = { 0x1D17F, 0x0021 };

    // 1D17F 0021;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17F 0021;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_255)
{
    uint32_t const cps[2] = { 0x1D180, 0x0021 };

    // 1D180 0021;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D180 0021;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_256)
{
    uint32_t const cps[2] = { 0x1D181, 0x0021 };

    // 1D181 0021;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D181 0021;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_257)
{
    uint32_t const cps[2] = { 0x1D182, 0x0021 };

    // 1D182 0021;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D182 0021;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_258)
{
    uint32_t const cps[2] = { 0x1D185, 0x0021 };

    // 1D185 0021;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D185 0021;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_259)
{
    uint32_t const cps[2] = { 0x1D186, 0x0021 };

    // 1D186 0021;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D186 0021;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_260)
{
    uint32_t const cps[2] = { 0x1D187, 0x0021 };

    // 1D187 0021;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D187 0021;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_261)
{
    uint32_t const cps[2] = { 0x1D188, 0x0021 };

    // 1D188 0021;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D188 0021;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_262)
{
    uint32_t const cps[2] = { 0x1D189, 0x0021 };

    // 1D189 0021;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D189 0021;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_263)
{
    uint32_t const cps[2] = { 0x1D18A, 0x0021 };

    // 1D18A 0021;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D18A 0021;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_264)
{
    uint32_t const cps[2] = { 0x1D18B, 0x0021 };

    // 1D18B 0021;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D18B 0021;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_265)
{
    uint32_t const cps[2] = { 0x1D1AA, 0x0021 };

    // 1D1AA 0021;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AA 0021;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_266)
{
    uint32_t const cps[2] = { 0x1D1AB, 0x0021 };

    // 1D1AB 0021;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AB 0021;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_267)
{
    uint32_t const cps[2] = { 0x1D1AC, 0x0021 };

    // 1D1AC 0021;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AC 0021;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_268)
{
    uint32_t const cps[2] = { 0x1D1AD, 0x0021 };

    // 1D1AD 0021;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AD 0021;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_269)
{
    uint32_t const cps[2] = { 0x1D242, 0x0021 };

    // 1D242 0021;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D242 0021;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_270)
{
    uint32_t const cps[2] = { 0x1D243, 0x0021 };

    // 1D243 0021;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D243 0021;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_271)
{
    uint32_t const cps[2] = { 0x1D244, 0x0021 };

    // 1D244 0021;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D244 0021;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_272)
{
    uint32_t const cps[2] = { 0x1DA00, 0x0021 };

    // 1DA00 0021;	
    // (𝨀) SIGNWRITING HEAD RIM	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA00 0021;	
    // (𝨀) SIGNWRITING HEAD RIM	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_273)
{
    uint32_t const cps[2] = { 0x1DA01, 0x0021 };

    // 1DA01 0021;	
    // (𝨁) SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA01 0021;	
    // (𝨁) SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_274)
{
    uint32_t const cps[2] = { 0x1DA02, 0x0021 };

    // 1DA02 0021;	
    // (𝨂) SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA02 0021;	
    // (𝨂) SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_275)
{
    uint32_t const cps[2] = { 0x1DA03, 0x0021 };

    // 1DA03 0021;	
    // (𝨃) SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA03 0021;	
    // (𝨃) SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_276)
{
    uint32_t const cps[2] = { 0x1DA04, 0x0021 };

    // 1DA04 0021;	
    // (𝨄) SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA04 0021;	
    // (𝨄) SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_277)
{
    uint32_t const cps[2] = { 0x1DA05, 0x0021 };

    // 1DA05 0021;	
    // (𝨅) SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA05 0021;	
    // (𝨅) SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_278)
{
    uint32_t const cps[2] = { 0x1DA06, 0x0021 };

    // 1DA06 0021;	
    // (𝨆) SIGNWRITING HEAD MOVEMENT CIRCLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA06 0021;	
    // (𝨆) SIGNWRITING HEAD MOVEMENT CIRCLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_279)
{
    uint32_t const cps[2] = { 0x1DA07, 0x0021 };

    // 1DA07 0021;	
    // (𝨇) SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA07 0021;	
    // (𝨇) SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_280)
{
    uint32_t const cps[2] = { 0x1DA08, 0x0021 };

    // 1DA08 0021;	
    // (𝨈) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA08 0021;	
    // (𝨈) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_281)
{
    uint32_t const cps[2] = { 0x1DA09, 0x0021 };

    // 1DA09 0021;	
    // (𝨉) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA09 0021;	
    // (𝨉) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_282)
{
    uint32_t const cps[2] = { 0x1DA0A, 0x0021 };

    // 1DA0A 0021;	
    // (𝨊) SIGNWRITING EYEBROWS STRAIGHT UP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0A 0021;	
    // (𝨊) SIGNWRITING EYEBROWS STRAIGHT UP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_283)
{
    uint32_t const cps[2] = { 0x1DA0B, 0x0021 };

    // 1DA0B 0021;	
    // (𝨋) SIGNWRITING EYEBROWS STRAIGHT NEUTRAL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0B 0021;	
    // (𝨋) SIGNWRITING EYEBROWS STRAIGHT NEUTRAL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_284)
{
    uint32_t const cps[2] = { 0x1DA0C, 0x0021 };

    // 1DA0C 0021;	
    // (𝨌) SIGNWRITING EYEBROWS STRAIGHT DOWN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0C 0021;	
    // (𝨌) SIGNWRITING EYEBROWS STRAIGHT DOWN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_285)
{
    uint32_t const cps[2] = { 0x1DA0D, 0x0021 };

    // 1DA0D 0021;	
    // (𝨍) SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0D 0021;	
    // (𝨍) SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_286)
{
    uint32_t const cps[2] = { 0x1DA0E, 0x0021 };

    // 1DA0E 0021;	
    // (𝨎) SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0E 0021;	
    // (𝨎) SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_287)
{
    uint32_t const cps[2] = { 0x1DA0F, 0x0021 };

    // 1DA0F 0021;	
    // (𝨏) SIGNWRITING DREAMY EYEBROWS UP NEUTRAL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0F 0021;	
    // (𝨏) SIGNWRITING DREAMY EYEBROWS UP NEUTRAL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_288)
{
    uint32_t const cps[2] = { 0x1DA10, 0x0021 };

    // 1DA10 0021;	
    // (𝨐) SIGNWRITING DREAMY EYEBROWS NEUTRAL UP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA10 0021;	
    // (𝨐) SIGNWRITING DREAMY EYEBROWS NEUTRAL UP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_289)
{
    uint32_t const cps[2] = { 0x1DA11, 0x0021 };

    // 1DA11 0021;	
    // (𝨑) SIGNWRITING FOREHEAD NEUTRAL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA11 0021;	
    // (𝨑) SIGNWRITING FOREHEAD NEUTRAL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_290)
{
    uint32_t const cps[2] = { 0x1DA12, 0x0021 };

    // 1DA12 0021;	
    // (𝨒) SIGNWRITING FOREHEAD CONTACT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA12 0021;	
    // (𝨒) SIGNWRITING FOREHEAD CONTACT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_291)
{
    uint32_t const cps[2] = { 0x1DA13, 0x0021 };

    // 1DA13 0021;	
    // (𝨓) SIGNWRITING FOREHEAD WRINKLED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA13 0021;	
    // (𝨓) SIGNWRITING FOREHEAD WRINKLED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_292)
{
    uint32_t const cps[2] = { 0x1DA14, 0x0021 };

    // 1DA14 0021;	
    // (𝨔) SIGNWRITING EYES OPEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA14 0021;	
    // (𝨔) SIGNWRITING EYES OPEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_293)
{
    uint32_t const cps[2] = { 0x1DA15, 0x0021 };

    // 1DA15 0021;	
    // (𝨕) SIGNWRITING EYES SQUEEZED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA15 0021;	
    // (𝨕) SIGNWRITING EYES SQUEEZED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_294)
{
    uint32_t const cps[2] = { 0x1DA16, 0x0021 };

    // 1DA16 0021;	
    // (𝨖) SIGNWRITING EYES CLOSED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA16 0021;	
    // (𝨖) SIGNWRITING EYES CLOSED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_295)
{
    uint32_t const cps[2] = { 0x1DA17, 0x0021 };

    // 1DA17 0021;	
    // (𝨗) SIGNWRITING EYE BLINK SINGLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA17 0021;	
    // (𝨗) SIGNWRITING EYE BLINK SINGLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_296)
{
    uint32_t const cps[2] = { 0x1DA18, 0x0021 };

    // 1DA18 0021;	
    // (𝨘) SIGNWRITING EYE BLINK MULTIPLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA18 0021;	
    // (𝨘) SIGNWRITING EYE BLINK MULTIPLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_297)
{
    uint32_t const cps[2] = { 0x1DA19, 0x0021 };

    // 1DA19 0021;	
    // (𝨙) SIGNWRITING EYES HALF OPEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA19 0021;	
    // (𝨙) SIGNWRITING EYES HALF OPEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_298)
{
    uint32_t const cps[2] = { 0x1DA1A, 0x0021 };

    // 1DA1A 0021;	
    // (𝨚) SIGNWRITING EYES WIDE OPEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1A 0021;	
    // (𝨚) SIGNWRITING EYES WIDE OPEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_299)
{
    uint32_t const cps[2] = { 0x1DA1B, 0x0021 };

    // 1DA1B 0021;	
    // (𝨛) SIGNWRITING EYES HALF CLOSED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1B 0021;	
    // (𝨛) SIGNWRITING EYES HALF CLOSED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_300)
{
    uint32_t const cps[2] = { 0x1DA1C, 0x0021 };

    // 1DA1C 0021;	
    // (𝨜) SIGNWRITING EYES WIDENING MOVEMENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1C 0021;	
    // (𝨜) SIGNWRITING EYES WIDENING MOVEMENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_301)
{
    uint32_t const cps[2] = { 0x1DA1D, 0x0021 };

    // 1DA1D 0021;	
    // (𝨝) SIGNWRITING EYE WINK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1D 0021;	
    // (𝨝) SIGNWRITING EYE WINK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_302)
{
    uint32_t const cps[2] = { 0x1DA1E, 0x0021 };

    // 1DA1E 0021;	
    // (𝨞) SIGNWRITING EYELASHES UP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1E 0021;	
    // (𝨞) SIGNWRITING EYELASHES UP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_303)
{
    uint32_t const cps[2] = { 0x1DA1F, 0x0021 };

    // 1DA1F 0021;	
    // (𝨟) SIGNWRITING EYELASHES DOWN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1F 0021;	
    // (𝨟) SIGNWRITING EYELASHES DOWN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_304)
{
    uint32_t const cps[2] = { 0x1DA20, 0x0021 };

    // 1DA20 0021;	
    // (𝨠) SIGNWRITING EYELASHES FLUTTERING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA20 0021;	
    // (𝨠) SIGNWRITING EYELASHES FLUTTERING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_305)
{
    uint32_t const cps[2] = { 0x1DA21, 0x0021 };

    // 1DA21 0021;	
    // (𝨡) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA21 0021;	
    // (𝨡) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_306)
{
    uint32_t const cps[2] = { 0x1DA22, 0x0021 };

    // 1DA22 0021;	
    // (𝨢) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA22 0021;	
    // (𝨢) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_307)
{
    uint32_t const cps[2] = { 0x1DA23, 0x0021 };

    // 1DA23 0021;	
    // (𝨣) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA23 0021;	
    // (𝨣) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_308)
{
    uint32_t const cps[2] = { 0x1DA24, 0x0021 };

    // 1DA24 0021;	
    // (𝨤) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA24 0021;	
    // (𝨤) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_309)
{
    uint32_t const cps[2] = { 0x1DA25, 0x0021 };

    // 1DA25 0021;	
    // (𝨥) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA25 0021;	
    // (𝨥) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_310)
{
    uint32_t const cps[2] = { 0x1DA26, 0x0021 };

    // 1DA26 0021;	
    // (𝨦) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA26 0021;	
    // (𝨦) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_311)
{
    uint32_t const cps[2] = { 0x1DA27, 0x0021 };

    // 1DA27 0021;	
    // (𝨧) SIGNWRITING EYEGAZE-WALLPLANE CURVED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA27 0021;	
    // (𝨧) SIGNWRITING EYEGAZE-WALLPLANE CURVED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_312)
{
    uint32_t const cps[2] = { 0x1DA28, 0x0021 };

    // 1DA28 0021;	
    // (𝨨) SIGNWRITING EYEGAZE-FLOORPLANE CURVED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA28 0021;	
    // (𝨨) SIGNWRITING EYEGAZE-FLOORPLANE CURVED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_313)
{
    uint32_t const cps[2] = { 0x1DA29, 0x0021 };

    // 1DA29 0021;	
    // (𝨩) SIGNWRITING EYEGAZE-WALLPLANE CIRCLING	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA29 0021;	
    // (𝨩) SIGNWRITING EYEGAZE-WALLPLANE CIRCLING	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_314)
{
    uint32_t const cps[2] = { 0x1DA2A, 0x0021 };

    // 1DA2A 0021;	
    // (𝨪) SIGNWRITING CHEEKS PUFFED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2A 0021;	
    // (𝨪) SIGNWRITING CHEEKS PUFFED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_315)
{
    uint32_t const cps[2] = { 0x1DA2B, 0x0021 };

    // 1DA2B 0021;	
    // (𝨫) SIGNWRITING CHEEKS NEUTRAL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2B 0021;	
    // (𝨫) SIGNWRITING CHEEKS NEUTRAL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_316)
{
    uint32_t const cps[2] = { 0x1DA2C, 0x0021 };

    // 1DA2C 0021;	
    // (𝨬) SIGNWRITING CHEEKS SUCKED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2C 0021;	
    // (𝨬) SIGNWRITING CHEEKS SUCKED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_317)
{
    uint32_t const cps[2] = { 0x1DA2D, 0x0021 };

    // 1DA2D 0021;	
    // (𝨭) SIGNWRITING TENSE CHEEKS HIGH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2D 0021;	
    // (𝨭) SIGNWRITING TENSE CHEEKS HIGH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_318)
{
    uint32_t const cps[2] = { 0x1DA2E, 0x0021 };

    // 1DA2E 0021;	
    // (𝨮) SIGNWRITING TENSE CHEEKS MIDDLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2E 0021;	
    // (𝨮) SIGNWRITING TENSE CHEEKS MIDDLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_319)
{
    uint32_t const cps[2] = { 0x1DA2F, 0x0021 };

    // 1DA2F 0021;	
    // (𝨯) SIGNWRITING TENSE CHEEKS LOW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2F 0021;	
    // (𝨯) SIGNWRITING TENSE CHEEKS LOW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_320)
{
    uint32_t const cps[2] = { 0x1DA30, 0x0021 };

    // 1DA30 0021;	
    // (𝨰) SIGNWRITING EARS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA30 0021;	
    // (𝨰) SIGNWRITING EARS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_321)
{
    uint32_t const cps[2] = { 0x1DA31, 0x0021 };

    // 1DA31 0021;	
    // (𝨱) SIGNWRITING NOSE NEUTRAL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA31 0021;	
    // (𝨱) SIGNWRITING NOSE NEUTRAL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_322)
{
    uint32_t const cps[2] = { 0x1DA32, 0x0021 };

    // 1DA32 0021;	
    // (𝨲) SIGNWRITING NOSE CONTACT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA32 0021;	
    // (𝨲) SIGNWRITING NOSE CONTACT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_323)
{
    uint32_t const cps[2] = { 0x1DA33, 0x0021 };

    // 1DA33 0021;	
    // (𝨳) SIGNWRITING NOSE WRINKLES	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA33 0021;	
    // (𝨳) SIGNWRITING NOSE WRINKLES	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_324)
{
    uint32_t const cps[2] = { 0x1DA34, 0x0021 };

    // 1DA34 0021;	
    // (𝨴) SIGNWRITING NOSE WIGGLES	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA34 0021;	
    // (𝨴) SIGNWRITING NOSE WIGGLES	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_325)
{
    uint32_t const cps[2] = { 0x1DA35, 0x0021 };

    // 1DA35 0021;	
    // (𝨵) SIGNWRITING AIR BLOWING OUT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA35 0021;	
    // (𝨵) SIGNWRITING AIR BLOWING OUT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_326)
{
    uint32_t const cps[2] = { 0x1DA36, 0x0021 };

    // 1DA36 0021;	
    // (𝨶) SIGNWRITING AIR SUCKING IN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA36 0021;	
    // (𝨶) SIGNWRITING AIR SUCKING IN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_327)
{
    uint32_t const cps[2] = { 0x1DA3B, 0x0021 };

    // 1DA3B 0021;	
    // (𝨻) SIGNWRITING MOUTH CLOSED NEUTRAL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3B 0021;	
    // (𝨻) SIGNWRITING MOUTH CLOSED NEUTRAL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_328)
{
    uint32_t const cps[2] = { 0x1DA3C, 0x0021 };

    // 1DA3C 0021;	
    // (𝨼) SIGNWRITING MOUTH CLOSED FORWARD	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3C 0021;	
    // (𝨼) SIGNWRITING MOUTH CLOSED FORWARD	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_329)
{
    uint32_t const cps[2] = { 0x1DA3D, 0x0021 };

    // 1DA3D 0021;	
    // (𝨽) SIGNWRITING MOUTH CLOSED CONTACT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3D 0021;	
    // (𝨽) SIGNWRITING MOUTH CLOSED CONTACT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_330)
{
    uint32_t const cps[2] = { 0x1DA3E, 0x0021 };

    // 1DA3E 0021;	
    // (𝨾) SIGNWRITING MOUTH SMILE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3E 0021;	
    // (𝨾) SIGNWRITING MOUTH SMILE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_331)
{
    uint32_t const cps[2] = { 0x1DA3F, 0x0021 };

    // 1DA3F 0021;	
    // (𝨿) SIGNWRITING MOUTH SMILE WRINKLED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3F 0021;	
    // (𝨿) SIGNWRITING MOUTH SMILE WRINKLED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_332)
{
    uint32_t const cps[2] = { 0x1DA40, 0x0021 };

    // 1DA40 0021;	
    // (𝩀) SIGNWRITING MOUTH SMILE OPEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA40 0021;	
    // (𝩀) SIGNWRITING MOUTH SMILE OPEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_333)
{
    uint32_t const cps[2] = { 0x1DA41, 0x0021 };

    // 1DA41 0021;	
    // (𝩁) SIGNWRITING MOUTH FROWN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA41 0021;	
    // (𝩁) SIGNWRITING MOUTH FROWN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_334)
{
    uint32_t const cps[2] = { 0x1DA42, 0x0021 };

    // 1DA42 0021;	
    // (𝩂) SIGNWRITING MOUTH FROWN WRINKLED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA42 0021;	
    // (𝩂) SIGNWRITING MOUTH FROWN WRINKLED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_335)
{
    uint32_t const cps[2] = { 0x1DA43, 0x0021 };

    // 1DA43 0021;	
    // (𝩃) SIGNWRITING MOUTH FROWN OPEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA43 0021;	
    // (𝩃) SIGNWRITING MOUTH FROWN OPEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_336)
{
    uint32_t const cps[2] = { 0x1DA44, 0x0021 };

    // 1DA44 0021;	
    // (𝩄) SIGNWRITING MOUTH OPEN CIRCLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA44 0021;	
    // (𝩄) SIGNWRITING MOUTH OPEN CIRCLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_337)
{
    uint32_t const cps[2] = { 0x1DA45, 0x0021 };

    // 1DA45 0021;	
    // (𝩅) SIGNWRITING MOUTH OPEN FORWARD	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA45 0021;	
    // (𝩅) SIGNWRITING MOUTH OPEN FORWARD	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_338)
{
    uint32_t const cps[2] = { 0x1DA46, 0x0021 };

    // 1DA46 0021;	
    // (𝩆) SIGNWRITING MOUTH OPEN WRINKLED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA46 0021;	
    // (𝩆) SIGNWRITING MOUTH OPEN WRINKLED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_339)
{
    uint32_t const cps[2] = { 0x1DA47, 0x0021 };

    // 1DA47 0021;	
    // (𝩇) SIGNWRITING MOUTH OPEN OVAL	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA47 0021;	
    // (𝩇) SIGNWRITING MOUTH OPEN OVAL	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_340)
{
    uint32_t const cps[2] = { 0x1DA48, 0x0021 };

    // 1DA48 0021;	
    // (𝩈) SIGNWRITING MOUTH OPEN OVAL WRINKLED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA48 0021;	
    // (𝩈) SIGNWRITING MOUTH OPEN OVAL WRINKLED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_341)
{
    uint32_t const cps[2] = { 0x1DA49, 0x0021 };

    // 1DA49 0021;	
    // (𝩉) SIGNWRITING MOUTH OPEN OVAL YAWN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA49 0021;	
    // (𝩉) SIGNWRITING MOUTH OPEN OVAL YAWN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_342)
{
    uint32_t const cps[2] = { 0x1DA4A, 0x0021 };

    // 1DA4A 0021;	
    // (𝩊) SIGNWRITING MOUTH OPEN RECTANGLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4A 0021;	
    // (𝩊) SIGNWRITING MOUTH OPEN RECTANGLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_343)
{
    uint32_t const cps[2] = { 0x1DA4B, 0x0021 };

    // 1DA4B 0021;	
    // (𝩋) SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4B 0021;	
    // (𝩋) SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_344)
{
    uint32_t const cps[2] = { 0x1DA4C, 0x0021 };

    // 1DA4C 0021;	
    // (𝩌) SIGNWRITING MOUTH OPEN RECTANGLE YAWN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4C 0021;	
    // (𝩌) SIGNWRITING MOUTH OPEN RECTANGLE YAWN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_345)
{
    uint32_t const cps[2] = { 0x1DA4D, 0x0021 };

    // 1DA4D 0021;	
    // (𝩍) SIGNWRITING MOUTH KISS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4D 0021;	
    // (𝩍) SIGNWRITING MOUTH KISS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_346)
{
    uint32_t const cps[2] = { 0x1DA4E, 0x0021 };

    // 1DA4E 0021;	
    // (𝩎) SIGNWRITING MOUTH KISS FORWARD	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4E 0021;	
    // (𝩎) SIGNWRITING MOUTH KISS FORWARD	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_347)
{
    uint32_t const cps[2] = { 0x1DA4F, 0x0021 };

    // 1DA4F 0021;	
    // (𝩏) SIGNWRITING MOUTH KISS WRINKLED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4F 0021;	
    // (𝩏) SIGNWRITING MOUTH KISS WRINKLED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_348)
{
    uint32_t const cps[2] = { 0x1DA50, 0x0021 };

    // 1DA50 0021;	
    // (𝩐) SIGNWRITING MOUTH TENSE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA50 0021;	
    // (𝩐) SIGNWRITING MOUTH TENSE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_349)
{
    uint32_t const cps[2] = { 0x1DA51, 0x0021 };

    // 1DA51 0021;	
    // (𝩑) SIGNWRITING MOUTH TENSE FORWARD	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA51 0021;	
    // (𝩑) SIGNWRITING MOUTH TENSE FORWARD	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_350)
{
    uint32_t const cps[2] = { 0x1DA52, 0x0021 };

    // 1DA52 0021;	
    // (𝩒) SIGNWRITING MOUTH TENSE SUCKED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA52 0021;	
    // (𝩒) SIGNWRITING MOUTH TENSE SUCKED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_351)
{
    uint32_t const cps[2] = { 0x1DA53, 0x0021 };

    // 1DA53 0021;	
    // (𝩓) SIGNWRITING LIPS PRESSED TOGETHER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA53 0021;	
    // (𝩓) SIGNWRITING LIPS PRESSED TOGETHER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_352)
{
    uint32_t const cps[2] = { 0x1DA54, 0x0021 };

    // 1DA54 0021;	
    // (𝩔) SIGNWRITING LIP LOWER OVER UPPER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA54 0021;	
    // (𝩔) SIGNWRITING LIP LOWER OVER UPPER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_353)
{
    uint32_t const cps[2] = { 0x1DA55, 0x0021 };

    // 1DA55 0021;	
    // (𝩕) SIGNWRITING LIP UPPER OVER LOWER	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA55 0021;	
    // (𝩕) SIGNWRITING LIP UPPER OVER LOWER	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_354)
{
    uint32_t const cps[2] = { 0x1DA56, 0x0021 };

    // 1DA56 0021;	
    // (𝩖) SIGNWRITING MOUTH CORNERS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA56 0021;	
    // (𝩖) SIGNWRITING MOUTH CORNERS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_355)
{
    uint32_t const cps[2] = { 0x1DA57, 0x0021 };

    // 1DA57 0021;	
    // (𝩗) SIGNWRITING MOUTH WRINKLES SINGLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA57 0021;	
    // (𝩗) SIGNWRITING MOUTH WRINKLES SINGLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_356)
{
    uint32_t const cps[2] = { 0x1DA58, 0x0021 };

    // 1DA58 0021;	
    // (𝩘) SIGNWRITING MOUTH WRINKLES DOUBLE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA58 0021;	
    // (𝩘) SIGNWRITING MOUTH WRINKLES DOUBLE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_357)
{
    uint32_t const cps[2] = { 0x1DA59, 0x0021 };

    // 1DA59 0021;	
    // (𝩙) SIGNWRITING TONGUE STICKING OUT FAR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA59 0021;	
    // (𝩙) SIGNWRITING TONGUE STICKING OUT FAR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_358)
{
    uint32_t const cps[2] = { 0x1DA5A, 0x0021 };

    // 1DA5A 0021;	
    // (𝩚) SIGNWRITING TONGUE LICKING LIPS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5A 0021;	
    // (𝩚) SIGNWRITING TONGUE LICKING LIPS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_359)
{
    uint32_t const cps[2] = { 0x1DA5B, 0x0021 };

    // 1DA5B 0021;	
    // (𝩛) SIGNWRITING TONGUE TIP BETWEEN LIPS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5B 0021;	
    // (𝩛) SIGNWRITING TONGUE TIP BETWEEN LIPS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_360)
{
    uint32_t const cps[2] = { 0x1DA5C, 0x0021 };

    // 1DA5C 0021;	
    // (𝩜) SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5C 0021;	
    // (𝩜) SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_361)
{
    uint32_t const cps[2] = { 0x1DA5D, 0x0021 };

    // 1DA5D 0021;	
    // (𝩝) SIGNWRITING TONGUE INSIDE MOUTH RELAXED	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5D 0021;	
    // (𝩝) SIGNWRITING TONGUE INSIDE MOUTH RELAXED	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_362)
{
    uint32_t const cps[2] = { 0x1DA5E, 0x0021 };

    // 1DA5E 0021;	
    // (𝩞) SIGNWRITING TONGUE MOVES AGAINST CHEEK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5E 0021;	
    // (𝩞) SIGNWRITING TONGUE MOVES AGAINST CHEEK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_363)
{
    uint32_t const cps[2] = { 0x1DA5F, 0x0021 };

    // 1DA5F 0021;	
    // (𝩟) SIGNWRITING TONGUE CENTRE STICKING OUT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5F 0021;	
    // (𝩟) SIGNWRITING TONGUE CENTRE STICKING OUT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_364)
{
    uint32_t const cps[2] = { 0x1DA60, 0x0021 };

    // 1DA60 0021;	
    // (𝩠) SIGNWRITING TONGUE CENTRE INSIDE MOUTH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA60 0021;	
    // (𝩠) SIGNWRITING TONGUE CENTRE INSIDE MOUTH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_365)
{
    uint32_t const cps[2] = { 0x1DA61, 0x0021 };

    // 1DA61 0021;	
    // (𝩡) SIGNWRITING TEETH	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA61 0021;	
    // (𝩡) SIGNWRITING TEETH	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_366)
{
    uint32_t const cps[2] = { 0x1DA62, 0x0021 };

    // 1DA62 0021;	
    // (𝩢) SIGNWRITING TEETH MOVEMENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA62 0021;	
    // (𝩢) SIGNWRITING TEETH MOVEMENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_367)
{
    uint32_t const cps[2] = { 0x1DA63, 0x0021 };

    // 1DA63 0021;	
    // (𝩣) SIGNWRITING TEETH ON TONGUE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA63 0021;	
    // (𝩣) SIGNWRITING TEETH ON TONGUE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_368)
{
    uint32_t const cps[2] = { 0x1DA64, 0x0021 };

    // 1DA64 0021;	
    // (𝩤) SIGNWRITING TEETH ON TONGUE MOVEMENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA64 0021;	
    // (𝩤) SIGNWRITING TEETH ON TONGUE MOVEMENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_369)
{
    uint32_t const cps[2] = { 0x1DA65, 0x0021 };

    // 1DA65 0021;	
    // (𝩥) SIGNWRITING TEETH ON LIPS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA65 0021;	
    // (𝩥) SIGNWRITING TEETH ON LIPS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_370)
{
    uint32_t const cps[2] = { 0x1DA66, 0x0021 };

    // 1DA66 0021;	
    // (𝩦) SIGNWRITING TEETH ON LIPS MOVEMENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA66 0021;	
    // (𝩦) SIGNWRITING TEETH ON LIPS MOVEMENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_371)
{
    uint32_t const cps[2] = { 0x1DA67, 0x0021 };

    // 1DA67 0021;	
    // (𝩧) SIGNWRITING TEETH BITE LIPS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA67 0021;	
    // (𝩧) SIGNWRITING TEETH BITE LIPS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_372)
{
    uint32_t const cps[2] = { 0x1DA68, 0x0021 };

    // 1DA68 0021;	
    // (𝩨) SIGNWRITING MOVEMENT-WALLPLANE JAW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA68 0021;	
    // (𝩨) SIGNWRITING MOVEMENT-WALLPLANE JAW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_373)
{
    uint32_t const cps[2] = { 0x1DA69, 0x0021 };

    // 1DA69 0021;	
    // (𝩩) SIGNWRITING MOVEMENT-FLOORPLANE JAW	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA69 0021;	
    // (𝩩) SIGNWRITING MOVEMENT-FLOORPLANE JAW	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_374)
{
    uint32_t const cps[2] = { 0x1DA6A, 0x0021 };

    // 1DA6A 0021;	
    // (𝩪) SIGNWRITING NECK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6A 0021;	
    // (𝩪) SIGNWRITING NECK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_375)
{
    uint32_t const cps[2] = { 0x1DA6B, 0x0021 };

    // 1DA6B 0021;	
    // (𝩫) SIGNWRITING HAIR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6B 0021;	
    // (𝩫) SIGNWRITING HAIR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_376)
{
    uint32_t const cps[2] = { 0x1DA6C, 0x0021 };

    // 1DA6C 0021;	
    // (𝩬) SIGNWRITING EXCITEMENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6C 0021;	
    // (𝩬) SIGNWRITING EXCITEMENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_377)
{
    uint32_t const cps[2] = { 0x1DA75, 0x0021 };

    // 1DA75 0021;	
    // (𝩵) SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA75 0021;	
    // (𝩵) SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_378)
{
    uint32_t const cps[2] = { 0x1DA84, 0x0021 };

    // 1DA84 0021;	
    // (𝪄) SIGNWRITING LOCATION HEAD NECK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA84 0021;	
    // (𝪄) SIGNWRITING LOCATION HEAD NECK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_379)
{
    uint32_t const cps[2] = { 0x1DA9B, 0x0021 };

    // 1DA9B 0021;	
    // (𝪛) SIGNWRITING FILL MODIFIER-2	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9B 0021;	
    // (𝪛) SIGNWRITING FILL MODIFIER-2	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_380)
{
    uint32_t const cps[2] = { 0x1DA9C, 0x0021 };

    // 1DA9C 0021;	
    // (𝪜) SIGNWRITING FILL MODIFIER-3	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9C 0021;	
    // (𝪜) SIGNWRITING FILL MODIFIER-3	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_381)
{
    uint32_t const cps[2] = { 0x1DA9D, 0x0021 };

    // 1DA9D 0021;	
    // (𝪝) SIGNWRITING FILL MODIFIER-4	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9D 0021;	
    // (𝪝) SIGNWRITING FILL MODIFIER-4	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_382)
{
    uint32_t const cps[2] = { 0x1DA9E, 0x0021 };

    // 1DA9E 0021;	
    // (𝪞) SIGNWRITING FILL MODIFIER-5	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9E 0021;	
    // (𝪞) SIGNWRITING FILL MODIFIER-5	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_383)
{
    uint32_t const cps[2] = { 0x1DA9F, 0x0021 };

    // 1DA9F 0021;	
    // (𝪟) SIGNWRITING FILL MODIFIER-6	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9F 0021;	
    // (𝪟) SIGNWRITING FILL MODIFIER-6	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_384)
{
    uint32_t const cps[2] = { 0x1DAA1, 0x0021 };

    // 1DAA1 0021;	
    // (𝪡) SIGNWRITING ROTATION MODIFIER-2	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA1 0021;	
    // (𝪡) SIGNWRITING ROTATION MODIFIER-2	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_385)
{
    uint32_t const cps[2] = { 0x1DAA2, 0x0021 };

    // 1DAA2 0021;	
    // (𝪢) SIGNWRITING ROTATION MODIFIER-3	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA2 0021;	
    // (𝪢) SIGNWRITING ROTATION MODIFIER-3	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_386)
{
    uint32_t const cps[2] = { 0x1DAA3, 0x0021 };

    // 1DAA3 0021;	
    // (𝪣) SIGNWRITING ROTATION MODIFIER-4	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA3 0021;	
    // (𝪣) SIGNWRITING ROTATION MODIFIER-4	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_387)
{
    uint32_t const cps[2] = { 0x1DAA4, 0x0021 };

    // 1DAA4 0021;	
    // (𝪤) SIGNWRITING ROTATION MODIFIER-5	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA4 0021;	
    // (𝪤) SIGNWRITING ROTATION MODIFIER-5	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_388)
{
    uint32_t const cps[2] = { 0x1DAA5, 0x0021 };

    // 1DAA5 0021;	
    // (𝪥) SIGNWRITING ROTATION MODIFIER-6	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA5 0021;	
    // (𝪥) SIGNWRITING ROTATION MODIFIER-6	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_389)
{
    uint32_t const cps[2] = { 0x1DAA6, 0x0021 };

    // 1DAA6 0021;	
    // (𝪦) SIGNWRITING ROTATION MODIFIER-7	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA6 0021;	
    // (𝪦) SIGNWRITING ROTATION MODIFIER-7	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_390)
{
    uint32_t const cps[2] = { 0x1DAA7, 0x0021 };

    // 1DAA7 0021;	
    // (𝪧) SIGNWRITING ROTATION MODIFIER-8	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA7 0021;	
    // (𝪧) SIGNWRITING ROTATION MODIFIER-8	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_391)
{
    uint32_t const cps[2] = { 0x1DAA8, 0x0021 };

    // 1DAA8 0021;	
    // (𝪨) SIGNWRITING ROTATION MODIFIER-9	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA8 0021;	
    // (𝪨) SIGNWRITING ROTATION MODIFIER-9	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_392)
{
    uint32_t const cps[2] = { 0x1DAA9, 0x0021 };

    // 1DAA9 0021;	
    // (𝪩) SIGNWRITING ROTATION MODIFIER-10	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA9 0021;	
    // (𝪩) SIGNWRITING ROTATION MODIFIER-10	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_393)
{
    uint32_t const cps[2] = { 0x1DAAA, 0x0021 };

    // 1DAAA 0021;	
    // (𝪪) SIGNWRITING ROTATION MODIFIER-11	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAA 0021;	
    // (𝪪) SIGNWRITING ROTATION MODIFIER-11	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_394)
{
    uint32_t const cps[2] = { 0x1DAAB, 0x0021 };

    // 1DAAB 0021;	
    // (𝪫) SIGNWRITING ROTATION MODIFIER-12	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAB 0021;	
    // (𝪫) SIGNWRITING ROTATION MODIFIER-12	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_395)
{
    uint32_t const cps[2] = { 0x1DAAC, 0x0021 };

    // 1DAAC 0021;	
    // (𝪬) SIGNWRITING ROTATION MODIFIER-13	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAC 0021;	
    // (𝪬) SIGNWRITING ROTATION MODIFIER-13	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_396)
{
    uint32_t const cps[2] = { 0x1DAAD, 0x0021 };

    // 1DAAD 0021;	
    // (𝪭) SIGNWRITING ROTATION MODIFIER-14	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAD 0021;	
    // (𝪭) SIGNWRITING ROTATION MODIFIER-14	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_397)
{
    uint32_t const cps[2] = { 0x1DAAE, 0x0021 };

    // 1DAAE 0021;	
    // (𝪮) SIGNWRITING ROTATION MODIFIER-15	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAE 0021;	
    // (𝪮) SIGNWRITING ROTATION MODIFIER-15	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_398)
{
    uint32_t const cps[2] = { 0x1DAAF, 0x0021 };

    // 1DAAF 0021;	
    // (𝪯) SIGNWRITING ROTATION MODIFIER-16	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAF 0021;	
    // (𝪯) SIGNWRITING ROTATION MODIFIER-16	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_399)
{
    uint32_t const cps[2] = { 0x1E8D0, 0x0021 };

    // 1E8D0 0021;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D0 0021;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_400)
{
    uint32_t const cps[2] = { 0x1E8D1, 0x0021 };

    // 1E8D1 0021;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D1 0021;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_401)
{
    uint32_t const cps[2] = { 0x1E8D2, 0x0021 };

    // 1E8D2 0021;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D2 0021;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_402)
{
    uint32_t const cps[2] = { 0x1E8D3, 0x0021 };

    // 1E8D3 0021;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D3 0021;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_403)
{
    uint32_t const cps[2] = { 0x1E8D4, 0x0021 };

    // 1E8D4 0021;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D4 0021;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_404)
{
    uint32_t const cps[2] = { 0x1E8D5, 0x0021 };

    // 1E8D5 0021;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D5 0021;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_405)
{
    uint32_t const cps[2] = { 0x1E8D6, 0x0021 };

    // 1E8D6 0021;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D6 0021;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_406)
{
    uint32_t const cps[2] = { 0xE0001, 0x0021 };

    // E0001 0021;	
    // ('\U000E0001') LANGUAGE TAG	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0001 0021;	
    // ('\U000E0001') LANGUAGE TAG	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_407)
{
    uint32_t const cps[2] = { 0xE0020, 0x0021 };

    // E0020 0021;	
    // ('\U000E0020') TAG SPACE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0020 0021;	
    // ('\U000E0020') TAG SPACE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_408)
{
    uint32_t const cps[2] = { 0xE0021, 0x0021 };

    // E0021 0021;	
    // ('\U000E0021') TAG EXCLAMATION MARK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0021 0021;	
    // ('\U000E0021') TAG EXCLAMATION MARK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_409)
{
    uint32_t const cps[2] = { 0xE0022, 0x0021 };

    // E0022 0021;	
    // ('\U000E0022') TAG QUOTATION MARK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0022 0021;	
    // ('\U000E0022') TAG QUOTATION MARK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_410)
{
    uint32_t const cps[2] = { 0xE0023, 0x0021 };

    // E0023 0021;	
    // ('\U000E0023') TAG NUMBER SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0023 0021;	
    // ('\U000E0023') TAG NUMBER SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_411)
{
    uint32_t const cps[2] = { 0xE0024, 0x0021 };

    // E0024 0021;	
    // ('\U000E0024') TAG DOLLAR SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0024 0021;	
    // ('\U000E0024') TAG DOLLAR SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_412)
{
    uint32_t const cps[2] = { 0xE0025, 0x0021 };

    // E0025 0021;	
    // ('\U000E0025') TAG PERCENT SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0025 0021;	
    // ('\U000E0025') TAG PERCENT SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_413)
{
    uint32_t const cps[2] = { 0xE0026, 0x0021 };

    // E0026 0021;	
    // ('\U000E0026') TAG AMPERSAND	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0026 0021;	
    // ('\U000E0026') TAG AMPERSAND	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_414)
{
    uint32_t const cps[2] = { 0xE0027, 0x0021 };

    // E0027 0021;	
    // ('\U000E0027') TAG APOSTROPHE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0027 0021;	
    // ('\U000E0027') TAG APOSTROPHE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_415)
{
    uint32_t const cps[2] = { 0xE0028, 0x0021 };

    // E0028 0021;	
    // ('\U000E0028') TAG LEFT PARENTHESIS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0028 0021;	
    // ('\U000E0028') TAG LEFT PARENTHESIS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_416)
{
    uint32_t const cps[2] = { 0xE0029, 0x0021 };

    // E0029 0021;	
    // ('\U000E0029') TAG RIGHT PARENTHESIS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0029 0021;	
    // ('\U000E0029') TAG RIGHT PARENTHESIS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_417)
{
    uint32_t const cps[2] = { 0xE002A, 0x0021 };

    // E002A 0021;	
    // ('\U000E002A') TAG ASTERISK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002A 0021;	
    // ('\U000E002A') TAG ASTERISK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_418)
{
    uint32_t const cps[2] = { 0xE002B, 0x0021 };

    // E002B 0021;	
    // ('\U000E002B') TAG PLUS SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002B 0021;	
    // ('\U000E002B') TAG PLUS SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_419)
{
    uint32_t const cps[2] = { 0xE002C, 0x0021 };

    // E002C 0021;	
    // ('\U000E002C') TAG COMMA	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002C 0021;	
    // ('\U000E002C') TAG COMMA	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_420)
{
    uint32_t const cps[2] = { 0xE002D, 0x0021 };

    // E002D 0021;	
    // ('\U000E002D') TAG HYPHEN-MINUS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002D 0021;	
    // ('\U000E002D') TAG HYPHEN-MINUS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_421)
{
    uint32_t const cps[2] = { 0xE002E, 0x0021 };

    // E002E 0021;	
    // ('\U000E002E') TAG FULL STOP	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002E 0021;	
    // ('\U000E002E') TAG FULL STOP	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_422)
{
    uint32_t const cps[2] = { 0xE002F, 0x0021 };

    // E002F 0021;	
    // ('\U000E002F') TAG SOLIDUS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002F 0021;	
    // ('\U000E002F') TAG SOLIDUS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_423)
{
    uint32_t const cps[2] = { 0xE0030, 0x0021 };

    // E0030 0021;	
    // ('\U000E0030') TAG DIGIT ZERO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0030 0021;	
    // ('\U000E0030') TAG DIGIT ZERO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_424)
{
    uint32_t const cps[2] = { 0xE0031, 0x0021 };

    // E0031 0021;	
    // ('\U000E0031') TAG DIGIT ONE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0031 0021;	
    // ('\U000E0031') TAG DIGIT ONE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_425)
{
    uint32_t const cps[2] = { 0xE0032, 0x0021 };

    // E0032 0021;	
    // ('\U000E0032') TAG DIGIT TWO	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0032 0021;	
    // ('\U000E0032') TAG DIGIT TWO	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_426)
{
    uint32_t const cps[2] = { 0xE0033, 0x0021 };

    // E0033 0021;	
    // ('\U000E0033') TAG DIGIT THREE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0033 0021;	
    // ('\U000E0033') TAG DIGIT THREE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_427)
{
    uint32_t const cps[2] = { 0xE0034, 0x0021 };

    // E0034 0021;	
    // ('\U000E0034') TAG DIGIT FOUR	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0034 0021;	
    // ('\U000E0034') TAG DIGIT FOUR	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_428)
{
    uint32_t const cps[2] = { 0xE0035, 0x0021 };

    // E0035 0021;	
    // ('\U000E0035') TAG DIGIT FIVE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0035 0021;	
    // ('\U000E0035') TAG DIGIT FIVE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_429)
{
    uint32_t const cps[2] = { 0xE0036, 0x0021 };

    // E0036 0021;	
    // ('\U000E0036') TAG DIGIT SIX	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0036 0021;	
    // ('\U000E0036') TAG DIGIT SIX	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_430)
{
    uint32_t const cps[2] = { 0xE0037, 0x0021 };

    // E0037 0021;	
    // ('\U000E0037') TAG DIGIT SEVEN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0037 0021;	
    // ('\U000E0037') TAG DIGIT SEVEN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_431)
{
    uint32_t const cps[2] = { 0xE0038, 0x0021 };

    // E0038 0021;	
    // ('\U000E0038') TAG DIGIT EIGHT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0038 0021;	
    // ('\U000E0038') TAG DIGIT EIGHT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_432)
{
    uint32_t const cps[2] = { 0xE0039, 0x0021 };

    // E0039 0021;	
    // ('\U000E0039') TAG DIGIT NINE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0039 0021;	
    // ('\U000E0039') TAG DIGIT NINE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_433)
{
    uint32_t const cps[2] = { 0xE003A, 0x0021 };

    // E003A 0021;	
    // ('\U000E003A') TAG COLON	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003A 0021;	
    // ('\U000E003A') TAG COLON	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_434)
{
    uint32_t const cps[2] = { 0xE003B, 0x0021 };

    // E003B 0021;	
    // ('\U000E003B') TAG SEMICOLON	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003B 0021;	
    // ('\U000E003B') TAG SEMICOLON	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_435)
{
    uint32_t const cps[2] = { 0xE003C, 0x0021 };

    // E003C 0021;	
    // ('\U000E003C') TAG LESS-THAN SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003C 0021;	
    // ('\U000E003C') TAG LESS-THAN SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_436)
{
    uint32_t const cps[2] = { 0xE003D, 0x0021 };

    // E003D 0021;	
    // ('\U000E003D') TAG EQUALS SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003D 0021;	
    // ('\U000E003D') TAG EQUALS SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_437)
{
    uint32_t const cps[2] = { 0xE003E, 0x0021 };

    // E003E 0021;	
    // ('\U000E003E') TAG GREATER-THAN SIGN	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003E 0021;	
    // ('\U000E003E') TAG GREATER-THAN SIGN	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_438)
{
    uint32_t const cps[2] = { 0xE003F, 0x0021 };

    // E003F 0021;	
    // ('\U000E003F') TAG QUESTION MARK	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003F 0021;	
    // ('\U000E003F') TAG QUESTION MARK	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_439)
{
    uint32_t const cps[2] = { 0xE0040, 0x0021 };

    // E0040 0021;	
    // ('\U000E0040') TAG COMMERCIAL AT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0040 0021;	
    // ('\U000E0040') TAG COMMERCIAL AT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_440)
{
    uint32_t const cps[2] = { 0xE0041, 0x0021 };

    // E0041 0021;	
    // ('\U000E0041') TAG LATIN CAPITAL LETTER A	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0041 0021;	
    // ('\U000E0041') TAG LATIN CAPITAL LETTER A	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_441)
{
    uint32_t const cps[2] = { 0xE0042, 0x0021 };

    // E0042 0021;	
    // ('\U000E0042') TAG LATIN CAPITAL LETTER B	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0042 0021;	
    // ('\U000E0042') TAG LATIN CAPITAL LETTER B	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_442)
{
    uint32_t const cps[2] = { 0xE0043, 0x0021 };

    // E0043 0021;	
    // ('\U000E0043') TAG LATIN CAPITAL LETTER C	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0043 0021;	
    // ('\U000E0043') TAG LATIN CAPITAL LETTER C	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_443)
{
    uint32_t const cps[2] = { 0xE0044, 0x0021 };

    // E0044 0021;	
    // ('\U000E0044') TAG LATIN CAPITAL LETTER D	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0044 0021;	
    // ('\U000E0044') TAG LATIN CAPITAL LETTER D	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_444)
{
    uint32_t const cps[2] = { 0xE0045, 0x0021 };

    // E0045 0021;	
    // ('\U000E0045') TAG LATIN CAPITAL LETTER E	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0045 0021;	
    // ('\U000E0045') TAG LATIN CAPITAL LETTER E	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_445)
{
    uint32_t const cps[2] = { 0xE0046, 0x0021 };

    // E0046 0021;	
    // ('\U000E0046') TAG LATIN CAPITAL LETTER F	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0046 0021;	
    // ('\U000E0046') TAG LATIN CAPITAL LETTER F	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_446)
{
    uint32_t const cps[2] = { 0xE0047, 0x0021 };

    // E0047 0021;	
    // ('\U000E0047') TAG LATIN CAPITAL LETTER G	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0047 0021;	
    // ('\U000E0047') TAG LATIN CAPITAL LETTER G	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_447)
{
    uint32_t const cps[2] = { 0xE0048, 0x0021 };

    // E0048 0021;	
    // ('\U000E0048') TAG LATIN CAPITAL LETTER H	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0048 0021;	
    // ('\U000E0048') TAG LATIN CAPITAL LETTER H	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_448)
{
    uint32_t const cps[2] = { 0xE0049, 0x0021 };

    // E0049 0021;	
    // ('\U000E0049') TAG LATIN CAPITAL LETTER I	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0049 0021;	
    // ('\U000E0049') TAG LATIN CAPITAL LETTER I	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_449)
{
    uint32_t const cps[2] = { 0xE004A, 0x0021 };

    // E004A 0021;	
    // ('\U000E004A') TAG LATIN CAPITAL LETTER J	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004A 0021;	
    // ('\U000E004A') TAG LATIN CAPITAL LETTER J	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_450)
{
    uint32_t const cps[2] = { 0xE004B, 0x0021 };

    // E004B 0021;	
    // ('\U000E004B') TAG LATIN CAPITAL LETTER K	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004B 0021;	
    // ('\U000E004B') TAG LATIN CAPITAL LETTER K	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_451)
{
    uint32_t const cps[2] = { 0xE004C, 0x0021 };

    // E004C 0021;	
    // ('\U000E004C') TAG LATIN CAPITAL LETTER L	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004C 0021;	
    // ('\U000E004C') TAG LATIN CAPITAL LETTER L	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_452)
{
    uint32_t const cps[2] = { 0xE004D, 0x0021 };

    // E004D 0021;	
    // ('\U000E004D') TAG LATIN CAPITAL LETTER M	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004D 0021;	
    // ('\U000E004D') TAG LATIN CAPITAL LETTER M	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_453)
{
    uint32_t const cps[2] = { 0xE004E, 0x0021 };

    // E004E 0021;	
    // ('\U000E004E') TAG LATIN CAPITAL LETTER N	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004E 0021;	
    // ('\U000E004E') TAG LATIN CAPITAL LETTER N	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_454)
{
    uint32_t const cps[2] = { 0xE004F, 0x0021 };

    // E004F 0021;	
    // ('\U000E004F') TAG LATIN CAPITAL LETTER O	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004F 0021;	
    // ('\U000E004F') TAG LATIN CAPITAL LETTER O	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_455)
{
    uint32_t const cps[2] = { 0xE0050, 0x0021 };

    // E0050 0021;	
    // ('\U000E0050') TAG LATIN CAPITAL LETTER P	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0050 0021;	
    // ('\U000E0050') TAG LATIN CAPITAL LETTER P	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_456)
{
    uint32_t const cps[2] = { 0xE0051, 0x0021 };

    // E0051 0021;	
    // ('\U000E0051') TAG LATIN CAPITAL LETTER Q	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0051 0021;	
    // ('\U000E0051') TAG LATIN CAPITAL LETTER Q	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_457)
{
    uint32_t const cps[2] = { 0xE0052, 0x0021 };

    // E0052 0021;	
    // ('\U000E0052') TAG LATIN CAPITAL LETTER R	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0052 0021;	
    // ('\U000E0052') TAG LATIN CAPITAL LETTER R	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_458)
{
    uint32_t const cps[2] = { 0xE0053, 0x0021 };

    // E0053 0021;	
    // ('\U000E0053') TAG LATIN CAPITAL LETTER S	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0053 0021;	
    // ('\U000E0053') TAG LATIN CAPITAL LETTER S	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_459)
{
    uint32_t const cps[2] = { 0xE0054, 0x0021 };

    // E0054 0021;	
    // ('\U000E0054') TAG LATIN CAPITAL LETTER T	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0054 0021;	
    // ('\U000E0054') TAG LATIN CAPITAL LETTER T	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_460)
{
    uint32_t const cps[2] = { 0xE0055, 0x0021 };

    // E0055 0021;	
    // ('\U000E0055') TAG LATIN CAPITAL LETTER U	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0055 0021;	
    // ('\U000E0055') TAG LATIN CAPITAL LETTER U	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_461)
{
    uint32_t const cps[2] = { 0xE0056, 0x0021 };

    // E0056 0021;	
    // ('\U000E0056') TAG LATIN CAPITAL LETTER V	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0056 0021;	
    // ('\U000E0056') TAG LATIN CAPITAL LETTER V	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_462)
{
    uint32_t const cps[2] = { 0xE0057, 0x0021 };

    // E0057 0021;	
    // ('\U000E0057') TAG LATIN CAPITAL LETTER W	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0057 0021;	
    // ('\U000E0057') TAG LATIN CAPITAL LETTER W	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_463)
{
    uint32_t const cps[2] = { 0xE0058, 0x0021 };

    // E0058 0021;	
    // ('\U000E0058') TAG LATIN CAPITAL LETTER X	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0058 0021;	
    // ('\U000E0058') TAG LATIN CAPITAL LETTER X	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_464)
{
    uint32_t const cps[2] = { 0xE0059, 0x0021 };

    // E0059 0021;	
    // ('\U000E0059') TAG LATIN CAPITAL LETTER Y	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0059 0021;	
    // ('\U000E0059') TAG LATIN CAPITAL LETTER Y	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_465)
{
    uint32_t const cps[2] = { 0xE005A, 0x0021 };

    // E005A 0021;	
    // ('\U000E005A') TAG LATIN CAPITAL LETTER Z	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005A 0021;	
    // ('\U000E005A') TAG LATIN CAPITAL LETTER Z	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_466)
{
    uint32_t const cps[2] = { 0xE005B, 0x0021 };

    // E005B 0021;	
    // ('\U000E005B') TAG LEFT SQUARE BRACKET	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005B 0021;	
    // ('\U000E005B') TAG LEFT SQUARE BRACKET	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_467)
{
    uint32_t const cps[2] = { 0xE005C, 0x0021 };

    // E005C 0021;	
    // ('\U000E005C') TAG REVERSE SOLIDUS	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005C 0021;	
    // ('\U000E005C') TAG REVERSE SOLIDUS	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_468)
{
    uint32_t const cps[2] = { 0xE005D, 0x0021 };

    // E005D 0021;	
    // ('\U000E005D') TAG RIGHT SQUARE BRACKET	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005D 0021;	
    // ('\U000E005D') TAG RIGHT SQUARE BRACKET	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_469)
{
    uint32_t const cps[2] = { 0xE005E, 0x0021 };

    // E005E 0021;	
    // ('\U000E005E') TAG CIRCUMFLEX ACCENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005E 0021;	
    // ('\U000E005E') TAG CIRCUMFLEX ACCENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_470)
{
    uint32_t const cps[2] = { 0xE005F, 0x0021 };

    // E005F 0021;	
    // ('\U000E005F') TAG LOW LINE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005F 0021;	
    // ('\U000E005F') TAG LOW LINE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_471)
{
    uint32_t const cps[2] = { 0xE0060, 0x0021 };

    // E0060 0021;	
    // ('\U000E0060') TAG GRAVE ACCENT	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0060 0021;	
    // ('\U000E0060') TAG GRAVE ACCENT	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_472)
{
    uint32_t const cps[2] = { 0xE0061, 0x0021 };

    // E0061 0021;	
    // ('\U000E0061') TAG LATIN SMALL LETTER A	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0061 0021;	
    // ('\U000E0061') TAG LATIN SMALL LETTER A	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_473)
{
    uint32_t const cps[2] = { 0xE0062, 0x0021 };

    // E0062 0021;	
    // ('\U000E0062') TAG LATIN SMALL LETTER B	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0062 0021;	
    // ('\U000E0062') TAG LATIN SMALL LETTER B	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_474)
{
    uint32_t const cps[2] = { 0xE0063, 0x0021 };

    // E0063 0021;	
    // ('\U000E0063') TAG LATIN SMALL LETTER C	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0063 0021;	
    // ('\U000E0063') TAG LATIN SMALL LETTER C	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_475)
{
    uint32_t const cps[2] = { 0xE0064, 0x0021 };

    // E0064 0021;	
    // ('\U000E0064') TAG LATIN SMALL LETTER D	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0064 0021;	
    // ('\U000E0064') TAG LATIN SMALL LETTER D	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_476)
{
    uint32_t const cps[2] = { 0xE0065, 0x0021 };

    // E0065 0021;	
    // ('\U000E0065') TAG LATIN SMALL LETTER E	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0065 0021;	
    // ('\U000E0065') TAG LATIN SMALL LETTER E	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_477)
{
    uint32_t const cps[2] = { 0xE0066, 0x0021 };

    // E0066 0021;	
    // ('\U000E0066') TAG LATIN SMALL LETTER F	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0066 0021;	
    // ('\U000E0066') TAG LATIN SMALL LETTER F	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_478)
{
    uint32_t const cps[2] = { 0xE0067, 0x0021 };

    // E0067 0021;	
    // ('\U000E0067') TAG LATIN SMALL LETTER G	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0067 0021;	
    // ('\U000E0067') TAG LATIN SMALL LETTER G	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_479)
{
    uint32_t const cps[2] = { 0xE0068, 0x0021 };

    // E0068 0021;	
    // ('\U000E0068') TAG LATIN SMALL LETTER H	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0068 0021;	
    // ('\U000E0068') TAG LATIN SMALL LETTER H	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_480)
{
    uint32_t const cps[2] = { 0xE0069, 0x0021 };

    // E0069 0021;	
    // ('\U000E0069') TAG LATIN SMALL LETTER I	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0069 0021;	
    // ('\U000E0069') TAG LATIN SMALL LETTER I	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_481)
{
    uint32_t const cps[2] = { 0xE006A, 0x0021 };

    // E006A 0021;	
    // ('\U000E006A') TAG LATIN SMALL LETTER J	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006A 0021;	
    // ('\U000E006A') TAG LATIN SMALL LETTER J	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_482)
{
    uint32_t const cps[2] = { 0xE006B, 0x0021 };

    // E006B 0021;	
    // ('\U000E006B') TAG LATIN SMALL LETTER K	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006B 0021;	
    // ('\U000E006B') TAG LATIN SMALL LETTER K	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_483)
{
    uint32_t const cps[2] = { 0xE006C, 0x0021 };

    // E006C 0021;	
    // ('\U000E006C') TAG LATIN SMALL LETTER L	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006C 0021;	
    // ('\U000E006C') TAG LATIN SMALL LETTER L	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_484)
{
    uint32_t const cps[2] = { 0xE006D, 0x0021 };

    // E006D 0021;	
    // ('\U000E006D') TAG LATIN SMALL LETTER M	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006D 0021;	
    // ('\U000E006D') TAG LATIN SMALL LETTER M	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_485)
{
    uint32_t const cps[2] = { 0xE006E, 0x0021 };

    // E006E 0021;	
    // ('\U000E006E') TAG LATIN SMALL LETTER N	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006E 0021;	
    // ('\U000E006E') TAG LATIN SMALL LETTER N	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_486)
{
    uint32_t const cps[2] = { 0xE006F, 0x0021 };

    // E006F 0021;	
    // ('\U000E006F') TAG LATIN SMALL LETTER O	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006F 0021;	
    // ('\U000E006F') TAG LATIN SMALL LETTER O	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_487)
{
    uint32_t const cps[2] = { 0xE0070, 0x0021 };

    // E0070 0021;	
    // ('\U000E0070') TAG LATIN SMALL LETTER P	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0070 0021;	
    // ('\U000E0070') TAG LATIN SMALL LETTER P	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_488)
{
    uint32_t const cps[2] = { 0xE0071, 0x0021 };

    // E0071 0021;	
    // ('\U000E0071') TAG LATIN SMALL LETTER Q	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0071 0021;	
    // ('\U000E0071') TAG LATIN SMALL LETTER Q	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_489)
{
    uint32_t const cps[2] = { 0xE0072, 0x0021 };

    // E0072 0021;	
    // ('\U000E0072') TAG LATIN SMALL LETTER R	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0072 0021;	
    // ('\U000E0072') TAG LATIN SMALL LETTER R	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_490)
{
    uint32_t const cps[2] = { 0xE0073, 0x0021 };

    // E0073 0021;	
    // ('\U000E0073') TAG LATIN SMALL LETTER S	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0073 0021;	
    // ('\U000E0073') TAG LATIN SMALL LETTER S	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_491)
{
    uint32_t const cps[2] = { 0xE0074, 0x0021 };

    // E0074 0021;	
    // ('\U000E0074') TAG LATIN SMALL LETTER T	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0074 0021;	
    // ('\U000E0074') TAG LATIN SMALL LETTER T	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_492)
{
    uint32_t const cps[2] = { 0xE0075, 0x0021 };

    // E0075 0021;	
    // ('\U000E0075') TAG LATIN SMALL LETTER U	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0075 0021;	
    // ('\U000E0075') TAG LATIN SMALL LETTER U	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_493)
{
    uint32_t const cps[2] = { 0xE0076, 0x0021 };

    // E0076 0021;	
    // ('\U000E0076') TAG LATIN SMALL LETTER V	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0076 0021;	
    // ('\U000E0076') TAG LATIN SMALL LETTER V	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_494)
{
    uint32_t const cps[2] = { 0xE0077, 0x0021 };

    // E0077 0021;	
    // ('\U000E0077') TAG LATIN SMALL LETTER W	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0077 0021;	
    // ('\U000E0077') TAG LATIN SMALL LETTER W	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_495)
{
    uint32_t const cps[2] = { 0xE0078, 0x0021 };

    // E0078 0021;	
    // ('\U000E0078') TAG LATIN SMALL LETTER X	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0078 0021;	
    // ('\U000E0078') TAG LATIN SMALL LETTER X	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_496)
{
    uint32_t const cps[2] = { 0xE0079, 0x0021 };

    // E0079 0021;	
    // ('\U000E0079') TAG LATIN SMALL LETTER Y	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0079 0021;	
    // ('\U000E0079') TAG LATIN SMALL LETTER Y	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_497)
{
    uint32_t const cps[2] = { 0xE007A, 0x0021 };

    // E007A 0021;	
    // ('\U000E007A') TAG LATIN SMALL LETTER Z	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007A 0021;	
    // ('\U000E007A') TAG LATIN SMALL LETTER Z	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_498)
{
    uint32_t const cps[2] = { 0xE007B, 0x0021 };

    // E007B 0021;	
    // ('\U000E007B') TAG LEFT CURLY BRACKET	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007B 0021;	
    // ('\U000E007B') TAG LEFT CURLY BRACKET	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_004_499)
{
    uint32_t const cps[2] = { 0xE007C, 0x0021 };

    // E007C 0021;	
    // ('\U000E007C') TAG VERTICAL LINE	[0261 | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x0261, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007C 0021;	
    // ('\U000E007C') TAG VERTICAL LINE	[| | | 0261 |]
    uint32_t const ces_shifted[4] = { 0x0000, 0x0000, 0x0000, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 4);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 4))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

