// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_095_000)
{
    // E015F 0041;	
    // (󠅟) VARIATION SELECTOR-112	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE015F, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_001)
{
    // E0160 0041;	
    // (󠅠) VARIATION SELECTOR-113	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0160, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_002)
{
    // E0161 0041;	
    // (󠅡) VARIATION SELECTOR-114	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0161, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_003)
{
    // E0162 0041;	
    // (󠅢) VARIATION SELECTOR-115	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0162, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_004)
{
    // E0163 0041;	
    // (󠅣) VARIATION SELECTOR-116	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0163, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_005)
{
    // E0164 0041;	
    // (󠅤) VARIATION SELECTOR-117	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0164, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_006)
{
    // E0165 0041;	
    // (󠅥) VARIATION SELECTOR-118	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0165, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_007)
{
    // E0166 0041;	
    // (󠅦) VARIATION SELECTOR-119	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0166, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_008)
{
    // E0167 0041;	
    // (󠅧) VARIATION SELECTOR-120	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0167, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_009)
{
    // E0168 0041;	
    // (󠅨) VARIATION SELECTOR-121	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0168, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_010)
{
    // E0169 0041;	
    // (󠅩) VARIATION SELECTOR-122	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0169, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_011)
{
    // E016A 0041;	
    // (󠅪) VARIATION SELECTOR-123	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE016A, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_012)
{
    // E016B 0041;	
    // (󠅫) VARIATION SELECTOR-124	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE016B, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_013)
{
    // E016C 0041;	
    // (󠅬) VARIATION SELECTOR-125	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE016C, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_014)
{
    // E016D 0041;	
    // (󠅭) VARIATION SELECTOR-126	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE016D, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_015)
{
    // E016E 0041;	
    // (󠅮) VARIATION SELECTOR-127	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE016E, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_016)
{
    // E016F 0041;	
    // (󠅯) VARIATION SELECTOR-128	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE016F, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_017)
{
    // E0170 0041;	
    // (󠅰) VARIATION SELECTOR-129	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0170, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_018)
{
    // E0171 0041;	
    // (󠅱) VARIATION SELECTOR-130	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0171, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_019)
{
    // E0172 0041;	
    // (󠅲) VARIATION SELECTOR-131	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0172, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_020)
{
    // E0173 0041;	
    // (󠅳) VARIATION SELECTOR-132	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0173, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_021)
{
    // E0174 0041;	
    // (󠅴) VARIATION SELECTOR-133	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0174, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_022)
{
    // E0175 0041;	
    // (󠅵) VARIATION SELECTOR-134	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0175, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_023)
{
    // E0176 0041;	
    // (󠅶) VARIATION SELECTOR-135	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0176, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_024)
{
    // E0177 0041;	
    // (󠅷) VARIATION SELECTOR-136	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0177, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_025)
{
    // E0178 0041;	
    // (󠅸) VARIATION SELECTOR-137	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0178, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_026)
{
    // E0179 0041;	
    // (󠅹) VARIATION SELECTOR-138	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0179, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_027)
{
    // E017A 0041;	
    // (󠅺) VARIATION SELECTOR-139	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE017A, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_028)
{
    // E017B 0041;	
    // (󠅻) VARIATION SELECTOR-140	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE017B, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_029)
{
    // E017C 0041;	
    // (󠅼) VARIATION SELECTOR-141	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE017C, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_030)
{
    // E017D 0041;	
    // (󠅽) VARIATION SELECTOR-142	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE017D, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_031)
{
    // E017E 0041;	
    // (󠅾) VARIATION SELECTOR-143	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE017E, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_032)
{
    // E017F 0041;	
    // (󠅿) VARIATION SELECTOR-144	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE017F, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_033)
{
    // E0180 0041;	
    // (󠆀) VARIATION SELECTOR-145	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0180, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_034)
{
    // E0181 0041;	
    // (󠆁) VARIATION SELECTOR-146	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0181, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_035)
{
    // E0182 0041;	
    // (󠆂) VARIATION SELECTOR-147	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0182, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_036)
{
    // E0183 0041;	
    // (󠆃) VARIATION SELECTOR-148	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0183, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_037)
{
    // E0184 0041;	
    // (󠆄) VARIATION SELECTOR-149	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0184, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_038)
{
    // E0185 0041;	
    // (󠆅) VARIATION SELECTOR-150	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0185, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_039)
{
    // E0186 0041;	
    // (󠆆) VARIATION SELECTOR-151	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0186, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_040)
{
    // E0187 0041;	
    // (󠆇) VARIATION SELECTOR-152	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0187, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_041)
{
    // E0188 0041;	
    // (󠆈) VARIATION SELECTOR-153	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0188, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_042)
{
    // E0189 0041;	
    // (󠆉) VARIATION SELECTOR-154	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0189, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_043)
{
    // E018A 0041;	
    // (󠆊) VARIATION SELECTOR-155	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE018A, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_044)
{
    // E018B 0041;	
    // (󠆋) VARIATION SELECTOR-156	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE018B, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_045)
{
    // E018C 0041;	
    // (󠆌) VARIATION SELECTOR-157	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE018C, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_046)
{
    // E018D 0041;	
    // (󠆍) VARIATION SELECTOR-158	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE018D, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_047)
{
    // E018E 0041;	
    // (󠆎) VARIATION SELECTOR-159	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE018E, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_048)
{
    // E018F 0041;	
    // (󠆏) VARIATION SELECTOR-160	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE018F, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_049)
{
    // E0190 0041;	
    // (󠆐) VARIATION SELECTOR-161	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0190, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_050)
{
    // E0191 0041;	
    // (󠆑) VARIATION SELECTOR-162	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0191, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_051)
{
    // E0192 0041;	
    // (󠆒) VARIATION SELECTOR-163	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0192, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_052)
{
    // E0193 0041;	
    // (󠆓) VARIATION SELECTOR-164	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0193, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_053)
{
    // E0194 0041;	
    // (󠆔) VARIATION SELECTOR-165	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0194, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_054)
{
    // E0195 0041;	
    // (󠆕) VARIATION SELECTOR-166	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0195, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_055)
{
    // E0196 0041;	
    // (󠆖) VARIATION SELECTOR-167	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0196, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_056)
{
    // E0197 0041;	
    // (󠆗) VARIATION SELECTOR-168	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0197, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_057)
{
    // E0198 0041;	
    // (󠆘) VARIATION SELECTOR-169	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0198, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_058)
{
    // E0199 0041;	
    // (󠆙) VARIATION SELECTOR-170	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE0199, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_059)
{
    // E019A 0041;	
    // (󠆚) VARIATION SELECTOR-171	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE019A, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_060)
{
    // E019B 0041;	
    // (󠆛) VARIATION SELECTOR-172	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE019B, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_061)
{
    // E019C 0041;	
    // (󠆜) VARIATION SELECTOR-173	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE019C, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_062)
{
    // E019D 0041;	
    // (󠆝) VARIATION SELECTOR-174	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE019D, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_063)
{
    // E019E 0041;	
    // (󠆞) VARIATION SELECTOR-175	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE019E, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_064)
{
    // E019F 0041;	
    // (󠆟) VARIATION SELECTOR-176	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE019F, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_065)
{
    // E01A0 0041;	
    // (󠆠) VARIATION SELECTOR-177	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A0, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_066)
{
    // E01A1 0041;	
    // (󠆡) VARIATION SELECTOR-178	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A1, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_067)
{
    // E01A2 0041;	
    // (󠆢) VARIATION SELECTOR-179	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A2, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_068)
{
    // E01A3 0041;	
    // (󠆣) VARIATION SELECTOR-180	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A3, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_069)
{
    // E01A4 0041;	
    // (󠆤) VARIATION SELECTOR-181	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A4, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_070)
{
    // E01A5 0041;	
    // (󠆥) VARIATION SELECTOR-182	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A5, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_071)
{
    // E01A6 0041;	
    // (󠆦) VARIATION SELECTOR-183	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A6, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_072)
{
    // E01A7 0041;	
    // (󠆧) VARIATION SELECTOR-184	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A7, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_073)
{
    // E01A8 0041;	
    // (󠆨) VARIATION SELECTOR-185	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A8, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_074)
{
    // E01A9 0041;	
    // (󠆩) VARIATION SELECTOR-186	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01A9, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_075)
{
    // E01AA 0041;	
    // (󠆪) VARIATION SELECTOR-187	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01AA, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_076)
{
    // E01AB 0041;	
    // (󠆫) VARIATION SELECTOR-188	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01AB, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_077)
{
    // E01AC 0041;	
    // (󠆬) VARIATION SELECTOR-189	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01AC, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_078)
{
    // E01AD 0041;	
    // (󠆭) VARIATION SELECTOR-190	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01AD, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_079)
{
    // E01AE 0041;	
    // (󠆮) VARIATION SELECTOR-191	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01AE, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_080)
{
    // E01AF 0041;	
    // (󠆯) VARIATION SELECTOR-192	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01AF, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_081)
{
    // E01B0 0041;	
    // (󠆰) VARIATION SELECTOR-193	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B0, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_082)
{
    // E01B1 0041;	
    // (󠆱) VARIATION SELECTOR-194	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B1, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_083)
{
    // E01B2 0041;	
    // (󠆲) VARIATION SELECTOR-195	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B2, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_084)
{
    // E01B3 0041;	
    // (󠆳) VARIATION SELECTOR-196	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B3, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_085)
{
    // E01B4 0041;	
    // (󠆴) VARIATION SELECTOR-197	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B4, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_086)
{
    // E01B5 0041;	
    // (󠆵) VARIATION SELECTOR-198	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B5, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_087)
{
    // E01B6 0041;	
    // (󠆶) VARIATION SELECTOR-199	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B6, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_088)
{
    // E01B7 0041;	
    // (󠆷) VARIATION SELECTOR-200	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B7, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_089)
{
    // E01B8 0041;	
    // (󠆸) VARIATION SELECTOR-201	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B8, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_090)
{
    // E01B9 0041;	
    // (󠆹) VARIATION SELECTOR-202	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01B9, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_091)
{
    // E01BA 0041;	
    // (󠆺) VARIATION SELECTOR-203	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01BA, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_092)
{
    // E01BB 0041;	
    // (󠆻) VARIATION SELECTOR-204	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01BB, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_093)
{
    // E01BC 0041;	
    // (󠆼) VARIATION SELECTOR-205	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01BC, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_094)
{
    // E01BD 0041;	
    // (󠆽) VARIATION SELECTOR-206	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01BD, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_095)
{
    // E01BE 0041;	
    // (󠆾) VARIATION SELECTOR-207	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01BE, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_096)
{
    // E01BF 0041;	
    // (󠆿) VARIATION SELECTOR-208	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01BF, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_097)
{
    // E01C0 0041;	
    // (󠇀) VARIATION SELECTOR-209	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C0, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_098)
{
    // E01C1 0041;	
    // (󠇁) VARIATION SELECTOR-210	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C1, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_099)
{
    // E01C2 0041;	
    // (󠇂) VARIATION SELECTOR-211	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C2, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_100)
{
    // E01C3 0041;	
    // (󠇃) VARIATION SELECTOR-212	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C3, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_101)
{
    // E01C4 0041;	
    // (󠇄) VARIATION SELECTOR-213	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C4, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_102)
{
    // E01C5 0041;	
    // (󠇅) VARIATION SELECTOR-214	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C5, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_103)
{
    // E01C6 0041;	
    // (󠇆) VARIATION SELECTOR-215	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C6, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_104)
{
    // E01C7 0041;	
    // (󠇇) VARIATION SELECTOR-216	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C7, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_105)
{
    // E01C8 0041;	
    // (󠇈) VARIATION SELECTOR-217	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C8, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_106)
{
    // E01C9 0041;	
    // (󠇉) VARIATION SELECTOR-218	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01C9, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_107)
{
    // E01CA 0041;	
    // (󠇊) VARIATION SELECTOR-219	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01CA, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_108)
{
    // E01CB 0041;	
    // (󠇋) VARIATION SELECTOR-220	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01CB, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_109)
{
    // E01CC 0041;	
    // (󠇌) VARIATION SELECTOR-221	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01CC, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_110)
{
    // E01CD 0041;	
    // (󠇍) VARIATION SELECTOR-222	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01CD, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_111)
{
    // E01CE 0041;	
    // (󠇎) VARIATION SELECTOR-223	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01CE, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_112)
{
    // E01CF 0041;	
    // (󠇏) VARIATION SELECTOR-224	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01CF, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_113)
{
    // E01D0 0041;	
    // (󠇐) VARIATION SELECTOR-225	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D0, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_114)
{
    // E01D1 0041;	
    // (󠇑) VARIATION SELECTOR-226	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D1, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_115)
{
    // E01D2 0041;	
    // (󠇒) VARIATION SELECTOR-227	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D2, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_116)
{
    // E01D3 0041;	
    // (󠇓) VARIATION SELECTOR-228	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D3, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_117)
{
    // E01D4 0041;	
    // (󠇔) VARIATION SELECTOR-229	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D4, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_118)
{
    // E01D5 0041;	
    // (󠇕) VARIATION SELECTOR-230	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D5, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_119)
{
    // E01D6 0041;	
    // (󠇖) VARIATION SELECTOR-231	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D6, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_120)
{
    // E01D7 0041;	
    // (󠇗) VARIATION SELECTOR-232	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D7, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_121)
{
    // E01D8 0041;	
    // (󠇘) VARIATION SELECTOR-233	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D8, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_122)
{
    // E01D9 0041;	
    // (󠇙) VARIATION SELECTOR-234	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01D9, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_123)
{
    // E01DA 0041;	
    // (󠇚) VARIATION SELECTOR-235	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01DA, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_124)
{
    // E01DB 0041;	
    // (󠇛) VARIATION SELECTOR-236	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01DB, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_125)
{
    // E01DC 0041;	
    // (󠇜) VARIATION SELECTOR-237	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01DC, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_126)
{
    // E01DD 0041;	
    // (󠇝) VARIATION SELECTOR-238	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01DD, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_127)
{
    // E01DE 0041;	
    // (󠇞) VARIATION SELECTOR-239	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01DE, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_128)
{
    // E01DF 0041;	
    // (󠇟) VARIATION SELECTOR-240	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01DF, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_129)
{
    // E01E0 0041;	
    // (󠇠) VARIATION SELECTOR-241	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E0, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_130)
{
    // E01E1 0041;	
    // (󠇡) VARIATION SELECTOR-242	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E1, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_131)
{
    // E01E2 0041;	
    // (󠇢) VARIATION SELECTOR-243	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E2, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_132)
{
    // E01E3 0041;	
    // (󠇣) VARIATION SELECTOR-244	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E3, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_133)
{
    // E01E4 0041;	
    // (󠇤) VARIATION SELECTOR-245	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E4, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_134)
{
    // E01E5 0041;	
    // (󠇥) VARIATION SELECTOR-246	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E5, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_135)
{
    // E01E6 0041;	
    // (󠇦) VARIATION SELECTOR-247	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E6, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_136)
{
    // E01E7 0041;	
    // (󠇧) VARIATION SELECTOR-248	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E7, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_137)
{
    // E01E8 0041;	
    // (󠇨) VARIATION SELECTOR-249	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E8, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_138)
{
    // E01E9 0041;	
    // (󠇩) VARIATION SELECTOR-250	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01E9, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_139)
{
    // E01EA 0041;	
    // (󠇪) VARIATION SELECTOR-251	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01EA, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_140)
{
    // E01EB 0041;	
    // (󠇫) VARIATION SELECTOR-252	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01EB, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_141)
{
    // E01EC 0041;	
    // (󠇬) VARIATION SELECTOR-253	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01EC, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_142)
{
    // E01ED 0041;	
    // (󠇭) VARIATION SELECTOR-254	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01ED, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_143)
{
    // E01EE 0041;	
    // (󠇮) VARIATION SELECTOR-255	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01EE, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_144)
{
    // E01EF 0041;	
    // (󠇯) VARIATION SELECTOR-256	[1CAD | 0020 | 0008 |]

    uint32_t cps[2] = { 0xE01EF, 0x0041 };
    uint32_t const ces[6] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_145)
{
    // 0061 0301 0334;	
    // (á) LATIN SMALL LETTER A, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_146)
{
    // 0061 0334 0301;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_147)
{
    // 0061 0341 0334;	
    // (á) LATIN SMALL LETTER A, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_148)
{
    // 00E1 0334;	
    // (á) LATIN SMALL LETTER A WITH ACUTE	[1CAD | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E1, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_149)
{
    // 0041 0301 0334;	
    // (Á) LATIN CAPITAL LETTER A, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_150)
{
    // 0041 0334 0301;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_151)
{
    // 0041 0341 0334;	
    // (Á) LATIN CAPITAL LETTER A, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_152)
{
    // 00C1 0334;	
    // (Á) LATIN CAPITAL LETTER A WITH ACUTE	[1CAD | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C1, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_153)
{
    // 0061 0300 0334;	
    // (à) LATIN SMALL LETTER A, COMBINING GRAVE ACCENT	[1CAD | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_154)
{
    // 0061 0334 0300;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_155)
{
    // 0061 0340 0334;	
    // (à) LATIN SMALL LETTER A, COMBINING GRAVE TONE MARK	[1CAD | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_156)
{
    // 00E0 0334;	
    // (à) LATIN SMALL LETTER A WITH GRAVE	[1CAD | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E0, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_157)
{
    // 0041 0300 0334;	
    // (À) LATIN CAPITAL LETTER A, COMBINING GRAVE ACCENT	[1CAD | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_158)
{
    // 0041 0334 0300;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_159)
{
    // 0041 0340 0334;	
    // (À) LATIN CAPITAL LETTER A, COMBINING GRAVE TONE MARK	[1CAD | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_160)
{
    // 00C0 0334;	
    // (À) LATIN CAPITAL LETTER A WITH GRAVE	[1CAD | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C0, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_161)
{
    // 0061 0306 0334;	
    // (ă) LATIN SMALL LETTER A, COMBINING BREVE	[1CAD | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_162)
{
    // 0061 0334 0306;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_163)
{
    // 0103 0334;	
    // (ă) LATIN SMALL LETTER A WITH BREVE	[1CAD | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0103, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_164)
{
    // 0041 0306 0334;	
    // (Ă) LATIN CAPITAL LETTER A, COMBINING BREVE	[1CAD | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_165)
{
    // 0041 0334 0306;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_166)
{
    // 0102 0334;	
    // (Ă) LATIN CAPITAL LETTER A WITH BREVE	[1CAD | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0102, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_167)
{
    // 0103 0301 0334;	
    // (ắ) LATIN SMALL LETTER A WITH BREVE, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0026 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_168)
{
    // 0103 0334 0301;	
    // (ă̴) LATIN SMALL LETTER A WITH BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_169)
{
    // 0103 0334 0341;	
    // (ă̴) LATIN SMALL LETTER A WITH BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_170)
{
    // 0103 0341 0334;	
    // (ắ) LATIN SMALL LETTER A WITH BREVE, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0026 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_171)
{
    // 0041 0306 0301 0334;	
    // (Ắ) LATIN CAPITAL LETTER A, COMBINING BREVE, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0026 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0306, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_172)
{
    // 0041 0306 0341 0334;	
    // (Ắ) LATIN CAPITAL LETTER A, COMBINING BREVE, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0026 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0306, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_173)
{
    // 0102 0301 0334;	
    // (Ắ) LATIN CAPITAL LETTER A WITH BREVE, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0026 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_174)
{
    // 0102 0341 0334;	
    // (Ắ) LATIN CAPITAL LETTER A WITH BREVE, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0026 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_175)
{
    // 0061 0334 0306 0300;	
    // (ă̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY, COMBINING BREVE	[1CAD | 0020 004A 0026 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0334, 0x0306, 0x0300 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_176)
{
    // 0103 0300 0334;	
    // (ằ) LATIN SMALL LETTER A WITH BREVE, COMBINING GRAVE ACCENT	[1CAD | 0020 004A 0026 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_177)
{
    // 0103 0340 0334;	
    // (ằ) LATIN SMALL LETTER A WITH BREVE, COMBINING GRAVE TONE MARK	[1CAD | 0020 004A 0026 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_178)
{
    // 1EB1 0334;	
    // (ằ) LATIN SMALL LETTER A WITH BREVE AND GRAVE	[1CAD | 0020 004A 0026 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB1, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_179)
{
    // 0041 0306 0300 0334;	
    // (Ằ) LATIN CAPITAL LETTER A, COMBINING BREVE, COMBINING GRAVE ACCENT	[1CAD | 0020 004A 0026 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0306, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_180)
{
    // 0041 0306 0340 0334;	
    // (Ằ) LATIN CAPITAL LETTER A, COMBINING BREVE, COMBINING GRAVE TONE MARK	[1CAD | 0020 004A 0026 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0306, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_181)
{
    // 0102 0300 0334;	
    // (Ằ) LATIN CAPITAL LETTER A WITH BREVE, COMBINING GRAVE ACCENT	[1CAD | 0020 004A 0026 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_182)
{
    // 0102 0340 0334;	
    // (Ằ) LATIN CAPITAL LETTER A WITH BREVE, COMBINING GRAVE TONE MARK	[1CAD | 0020 004A 0026 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_183)
{
    // 0061 0306 0303 0334;	
    // (ẵ) LATIN SMALL LETTER A, COMBINING BREVE, COMBINING TILDE	[1CAD | 0020 004A 0026 002D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0306, 0x0303, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_184)
{
    // 0061 0306 0334 0303;	
    // (ă̴) LATIN SMALL LETTER A, COMBINING BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 002D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0306, 0x0334, 0x0303 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_185)
{
    // 0103 0303 0334;	
    // (ẵ) LATIN SMALL LETTER A WITH BREVE, COMBINING TILDE	[1CAD | 0020 004A 0026 002D | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0303, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_186)
{
    // 0103 0334 0303;	
    // (ă̴) LATIN SMALL LETTER A WITH BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 002D | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0334, 0x0303 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_187)
{
    // 0041 0334 0306 0303;	
    // (Ă̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY, COMBINING BREVE	[1CAD | 0020 004A 0026 002D | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0334, 0x0306, 0x0303 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_188)
{
    // 0102 0303 0334;	
    // (Ẵ) LATIN CAPITAL LETTER A WITH BREVE, COMBINING TILDE	[1CAD | 0020 004A 0026 002D | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0303, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_189)
{
    // 0102 0334 0303;	
    // (Ă̴) LATIN CAPITAL LETTER A WITH BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 002D | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0334, 0x0303 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_190)
{
    // 1EB4 0334;	
    // (Ẵ) LATIN CAPITAL LETTER A WITH BREVE AND TILDE	[1CAD | 0020 004A 0026 002D | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB4, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_191)
{
    // 0061 0306 0309 0334;	
    // (ẳ) LATIN SMALL LETTER A, COMBINING BREVE, COMBINING HOOK ABOVE	[1CAD | 0020 004A 0026 003B | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0306, 0x0309, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_192)
{
    // 0103 0309 0334;	
    // (ẳ) LATIN SMALL LETTER A WITH BREVE, COMBINING HOOK ABOVE	[1CAD | 0020 004A 0026 003B | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0309, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_193)
{
    // 0103 0334 0309;	
    // (ă̴) LATIN SMALL LETTER A WITH BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 003B | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_194)
{
    // 1EB3 0334;	
    // (ẳ) LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD | 0020 004A 0026 003B | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB3, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_195)
{
    // 0041 0306 0334 0309;	
    // (Ă̴) LATIN CAPITAL LETTER A, COMBINING BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 003B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0306, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_196)
{
    // 0102 0309 0334;	
    // (Ẳ) LATIN CAPITAL LETTER A WITH BREVE, COMBINING HOOK ABOVE	[1CAD | 0020 004A 0026 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0309, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_197)
{
    // 0102 0334 0309;	
    // (Ă̴) LATIN CAPITAL LETTER A WITH BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0026 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_198)
{
    // 1EB2 0334;	
    // (Ẳ) LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD | 0020 004A 0026 003B | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB2, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0026, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_199)
{
    // 0061 0302 0334;	
    // (â) LATIN SMALL LETTER A, COMBINING CIRCUMFLEX ACCENT	[1CAD | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_200)
{
    // 0061 0334 0302;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_201)
{
    // 00E2 0334;	
    // (â) LATIN SMALL LETTER A WITH CIRCUMFLEX	[1CAD | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E2, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_202)
{
    // 0041 0302 0334;	
    // (Â) LATIN CAPITAL LETTER A, COMBINING CIRCUMFLEX ACCENT	[1CAD | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_203)
{
    // 0041 0334 0302;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_204)
{
    // 00C2 0334;	
    // (Â) LATIN CAPITAL LETTER A WITH CIRCUMFLEX	[1CAD | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C2, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_205)
{
    // 0061 0302 0301 0334;	
    // (ấ) LATIN SMALL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0027 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0302, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_206)
{
    // 0061 0302 0341 0334;	
    // (ấ) LATIN SMALL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0027 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0302, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_207)
{
    // 00E2 0301 0334;	
    // (ấ) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0027 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_208)
{
    // 00E2 0341 0334;	
    // (ấ) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0027 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_209)
{
    // 0041 0302 0334 0301;	
    // (Â̴) LATIN CAPITAL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0302, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_210)
{
    // 00C2 0301 0334;	
    // (Ấ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0027 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_211)
{
    // 00C2 0341 0334;	
    // (Ấ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0027 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_212)
{
    // 1EA4 0334;	
    // (Ấ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD | 0020 004A 0027 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA4, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_213)
{
    // 0061 0302 0300 0334;	
    // (ầ) LATIN SMALL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING GRAVE ACCENT	[1CAD | 0020 004A 0027 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0302, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_214)
{
    // 0061 0302 0340 0334;	
    // (ầ) LATIN SMALL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING GRAVE TONE MARK	[1CAD | 0020 004A 0027 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0302, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_215)
{
    // 00E2 0300 0334;	
    // (ầ) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING GRAVE ACCENT	[1CAD | 0020 004A 0027 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_216)
{
    // 00E2 0340 0334;	
    // (ầ) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING GRAVE TONE MARK	[1CAD | 0020 004A 0027 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_217)
{
    // 0041 0302 0334 0300;	
    // (Â̴) LATIN CAPITAL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0302, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_218)
{
    // 0041 0302 0334 0340;	
    // (Â̴) LATIN CAPITAL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0302, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_219)
{
    // 00C2 0300 0334;	
    // (Ầ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING GRAVE ACCENT	[1CAD | 0020 004A 0027 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_220)
{
    // 00C2 0340 0334;	
    // (Ầ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING GRAVE TONE MARK	[1CAD | 0020 004A 0027 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_221)
{
    // 0061 0302 0303 0334;	
    // (ẫ) LATIN SMALL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE	[1CAD | 0020 004A 0027 002D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0302, 0x0303, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_222)
{
    // 0061 0302 0334 0303;	
    // (â̴) LATIN SMALL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 002D | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0302, 0x0334, 0x0303 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_223)
{
    // 00E2 0303 0334;	
    // (ẫ) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING TILDE	[1CAD | 0020 004A 0027 002D | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0303, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_224)
{
    // 00E2 0334 0303;	
    // (â̴) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 002D | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0334, 0x0303 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_225)
{
    // 0041 0302 0334 0303;	
    // (Â̴) LATIN CAPITAL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 002D | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0302, 0x0334, 0x0303 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_226)
{
    // 00C2 0303 0334;	
    // (Ẫ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING TILDE	[1CAD | 0020 004A 0027 002D | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0303, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_227)
{
    // 00C2 0334 0303;	
    // (Â̴) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 002D | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0334, 0x0303 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_228)
{
    // 1EAA 0334;	
    // (Ẫ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD | 0020 004A 0027 002D | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAA, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_229)
{
    // 0061 0302 0334 0309;	
    // (â̴) LATIN SMALL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 003B | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0302, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_230)
{
    // 0061 0334 0302 0309;	
    // (â̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY, COMBINING CIRCUMFLEX ACCENT	[1CAD | 0020 004A 0027 003B | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0334, 0x0302, 0x0309 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_231)
{
    // 00E2 0334 0309;	
    // (â̴) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 003B | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_232)
{
    // 1EA9 0334;	
    // (ẩ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD | 0020 004A 0027 003B | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA9, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_233)
{
    // 0041 0302 0309 0334;	
    // (Ẩ) LATIN CAPITAL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING HOOK ABOVE	[1CAD | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0302, 0x0309, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_234)
{
    // 0041 0334 0302 0309;	
    // (Â̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY, COMBINING CIRCUMFLEX ACCENT	[1CAD | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0334, 0x0302, 0x0309 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_235)
{
    // 00C2 0309 0334;	
    // (Ẩ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING HOOK ABOVE	[1CAD | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0309, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_236)
{
    // 00C2 0334 0309;	
    // (Â̴) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0027 003B | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0334, 0x0309 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_237)
{
    // 0061 030C 0334;	
    // (ǎ) LATIN SMALL LETTER A, COMBINING CARON	[1CAD | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_238)
{
    // 0061 0334 030C;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_239)
{
    // 01CE 0334;	
    // (ǎ) LATIN SMALL LETTER A WITH CARON	[1CAD | 0020 004A 0028 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01CE, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_240)
{
    // 0041 030C 0334;	
    // (Ǎ) LATIN CAPITAL LETTER A, COMBINING CARON	[1CAD | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x030C, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_241)
{
    // 0041 0334 030C;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x030C };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_242)
{
    // 01CD 0334;	
    // (Ǎ) LATIN CAPITAL LETTER A WITH CARON	[1CAD | 0020 004A 0028 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CD, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0028, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_243)
{
    // 0061 030A 0334;	
    // (å) LATIN SMALL LETTER A, COMBINING RING ABOVE	[1CAD | 0020 004A 0029 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x030A, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_244)
{
    // 0061 0334 030A;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0029 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x030A };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_245)
{
    // 00E5 0334;	
    // (å) LATIN SMALL LETTER A WITH RING ABOVE	[1CAD | 0020 004A 0029 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E5, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_246)
{
    // 0041 030A 0334;	
    // (Å) LATIN CAPITAL LETTER A, COMBINING RING ABOVE	[1CAD | 0020 004A 0029 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x030A, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_247)
{
    // 0041 0334 030A;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0029 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x030A };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_248)
{
    // 00C5 0334;	
    // (Å) LATIN CAPITAL LETTER A WITH RING ABOVE	[1CAD | 0020 004A 0029 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C5, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_249)
{
    // 212B 0334;	
    // (Å) ANGSTROM SIGN	[1CAD | 0020 004A 0029 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x212B, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_250)
{
    // 0061 030A 0334 0301;	
    // (å̴) LATIN SMALL LETTER A, COMBINING RING ABOVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0029 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x030A, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_251)
{
    // 0061 030A 0334 0341;	
    // (å̴) LATIN SMALL LETTER A, COMBINING RING ABOVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0029 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x030A, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_252)
{
    // 00E5 0334 0301;	
    // (å̴) LATIN SMALL LETTER A WITH RING ABOVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0029 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E5, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_253)
{
    // 00E5 0334 0341;	
    // (å̴) LATIN SMALL LETTER A WITH RING ABOVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0029 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E5, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_254)
{
    // 0041 0334 030A 0301;	
    // (Å̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY, COMBINING RING ABOVE	[1CAD | 0020 004A 0029 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0334, 0x030A, 0x0301 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_255)
{
    // 0041 0334 030A 0341;	
    // (Å̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY, COMBINING RING ABOVE	[1CAD | 0020 004A 0029 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0334, 0x030A, 0x0341 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_256)
{
    // 212B 0301 0334;	
    // (Ǻ) ANGSTROM SIGN, COMBINING ACUTE ACCENT	[1CAD | 0020 004A 0029 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x212B, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_257)
{
    // 212B 0341 0334;	
    // (Ǻ) ANGSTROM SIGN, COMBINING ACUTE TONE MARK	[1CAD | 0020 004A 0029 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x212B, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0029, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_258)
{
    // 0061 0308 0334;	
    // (ä) LATIN SMALL LETTER A, COMBINING DIAERESIS	[1CAD | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_259)
{
    // 0061 0334 0308;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_260)
{
    // 00E4 0334;	
    // (ä) LATIN SMALL LETTER A WITH DIAERESIS	[1CAD | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E4, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_261)
{
    // 0041 0308 0334;	
    // (Ä) LATIN CAPITAL LETTER A, COMBINING DIAERESIS	[1CAD | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_262)
{
    // 0041 0334 0308;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_263)
{
    // 00C4 0334;	
    // (Ä) LATIN CAPITAL LETTER A WITH DIAERESIS	[1CAD | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C4, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_264)
{
    // 0061 0308 0304 0334;	
    // (ǟ) LATIN SMALL LETTER A, COMBINING DIAERESIS, COMBINING MACRON	[1CAD | 0020 004A 002B 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0308, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_265)
{
    // 0061 0308 0334 0304;	
    // (ä̴) LATIN SMALL LETTER A, COMBINING DIAERESIS, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002B 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0308, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_266)
{
    // 0061 0334 0308 0304;	
    // (ä̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY, COMBINING DIAERESIS	[1CAD | 0020 004A 002B 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0334, 0x0308, 0x0304 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_267)
{
    // 01DF 0334;	
    // (ǟ) LATIN SMALL LETTER A WITH DIAERESIS AND MACRON	[1CAD | 0020 004A 002B 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DF, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_268)
{
    // 0041 0334 0308 0304;	
    // (Ä̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY, COMBINING DIAERESIS	[1CAD | 0020 004A 002B 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0334, 0x0308, 0x0304 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_269)
{
    // 00C4 0304 0334;	
    // (Ǟ) LATIN CAPITAL LETTER A WITH DIAERESIS, COMBINING MACRON	[1CAD | 0020 004A 002B 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C4, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_270)
{
    // 00C4 0334 0304;	
    // (Ä̴) LATIN CAPITAL LETTER A WITH DIAERESIS, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002B 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C4, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_271)
{
    // 01DE 0334;	
    // (Ǟ) LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON	[1CAD | 0020 004A 002B 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DE, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002B, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_272)
{
    // 0061 0303 0334;	
    // (ã) LATIN SMALL LETTER A, COMBINING TILDE	[1CAD | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_273)
{
    // 0061 0334 0303;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_274)
{
    // 00E3 0334;	
    // (ã) LATIN SMALL LETTER A WITH TILDE	[1CAD | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E3, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_275)
{
    // 0041 0303 0334;	
    // (Ã) LATIN CAPITAL LETTER A, COMBINING TILDE	[1CAD | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_276)
{
    // 0041 0334 0303;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_277)
{
    // 00C3 0334;	
    // (Ã) LATIN CAPITAL LETTER A WITH TILDE	[1CAD | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C3, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_278)
{
    // 0061 0307 0334;	
    // (ȧ) LATIN SMALL LETTER A, COMBINING DOT ABOVE	[1CAD | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_279)
{
    // 0061 0334 0307;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_280)
{
    // 0227 0334;	
    // (ȧ) LATIN SMALL LETTER A WITH DOT ABOVE	[1CAD | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0227, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_281)
{
    // 0041 0307 0334;	
    // (Ȧ) LATIN CAPITAL LETTER A, COMBINING DOT ABOVE	[1CAD | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_282)
{
    // 0041 0334 0307;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_283)
{
    // 0226 0334;	
    // (Ȧ) LATIN CAPITAL LETTER A WITH DOT ABOVE	[1CAD | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0226, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_284)
{
    // 0061 0307 0304 0334;	
    // (ǡ) LATIN SMALL LETTER A, COMBINING DOT ABOVE, COMBINING MACRON	[1CAD | 0020 004A 002E 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0307, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_285)
{
    // 0061 0307 0334 0304;	
    // (ȧ̴) LATIN SMALL LETTER A, COMBINING DOT ABOVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002E 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0307, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_286)
{
    // 0061 0334 0307 0304;	
    // (ȧ̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY, COMBINING DOT ABOVE	[1CAD | 0020 004A 002E 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0334, 0x0307, 0x0304 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_287)
{
    // 01E1 0334;	
    // (ǡ) LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON	[1CAD | 0020 004A 002E 0032 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E1, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_288)
{
    // 0041 0334 0307 0304;	
    // (Ȧ̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY, COMBINING DOT ABOVE	[1CAD | 0020 004A 002E 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0334, 0x0307, 0x0304 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_289)
{
    // 01E0 0334;	
    // (Ǡ) LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON	[1CAD | 0020 004A 002E 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E0, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_290)
{
    // 0226 0304 0334;	
    // (Ǡ) LATIN CAPITAL LETTER A WITH DOT ABOVE, COMBINING MACRON	[1CAD | 0020 004A 002E 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0226, 0x0304, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_291)
{
    // 0226 0334 0304;	
    // (Ȧ̴) LATIN CAPITAL LETTER A WITH DOT ABOVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 002E 0032 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0226, 0x0334, 0x0304 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x002E, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_292)
{
    // 0061 0328 0334;	
    // (ą) LATIN SMALL LETTER A, COMBINING OGONEK	[1CAD | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0328, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_293)
{
    // 0061 0334 0328;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0328 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_294)
{
    // 0105 0334;	
    // (ą) LATIN SMALL LETTER A WITH OGONEK	[1CAD | 0020 004A 0031 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0105, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_295)
{
    // 0041 0328 0334;	
    // (Ą) LATIN CAPITAL LETTER A, COMBINING OGONEK	[1CAD | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0328, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_296)
{
    // 0041 0334 0328;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0328 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_297)
{
    // 0104 0334;	
    // (Ą) LATIN CAPITAL LETTER A WITH OGONEK	[1CAD | 0020 004A 0031 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0104, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0031, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_298)
{
    // 0061 0304 0334;	
    // (ā) LATIN SMALL LETTER A, COMBINING MACRON	[1CAD | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_299)
{
    // 0061 0334 0304;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_300)
{
    // 0101 0334;	
    // (ā) LATIN SMALL LETTER A WITH MACRON	[1CAD | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0101, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_301)
{
    // 0041 0304 0334;	
    // (Ā) LATIN CAPITAL LETTER A, COMBINING MACRON	[1CAD | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_302)
{
    // 0041 0334 0304;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_303)
{
    // 0100 0334;	
    // (Ā) LATIN CAPITAL LETTER A WITH MACRON	[1CAD | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0100, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_304)
{
    // 0061 0309 0334;	
    // (ả) LATIN SMALL LETTER A, COMBINING HOOK ABOVE	[1CAD | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_305)
{
    // 0061 0334 0309;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_306)
{
    // 1EA3 0334;	
    // (ả) LATIN SMALL LETTER A WITH HOOK ABOVE	[1CAD | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA3, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_307)
{
    // 0041 0309 0334;	
    // (Ả) LATIN CAPITAL LETTER A, COMBINING HOOK ABOVE	[1CAD | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_308)
{
    // 0041 0334 0309;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_309)
{
    // 1EA2 0334;	
    // (Ả) LATIN CAPITAL LETTER A WITH HOOK ABOVE	[1CAD | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EA2, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_310)
{
    // 0061 030F 0334;	
    // (ȁ) LATIN SMALL LETTER A, COMBINING DOUBLE GRAVE ACCENT	[1CAD | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_311)
{
    // 0061 0334 030F;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_312)
{
    // 0201 0334;	
    // (ȁ) LATIN SMALL LETTER A WITH DOUBLE GRAVE	[1CAD | 0020 004A 003C | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0201, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_313)
{
    // 0041 030F 0334;	
    // (Ȁ) LATIN CAPITAL LETTER A, COMBINING DOUBLE GRAVE ACCENT	[1CAD | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x030F, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_314)
{
    // 0041 0334 030F;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x030F };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_315)
{
    // 0200 0334;	
    // (Ȁ) LATIN CAPITAL LETTER A WITH DOUBLE GRAVE	[1CAD | 0020 004A 003C | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0200, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_316)
{
    // 0061 0311 0334;	
    // (ȃ) LATIN SMALL LETTER A, COMBINING INVERTED BREVE	[1CAD | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0311, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_317)
{
    // 0061 0334 0311;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0311 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_318)
{
    // 0203 0334;	
    // (ȃ) LATIN SMALL LETTER A WITH INVERTED BREVE	[1CAD | 0020 004A 003E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0203, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_319)
{
    // 0041 0311 0334;	
    // (Ȃ) LATIN CAPITAL LETTER A, COMBINING INVERTED BREVE	[1CAD | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0311, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_320)
{
    // 0041 0334 0311;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0311 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_321)
{
    // 0202 0334;	
    // (Ȃ) LATIN CAPITAL LETTER A WITH INVERTED BREVE	[1CAD | 0020 004A 003E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0202, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x003E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_322)
{
    // 0061 0323 0334;	
    // (ạ) LATIN SMALL LETTER A, COMBINING DOT BELOW	[1CAD | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_323)
{
    // 0061 0334 0323;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_324)
{
    // 1EA1 0334;	
    // (ạ) LATIN SMALL LETTER A WITH DOT BELOW	[1CAD | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA1, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_325)
{
    // 0041 0323 0334;	
    // (Ạ) LATIN CAPITAL LETTER A, COMBINING DOT BELOW	[1CAD | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_326)
{
    // 0041 0334 0323;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_327)
{
    // 1EA0 0334;	
    // (Ạ) LATIN CAPITAL LETTER A WITH DOT BELOW	[1CAD | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EA0, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_328)
{
    // 0061 0306 0323 0334;	
    // (ặ) LATIN SMALL LETTER A, COMBINING BREVE, COMBINING DOT BELOW	[1CAD | 0020 004A 0042 0026 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0306, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_329)
{
    // 0061 0306 0334 0323;	
    // (ă̴) LATIN SMALL LETTER A, COMBINING BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 0026 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0061, 0x0306, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_330)
{
    // 0103 0323 0334;	
    // (ặ) LATIN SMALL LETTER A WITH BREVE, COMBINING DOT BELOW	[1CAD | 0020 004A 0042 0026 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0103, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_331)
{
    // 1EA1 0334 0306;	
    // (ạ̴) LATIN SMALL LETTER A WITH DOT BELOW, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 0026 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1EA1, 0x0334, 0x0306 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_332)
{
    // 0041 0334 0306 0323;	
    // (Ă̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY, COMBINING BREVE	[1CAD | 0020 004A 0042 0026 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0334, 0x0306, 0x0323 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_333)
{
    // 0102 0323 0334;	
    // (Ặ) LATIN CAPITAL LETTER A WITH BREVE, COMBINING DOT BELOW	[1CAD | 0020 004A 0042 0026 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_334)
{
    // 0102 0334 0323;	
    // (Ă̴) LATIN CAPITAL LETTER A WITH BREVE, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 0026 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0102, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_335)
{
    // 1EA0 0334 0306;	
    // (Ạ̴) LATIN CAPITAL LETTER A WITH DOT BELOW, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 0026 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1EA0, 0x0334, 0x0306 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_336)
{
    // 00E2 0323 0334;	
    // (ậ) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING DOT BELOW	[1CAD | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_337)
{
    // 00E2 0334 0323;	
    // (â̴) LATIN SMALL LETTER A WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00E2, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_338)
{
    // 1EA1 0302 0334;	
    // (ậ) LATIN SMALL LETTER A WITH DOT BELOW, COMBINING CIRCUMFLEX ACCENT	[1CAD | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1EA1, 0x0302, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_339)
{
    // 1EAD 0334;	
    // (ậ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD | 0020 004A 0042 0027 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAD, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_340)
{
    // 0041 0302 0334 0323;	
    // (Â̴) LATIN CAPITAL LETTER A, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0041, 0x0302, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_341)
{
    // 00C2 0323 0334;	
    // (Ậ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING DOT BELOW	[1CAD | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0323, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_342)
{
    // 00C2 0334 0323;	
    // (Â̴) LATIN CAPITAL LETTER A WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00C2, 0x0334, 0x0323 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_343)
{
    // 1EA0 0302 0334;	
    // (Ậ) LATIN CAPITAL LETTER A WITH DOT BELOW, COMBINING CIRCUMFLEX ACCENT	[1CAD | 0020 004A 0042 0027 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1EA0, 0x0302, 0x0334 };
    uint32_t const ces[12] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0042, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_344)
{
    // 0061 0325 0334;	
    // (ḁ) LATIN SMALL LETTER A, COMBINING RING BELOW	[1CAD | 0020 004A 0044 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0325, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0044, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_345)
{
    // 0061 0334 0325;	
    // (a̴) LATIN SMALL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0044 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0061, 0x0334, 0x0325 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0044, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_346)
{
    // 1E01 0334;	
    // (ḁ) LATIN SMALL LETTER A WITH RING BELOW	[1CAD | 0020 004A 0044 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E01, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0044, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_347)
{
    // 0041 0325 0334;	
    // (Ḁ) LATIN CAPITAL LETTER A, COMBINING RING BELOW	[1CAD | 0020 004A 0044 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0325, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0044, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_348)
{
    // 0041 0334 0325;	
    // (A̴) LATIN CAPITAL LETTER A, COMBINING TILDE OVERLAY	[1CAD | 0020 004A 0044 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0041, 0x0334, 0x0325 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0044, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_349)
{
    // 1E00 0334;	
    // (Ḁ) LATIN CAPITAL LETTER A WITH RING BELOW	[1CAD | 0020 004A 0044 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E00, 0x0334 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x0020, 0x004A, 0x0044, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_350)
{
    // 0332 0061;	
    // (̲) COMBINING LOW LINE	[1CAD | 0021 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0332, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0021, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_351)
{
    // 0332 0041;	
    // (̲) COMBINING LOW LINE	[1CAD | 0021 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0332, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0021, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_352)
{
    // 0313 0061;	
    // (̓) COMBINING COMMA ABOVE	[1CAD | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0313, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_353)
{
    // 0343 0061;	
    // (̓) COMBINING GREEK KORONIS	[1CAD | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0343, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_354)
{
    // 0486 0061;	
    // (҆) COMBINING CYRILLIC PSILI PNEUMATA	[1CAD | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0486, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_355)
{
    // 2CF1 0061;	
    // (⳱) COPTIC COMBINING SPIRITUS LENIS	[1CAD | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF1, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_356)
{
    // 0313 0041;	
    // (̓) COMBINING COMMA ABOVE	[1CAD | 0022 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0313, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_357)
{
    // 0343 0041;	
    // (̓) COMBINING GREEK KORONIS	[1CAD | 0022 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0343, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_358)
{
    // 0486 0041;	
    // (҆) COMBINING CYRILLIC PSILI PNEUMATA	[1CAD | 0022 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0486, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_359)
{
    // 2CF1 0041;	
    // (⳱) COPTIC COMBINING SPIRITUS LENIS	[1CAD | 0022 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CF1, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_360)
{
    // 0314 0061;	
    // (̔) COMBINING REVERSED COMMA ABOVE	[1CAD | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0314, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_361)
{
    // 0485 0061;	
    // (҅) COMBINING CYRILLIC DASIA PNEUMATA	[1CAD | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0485, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_362)
{
    // 2CF0 0061;	
    // (⳰) COPTIC COMBINING SPIRITUS ASPER	[1CAD | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_363)
{
    // 0314 0041;	
    // (̔) COMBINING REVERSED COMMA ABOVE	[1CAD | 0023 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0314, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_364)
{
    // 0485 0041;	
    // (҅) COMBINING CYRILLIC DASIA PNEUMATA	[1CAD | 0023 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0485, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_365)
{
    // 2CF0 0041;	
    // (⳰) COPTIC COMBINING SPIRITUS ASPER	[1CAD | 0023 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CF0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_366)
{
    // 0301 0061;	
    // (́) COMBINING ACUTE ACCENT	[1CAD | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0301, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_367)
{
    // 0341 0061;	
    // (́) COMBINING ACUTE TONE MARK	[1CAD | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0341, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_368)
{
    // 0954 0061;	
    // (॔) DEVANAGARI ACUTE ACCENT	[1CAD | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0954, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_369)
{
    // 0301 0041;	
    // (́) COMBINING ACUTE ACCENT	[1CAD | 0024 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0301, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_370)
{
    // 0341 0041;	
    // (́) COMBINING ACUTE TONE MARK	[1CAD | 0024 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0341, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_371)
{
    // 0954 0041;	
    // (॔) DEVANAGARI ACUTE ACCENT	[1CAD | 0024 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0954, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_372)
{
    // 0300 0061;	
    // (̀) COMBINING GRAVE ACCENT	[1CAD | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0300, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_373)
{
    // 0340 0061;	
    // (̀) COMBINING GRAVE TONE MARK	[1CAD | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0340, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_374)
{
    // 0953 0061;	
    // (॓) DEVANAGARI GRAVE ACCENT	[1CAD | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0953, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_375)
{
    // 0300 0041;	
    // (̀) COMBINING GRAVE ACCENT	[1CAD | 0025 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0300, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_376)
{
    // 0340 0041;	
    // (̀) COMBINING GRAVE TONE MARK	[1CAD | 0025 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0340, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_377)
{
    // 0953 0041;	
    // (॓) DEVANAGARI GRAVE ACCENT	[1CAD | 0025 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0953, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_378)
{
    // 0306 0061;	
    // (̆) COMBINING BREVE	[1CAD | 0026 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0306, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_379)
{
    // 0306 0041;	
    // (̆) COMBINING BREVE	[1CAD | 0026 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0306, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0026, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_380)
{
    // 0302 0061;	
    // (̂) COMBINING CIRCUMFLEX ACCENT	[1CAD | 0027 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0302, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_381)
{
    // 0302 0041;	
    // (̂) COMBINING CIRCUMFLEX ACCENT	[1CAD | 0027 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0302, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0027, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_382)
{
    // 030C 0061;	
    // (̌) COMBINING CARON	[1CAD | 0028 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_383)
{
    // 030C 0041;	
    // (̌) COMBINING CARON	[1CAD | 0028 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x030C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0028, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_384)
{
    // 030A 0061;	
    // (̊) COMBINING RING ABOVE	[1CAD | 0029 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_385)
{
    // 030A 0041;	
    // (̊) COMBINING RING ABOVE	[1CAD | 0029 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x030A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0029, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_386)
{
    // 0342 0061;	
    // (͂) COMBINING GREEK PERISPOMENI	[1CAD | 002A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0342, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_387)
{
    // 0342 0041;	
    // (͂) COMBINING GREEK PERISPOMENI	[1CAD | 002A 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0342, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002A, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_388)
{
    // 0308 0061;	
    // (̈) COMBINING DIAERESIS	[1CAD | 002B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0308, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_389)
{
    // 0308 0041;	
    // (̈) COMBINING DIAERESIS	[1CAD | 002B 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0308, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002B, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_390)
{
    // 0344 0061;	
    // (̈́) COMBINING GREEK DIALYTIKA TONOS	[1CAD | 002B 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0344, 0x0061 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_391)
{
    // 0344 0041;	
    // (̈́) COMBINING GREEK DIALYTIKA TONOS	[1CAD | 002B 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0344, 0x0041 };
    uint32_t const ces[10] = { 0x1CAD, 0x0000, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_392)
{
    // 030B 0061;	
    // (̋) COMBINING DOUBLE ACUTE ACCENT	[1CAD | 002C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_393)
{
    // 030B 0041;	
    // (̋) COMBINING DOUBLE ACUTE ACCENT	[1CAD | 002C 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x030B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002C, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_394)
{
    // 0303 0061;	
    // (̃) COMBINING TILDE	[1CAD | 002D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0303, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_395)
{
    // 0303 0041;	
    // (̃) COMBINING TILDE	[1CAD | 002D 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0303, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002D, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_396)
{
    // 0307 0061;	
    // (̇) COMBINING DOT ABOVE	[1CAD | 002E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0307, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_397)
{
    // 0307 0041;	
    // (̇) COMBINING DOT ABOVE	[1CAD | 002E 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0307, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002E, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_398)
{
    // 0338 0061;	
    // (̸) COMBINING LONG SOLIDUS OVERLAY	[1CAD | 002F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0338, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_399)
{
    // 0338 0041;	
    // (̸) COMBINING LONG SOLIDUS OVERLAY	[1CAD | 002F 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0338, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x002F, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_400)
{
    // 0327 0061;	
    // (̧) COMBINING CEDILLA	[1CAD | 0030 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0327, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_401)
{
    // 0327 0041;	
    // (̧) COMBINING CEDILLA	[1CAD | 0030 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0327, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0030, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_402)
{
    // 0328 0061;	
    // (̨) COMBINING OGONEK	[1CAD | 0031 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0328, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_403)
{
    // 0328 0041;	
    // (̨) COMBINING OGONEK	[1CAD | 0031 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0328, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0031, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_404)
{
    // 0304 0061;	
    // (̄) COMBINING MACRON	[1CAD | 0032 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0304, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_405)
{
    // 0304 0041;	
    // (̄) COMBINING MACRON	[1CAD | 0032 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0304, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0032, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_406)
{
    // 030D 0061;	
    // (̍) COMBINING VERTICAL LINE ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_407)
{
    // 030E 0061;	
    // (̎) COMBINING DOUBLE VERTICAL LINE ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_408)
{
    // 0312 0061;	
    // (̒) COMBINING TURNED COMMA ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0312, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_409)
{
    // 0315 0061;	
    // (̕) COMBINING COMMA ABOVE RIGHT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0315, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_410)
{
    // 031A 0061;	
    // (̚) COMBINING LEFT ANGLE ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_411)
{
    // 033D 0061;	
    // (̽) COMBINING X ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_412)
{
    // 033E 0061;	
    // (̾) COMBINING VERTICAL TILDE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_413)
{
    // 033F 0061;	
    // (̿) COMBINING DOUBLE OVERLINE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033F, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_414)
{
    // 0346 0061;	
    // (͆) COMBINING BRIDGE ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0346, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_415)
{
    // 034A 0061;	
    // (͊) COMBINING NOT TILDE ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034A, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_416)
{
    // 034B 0061;	
    // (͋) COMBINING HOMOTHETIC ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_417)
{
    // 034C 0061;	
    // (͌) COMBINING ALMOST EQUAL TO ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_418)
{
    // 0350 0061;	
    // (͐) COMBINING RIGHT ARROWHEAD ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0350, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_419)
{
    // 0351 0061;	
    // (͑) COMBINING LEFT HALF RING ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0351, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_420)
{
    // 0352 0061;	
    // (͒) COMBINING FERMATA	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0352, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_421)
{
    // 0357 0061;	
    // (͗) COMBINING RIGHT HALF RING ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0357, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_422)
{
    // 035B 0061;	
    // (͛) COMBINING ZIGZAG ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035B, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_423)
{
    // 035D 0061;	
    // (͝) COMBINING DOUBLE BREVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_424)
{
    // 035E 0061;	
    // (͞) COMBINING DOUBLE MACRON	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035E, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_425)
{
    // 0484 0061;	
    // (҄) COMBINING CYRILLIC PALATALIZATION	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0484, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_426)
{
    // 0487 0061;	
    // (҇) COMBINING CYRILLIC POKRYTIE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0487, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_427)
{
    // 0741 0061;	
    // (݁) SYRIAC QUSHSHAYA	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0741, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_428)
{
    // 0745 0061;	
    // (݅) SYRIAC THREE DOTS ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0745, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_429)
{
    // 17CB 0061;	
    // (់) KHMER SIGN BANTOC	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CB, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_430)
{
    // 17CC 0061;	
    // (៌) KHMER SIGN ROBAT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CC, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_431)
{
    // 17CD 0061;	
    // (៍) KHMER SIGN TOANDAKHIAT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CD, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_432)
{
    // 17CE 0061;	
    // (៎) KHMER SIGN KAKABAT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CE, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_433)
{
    // 17CF 0061;	
    // (៏) KHMER SIGN AHSDA	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CF, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_434)
{
    // 17D0 0061;	
    // (័) KHMER SIGN SAMYOK SANNYA	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_435)
{
    // 17D1 0061;	
    // (៑) KHMER SIGN VIRIAM	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D1, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_436)
{
    // 17DD 0061;	
    // (៝) KHMER SIGN ATTHACAN	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DD, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_437)
{
    // 1AB0 0061;	
    // (᪰) COMBINING DOUBLED CIRCUMFLEX ACCENT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_438)
{
    // 1AB1 0061;	
    // (᪱) COMBINING DIAERESIS-RING	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB1, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_439)
{
    // 1AB2 0061;	
    // (᪲) COMBINING INFINITY	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB2, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_440)
{
    // 1AB3 0061;	
    // (᪳) COMBINING DOWNWARDS ARROW	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB3, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_441)
{
    // 1AB4 0061;	
    // (᪴) COMBINING TRIPLE DOT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB4, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_442)
{
    // 1ABB 0061;	
    // (᪻) COMBINING PARENTHESES ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABB, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_443)
{
    // 1ABC 0061;	
    // (᪼) COMBINING DOUBLE PARENTHESES ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABC, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_444)
{
    // 1DC0 0061;	
    // (᷀) COMBINING DOTTED GRAVE ACCENT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_445)
{
    // 1DC1 0061;	
    // (᷁) COMBINING DOTTED ACUTE ACCENT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC1, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_446)
{
    // 1DC3 0061;	
    // (᷃) COMBINING SUSPENSION MARK	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC3, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_447)
{
    // 1DC4 0061;	
    // (᷄) COMBINING MACRON-ACUTE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC4, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_448)
{
    // 1DC5 0061;	
    // (᷅) COMBINING GRAVE-MACRON	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC5, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_449)
{
    // 1DC6 0061;	
    // (᷆) COMBINING MACRON-GRAVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC6, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_450)
{
    // 1DC7 0061;	
    // (᷇) COMBINING ACUTE-MACRON	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC7, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_451)
{
    // 1DC8 0061;	
    // (᷈) COMBINING GRAVE-ACUTE-GRAVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC8, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_452)
{
    // 1DC9 0061;	
    // (᷉) COMBINING ACUTE-GRAVE-ACUTE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC9, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_453)
{
    // 1DCB 0061;	
    // (᷋) COMBINING BREVE-MACRON	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCB, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_454)
{
    // 1DCC 0061;	
    // (᷌) COMBINING MACRON-BREVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCC, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_455)
{
    // 1DCD 0061;	
    // (᷍) COMBINING DOUBLE CIRCUMFLEX ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCD, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_456)
{
    // 1DCE 0061;	
    // (᷎) COMBINING OGONEK ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCE, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_457)
{
    // 1DD1 0061;	
    // (᷑) COMBINING UR ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DD1, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_458)
{
    // 1DF5 0061;	
    // (᷵) COMBINING UP TACK ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF5, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_459)
{
    // 1DF6 0061;	
    // (᷶) COMBINING KAVYKA ABOVE RIGHT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF6, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_460)
{
    // 1DF7 0061;	
    // (᷷) COMBINING KAVYKA ABOVE LEFT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF7, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_461)
{
    // 1DF8 0061;	
    // (᷸) COMBINING DOT ABOVE LEFT	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF8, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_462)
{
    // 1DFB 0061;	
    // (᷻) COMBINING DELETION MARK	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFB, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_463)
{
    // 1DFE 0061;	
    // (᷾) COMBINING LEFT ARROWHEAD ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFE, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_464)
{
    // 20F0 0061;	
    // (⃰) COMBINING ASTERISK ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20F0, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_465)
{
    // 2CEF 0061;	
    // (⳯) COPTIC COMBINING NI ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEF, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_466)
{
    // A67C 0061;	
    // (꙼) COMBINING CYRILLIC KAVYKA	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67C, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_467)
{
    // A67D 0061;	
    // (꙽) COMBINING CYRILLIC PAYEROK	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_468)
{
    // 10AE5 0061;	
    // (𐫥) MANICHAEAN ABBREVIATION MARK ABOVE	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE5, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_469)
{
    // 1BC9D 0061;	
    // (𛲝) DUPLOYAN THICK LETTER SELECTOR	[1CAD | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9D, 0x0061 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_470)
{
    // 030D 0041;	
    // (̍) COMBINING VERTICAL LINE ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x030D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_471)
{
    // 030E 0041;	
    // (̎) COMBINING DOUBLE VERTICAL LINE ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x030E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_472)
{
    // 0312 0041;	
    // (̒) COMBINING TURNED COMMA ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0312, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_473)
{
    // 0315 0041;	
    // (̕) COMBINING COMMA ABOVE RIGHT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0315, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_474)
{
    // 031A 0041;	
    // (̚) COMBINING LEFT ANGLE ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x031A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_475)
{
    // 033D 0041;	
    // (̽) COMBINING X ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x033D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_476)
{
    // 033E 0041;	
    // (̾) COMBINING VERTICAL TILDE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x033E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_477)
{
    // 033F 0041;	
    // (̿) COMBINING DOUBLE OVERLINE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x033F, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_478)
{
    // 0346 0041;	
    // (͆) COMBINING BRIDGE ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0346, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_479)
{
    // 034A 0041;	
    // (͊) COMBINING NOT TILDE ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x034A, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_480)
{
    // 034B 0041;	
    // (͋) COMBINING HOMOTHETIC ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x034B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_481)
{
    // 034C 0041;	
    // (͌) COMBINING ALMOST EQUAL TO ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x034C, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_482)
{
    // 0350 0041;	
    // (͐) COMBINING RIGHT ARROWHEAD ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0350, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_483)
{
    // 0351 0041;	
    // (͑) COMBINING LEFT HALF RING ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0351, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_484)
{
    // 0352 0041;	
    // (͒) COMBINING FERMATA	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0352, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_485)
{
    // 0357 0041;	
    // (͗) COMBINING RIGHT HALF RING ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0357, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_486)
{
    // 035B 0041;	
    // (͛) COMBINING ZIGZAG ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x035B, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_487)
{
    // 035D 0041;	
    // (͝) COMBINING DOUBLE BREVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x035D, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_488)
{
    // 035E 0041;	
    // (͞) COMBINING DOUBLE MACRON	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x035E, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_489)
{
    // 0484 0041;	
    // (҄) COMBINING CYRILLIC PALATALIZATION	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0484, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_490)
{
    // 0487 0041;	
    // (҇) COMBINING CYRILLIC POKRYTIE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0487, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_491)
{
    // 0741 0041;	
    // (݁) SYRIAC QUSHSHAYA	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0741, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_492)
{
    // 0745 0041;	
    // (݅) SYRIAC THREE DOTS ABOVE	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0745, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_493)
{
    // 17CB 0041;	
    // (់) KHMER SIGN BANTOC	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17CB, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_494)
{
    // 17CC 0041;	
    // (៌) KHMER SIGN ROBAT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17CC, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_495)
{
    // 17CD 0041;	
    // (៍) KHMER SIGN TOANDAKHIAT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17CD, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_496)
{
    // 17CE 0041;	
    // (៎) KHMER SIGN KAKABAT	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17CE, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_497)
{
    // 17CF 0041;	
    // (៏) KHMER SIGN AHSDA	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17CF, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_498)
{
    // 17D0 0041;	
    // (័) KHMER SIGN SAMYOK SANNYA	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17D0, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_095_499)
{
    // 17D1 0041;	
    // (៑) KHMER SIGN VIRIAM	[1CAD | 0033 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17D1, 0x0041 };
    uint32_t const ces[8] = { 0x1CAD, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

