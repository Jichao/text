// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_180_000)
{
    // 1D6DA ; [.2047.0020.0005] 
    // MATHEMATICAL BOLD SMALL OMEGA

    uint32_t const cps[1] = { 0x1d6da };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_001)
{
    // 1D6DB ; [*061E.0020.0005] 
    // MATHEMATICAL BOLD PARTIAL DIFFERENTIAL

    uint32_t const cps[1] = { 0x1d6db };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x61e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_002)
{
    // 1D6DC ; [.2024.0020.0005] 
    // MATHEMATICAL BOLD EPSILON SYMBOL

    uint32_t const cps[1] = { 0x1d6dc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_003)
{
    // 1D6DD ; [.202B.0020.0005] 
    // MATHEMATICAL BOLD THETA SYMBOL

    uint32_t const cps[1] = { 0x1d6dd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_004)
{
    // 1D6DE ; [.202E.0020.0005] 
    // MATHEMATICAL BOLD KAPPA SYMBOL

    uint32_t const cps[1] = { 0x1d6de };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_005)
{
    // 1D6DF ; [.2043.0020.0005] 
    // MATHEMATICAL BOLD PHI SYMBOL

    uint32_t const cps[1] = { 0x1d6df };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_006)
{
    // 1D6E0 ; [.203A.0020.0005] 
    // MATHEMATICAL BOLD RHO SYMBOL

    uint32_t const cps[1] = { 0x1d6e0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_007)
{
    // 1D6E1 ; [.2035.0020.0005] 
    // MATHEMATICAL BOLD PI SYMBOL

    uint32_t const cps[1] = { 0x1d6e1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_008)
{
    // 1D6E2 ; [.201F.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL ALPHA

    uint32_t const cps[1] = { 0x1d6e2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_009)
{
    // 1D6E3 ; [.2020.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL BETA

    uint32_t const cps[1] = { 0x1d6e3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_010)
{
    // 1D6E4 ; [.2021.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL GAMMA

    uint32_t const cps[1] = { 0x1d6e4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_011)
{
    // 1D6E5 ; [.2023.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL DELTA

    uint32_t const cps[1] = { 0x1d6e5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_012)
{
    // 1D6E6 ; [.2024.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL EPSILON

    uint32_t const cps[1] = { 0x1d6e6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_013)
{
    // 1D6E7 ; [.2028.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL ZETA

    uint32_t const cps[1] = { 0x1d6e7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_014)
{
    // 1D6E8 ; [.202A.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL ETA

    uint32_t const cps[1] = { 0x1d6e8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_015)
{
    // 1D6E9 ; [.202B.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL THETA

    uint32_t const cps[1] = { 0x1d6e9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_016)
{
    // 1D6EA ; [.202C.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL IOTA

    uint32_t const cps[1] = { 0x1d6ea };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_017)
{
    // 1D6EB ; [.202E.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL KAPPA

    uint32_t const cps[1] = { 0x1d6eb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_018)
{
    // 1D6EC ; [.202F.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL LAMDA

    uint32_t const cps[1] = { 0x1d6ec };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_019)
{
    // 1D6ED ; [.2031.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL MU

    uint32_t const cps[1] = { 0x1d6ed };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_020)
{
    // 1D6EE ; [.2032.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL NU

    uint32_t const cps[1] = { 0x1d6ee };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_021)
{
    // 1D6EF ; [.2033.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL XI

    uint32_t const cps[1] = { 0x1d6ef };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_022)
{
    // 1D6F0 ; [.2034.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL OMICRON

    uint32_t const cps[1] = { 0x1d6f0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_023)
{
    // 1D6F1 ; [.2035.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL PI

    uint32_t const cps[1] = { 0x1d6f1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_024)
{
    // 1D6F2 ; [.203A.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL RHO

    uint32_t const cps[1] = { 0x1d6f2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_025)
{
    // 1D6F3 ; [.202B.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL THETA SYMBOL

    uint32_t const cps[1] = { 0x1d6f3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_026)
{
    // 1D6F4 ; [.203D.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL SIGMA

    uint32_t const cps[1] = { 0x1d6f4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_027)
{
    // 1D6F5 ; [.2041.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL TAU

    uint32_t const cps[1] = { 0x1d6f5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_028)
{
    // 1D6F6 ; [.2042.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL UPSILON

    uint32_t const cps[1] = { 0x1d6f6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_029)
{
    // 1D6F7 ; [.2043.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL PHI

    uint32_t const cps[1] = { 0x1d6f7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_030)
{
    // 1D6F8 ; [.2044.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL CHI

    uint32_t const cps[1] = { 0x1d6f8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_031)
{
    // 1D6F9 ; [.2045.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL PSI

    uint32_t const cps[1] = { 0x1d6f9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_032)
{
    // 1D6FA ; [.2047.0020.000B] 
    // MATHEMATICAL ITALIC CAPITAL OMEGA

    uint32_t const cps[1] = { 0x1d6fa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_033)
{
    // 1D6FB ; [*0622.0020.0005] 
    // MATHEMATICAL ITALIC NABLA

    uint32_t const cps[1] = { 0x1d6fb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x622), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_034)
{
    // 1D6FC ; [.201F.0020.0005] 
    // MATHEMATICAL ITALIC SMALL ALPHA

    uint32_t const cps[1] = { 0x1d6fc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_035)
{
    // 1D6FD ; [.2020.0020.0005] 
    // MATHEMATICAL ITALIC SMALL BETA

    uint32_t const cps[1] = { 0x1d6fd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_036)
{
    // 1D6FE ; [.2021.0020.0005] 
    // MATHEMATICAL ITALIC SMALL GAMMA

    uint32_t const cps[1] = { 0x1d6fe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_037)
{
    // 1D6FF ; [.2023.0020.0005] 
    // MATHEMATICAL ITALIC SMALL DELTA

    uint32_t const cps[1] = { 0x1d6ff };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_038)
{
    // 1D700 ; [.2024.0020.0005] 
    // MATHEMATICAL ITALIC SMALL EPSILON

    uint32_t const cps[1] = { 0x1d700 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_039)
{
    // 1D701 ; [.2028.0020.0005] 
    // MATHEMATICAL ITALIC SMALL ZETA

    uint32_t const cps[1] = { 0x1d701 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_040)
{
    // 1D702 ; [.202A.0020.0005] 
    // MATHEMATICAL ITALIC SMALL ETA

    uint32_t const cps[1] = { 0x1d702 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_041)
{
    // 1D703 ; [.202B.0020.0005] 
    // MATHEMATICAL ITALIC SMALL THETA

    uint32_t const cps[1] = { 0x1d703 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_042)
{
    // 1D704 ; [.202C.0020.0005] 
    // MATHEMATICAL ITALIC SMALL IOTA

    uint32_t const cps[1] = { 0x1d704 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_043)
{
    // 1D705 ; [.202E.0020.0005] 
    // MATHEMATICAL ITALIC SMALL KAPPA

    uint32_t const cps[1] = { 0x1d705 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_044)
{
    // 1D706 ; [.202F.0020.0005] 
    // MATHEMATICAL ITALIC SMALL LAMDA

    uint32_t const cps[1] = { 0x1d706 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_045)
{
    // 1D707 ; [.2031.0020.0005] 
    // MATHEMATICAL ITALIC SMALL MU

    uint32_t const cps[1] = { 0x1d707 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_046)
{
    // 1D708 ; [.2032.0020.0005] 
    // MATHEMATICAL ITALIC SMALL NU

    uint32_t const cps[1] = { 0x1d708 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_047)
{
    // 1D709 ; [.2033.0020.0005] 
    // MATHEMATICAL ITALIC SMALL XI

    uint32_t const cps[1] = { 0x1d709 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_048)
{
    // 1D70A ; [.2034.0020.0005] 
    // MATHEMATICAL ITALIC SMALL OMICRON

    uint32_t const cps[1] = { 0x1d70a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_049)
{
    // 1D70B ; [.2035.0020.0005] 
    // MATHEMATICAL ITALIC SMALL PI

    uint32_t const cps[1] = { 0x1d70b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_050)
{
    // 1D70C ; [.203A.0020.0005] 
    // MATHEMATICAL ITALIC SMALL RHO

    uint32_t const cps[1] = { 0x1d70c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_051)
{
    // 1D70D ; [.203D.0020.0005] 
    // MATHEMATICAL ITALIC SMALL FINAL SIGMA

    uint32_t const cps[1] = { 0x1d70d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_052)
{
    // 1D70E ; [.203D.0020.0005] 
    // MATHEMATICAL ITALIC SMALL SIGMA

    uint32_t const cps[1] = { 0x1d70e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_053)
{
    // 1D70F ; [.2041.0020.0005] 
    // MATHEMATICAL ITALIC SMALL TAU

    uint32_t const cps[1] = { 0x1d70f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_054)
{
    // 1D710 ; [.2042.0020.0005] 
    // MATHEMATICAL ITALIC SMALL UPSILON

    uint32_t const cps[1] = { 0x1d710 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_055)
{
    // 1D711 ; [.2043.0020.0005] 
    // MATHEMATICAL ITALIC SMALL PHI

    uint32_t const cps[1] = { 0x1d711 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_056)
{
    // 1D712 ; [.2044.0020.0005] 
    // MATHEMATICAL ITALIC SMALL CHI

    uint32_t const cps[1] = { 0x1d712 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_057)
{
    // 1D713 ; [.2045.0020.0005] 
    // MATHEMATICAL ITALIC SMALL PSI

    uint32_t const cps[1] = { 0x1d713 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_058)
{
    // 1D714 ; [.2047.0020.0005] 
    // MATHEMATICAL ITALIC SMALL OMEGA

    uint32_t const cps[1] = { 0x1d714 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_059)
{
    // 1D715 ; [*061E.0020.0005] 
    // MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL

    uint32_t const cps[1] = { 0x1d715 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x61e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_060)
{
    // 1D716 ; [.2024.0020.0005] 
    // MATHEMATICAL ITALIC EPSILON SYMBOL

    uint32_t const cps[1] = { 0x1d716 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_061)
{
    // 1D717 ; [.202B.0020.0005] 
    // MATHEMATICAL ITALIC THETA SYMBOL

    uint32_t const cps[1] = { 0x1d717 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_062)
{
    // 1D718 ; [.202E.0020.0005] 
    // MATHEMATICAL ITALIC KAPPA SYMBOL

    uint32_t const cps[1] = { 0x1d718 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_063)
{
    // 1D719 ; [.2043.0020.0005] 
    // MATHEMATICAL ITALIC PHI SYMBOL

    uint32_t const cps[1] = { 0x1d719 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_064)
{
    // 1D71A ; [.203A.0020.0005] 
    // MATHEMATICAL ITALIC RHO SYMBOL

    uint32_t const cps[1] = { 0x1d71a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_065)
{
    // 1D71B ; [.2035.0020.0005] 
    // MATHEMATICAL ITALIC PI SYMBOL

    uint32_t const cps[1] = { 0x1d71b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_066)
{
    // 1D71C ; [.201F.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL ALPHA

    uint32_t const cps[1] = { 0x1d71c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_067)
{
    // 1D71D ; [.2020.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL BETA

    uint32_t const cps[1] = { 0x1d71d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_068)
{
    // 1D71E ; [.2021.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL GAMMA

    uint32_t const cps[1] = { 0x1d71e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_069)
{
    // 1D71F ; [.2023.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL DELTA

    uint32_t const cps[1] = { 0x1d71f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_070)
{
    // 1D720 ; [.2024.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL EPSILON

    uint32_t const cps[1] = { 0x1d720 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_071)
{
    // 1D721 ; [.2028.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL ZETA

    uint32_t const cps[1] = { 0x1d721 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_072)
{
    // 1D722 ; [.202A.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL ETA

    uint32_t const cps[1] = { 0x1d722 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_073)
{
    // 1D723 ; [.202B.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL THETA

    uint32_t const cps[1] = { 0x1d723 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_074)
{
    // 1D724 ; [.202C.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL IOTA

    uint32_t const cps[1] = { 0x1d724 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_075)
{
    // 1D725 ; [.202E.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL KAPPA

    uint32_t const cps[1] = { 0x1d725 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_076)
{
    // 1D726 ; [.202F.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL LAMDA

    uint32_t const cps[1] = { 0x1d726 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_077)
{
    // 1D727 ; [.2031.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL MU

    uint32_t const cps[1] = { 0x1d727 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_078)
{
    // 1D728 ; [.2032.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL NU

    uint32_t const cps[1] = { 0x1d728 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_079)
{
    // 1D729 ; [.2033.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL XI

    uint32_t const cps[1] = { 0x1d729 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_080)
{
    // 1D72A ; [.2034.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL OMICRON

    uint32_t const cps[1] = { 0x1d72a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_081)
{
    // 1D72B ; [.2035.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL PI

    uint32_t const cps[1] = { 0x1d72b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_082)
{
    // 1D72C ; [.203A.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL RHO

    uint32_t const cps[1] = { 0x1d72c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_083)
{
    // 1D72D ; [.202B.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL THETA SYMBOL

    uint32_t const cps[1] = { 0x1d72d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_084)
{
    // 1D72E ; [.203D.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL SIGMA

    uint32_t const cps[1] = { 0x1d72e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_085)
{
    // 1D72F ; [.2041.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL TAU

    uint32_t const cps[1] = { 0x1d72f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_086)
{
    // 1D730 ; [.2042.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL UPSILON

    uint32_t const cps[1] = { 0x1d730 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_087)
{
    // 1D731 ; [.2043.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL PHI

    uint32_t const cps[1] = { 0x1d731 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_088)
{
    // 1D732 ; [.2044.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL CHI

    uint32_t const cps[1] = { 0x1d732 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_089)
{
    // 1D733 ; [.2045.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL PSI

    uint32_t const cps[1] = { 0x1d733 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_090)
{
    // 1D734 ; [.2047.0020.000B] 
    // MATHEMATICAL BOLD ITALIC CAPITAL OMEGA

    uint32_t const cps[1] = { 0x1d734 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_091)
{
    // 1D735 ; [*0622.0020.0005] 
    // MATHEMATICAL BOLD ITALIC NABLA

    uint32_t const cps[1] = { 0x1d735 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x622), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_092)
{
    // 1D736 ; [.201F.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL ALPHA

    uint32_t const cps[1] = { 0x1d736 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_093)
{
    // 1D737 ; [.2020.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL BETA

    uint32_t const cps[1] = { 0x1d737 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_094)
{
    // 1D738 ; [.2021.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL GAMMA

    uint32_t const cps[1] = { 0x1d738 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_095)
{
    // 1D739 ; [.2023.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL DELTA

    uint32_t const cps[1] = { 0x1d739 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_096)
{
    // 1D73A ; [.2024.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL EPSILON

    uint32_t const cps[1] = { 0x1d73a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_097)
{
    // 1D73B ; [.2028.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL ZETA

    uint32_t const cps[1] = { 0x1d73b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_098)
{
    // 1D73C ; [.202A.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL ETA

    uint32_t const cps[1] = { 0x1d73c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_099)
{
    // 1D73D ; [.202B.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL THETA

    uint32_t const cps[1] = { 0x1d73d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_100)
{
    // 1D73E ; [.202C.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL IOTA

    uint32_t const cps[1] = { 0x1d73e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_101)
{
    // 1D73F ; [.202E.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL KAPPA

    uint32_t const cps[1] = { 0x1d73f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_102)
{
    // 1D740 ; [.202F.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL LAMDA

    uint32_t const cps[1] = { 0x1d740 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_103)
{
    // 1D741 ; [.2031.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL MU

    uint32_t const cps[1] = { 0x1d741 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_104)
{
    // 1D742 ; [.2032.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL NU

    uint32_t const cps[1] = { 0x1d742 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_105)
{
    // 1D743 ; [.2033.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL XI

    uint32_t const cps[1] = { 0x1d743 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_106)
{
    // 1D744 ; [.2034.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL OMICRON

    uint32_t const cps[1] = { 0x1d744 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_107)
{
    // 1D745 ; [.2035.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL PI

    uint32_t const cps[1] = { 0x1d745 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_108)
{
    // 1D746 ; [.203A.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL RHO

    uint32_t const cps[1] = { 0x1d746 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_109)
{
    // 1D747 ; [.203D.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA

    uint32_t const cps[1] = { 0x1d747 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_110)
{
    // 1D748 ; [.203D.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL SIGMA

    uint32_t const cps[1] = { 0x1d748 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_111)
{
    // 1D749 ; [.2041.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL TAU

    uint32_t const cps[1] = { 0x1d749 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_112)
{
    // 1D74A ; [.2042.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL UPSILON

    uint32_t const cps[1] = { 0x1d74a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_113)
{
    // 1D74B ; [.2043.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL PHI

    uint32_t const cps[1] = { 0x1d74b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_114)
{
    // 1D74C ; [.2044.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL CHI

    uint32_t const cps[1] = { 0x1d74c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_115)
{
    // 1D74D ; [.2045.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL PSI

    uint32_t const cps[1] = { 0x1d74d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_116)
{
    // 1D74E ; [.2047.0020.0005] 
    // MATHEMATICAL BOLD ITALIC SMALL OMEGA

    uint32_t const cps[1] = { 0x1d74e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_117)
{
    // 1D74F ; [*061E.0020.0005] 
    // MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL

    uint32_t const cps[1] = { 0x1d74f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x61e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_118)
{
    // 1D750 ; [.2024.0020.0005] 
    // MATHEMATICAL BOLD ITALIC EPSILON SYMBOL

    uint32_t const cps[1] = { 0x1d750 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_119)
{
    // 1D751 ; [.202B.0020.0005] 
    // MATHEMATICAL BOLD ITALIC THETA SYMBOL

    uint32_t const cps[1] = { 0x1d751 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_120)
{
    // 1D752 ; [.202E.0020.0005] 
    // MATHEMATICAL BOLD ITALIC KAPPA SYMBOL

    uint32_t const cps[1] = { 0x1d752 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_121)
{
    // 1D753 ; [.2043.0020.0005] 
    // MATHEMATICAL BOLD ITALIC PHI SYMBOL

    uint32_t const cps[1] = { 0x1d753 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_122)
{
    // 1D754 ; [.203A.0020.0005] 
    // MATHEMATICAL BOLD ITALIC RHO SYMBOL

    uint32_t const cps[1] = { 0x1d754 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_123)
{
    // 1D755 ; [.2035.0020.0005] 
    // MATHEMATICAL BOLD ITALIC PI SYMBOL

    uint32_t const cps[1] = { 0x1d755 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_124)
{
    // 1D756 ; [.201F.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL ALPHA

    uint32_t const cps[1] = { 0x1d756 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_125)
{
    // 1D757 ; [.2020.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL BETA

    uint32_t const cps[1] = { 0x1d757 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_126)
{
    // 1D758 ; [.2021.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL GAMMA

    uint32_t const cps[1] = { 0x1d758 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_127)
{
    // 1D759 ; [.2023.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL DELTA

    uint32_t const cps[1] = { 0x1d759 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_128)
{
    // 1D75A ; [.2024.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL EPSILON

    uint32_t const cps[1] = { 0x1d75a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_129)
{
    // 1D75B ; [.2028.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL ZETA

    uint32_t const cps[1] = { 0x1d75b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_130)
{
    // 1D75C ; [.202A.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL ETA

    uint32_t const cps[1] = { 0x1d75c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_131)
{
    // 1D75D ; [.202B.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA

    uint32_t const cps[1] = { 0x1d75d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_132)
{
    // 1D75E ; [.202C.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA

    uint32_t const cps[1] = { 0x1d75e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_133)
{
    // 1D75F ; [.202E.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA

    uint32_t const cps[1] = { 0x1d75f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_134)
{
    // 1D760 ; [.202F.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA

    uint32_t const cps[1] = { 0x1d760 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_135)
{
    // 1D761 ; [.2031.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL MU

    uint32_t const cps[1] = { 0x1d761 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_136)
{
    // 1D762 ; [.2032.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL NU

    uint32_t const cps[1] = { 0x1d762 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_137)
{
    // 1D763 ; [.2033.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL XI

    uint32_t const cps[1] = { 0x1d763 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_138)
{
    // 1D764 ; [.2034.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON

    uint32_t const cps[1] = { 0x1d764 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_139)
{
    // 1D765 ; [.2035.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL PI

    uint32_t const cps[1] = { 0x1d765 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_140)
{
    // 1D766 ; [.203A.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO

    uint32_t const cps[1] = { 0x1d766 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_141)
{
    // 1D767 ; [.202B.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA SYMBOL

    uint32_t const cps[1] = { 0x1d767 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_142)
{
    // 1D768 ; [.203D.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA

    uint32_t const cps[1] = { 0x1d768 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_143)
{
    // 1D769 ; [.2041.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU

    uint32_t const cps[1] = { 0x1d769 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_144)
{
    // 1D76A ; [.2042.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON

    uint32_t const cps[1] = { 0x1d76a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_145)
{
    // 1D76B ; [.2043.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI

    uint32_t const cps[1] = { 0x1d76b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_146)
{
    // 1D76C ; [.2044.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI

    uint32_t const cps[1] = { 0x1d76c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_147)
{
    // 1D76D ; [.2045.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI

    uint32_t const cps[1] = { 0x1d76d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_148)
{
    // 1D76E ; [.2047.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA

    uint32_t const cps[1] = { 0x1d76e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x1), uint8_t(0xb)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_180_149)
{
    // 1D76F ; [*0622.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD NABLA

    uint32_t const cps[1] = { 0x1d76f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x622), uint8_t(0x1), uint8_t(0x5)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

