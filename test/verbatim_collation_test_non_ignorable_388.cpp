// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_388_000)
{
    // 4BAE 003F;	
    // (䮮) CJK UNIFIED IDEOGRAPH-4BAE	[FB80 CBAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_001)
{
    // 4BAE 0061;	
    // (䮮) CJK UNIFIED IDEOGRAPH-4BAE	[FB80 CBAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_002)
{
    // 4BAE 0041;	
    // (䮮) CJK UNIFIED IDEOGRAPH-4BAE	[FB80 CBAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_003)
{
    // 4BAE 0062;	
    // (䮮) CJK UNIFIED IDEOGRAPH-4BAE	[FB80 CBAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_004)
{
    // 4BAF 0021;	
    // (䮯) CJK UNIFIED IDEOGRAPH-4BAF	[FB80 CBAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_005)
{
    // 4BAF 003F;	
    // (䮯) CJK UNIFIED IDEOGRAPH-4BAF	[FB80 CBAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_006)
{
    // 4BAF 0061;	
    // (䮯) CJK UNIFIED IDEOGRAPH-4BAF	[FB80 CBAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_007)
{
    // 4BAF 0041;	
    // (䮯) CJK UNIFIED IDEOGRAPH-4BAF	[FB80 CBAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_008)
{
    // 4BAF 0062;	
    // (䮯) CJK UNIFIED IDEOGRAPH-4BAF	[FB80 CBAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_009)
{
    // 4BB0 0021;	
    // (䮰) CJK UNIFIED IDEOGRAPH-4BB0	[FB80 CBB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_010)
{
    // 4BB0 003F;	
    // (䮰) CJK UNIFIED IDEOGRAPH-4BB0	[FB80 CBB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_011)
{
    // 4BB0 0061;	
    // (䮰) CJK UNIFIED IDEOGRAPH-4BB0	[FB80 CBB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_012)
{
    // 4BB0 0041;	
    // (䮰) CJK UNIFIED IDEOGRAPH-4BB0	[FB80 CBB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_013)
{
    // 4BB0 0062;	
    // (䮰) CJK UNIFIED IDEOGRAPH-4BB0	[FB80 CBB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_014)
{
    // 4BB1 0021;	
    // (䮱) CJK UNIFIED IDEOGRAPH-4BB1	[FB80 CBB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_015)
{
    // 4BB1 003F;	
    // (䮱) CJK UNIFIED IDEOGRAPH-4BB1	[FB80 CBB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_016)
{
    // 4BB1 0061;	
    // (䮱) CJK UNIFIED IDEOGRAPH-4BB1	[FB80 CBB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_017)
{
    // 4BB1 0041;	
    // (䮱) CJK UNIFIED IDEOGRAPH-4BB1	[FB80 CBB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_018)
{
    // 4BB1 0062;	
    // (䮱) CJK UNIFIED IDEOGRAPH-4BB1	[FB80 CBB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_019)
{
    // 4BB2 0021;	
    // (䮲) CJK UNIFIED IDEOGRAPH-4BB2	[FB80 CBB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_020)
{
    // 4BB2 003F;	
    // (䮲) CJK UNIFIED IDEOGRAPH-4BB2	[FB80 CBB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_021)
{
    // 4BB2 0061;	
    // (䮲) CJK UNIFIED IDEOGRAPH-4BB2	[FB80 CBB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_022)
{
    // 4BB2 0041;	
    // (䮲) CJK UNIFIED IDEOGRAPH-4BB2	[FB80 CBB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_023)
{
    // 4BB2 0062;	
    // (䮲) CJK UNIFIED IDEOGRAPH-4BB2	[FB80 CBB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_024)
{
    // 4BB3 0021;	
    // (䮳) CJK UNIFIED IDEOGRAPH-4BB3	[FB80 CBB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_025)
{
    // 4BB3 003F;	
    // (䮳) CJK UNIFIED IDEOGRAPH-4BB3	[FB80 CBB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_026)
{
    // 4BB3 0061;	
    // (䮳) CJK UNIFIED IDEOGRAPH-4BB3	[FB80 CBB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_027)
{
    // 4BB3 0041;	
    // (䮳) CJK UNIFIED IDEOGRAPH-4BB3	[FB80 CBB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_028)
{
    // 4BB3 0062;	
    // (䮳) CJK UNIFIED IDEOGRAPH-4BB3	[FB80 CBB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_029)
{
    // 4BB4 0021;	
    // (䮴) CJK UNIFIED IDEOGRAPH-4BB4	[FB80 CBB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_030)
{
    // 4BB4 003F;	
    // (䮴) CJK UNIFIED IDEOGRAPH-4BB4	[FB80 CBB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_031)
{
    // 4BB4 0061;	
    // (䮴) CJK UNIFIED IDEOGRAPH-4BB4	[FB80 CBB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_032)
{
    // 4BB4 0041;	
    // (䮴) CJK UNIFIED IDEOGRAPH-4BB4	[FB80 CBB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_033)
{
    // 4BB4 0062;	
    // (䮴) CJK UNIFIED IDEOGRAPH-4BB4	[FB80 CBB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_034)
{
    // 4BB5 0021;	
    // (䮵) CJK UNIFIED IDEOGRAPH-4BB5	[FB80 CBB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_035)
{
    // 4BB5 003F;	
    // (䮵) CJK UNIFIED IDEOGRAPH-4BB5	[FB80 CBB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_036)
{
    // 4BB5 0061;	
    // (䮵) CJK UNIFIED IDEOGRAPH-4BB5	[FB80 CBB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_037)
{
    // 4BB5 0041;	
    // (䮵) CJK UNIFIED IDEOGRAPH-4BB5	[FB80 CBB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_038)
{
    // 4BB5 0062;	
    // (䮵) CJK UNIFIED IDEOGRAPH-4BB5	[FB80 CBB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_039)
{
    // 4BB6 0021;	
    // (䮶) CJK UNIFIED IDEOGRAPH-4BB6	[FB80 CBB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_040)
{
    // 4BB6 003F;	
    // (䮶) CJK UNIFIED IDEOGRAPH-4BB6	[FB80 CBB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_041)
{
    // 4BB6 0061;	
    // (䮶) CJK UNIFIED IDEOGRAPH-4BB6	[FB80 CBB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_042)
{
    // 4BB6 0041;	
    // (䮶) CJK UNIFIED IDEOGRAPH-4BB6	[FB80 CBB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_043)
{
    // 4BB6 0062;	
    // (䮶) CJK UNIFIED IDEOGRAPH-4BB6	[FB80 CBB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_044)
{
    // 4BB7 0021;	
    // (䮷) CJK UNIFIED IDEOGRAPH-4BB7	[FB80 CBB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_045)
{
    // 4BB7 003F;	
    // (䮷) CJK UNIFIED IDEOGRAPH-4BB7	[FB80 CBB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_046)
{
    // 4BB7 0061;	
    // (䮷) CJK UNIFIED IDEOGRAPH-4BB7	[FB80 CBB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_047)
{
    // 4BB7 0041;	
    // (䮷) CJK UNIFIED IDEOGRAPH-4BB7	[FB80 CBB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_048)
{
    // 4BB7 0062;	
    // (䮷) CJK UNIFIED IDEOGRAPH-4BB7	[FB80 CBB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_049)
{
    // 4BB8 0021;	
    // (䮸) CJK UNIFIED IDEOGRAPH-4BB8	[FB80 CBB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_050)
{
    // 4BB8 003F;	
    // (䮸) CJK UNIFIED IDEOGRAPH-4BB8	[FB80 CBB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_051)
{
    // 4BB8 0061;	
    // (䮸) CJK UNIFIED IDEOGRAPH-4BB8	[FB80 CBB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_052)
{
    // 4BB8 0041;	
    // (䮸) CJK UNIFIED IDEOGRAPH-4BB8	[FB80 CBB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_053)
{
    // 4BB8 0062;	
    // (䮸) CJK UNIFIED IDEOGRAPH-4BB8	[FB80 CBB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_054)
{
    // 4BB9 0021;	
    // (䮹) CJK UNIFIED IDEOGRAPH-4BB9	[FB80 CBB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_055)
{
    // 4BB9 003F;	
    // (䮹) CJK UNIFIED IDEOGRAPH-4BB9	[FB80 CBB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_056)
{
    // 4BB9 0061;	
    // (䮹) CJK UNIFIED IDEOGRAPH-4BB9	[FB80 CBB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_057)
{
    // 4BB9 0041;	
    // (䮹) CJK UNIFIED IDEOGRAPH-4BB9	[FB80 CBB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_058)
{
    // 4BB9 0062;	
    // (䮹) CJK UNIFIED IDEOGRAPH-4BB9	[FB80 CBB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_059)
{
    // 4BBA 0021;	
    // (䮺) CJK UNIFIED IDEOGRAPH-4BBA	[FB80 CBBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_060)
{
    // 4BBA 003F;	
    // (䮺) CJK UNIFIED IDEOGRAPH-4BBA	[FB80 CBBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_061)
{
    // 4BBA 0061;	
    // (䮺) CJK UNIFIED IDEOGRAPH-4BBA	[FB80 CBBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_062)
{
    // 4BBA 0041;	
    // (䮺) CJK UNIFIED IDEOGRAPH-4BBA	[FB80 CBBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BBA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_063)
{
    // 4BBA 0062;	
    // (䮺) CJK UNIFIED IDEOGRAPH-4BBA	[FB80 CBBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_064)
{
    // 4BBB 0021;	
    // (䮻) CJK UNIFIED IDEOGRAPH-4BBB	[FB80 CBBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_065)
{
    // 4BBB 003F;	
    // (䮻) CJK UNIFIED IDEOGRAPH-4BBB	[FB80 CBBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_066)
{
    // 4BBB 0061;	
    // (䮻) CJK UNIFIED IDEOGRAPH-4BBB	[FB80 CBBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_067)
{
    // 4BBB 0041;	
    // (䮻) CJK UNIFIED IDEOGRAPH-4BBB	[FB80 CBBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BBB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_068)
{
    // 4BBB 0062;	
    // (䮻) CJK UNIFIED IDEOGRAPH-4BBB	[FB80 CBBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_069)
{
    // 4BBC 0021;	
    // (䮼) CJK UNIFIED IDEOGRAPH-4BBC	[FB80 CBBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_070)
{
    // 4BBC 003F;	
    // (䮼) CJK UNIFIED IDEOGRAPH-4BBC	[FB80 CBBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_071)
{
    // 4BBC 0061;	
    // (䮼) CJK UNIFIED IDEOGRAPH-4BBC	[FB80 CBBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_072)
{
    // 4BBC 0041;	
    // (䮼) CJK UNIFIED IDEOGRAPH-4BBC	[FB80 CBBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BBC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_073)
{
    // 4BBC 0062;	
    // (䮼) CJK UNIFIED IDEOGRAPH-4BBC	[FB80 CBBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_074)
{
    // 4BBD 0021;	
    // (䮽) CJK UNIFIED IDEOGRAPH-4BBD	[FB80 CBBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_075)
{
    // 4BBD 003F;	
    // (䮽) CJK UNIFIED IDEOGRAPH-4BBD	[FB80 CBBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_076)
{
    // 4BBD 0061;	
    // (䮽) CJK UNIFIED IDEOGRAPH-4BBD	[FB80 CBBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_077)
{
    // 4BBD 0041;	
    // (䮽) CJK UNIFIED IDEOGRAPH-4BBD	[FB80 CBBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BBD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_078)
{
    // 4BBD 0062;	
    // (䮽) CJK UNIFIED IDEOGRAPH-4BBD	[FB80 CBBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_079)
{
    // 4BBE 0021;	
    // (䮾) CJK UNIFIED IDEOGRAPH-4BBE	[FB80 CBBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_080)
{
    // 4BBE 003F;	
    // (䮾) CJK UNIFIED IDEOGRAPH-4BBE	[FB80 CBBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_081)
{
    // 4BBE 0061;	
    // (䮾) CJK UNIFIED IDEOGRAPH-4BBE	[FB80 CBBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_082)
{
    // 4BBE 0041;	
    // (䮾) CJK UNIFIED IDEOGRAPH-4BBE	[FB80 CBBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BBE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_083)
{
    // 4BBE 0062;	
    // (䮾) CJK UNIFIED IDEOGRAPH-4BBE	[FB80 CBBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_084)
{
    // 4BBF 0021;	
    // (䮿) CJK UNIFIED IDEOGRAPH-4BBF	[FB80 CBBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_085)
{
    // 4BBF 003F;	
    // (䮿) CJK UNIFIED IDEOGRAPH-4BBF	[FB80 CBBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_086)
{
    // 4BBF 0061;	
    // (䮿) CJK UNIFIED IDEOGRAPH-4BBF	[FB80 CBBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_087)
{
    // 4BBF 0041;	
    // (䮿) CJK UNIFIED IDEOGRAPH-4BBF	[FB80 CBBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BBF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_088)
{
    // 4BBF 0062;	
    // (䮿) CJK UNIFIED IDEOGRAPH-4BBF	[FB80 CBBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BBF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_089)
{
    // 4BC0 0021;	
    // (䯀) CJK UNIFIED IDEOGRAPH-4BC0	[FB80 CBC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_090)
{
    // 4BC0 003F;	
    // (䯀) CJK UNIFIED IDEOGRAPH-4BC0	[FB80 CBC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_091)
{
    // 4BC0 0061;	
    // (䯀) CJK UNIFIED IDEOGRAPH-4BC0	[FB80 CBC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_092)
{
    // 4BC0 0041;	
    // (䯀) CJK UNIFIED IDEOGRAPH-4BC0	[FB80 CBC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_093)
{
    // 4BC0 0062;	
    // (䯀) CJK UNIFIED IDEOGRAPH-4BC0	[FB80 CBC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_094)
{
    // 4BC1 0021;	
    // (䯁) CJK UNIFIED IDEOGRAPH-4BC1	[FB80 CBC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_095)
{
    // 4BC1 003F;	
    // (䯁) CJK UNIFIED IDEOGRAPH-4BC1	[FB80 CBC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_096)
{
    // 4BC1 0061;	
    // (䯁) CJK UNIFIED IDEOGRAPH-4BC1	[FB80 CBC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_097)
{
    // 4BC1 0041;	
    // (䯁) CJK UNIFIED IDEOGRAPH-4BC1	[FB80 CBC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_098)
{
    // 4BC1 0062;	
    // (䯁) CJK UNIFIED IDEOGRAPH-4BC1	[FB80 CBC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_099)
{
    // 4BC2 0021;	
    // (䯂) CJK UNIFIED IDEOGRAPH-4BC2	[FB80 CBC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_100)
{
    // 4BC2 003F;	
    // (䯂) CJK UNIFIED IDEOGRAPH-4BC2	[FB80 CBC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_101)
{
    // 4BC2 0061;	
    // (䯂) CJK UNIFIED IDEOGRAPH-4BC2	[FB80 CBC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_102)
{
    // 4BC2 0041;	
    // (䯂) CJK UNIFIED IDEOGRAPH-4BC2	[FB80 CBC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_103)
{
    // 4BC2 0062;	
    // (䯂) CJK UNIFIED IDEOGRAPH-4BC2	[FB80 CBC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_104)
{
    // 4BC3 0021;	
    // (䯃) CJK UNIFIED IDEOGRAPH-4BC3	[FB80 CBC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_105)
{
    // 4BC3 003F;	
    // (䯃) CJK UNIFIED IDEOGRAPH-4BC3	[FB80 CBC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_106)
{
    // 4BC3 0061;	
    // (䯃) CJK UNIFIED IDEOGRAPH-4BC3	[FB80 CBC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_107)
{
    // 4BC3 0041;	
    // (䯃) CJK UNIFIED IDEOGRAPH-4BC3	[FB80 CBC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_108)
{
    // 4BC3 0062;	
    // (䯃) CJK UNIFIED IDEOGRAPH-4BC3	[FB80 CBC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_109)
{
    // 4BC4 0021;	
    // (䯄) CJK UNIFIED IDEOGRAPH-4BC4	[FB80 CBC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_110)
{
    // 4BC4 003F;	
    // (䯄) CJK UNIFIED IDEOGRAPH-4BC4	[FB80 CBC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_111)
{
    // 4BC4 0061;	
    // (䯄) CJK UNIFIED IDEOGRAPH-4BC4	[FB80 CBC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_112)
{
    // 4BC4 0041;	
    // (䯄) CJK UNIFIED IDEOGRAPH-4BC4	[FB80 CBC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_113)
{
    // 4BC4 0062;	
    // (䯄) CJK UNIFIED IDEOGRAPH-4BC4	[FB80 CBC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_114)
{
    // 4BC5 0021;	
    // (䯅) CJK UNIFIED IDEOGRAPH-4BC5	[FB80 CBC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_115)
{
    // 4BC5 003F;	
    // (䯅) CJK UNIFIED IDEOGRAPH-4BC5	[FB80 CBC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_116)
{
    // 4BC5 0061;	
    // (䯅) CJK UNIFIED IDEOGRAPH-4BC5	[FB80 CBC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_117)
{
    // 4BC5 0041;	
    // (䯅) CJK UNIFIED IDEOGRAPH-4BC5	[FB80 CBC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_118)
{
    // 4BC5 0062;	
    // (䯅) CJK UNIFIED IDEOGRAPH-4BC5	[FB80 CBC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_119)
{
    // 4BC6 0021;	
    // (䯆) CJK UNIFIED IDEOGRAPH-4BC6	[FB80 CBC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_120)
{
    // 4BC6 003F;	
    // (䯆) CJK UNIFIED IDEOGRAPH-4BC6	[FB80 CBC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_121)
{
    // 4BC6 0061;	
    // (䯆) CJK UNIFIED IDEOGRAPH-4BC6	[FB80 CBC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_122)
{
    // 4BC6 0041;	
    // (䯆) CJK UNIFIED IDEOGRAPH-4BC6	[FB80 CBC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_123)
{
    // 4BC6 0062;	
    // (䯆) CJK UNIFIED IDEOGRAPH-4BC6	[FB80 CBC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_124)
{
    // 4BC7 0021;	
    // (䯇) CJK UNIFIED IDEOGRAPH-4BC7	[FB80 CBC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_125)
{
    // 4BC7 003F;	
    // (䯇) CJK UNIFIED IDEOGRAPH-4BC7	[FB80 CBC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_126)
{
    // 4BC7 0061;	
    // (䯇) CJK UNIFIED IDEOGRAPH-4BC7	[FB80 CBC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_127)
{
    // 4BC7 0041;	
    // (䯇) CJK UNIFIED IDEOGRAPH-4BC7	[FB80 CBC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_128)
{
    // 4BC7 0062;	
    // (䯇) CJK UNIFIED IDEOGRAPH-4BC7	[FB80 CBC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_129)
{
    // 4BC8 0021;	
    // (䯈) CJK UNIFIED IDEOGRAPH-4BC8	[FB80 CBC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_130)
{
    // 4BC8 003F;	
    // (䯈) CJK UNIFIED IDEOGRAPH-4BC8	[FB80 CBC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_131)
{
    // 4BC8 0061;	
    // (䯈) CJK UNIFIED IDEOGRAPH-4BC8	[FB80 CBC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_132)
{
    // 4BC8 0041;	
    // (䯈) CJK UNIFIED IDEOGRAPH-4BC8	[FB80 CBC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_133)
{
    // 4BC8 0062;	
    // (䯈) CJK UNIFIED IDEOGRAPH-4BC8	[FB80 CBC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_134)
{
    // 4BC9 0021;	
    // (䯉) CJK UNIFIED IDEOGRAPH-4BC9	[FB80 CBC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_135)
{
    // 4BC9 003F;	
    // (䯉) CJK UNIFIED IDEOGRAPH-4BC9	[FB80 CBC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_136)
{
    // 4BC9 0061;	
    // (䯉) CJK UNIFIED IDEOGRAPH-4BC9	[FB80 CBC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_137)
{
    // 4BC9 0041;	
    // (䯉) CJK UNIFIED IDEOGRAPH-4BC9	[FB80 CBC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_138)
{
    // 4BC9 0062;	
    // (䯉) CJK UNIFIED IDEOGRAPH-4BC9	[FB80 CBC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_139)
{
    // 4BCA 0021;	
    // (䯊) CJK UNIFIED IDEOGRAPH-4BCA	[FB80 CBCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_140)
{
    // 4BCA 003F;	
    // (䯊) CJK UNIFIED IDEOGRAPH-4BCA	[FB80 CBCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_141)
{
    // 4BCA 0061;	
    // (䯊) CJK UNIFIED IDEOGRAPH-4BCA	[FB80 CBCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_142)
{
    // 4BCA 0041;	
    // (䯊) CJK UNIFIED IDEOGRAPH-4BCA	[FB80 CBCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BCA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_143)
{
    // 4BCA 0062;	
    // (䯊) CJK UNIFIED IDEOGRAPH-4BCA	[FB80 CBCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_144)
{
    // 4BCB 0021;	
    // (䯋) CJK UNIFIED IDEOGRAPH-4BCB	[FB80 CBCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_145)
{
    // 4BCB 003F;	
    // (䯋) CJK UNIFIED IDEOGRAPH-4BCB	[FB80 CBCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_146)
{
    // 4BCB 0061;	
    // (䯋) CJK UNIFIED IDEOGRAPH-4BCB	[FB80 CBCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_147)
{
    // 4BCB 0041;	
    // (䯋) CJK UNIFIED IDEOGRAPH-4BCB	[FB80 CBCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BCB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_148)
{
    // 4BCB 0062;	
    // (䯋) CJK UNIFIED IDEOGRAPH-4BCB	[FB80 CBCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_149)
{
    // 4BCC 0021;	
    // (䯌) CJK UNIFIED IDEOGRAPH-4BCC	[FB80 CBCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_150)
{
    // 4BCC 003F;	
    // (䯌) CJK UNIFIED IDEOGRAPH-4BCC	[FB80 CBCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_151)
{
    // 4BCC 0061;	
    // (䯌) CJK UNIFIED IDEOGRAPH-4BCC	[FB80 CBCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_152)
{
    // 4BCC 0041;	
    // (䯌) CJK UNIFIED IDEOGRAPH-4BCC	[FB80 CBCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BCC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_153)
{
    // 4BCC 0062;	
    // (䯌) CJK UNIFIED IDEOGRAPH-4BCC	[FB80 CBCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_154)
{
    // 4BCD 0021;	
    // (䯍) CJK UNIFIED IDEOGRAPH-4BCD	[FB80 CBCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_155)
{
    // 4BCD 003F;	
    // (䯍) CJK UNIFIED IDEOGRAPH-4BCD	[FB80 CBCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_156)
{
    // 4BCD 0061;	
    // (䯍) CJK UNIFIED IDEOGRAPH-4BCD	[FB80 CBCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_157)
{
    // 4BCD 0041;	
    // (䯍) CJK UNIFIED IDEOGRAPH-4BCD	[FB80 CBCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BCD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_158)
{
    // 4BCD 0062;	
    // (䯍) CJK UNIFIED IDEOGRAPH-4BCD	[FB80 CBCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_159)
{
    // 4BCE 0021;	
    // (䯎) CJK UNIFIED IDEOGRAPH-4BCE	[FB80 CBCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_160)
{
    // 2FA08 0021;	
    // (䯎) CJK COMPATIBILITY IDEOGRAPH-2FA08	[FB80 CBCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_161)
{
    // 4BCE 003F;	
    // (䯎) CJK UNIFIED IDEOGRAPH-4BCE	[FB80 CBCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_162)
{
    // 2FA08 003F;	
    // (䯎) CJK COMPATIBILITY IDEOGRAPH-2FA08	[FB80 CBCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_163)
{
    // 4BCE 0061;	
    // (䯎) CJK UNIFIED IDEOGRAPH-4BCE	[FB80 CBCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_164)
{
    // 2FA08 0061;	
    // (䯎) CJK COMPATIBILITY IDEOGRAPH-2FA08	[FB80 CBCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_165)
{
    // 4BCE 0041;	
    // (䯎) CJK UNIFIED IDEOGRAPH-4BCE	[FB80 CBCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BCE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_166)
{
    // 2FA08 0041;	
    // (䯎) CJK COMPATIBILITY IDEOGRAPH-2FA08	[FB80 CBCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_167)
{
    // 4BCE 0062;	
    // (䯎) CJK UNIFIED IDEOGRAPH-4BCE	[FB80 CBCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_168)
{
    // 2FA08 0062;	
    // (䯎) CJK COMPATIBILITY IDEOGRAPH-2FA08	[FB80 CBCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_169)
{
    // 4BCF 0021;	
    // (䯏) CJK UNIFIED IDEOGRAPH-4BCF	[FB80 CBCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_170)
{
    // 4BCF 003F;	
    // (䯏) CJK UNIFIED IDEOGRAPH-4BCF	[FB80 CBCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_171)
{
    // 4BCF 0061;	
    // (䯏) CJK UNIFIED IDEOGRAPH-4BCF	[FB80 CBCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_172)
{
    // 4BCF 0041;	
    // (䯏) CJK UNIFIED IDEOGRAPH-4BCF	[FB80 CBCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BCF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_173)
{
    // 4BCF 0062;	
    // (䯏) CJK UNIFIED IDEOGRAPH-4BCF	[FB80 CBCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BCF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_174)
{
    // 4BD0 0021;	
    // (䯐) CJK UNIFIED IDEOGRAPH-4BD0	[FB80 CBD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_175)
{
    // 4BD0 003F;	
    // (䯐) CJK UNIFIED IDEOGRAPH-4BD0	[FB80 CBD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_176)
{
    // 4BD0 0061;	
    // (䯐) CJK UNIFIED IDEOGRAPH-4BD0	[FB80 CBD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_177)
{
    // 4BD0 0041;	
    // (䯐) CJK UNIFIED IDEOGRAPH-4BD0	[FB80 CBD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_178)
{
    // 4BD0 0062;	
    // (䯐) CJK UNIFIED IDEOGRAPH-4BD0	[FB80 CBD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_179)
{
    // 4BD1 0021;	
    // (䯑) CJK UNIFIED IDEOGRAPH-4BD1	[FB80 CBD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_180)
{
    // 4BD1 003F;	
    // (䯑) CJK UNIFIED IDEOGRAPH-4BD1	[FB80 CBD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_181)
{
    // 4BD1 0061;	
    // (䯑) CJK UNIFIED IDEOGRAPH-4BD1	[FB80 CBD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_182)
{
    // 4BD1 0041;	
    // (䯑) CJK UNIFIED IDEOGRAPH-4BD1	[FB80 CBD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_183)
{
    // 4BD1 0062;	
    // (䯑) CJK UNIFIED IDEOGRAPH-4BD1	[FB80 CBD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_184)
{
    // 4BD2 0021;	
    // (䯒) CJK UNIFIED IDEOGRAPH-4BD2	[FB80 CBD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_185)
{
    // 4BD2 003F;	
    // (䯒) CJK UNIFIED IDEOGRAPH-4BD2	[FB80 CBD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_186)
{
    // 4BD2 0061;	
    // (䯒) CJK UNIFIED IDEOGRAPH-4BD2	[FB80 CBD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_187)
{
    // 4BD2 0041;	
    // (䯒) CJK UNIFIED IDEOGRAPH-4BD2	[FB80 CBD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_188)
{
    // 4BD2 0062;	
    // (䯒) CJK UNIFIED IDEOGRAPH-4BD2	[FB80 CBD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_189)
{
    // 4BD3 0021;	
    // (䯓) CJK UNIFIED IDEOGRAPH-4BD3	[FB80 CBD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_190)
{
    // 4BD3 003F;	
    // (䯓) CJK UNIFIED IDEOGRAPH-4BD3	[FB80 CBD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_191)
{
    // 4BD3 0061;	
    // (䯓) CJK UNIFIED IDEOGRAPH-4BD3	[FB80 CBD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_192)
{
    // 4BD3 0041;	
    // (䯓) CJK UNIFIED IDEOGRAPH-4BD3	[FB80 CBD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_193)
{
    // 4BD3 0062;	
    // (䯓) CJK UNIFIED IDEOGRAPH-4BD3	[FB80 CBD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_194)
{
    // 4BD4 0021;	
    // (䯔) CJK UNIFIED IDEOGRAPH-4BD4	[FB80 CBD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_195)
{
    // 4BD4 003F;	
    // (䯔) CJK UNIFIED IDEOGRAPH-4BD4	[FB80 CBD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_196)
{
    // 4BD4 0061;	
    // (䯔) CJK UNIFIED IDEOGRAPH-4BD4	[FB80 CBD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_197)
{
    // 4BD4 0041;	
    // (䯔) CJK UNIFIED IDEOGRAPH-4BD4	[FB80 CBD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_198)
{
    // 4BD4 0062;	
    // (䯔) CJK UNIFIED IDEOGRAPH-4BD4	[FB80 CBD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_199)
{
    // 4BD5 0021;	
    // (䯕) CJK UNIFIED IDEOGRAPH-4BD5	[FB80 CBD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_200)
{
    // 4BD5 003F;	
    // (䯕) CJK UNIFIED IDEOGRAPH-4BD5	[FB80 CBD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_201)
{
    // 4BD5 0061;	
    // (䯕) CJK UNIFIED IDEOGRAPH-4BD5	[FB80 CBD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_202)
{
    // 4BD5 0041;	
    // (䯕) CJK UNIFIED IDEOGRAPH-4BD5	[FB80 CBD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_203)
{
    // 4BD5 0062;	
    // (䯕) CJK UNIFIED IDEOGRAPH-4BD5	[FB80 CBD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_204)
{
    // 4BD6 0021;	
    // (䯖) CJK UNIFIED IDEOGRAPH-4BD6	[FB80 CBD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_205)
{
    // 4BD6 003F;	
    // (䯖) CJK UNIFIED IDEOGRAPH-4BD6	[FB80 CBD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_206)
{
    // 4BD6 0061;	
    // (䯖) CJK UNIFIED IDEOGRAPH-4BD6	[FB80 CBD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_207)
{
    // 4BD6 0041;	
    // (䯖) CJK UNIFIED IDEOGRAPH-4BD6	[FB80 CBD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_208)
{
    // 4BD6 0062;	
    // (䯖) CJK UNIFIED IDEOGRAPH-4BD6	[FB80 CBD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_209)
{
    // 4BD7 0021;	
    // (䯗) CJK UNIFIED IDEOGRAPH-4BD7	[FB80 CBD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_210)
{
    // 4BD7 003F;	
    // (䯗) CJK UNIFIED IDEOGRAPH-4BD7	[FB80 CBD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_211)
{
    // 4BD7 0061;	
    // (䯗) CJK UNIFIED IDEOGRAPH-4BD7	[FB80 CBD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_212)
{
    // 4BD7 0041;	
    // (䯗) CJK UNIFIED IDEOGRAPH-4BD7	[FB80 CBD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_213)
{
    // 4BD7 0062;	
    // (䯗) CJK UNIFIED IDEOGRAPH-4BD7	[FB80 CBD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_214)
{
    // 4BD8 0021;	
    // (䯘) CJK UNIFIED IDEOGRAPH-4BD8	[FB80 CBD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_215)
{
    // 4BD8 003F;	
    // (䯘) CJK UNIFIED IDEOGRAPH-4BD8	[FB80 CBD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_216)
{
    // 4BD8 0061;	
    // (䯘) CJK UNIFIED IDEOGRAPH-4BD8	[FB80 CBD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_217)
{
    // 4BD8 0041;	
    // (䯘) CJK UNIFIED IDEOGRAPH-4BD8	[FB80 CBD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_218)
{
    // 4BD8 0062;	
    // (䯘) CJK UNIFIED IDEOGRAPH-4BD8	[FB80 CBD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_219)
{
    // 4BD9 0021;	
    // (䯙) CJK UNIFIED IDEOGRAPH-4BD9	[FB80 CBD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_220)
{
    // 4BD9 003F;	
    // (䯙) CJK UNIFIED IDEOGRAPH-4BD9	[FB80 CBD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_221)
{
    // 4BD9 0061;	
    // (䯙) CJK UNIFIED IDEOGRAPH-4BD9	[FB80 CBD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_222)
{
    // 4BD9 0041;	
    // (䯙) CJK UNIFIED IDEOGRAPH-4BD9	[FB80 CBD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BD9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_223)
{
    // 4BD9 0062;	
    // (䯙) CJK UNIFIED IDEOGRAPH-4BD9	[FB80 CBD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BD9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_224)
{
    // 4BDA 0021;	
    // (䯚) CJK UNIFIED IDEOGRAPH-4BDA	[FB80 CBDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_225)
{
    // 4BDA 003F;	
    // (䯚) CJK UNIFIED IDEOGRAPH-4BDA	[FB80 CBDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_226)
{
    // 4BDA 0061;	
    // (䯚) CJK UNIFIED IDEOGRAPH-4BDA	[FB80 CBDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_227)
{
    // 4BDA 0041;	
    // (䯚) CJK UNIFIED IDEOGRAPH-4BDA	[FB80 CBDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BDA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_228)
{
    // 4BDA 0062;	
    // (䯚) CJK UNIFIED IDEOGRAPH-4BDA	[FB80 CBDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_229)
{
    // 4BDB 0021;	
    // (䯛) CJK UNIFIED IDEOGRAPH-4BDB	[FB80 CBDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_230)
{
    // 4BDB 003F;	
    // (䯛) CJK UNIFIED IDEOGRAPH-4BDB	[FB80 CBDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_231)
{
    // 4BDB 0061;	
    // (䯛) CJK UNIFIED IDEOGRAPH-4BDB	[FB80 CBDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_232)
{
    // 4BDB 0041;	
    // (䯛) CJK UNIFIED IDEOGRAPH-4BDB	[FB80 CBDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BDB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_233)
{
    // 4BDB 0062;	
    // (䯛) CJK UNIFIED IDEOGRAPH-4BDB	[FB80 CBDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_234)
{
    // 4BDC 0021;	
    // (䯜) CJK UNIFIED IDEOGRAPH-4BDC	[FB80 CBDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_235)
{
    // 4BDC 003F;	
    // (䯜) CJK UNIFIED IDEOGRAPH-4BDC	[FB80 CBDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_236)
{
    // 4BDC 0061;	
    // (䯜) CJK UNIFIED IDEOGRAPH-4BDC	[FB80 CBDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_237)
{
    // 4BDC 0041;	
    // (䯜) CJK UNIFIED IDEOGRAPH-4BDC	[FB80 CBDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BDC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_238)
{
    // 4BDC 0062;	
    // (䯜) CJK UNIFIED IDEOGRAPH-4BDC	[FB80 CBDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_239)
{
    // 4BDD 0021;	
    // (䯝) CJK UNIFIED IDEOGRAPH-4BDD	[FB80 CBDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_240)
{
    // 4BDD 003F;	
    // (䯝) CJK UNIFIED IDEOGRAPH-4BDD	[FB80 CBDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_241)
{
    // 4BDD 0061;	
    // (䯝) CJK UNIFIED IDEOGRAPH-4BDD	[FB80 CBDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_242)
{
    // 4BDD 0041;	
    // (䯝) CJK UNIFIED IDEOGRAPH-4BDD	[FB80 CBDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BDD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_243)
{
    // 4BDD 0062;	
    // (䯝) CJK UNIFIED IDEOGRAPH-4BDD	[FB80 CBDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_244)
{
    // 4BDE 0021;	
    // (䯞) CJK UNIFIED IDEOGRAPH-4BDE	[FB80 CBDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_245)
{
    // 4BDE 003F;	
    // (䯞) CJK UNIFIED IDEOGRAPH-4BDE	[FB80 CBDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_246)
{
    // 4BDE 0061;	
    // (䯞) CJK UNIFIED IDEOGRAPH-4BDE	[FB80 CBDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_247)
{
    // 4BDE 0041;	
    // (䯞) CJK UNIFIED IDEOGRAPH-4BDE	[FB80 CBDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BDE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_248)
{
    // 4BDE 0062;	
    // (䯞) CJK UNIFIED IDEOGRAPH-4BDE	[FB80 CBDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_249)
{
    // 4BDF 0021;	
    // (䯟) CJK UNIFIED IDEOGRAPH-4BDF	[FB80 CBDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_250)
{
    // 4BDF 003F;	
    // (䯟) CJK UNIFIED IDEOGRAPH-4BDF	[FB80 CBDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_251)
{
    // 4BDF 0061;	
    // (䯟) CJK UNIFIED IDEOGRAPH-4BDF	[FB80 CBDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_252)
{
    // 4BDF 0041;	
    // (䯟) CJK UNIFIED IDEOGRAPH-4BDF	[FB80 CBDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BDF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_253)
{
    // 4BDF 0062;	
    // (䯟) CJK UNIFIED IDEOGRAPH-4BDF	[FB80 CBDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BDF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_254)
{
    // 4BE0 0021;	
    // (䯠) CJK UNIFIED IDEOGRAPH-4BE0	[FB80 CBE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_255)
{
    // 4BE0 003F;	
    // (䯠) CJK UNIFIED IDEOGRAPH-4BE0	[FB80 CBE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_256)
{
    // 4BE0 0061;	
    // (䯠) CJK UNIFIED IDEOGRAPH-4BE0	[FB80 CBE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_257)
{
    // 4BE0 0041;	
    // (䯠) CJK UNIFIED IDEOGRAPH-4BE0	[FB80 CBE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_258)
{
    // 4BE0 0062;	
    // (䯠) CJK UNIFIED IDEOGRAPH-4BE0	[FB80 CBE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_259)
{
    // 4BE1 0021;	
    // (䯡) CJK UNIFIED IDEOGRAPH-4BE1	[FB80 CBE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_260)
{
    // 4BE1 003F;	
    // (䯡) CJK UNIFIED IDEOGRAPH-4BE1	[FB80 CBE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_261)
{
    // 4BE1 0061;	
    // (䯡) CJK UNIFIED IDEOGRAPH-4BE1	[FB80 CBE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_262)
{
    // 4BE1 0041;	
    // (䯡) CJK UNIFIED IDEOGRAPH-4BE1	[FB80 CBE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_263)
{
    // 4BE1 0062;	
    // (䯡) CJK UNIFIED IDEOGRAPH-4BE1	[FB80 CBE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_264)
{
    // 4BE2 0021;	
    // (䯢) CJK UNIFIED IDEOGRAPH-4BE2	[FB80 CBE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_265)
{
    // 4BE2 003F;	
    // (䯢) CJK UNIFIED IDEOGRAPH-4BE2	[FB80 CBE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_266)
{
    // 4BE2 0061;	
    // (䯢) CJK UNIFIED IDEOGRAPH-4BE2	[FB80 CBE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_267)
{
    // 4BE2 0041;	
    // (䯢) CJK UNIFIED IDEOGRAPH-4BE2	[FB80 CBE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_268)
{
    // 4BE2 0062;	
    // (䯢) CJK UNIFIED IDEOGRAPH-4BE2	[FB80 CBE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_269)
{
    // 4BE3 0021;	
    // (䯣) CJK UNIFIED IDEOGRAPH-4BE3	[FB80 CBE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_270)
{
    // 4BE3 003F;	
    // (䯣) CJK UNIFIED IDEOGRAPH-4BE3	[FB80 CBE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_271)
{
    // 4BE3 0061;	
    // (䯣) CJK UNIFIED IDEOGRAPH-4BE3	[FB80 CBE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_272)
{
    // 4BE3 0041;	
    // (䯣) CJK UNIFIED IDEOGRAPH-4BE3	[FB80 CBE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_273)
{
    // 4BE3 0062;	
    // (䯣) CJK UNIFIED IDEOGRAPH-4BE3	[FB80 CBE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_274)
{
    // 4BE4 0021;	
    // (䯤) CJK UNIFIED IDEOGRAPH-4BE4	[FB80 CBE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_275)
{
    // 4BE4 003F;	
    // (䯤) CJK UNIFIED IDEOGRAPH-4BE4	[FB80 CBE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_276)
{
    // 4BE4 0061;	
    // (䯤) CJK UNIFIED IDEOGRAPH-4BE4	[FB80 CBE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_277)
{
    // 4BE4 0041;	
    // (䯤) CJK UNIFIED IDEOGRAPH-4BE4	[FB80 CBE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_278)
{
    // 4BE4 0062;	
    // (䯤) CJK UNIFIED IDEOGRAPH-4BE4	[FB80 CBE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_279)
{
    // 4BE5 0021;	
    // (䯥) CJK UNIFIED IDEOGRAPH-4BE5	[FB80 CBE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_280)
{
    // 4BE5 003F;	
    // (䯥) CJK UNIFIED IDEOGRAPH-4BE5	[FB80 CBE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_281)
{
    // 4BE5 0061;	
    // (䯥) CJK UNIFIED IDEOGRAPH-4BE5	[FB80 CBE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_282)
{
    // 4BE5 0041;	
    // (䯥) CJK UNIFIED IDEOGRAPH-4BE5	[FB80 CBE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_283)
{
    // 4BE5 0062;	
    // (䯥) CJK UNIFIED IDEOGRAPH-4BE5	[FB80 CBE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_284)
{
    // 4BE6 0021;	
    // (䯦) CJK UNIFIED IDEOGRAPH-4BE6	[FB80 CBE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_285)
{
    // 4BE6 003F;	
    // (䯦) CJK UNIFIED IDEOGRAPH-4BE6	[FB80 CBE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_286)
{
    // 4BE6 0061;	
    // (䯦) CJK UNIFIED IDEOGRAPH-4BE6	[FB80 CBE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_287)
{
    // 4BE6 0041;	
    // (䯦) CJK UNIFIED IDEOGRAPH-4BE6	[FB80 CBE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_288)
{
    // 4BE6 0062;	
    // (䯦) CJK UNIFIED IDEOGRAPH-4BE6	[FB80 CBE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_289)
{
    // 4BE7 0021;	
    // (䯧) CJK UNIFIED IDEOGRAPH-4BE7	[FB80 CBE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_290)
{
    // 4BE7 003F;	
    // (䯧) CJK UNIFIED IDEOGRAPH-4BE7	[FB80 CBE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_291)
{
    // 4BE7 0061;	
    // (䯧) CJK UNIFIED IDEOGRAPH-4BE7	[FB80 CBE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_292)
{
    // 4BE7 0041;	
    // (䯧) CJK UNIFIED IDEOGRAPH-4BE7	[FB80 CBE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_293)
{
    // 4BE7 0062;	
    // (䯧) CJK UNIFIED IDEOGRAPH-4BE7	[FB80 CBE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_294)
{
    // 4BE8 0021;	
    // (䯨) CJK UNIFIED IDEOGRAPH-4BE8	[FB80 CBE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_295)
{
    // 4BE8 003F;	
    // (䯨) CJK UNIFIED IDEOGRAPH-4BE8	[FB80 CBE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_296)
{
    // 4BE8 0061;	
    // (䯨) CJK UNIFIED IDEOGRAPH-4BE8	[FB80 CBE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_297)
{
    // 4BE8 0041;	
    // (䯨) CJK UNIFIED IDEOGRAPH-4BE8	[FB80 CBE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_298)
{
    // 4BE8 0062;	
    // (䯨) CJK UNIFIED IDEOGRAPH-4BE8	[FB80 CBE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_299)
{
    // 4BE9 0021;	
    // (䯩) CJK UNIFIED IDEOGRAPH-4BE9	[FB80 CBE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_300)
{
    // 4BE9 003F;	
    // (䯩) CJK UNIFIED IDEOGRAPH-4BE9	[FB80 CBE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_301)
{
    // 4BE9 0061;	
    // (䯩) CJK UNIFIED IDEOGRAPH-4BE9	[FB80 CBE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_302)
{
    // 4BE9 0041;	
    // (䯩) CJK UNIFIED IDEOGRAPH-4BE9	[FB80 CBE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_303)
{
    // 4BE9 0062;	
    // (䯩) CJK UNIFIED IDEOGRAPH-4BE9	[FB80 CBE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_304)
{
    // 4BEA 0021;	
    // (䯪) CJK UNIFIED IDEOGRAPH-4BEA	[FB80 CBEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_305)
{
    // 4BEA 003F;	
    // (䯪) CJK UNIFIED IDEOGRAPH-4BEA	[FB80 CBEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_306)
{
    // 4BEA 0061;	
    // (䯪) CJK UNIFIED IDEOGRAPH-4BEA	[FB80 CBEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_307)
{
    // 4BEA 0041;	
    // (䯪) CJK UNIFIED IDEOGRAPH-4BEA	[FB80 CBEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_308)
{
    // 4BEA 0062;	
    // (䯪) CJK UNIFIED IDEOGRAPH-4BEA	[FB80 CBEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_309)
{
    // 4BEB 0021;	
    // (䯫) CJK UNIFIED IDEOGRAPH-4BEB	[FB80 CBEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_310)
{
    // 4BEB 003F;	
    // (䯫) CJK UNIFIED IDEOGRAPH-4BEB	[FB80 CBEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_311)
{
    // 4BEB 0061;	
    // (䯫) CJK UNIFIED IDEOGRAPH-4BEB	[FB80 CBEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_312)
{
    // 4BEB 0041;	
    // (䯫) CJK UNIFIED IDEOGRAPH-4BEB	[FB80 CBEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BEB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_313)
{
    // 4BEB 0062;	
    // (䯫) CJK UNIFIED IDEOGRAPH-4BEB	[FB80 CBEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_314)
{
    // 4BEC 0021;	
    // (䯬) CJK UNIFIED IDEOGRAPH-4BEC	[FB80 CBEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_315)
{
    // 4BEC 003F;	
    // (䯬) CJK UNIFIED IDEOGRAPH-4BEC	[FB80 CBEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_316)
{
    // 4BEC 0061;	
    // (䯬) CJK UNIFIED IDEOGRAPH-4BEC	[FB80 CBEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_317)
{
    // 4BEC 0041;	
    // (䯬) CJK UNIFIED IDEOGRAPH-4BEC	[FB80 CBEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_318)
{
    // 4BEC 0062;	
    // (䯬) CJK UNIFIED IDEOGRAPH-4BEC	[FB80 CBEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_319)
{
    // 4BED 0021;	
    // (䯭) CJK UNIFIED IDEOGRAPH-4BED	[FB80 CBED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_320)
{
    // 4BED 003F;	
    // (䯭) CJK UNIFIED IDEOGRAPH-4BED	[FB80 CBED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_321)
{
    // 4BED 0061;	
    // (䯭) CJK UNIFIED IDEOGRAPH-4BED	[FB80 CBED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_322)
{
    // 4BED 0041;	
    // (䯭) CJK UNIFIED IDEOGRAPH-4BED	[FB80 CBED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_323)
{
    // 4BED 0062;	
    // (䯭) CJK UNIFIED IDEOGRAPH-4BED	[FB80 CBED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_324)
{
    // 4BEE 0021;	
    // (䯮) CJK UNIFIED IDEOGRAPH-4BEE	[FB80 CBEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_325)
{
    // 4BEE 003F;	
    // (䯮) CJK UNIFIED IDEOGRAPH-4BEE	[FB80 CBEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_326)
{
    // 4BEE 0061;	
    // (䯮) CJK UNIFIED IDEOGRAPH-4BEE	[FB80 CBEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_327)
{
    // 4BEE 0041;	
    // (䯮) CJK UNIFIED IDEOGRAPH-4BEE	[FB80 CBEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BEE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_328)
{
    // 4BEE 0062;	
    // (䯮) CJK UNIFIED IDEOGRAPH-4BEE	[FB80 CBEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_329)
{
    // 4BEF 0021;	
    // (䯯) CJK UNIFIED IDEOGRAPH-4BEF	[FB80 CBEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_330)
{
    // 4BEF 003F;	
    // (䯯) CJK UNIFIED IDEOGRAPH-4BEF	[FB80 CBEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_331)
{
    // 4BEF 0061;	
    // (䯯) CJK UNIFIED IDEOGRAPH-4BEF	[FB80 CBEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_332)
{
    // 4BEF 0041;	
    // (䯯) CJK UNIFIED IDEOGRAPH-4BEF	[FB80 CBEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BEF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_333)
{
    // 4BEF 0062;	
    // (䯯) CJK UNIFIED IDEOGRAPH-4BEF	[FB80 CBEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BEF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_334)
{
    // 4BF0 0021;	
    // (䯰) CJK UNIFIED IDEOGRAPH-4BF0	[FB80 CBF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_335)
{
    // 4BF0 003F;	
    // (䯰) CJK UNIFIED IDEOGRAPH-4BF0	[FB80 CBF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_336)
{
    // 4BF0 0061;	
    // (䯰) CJK UNIFIED IDEOGRAPH-4BF0	[FB80 CBF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_337)
{
    // 4BF0 0041;	
    // (䯰) CJK UNIFIED IDEOGRAPH-4BF0	[FB80 CBF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_338)
{
    // 4BF0 0062;	
    // (䯰) CJK UNIFIED IDEOGRAPH-4BF0	[FB80 CBF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_339)
{
    // 4BF1 0021;	
    // (䯱) CJK UNIFIED IDEOGRAPH-4BF1	[FB80 CBF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_340)
{
    // 4BF1 003F;	
    // (䯱) CJK UNIFIED IDEOGRAPH-4BF1	[FB80 CBF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_341)
{
    // 4BF1 0061;	
    // (䯱) CJK UNIFIED IDEOGRAPH-4BF1	[FB80 CBF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_342)
{
    // 4BF1 0041;	
    // (䯱) CJK UNIFIED IDEOGRAPH-4BF1	[FB80 CBF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_343)
{
    // 4BF1 0062;	
    // (䯱) CJK UNIFIED IDEOGRAPH-4BF1	[FB80 CBF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_344)
{
    // 4BF2 0021;	
    // (䯲) CJK UNIFIED IDEOGRAPH-4BF2	[FB80 CBF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_345)
{
    // 4BF2 003F;	
    // (䯲) CJK UNIFIED IDEOGRAPH-4BF2	[FB80 CBF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_346)
{
    // 4BF2 0061;	
    // (䯲) CJK UNIFIED IDEOGRAPH-4BF2	[FB80 CBF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_347)
{
    // 4BF2 0041;	
    // (䯲) CJK UNIFIED IDEOGRAPH-4BF2	[FB80 CBF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_348)
{
    // 4BF2 0062;	
    // (䯲) CJK UNIFIED IDEOGRAPH-4BF2	[FB80 CBF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_349)
{
    // 4BF3 0021;	
    // (䯳) CJK UNIFIED IDEOGRAPH-4BF3	[FB80 CBF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_350)
{
    // 4BF3 003F;	
    // (䯳) CJK UNIFIED IDEOGRAPH-4BF3	[FB80 CBF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_351)
{
    // 4BF3 0061;	
    // (䯳) CJK UNIFIED IDEOGRAPH-4BF3	[FB80 CBF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_352)
{
    // 4BF3 0041;	
    // (䯳) CJK UNIFIED IDEOGRAPH-4BF3	[FB80 CBF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_353)
{
    // 4BF3 0062;	
    // (䯳) CJK UNIFIED IDEOGRAPH-4BF3	[FB80 CBF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_354)
{
    // 4BF4 0021;	
    // (䯴) CJK UNIFIED IDEOGRAPH-4BF4	[FB80 CBF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_355)
{
    // 4BF4 003F;	
    // (䯴) CJK UNIFIED IDEOGRAPH-4BF4	[FB80 CBF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_356)
{
    // 4BF4 0061;	
    // (䯴) CJK UNIFIED IDEOGRAPH-4BF4	[FB80 CBF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_357)
{
    // 4BF4 0041;	
    // (䯴) CJK UNIFIED IDEOGRAPH-4BF4	[FB80 CBF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_358)
{
    // 4BF4 0062;	
    // (䯴) CJK UNIFIED IDEOGRAPH-4BF4	[FB80 CBF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_359)
{
    // 4BF5 0021;	
    // (䯵) CJK UNIFIED IDEOGRAPH-4BF5	[FB80 CBF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_360)
{
    // 4BF5 003F;	
    // (䯵) CJK UNIFIED IDEOGRAPH-4BF5	[FB80 CBF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_361)
{
    // 4BF5 0061;	
    // (䯵) CJK UNIFIED IDEOGRAPH-4BF5	[FB80 CBF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_362)
{
    // 4BF5 0041;	
    // (䯵) CJK UNIFIED IDEOGRAPH-4BF5	[FB80 CBF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_363)
{
    // 4BF5 0062;	
    // (䯵) CJK UNIFIED IDEOGRAPH-4BF5	[FB80 CBF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_364)
{
    // 4BF6 0021;	
    // (䯶) CJK UNIFIED IDEOGRAPH-4BF6	[FB80 CBF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_365)
{
    // 4BF6 003F;	
    // (䯶) CJK UNIFIED IDEOGRAPH-4BF6	[FB80 CBF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_366)
{
    // 4BF6 0061;	
    // (䯶) CJK UNIFIED IDEOGRAPH-4BF6	[FB80 CBF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_367)
{
    // 4BF6 0041;	
    // (䯶) CJK UNIFIED IDEOGRAPH-4BF6	[FB80 CBF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_368)
{
    // 4BF6 0062;	
    // (䯶) CJK UNIFIED IDEOGRAPH-4BF6	[FB80 CBF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_369)
{
    // 4BF7 0021;	
    // (䯷) CJK UNIFIED IDEOGRAPH-4BF7	[FB80 CBF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_370)
{
    // 4BF7 003F;	
    // (䯷) CJK UNIFIED IDEOGRAPH-4BF7	[FB80 CBF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_371)
{
    // 4BF7 0061;	
    // (䯷) CJK UNIFIED IDEOGRAPH-4BF7	[FB80 CBF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_372)
{
    // 4BF7 0041;	
    // (䯷) CJK UNIFIED IDEOGRAPH-4BF7	[FB80 CBF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_373)
{
    // 4BF7 0062;	
    // (䯷) CJK UNIFIED IDEOGRAPH-4BF7	[FB80 CBF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_374)
{
    // 4BF8 0021;	
    // (䯸) CJK UNIFIED IDEOGRAPH-4BF8	[FB80 CBF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_375)
{
    // 4BF8 003F;	
    // (䯸) CJK UNIFIED IDEOGRAPH-4BF8	[FB80 CBF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_376)
{
    // 4BF8 0061;	
    // (䯸) CJK UNIFIED IDEOGRAPH-4BF8	[FB80 CBF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_377)
{
    // 4BF8 0041;	
    // (䯸) CJK UNIFIED IDEOGRAPH-4BF8	[FB80 CBF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_378)
{
    // 4BF8 0062;	
    // (䯸) CJK UNIFIED IDEOGRAPH-4BF8	[FB80 CBF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_379)
{
    // 4BF9 0021;	
    // (䯹) CJK UNIFIED IDEOGRAPH-4BF9	[FB80 CBF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_380)
{
    // 4BF9 003F;	
    // (䯹) CJK UNIFIED IDEOGRAPH-4BF9	[FB80 CBF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_381)
{
    // 4BF9 0061;	
    // (䯹) CJK UNIFIED IDEOGRAPH-4BF9	[FB80 CBF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_382)
{
    // 4BF9 0041;	
    // (䯹) CJK UNIFIED IDEOGRAPH-4BF9	[FB80 CBF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BF9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_383)
{
    // 4BF9 0062;	
    // (䯹) CJK UNIFIED IDEOGRAPH-4BF9	[FB80 CBF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BF9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_384)
{
    // 4BFA 0021;	
    // (䯺) CJK UNIFIED IDEOGRAPH-4BFA	[FB80 CBFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_385)
{
    // 4BFA 003F;	
    // (䯺) CJK UNIFIED IDEOGRAPH-4BFA	[FB80 CBFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_386)
{
    // 4BFA 0061;	
    // (䯺) CJK UNIFIED IDEOGRAPH-4BFA	[FB80 CBFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_387)
{
    // 4BFA 0041;	
    // (䯺) CJK UNIFIED IDEOGRAPH-4BFA	[FB80 CBFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BFA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_388)
{
    // 4BFA 0062;	
    // (䯺) CJK UNIFIED IDEOGRAPH-4BFA	[FB80 CBFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_389)
{
    // 4BFB 0021;	
    // (䯻) CJK UNIFIED IDEOGRAPH-4BFB	[FB80 CBFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_390)
{
    // 4BFB 003F;	
    // (䯻) CJK UNIFIED IDEOGRAPH-4BFB	[FB80 CBFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_391)
{
    // 4BFB 0061;	
    // (䯻) CJK UNIFIED IDEOGRAPH-4BFB	[FB80 CBFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_392)
{
    // 4BFB 0041;	
    // (䯻) CJK UNIFIED IDEOGRAPH-4BFB	[FB80 CBFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BFB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_393)
{
    // 4BFB 0062;	
    // (䯻) CJK UNIFIED IDEOGRAPH-4BFB	[FB80 CBFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_394)
{
    // 4BFC 0021;	
    // (䯼) CJK UNIFIED IDEOGRAPH-4BFC	[FB80 CBFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_395)
{
    // 4BFC 003F;	
    // (䯼) CJK UNIFIED IDEOGRAPH-4BFC	[FB80 CBFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_396)
{
    // 4BFC 0061;	
    // (䯼) CJK UNIFIED IDEOGRAPH-4BFC	[FB80 CBFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_397)
{
    // 4BFC 0041;	
    // (䯼) CJK UNIFIED IDEOGRAPH-4BFC	[FB80 CBFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BFC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_398)
{
    // 4BFC 0062;	
    // (䯼) CJK UNIFIED IDEOGRAPH-4BFC	[FB80 CBFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_399)
{
    // 4BFD 0021;	
    // (䯽) CJK UNIFIED IDEOGRAPH-4BFD	[FB80 CBFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_400)
{
    // 4BFD 003F;	
    // (䯽) CJK UNIFIED IDEOGRAPH-4BFD	[FB80 CBFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_401)
{
    // 4BFD 0061;	
    // (䯽) CJK UNIFIED IDEOGRAPH-4BFD	[FB80 CBFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_402)
{
    // 4BFD 0041;	
    // (䯽) CJK UNIFIED IDEOGRAPH-4BFD	[FB80 CBFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BFD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_403)
{
    // 4BFD 0062;	
    // (䯽) CJK UNIFIED IDEOGRAPH-4BFD	[FB80 CBFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_404)
{
    // 4BFE 0021;	
    // (䯾) CJK UNIFIED IDEOGRAPH-4BFE	[FB80 CBFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_405)
{
    // 4BFE 003F;	
    // (䯾) CJK UNIFIED IDEOGRAPH-4BFE	[FB80 CBFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_406)
{
    // 4BFE 0061;	
    // (䯾) CJK UNIFIED IDEOGRAPH-4BFE	[FB80 CBFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_407)
{
    // 4BFE 0041;	
    // (䯾) CJK UNIFIED IDEOGRAPH-4BFE	[FB80 CBFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BFE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_408)
{
    // 4BFE 0062;	
    // (䯾) CJK UNIFIED IDEOGRAPH-4BFE	[FB80 CBFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_409)
{
    // 4BFF 0021;	
    // (䯿) CJK UNIFIED IDEOGRAPH-4BFF	[FB80 CBFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_410)
{
    // 4BFF 003F;	
    // (䯿) CJK UNIFIED IDEOGRAPH-4BFF	[FB80 CBFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCBFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_411)
{
    // 4BFF 0061;	
    // (䯿) CJK UNIFIED IDEOGRAPH-4BFF	[FB80 CBFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_412)
{
    // 4BFF 0041;	
    // (䯿) CJK UNIFIED IDEOGRAPH-4BFF	[FB80 CBFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4BFF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_413)
{
    // 4BFF 0062;	
    // (䯿) CJK UNIFIED IDEOGRAPH-4BFF	[FB80 CBFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4BFF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCBFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_414)
{
    // 4C00 0021;	
    // (䰀) CJK UNIFIED IDEOGRAPH-4C00	[FB80 CC00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C00, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_415)
{
    // 4C00 003F;	
    // (䰀) CJK UNIFIED IDEOGRAPH-4C00	[FB80 CC00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C00, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_416)
{
    // 4C00 0061;	
    // (䰀) CJK UNIFIED IDEOGRAPH-4C00	[FB80 CC00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C00, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_417)
{
    // 4C00 0041;	
    // (䰀) CJK UNIFIED IDEOGRAPH-4C00	[FB80 CC00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C00, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_418)
{
    // 4C00 0062;	
    // (䰀) CJK UNIFIED IDEOGRAPH-4C00	[FB80 CC00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C00, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_419)
{
    // 4C01 0021;	
    // (䰁) CJK UNIFIED IDEOGRAPH-4C01	[FB80 CC01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C01, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_420)
{
    // 4C01 003F;	
    // (䰁) CJK UNIFIED IDEOGRAPH-4C01	[FB80 CC01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C01, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_421)
{
    // 4C01 0061;	
    // (䰁) CJK UNIFIED IDEOGRAPH-4C01	[FB80 CC01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C01, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_422)
{
    // 4C01 0041;	
    // (䰁) CJK UNIFIED IDEOGRAPH-4C01	[FB80 CC01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C01, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_423)
{
    // 4C01 0062;	
    // (䰁) CJK UNIFIED IDEOGRAPH-4C01	[FB80 CC01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C01, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_424)
{
    // 4C02 0021;	
    // (䰂) CJK UNIFIED IDEOGRAPH-4C02	[FB80 CC02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C02, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_425)
{
    // 4C02 003F;	
    // (䰂) CJK UNIFIED IDEOGRAPH-4C02	[FB80 CC02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C02, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_426)
{
    // 4C02 0061;	
    // (䰂) CJK UNIFIED IDEOGRAPH-4C02	[FB80 CC02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C02, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_427)
{
    // 4C02 0041;	
    // (䰂) CJK UNIFIED IDEOGRAPH-4C02	[FB80 CC02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C02, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_428)
{
    // 4C02 0062;	
    // (䰂) CJK UNIFIED IDEOGRAPH-4C02	[FB80 CC02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C02, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_429)
{
    // 4C03 0021;	
    // (䰃) CJK UNIFIED IDEOGRAPH-4C03	[FB80 CC03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_430)
{
    // 4C03 003F;	
    // (䰃) CJK UNIFIED IDEOGRAPH-4C03	[FB80 CC03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_431)
{
    // 4C03 0061;	
    // (䰃) CJK UNIFIED IDEOGRAPH-4C03	[FB80 CC03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_432)
{
    // 4C03 0041;	
    // (䰃) CJK UNIFIED IDEOGRAPH-4C03	[FB80 CC03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_433)
{
    // 4C03 0062;	
    // (䰃) CJK UNIFIED IDEOGRAPH-4C03	[FB80 CC03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_434)
{
    // 4C04 0021;	
    // (䰄) CJK UNIFIED IDEOGRAPH-4C04	[FB80 CC04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C04, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_435)
{
    // 4C04 003F;	
    // (䰄) CJK UNIFIED IDEOGRAPH-4C04	[FB80 CC04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C04, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_436)
{
    // 4C04 0061;	
    // (䰄) CJK UNIFIED IDEOGRAPH-4C04	[FB80 CC04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C04, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_437)
{
    // 4C04 0041;	
    // (䰄) CJK UNIFIED IDEOGRAPH-4C04	[FB80 CC04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C04, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_438)
{
    // 4C04 0062;	
    // (䰄) CJK UNIFIED IDEOGRAPH-4C04	[FB80 CC04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C04, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_439)
{
    // 4C05 0021;	
    // (䰅) CJK UNIFIED IDEOGRAPH-4C05	[FB80 CC05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C05, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_440)
{
    // 4C05 003F;	
    // (䰅) CJK UNIFIED IDEOGRAPH-4C05	[FB80 CC05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C05, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_441)
{
    // 4C05 0061;	
    // (䰅) CJK UNIFIED IDEOGRAPH-4C05	[FB80 CC05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C05, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_442)
{
    // 4C05 0041;	
    // (䰅) CJK UNIFIED IDEOGRAPH-4C05	[FB80 CC05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C05, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_443)
{
    // 4C05 0062;	
    // (䰅) CJK UNIFIED IDEOGRAPH-4C05	[FB80 CC05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C05, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_444)
{
    // 4C06 0021;	
    // (䰆) CJK UNIFIED IDEOGRAPH-4C06	[FB80 CC06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C06, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_445)
{
    // 4C06 003F;	
    // (䰆) CJK UNIFIED IDEOGRAPH-4C06	[FB80 CC06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C06, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_446)
{
    // 4C06 0061;	
    // (䰆) CJK UNIFIED IDEOGRAPH-4C06	[FB80 CC06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C06, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_447)
{
    // 4C06 0041;	
    // (䰆) CJK UNIFIED IDEOGRAPH-4C06	[FB80 CC06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C06, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_448)
{
    // 4C06 0062;	
    // (䰆) CJK UNIFIED IDEOGRAPH-4C06	[FB80 CC06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C06, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_449)
{
    // 4C07 0021;	
    // (䰇) CJK UNIFIED IDEOGRAPH-4C07	[FB80 CC07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C07, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_450)
{
    // 4C07 003F;	
    // (䰇) CJK UNIFIED IDEOGRAPH-4C07	[FB80 CC07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C07, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_451)
{
    // 4C07 0061;	
    // (䰇) CJK UNIFIED IDEOGRAPH-4C07	[FB80 CC07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C07, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_452)
{
    // 4C07 0041;	
    // (䰇) CJK UNIFIED IDEOGRAPH-4C07	[FB80 CC07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C07, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_453)
{
    // 4C07 0062;	
    // (䰇) CJK UNIFIED IDEOGRAPH-4C07	[FB80 CC07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C07, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_454)
{
    // 4C08 0021;	
    // (䰈) CJK UNIFIED IDEOGRAPH-4C08	[FB80 CC08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_455)
{
    // 4C08 003F;	
    // (䰈) CJK UNIFIED IDEOGRAPH-4C08	[FB80 CC08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_456)
{
    // 4C08 0061;	
    // (䰈) CJK UNIFIED IDEOGRAPH-4C08	[FB80 CC08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_457)
{
    // 4C08 0041;	
    // (䰈) CJK UNIFIED IDEOGRAPH-4C08	[FB80 CC08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_458)
{
    // 4C08 0062;	
    // (䰈) CJK UNIFIED IDEOGRAPH-4C08	[FB80 CC08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_459)
{
    // 4C09 0021;	
    // (䰉) CJK UNIFIED IDEOGRAPH-4C09	[FB80 CC09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C09, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_460)
{
    // 4C09 003F;	
    // (䰉) CJK UNIFIED IDEOGRAPH-4C09	[FB80 CC09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C09, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_461)
{
    // 4C09 0061;	
    // (䰉) CJK UNIFIED IDEOGRAPH-4C09	[FB80 CC09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C09, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_462)
{
    // 4C09 0041;	
    // (䰉) CJK UNIFIED IDEOGRAPH-4C09	[FB80 CC09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C09, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_463)
{
    // 4C09 0062;	
    // (䰉) CJK UNIFIED IDEOGRAPH-4C09	[FB80 CC09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C09, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_464)
{
    // 4C0A 0021;	
    // (䰊) CJK UNIFIED IDEOGRAPH-4C0A	[FB80 CC0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_465)
{
    // 4C0A 003F;	
    // (䰊) CJK UNIFIED IDEOGRAPH-4C0A	[FB80 CC0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_466)
{
    // 4C0A 0061;	
    // (䰊) CJK UNIFIED IDEOGRAPH-4C0A	[FB80 CC0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_467)
{
    // 4C0A 0041;	
    // (䰊) CJK UNIFIED IDEOGRAPH-4C0A	[FB80 CC0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_468)
{
    // 4C0A 0062;	
    // (䰊) CJK UNIFIED IDEOGRAPH-4C0A	[FB80 CC0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_469)
{
    // 4C0B 0021;	
    // (䰋) CJK UNIFIED IDEOGRAPH-4C0B	[FB80 CC0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_470)
{
    // 4C0B 003F;	
    // (䰋) CJK UNIFIED IDEOGRAPH-4C0B	[FB80 CC0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_471)
{
    // 4C0B 0061;	
    // (䰋) CJK UNIFIED IDEOGRAPH-4C0B	[FB80 CC0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_472)
{
    // 4C0B 0041;	
    // (䰋) CJK UNIFIED IDEOGRAPH-4C0B	[FB80 CC0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_473)
{
    // 4C0B 0062;	
    // (䰋) CJK UNIFIED IDEOGRAPH-4C0B	[FB80 CC0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_474)
{
    // 4C0C 0021;	
    // (䰌) CJK UNIFIED IDEOGRAPH-4C0C	[FB80 CC0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_475)
{
    // 4C0C 003F;	
    // (䰌) CJK UNIFIED IDEOGRAPH-4C0C	[FB80 CC0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_476)
{
    // 4C0C 0061;	
    // (䰌) CJK UNIFIED IDEOGRAPH-4C0C	[FB80 CC0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_477)
{
    // 4C0C 0041;	
    // (䰌) CJK UNIFIED IDEOGRAPH-4C0C	[FB80 CC0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_478)
{
    // 4C0C 0062;	
    // (䰌) CJK UNIFIED IDEOGRAPH-4C0C	[FB80 CC0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_479)
{
    // 4C0D 0021;	
    // (䰍) CJK UNIFIED IDEOGRAPH-4C0D	[FB80 CC0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_480)
{
    // 4C0D 003F;	
    // (䰍) CJK UNIFIED IDEOGRAPH-4C0D	[FB80 CC0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_481)
{
    // 4C0D 0061;	
    // (䰍) CJK UNIFIED IDEOGRAPH-4C0D	[FB80 CC0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_482)
{
    // 4C0D 0041;	
    // (䰍) CJK UNIFIED IDEOGRAPH-4C0D	[FB80 CC0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_483)
{
    // 4C0D 0062;	
    // (䰍) CJK UNIFIED IDEOGRAPH-4C0D	[FB80 CC0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_484)
{
    // 4C0E 0021;	
    // (䰎) CJK UNIFIED IDEOGRAPH-4C0E	[FB80 CC0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_485)
{
    // 4C0E 003F;	
    // (䰎) CJK UNIFIED IDEOGRAPH-4C0E	[FB80 CC0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_486)
{
    // 4C0E 0061;	
    // (䰎) CJK UNIFIED IDEOGRAPH-4C0E	[FB80 CC0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_487)
{
    // 4C0E 0041;	
    // (䰎) CJK UNIFIED IDEOGRAPH-4C0E	[FB80 CC0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_488)
{
    // 4C0E 0062;	
    // (䰎) CJK UNIFIED IDEOGRAPH-4C0E	[FB80 CC0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_489)
{
    // 4C0F 0021;	
    // (䰏) CJK UNIFIED IDEOGRAPH-4C0F	[FB80 CC0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_490)
{
    // 4C0F 003F;	
    // (䰏) CJK UNIFIED IDEOGRAPH-4C0F	[FB80 CC0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_491)
{
    // 4C0F 0061;	
    // (䰏) CJK UNIFIED IDEOGRAPH-4C0F	[FB80 CC0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_492)
{
    // 4C0F 0041;	
    // (䰏) CJK UNIFIED IDEOGRAPH-4C0F	[FB80 CC0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_493)
{
    // 4C0F 0062;	
    // (䰏) CJK UNIFIED IDEOGRAPH-4C0F	[FB80 CC0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_494)
{
    // 4C10 0021;	
    // (䰐) CJK UNIFIED IDEOGRAPH-4C10	[FB80 CC10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C10, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_495)
{
    // 4C10 003F;	
    // (䰐) CJK UNIFIED IDEOGRAPH-4C10	[FB80 CC10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C10, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_496)
{
    // 4C10 0061;	
    // (䰐) CJK UNIFIED IDEOGRAPH-4C10	[FB80 CC10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C10, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_497)
{
    // 4C10 0041;	
    // (䰐) CJK UNIFIED IDEOGRAPH-4C10	[FB80 CC10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C10, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_498)
{
    // 4C10 0062;	
    // (䰐) CJK UNIFIED IDEOGRAPH-4C10	[FB80 CC10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C10, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_388_499)
{
    // 4C11 0021;	
    // (䰑) CJK UNIFIED IDEOGRAPH-4C11	[FB80 CC11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C11, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

