// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_150_000)
{
    // 124B2 ; [.4FB8.0020.0002] 
    // CUNEIFORM SIGN EZEN SHESHIG TIMES ME

    uint32_t const cps[1] = { 0x124b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_001)
{
    // 124B3 ; [.4FB9.0020.0002] 
    // CUNEIFORM SIGN EZEN SHESHIG TIMES MES

    uint32_t const cps[1] = { 0x124b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_002)
{
    // 124B4 ; [.4FBA.0020.0002] 
    // CUNEIFORM SIGN EZEN SHESHIG TIMES SU

    uint32_t const cps[1] = { 0x124b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_003)
{
    // 124B5 ; [.4FBB.0020.0002] 
    // CUNEIFORM SIGN EZEN TIMES SU

    uint32_t const cps[1] = { 0x124b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_004)
{
    // 124B6 ; [.4FBC.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES BAHAR2

    uint32_t const cps[1] = { 0x124b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fbc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_005)
{
    // 124B7 ; [.4FBD.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES DIM GUNU

    uint32_t const cps[1] = { 0x124b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fbd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_006)
{
    // 124B8 ; [.4FBE.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES DUG TIMES IGI GUNU

    uint32_t const cps[1] = { 0x124b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fbe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_007)
{
    // 124B9 ; [.4FBF.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES DUG TIMES KASKAL

    uint32_t const cps[1] = { 0x124b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fbf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_008)
{
    // 124BA ; [.4FC0.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES EREN

    uint32_t const cps[1] = { 0x124ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_009)
{
    // 124BB ; [.4FC1.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES GA

    uint32_t const cps[1] = { 0x124bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_010)
{
    // 124BC ; [.4FC2.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES GAR PLUS DI

    uint32_t const cps[1] = { 0x124bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_011)
{
    // 124BD ; [.4FC3.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES GAR PLUS NE

    uint32_t const cps[1] = { 0x124bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_012)
{
    // 124BE ; [.4FC4.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES HA PLUS A

    uint32_t const cps[1] = { 0x124be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_013)
{
    // 124BF ; [.4FC5.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES KUSHU2 PLUS KASKAL

    uint32_t const cps[1] = { 0x124bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_014)
{
    // 124C0 ; [.4FC6.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES LAM

    uint32_t const cps[1] = { 0x124c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_015)
{
    // 124C1 ; [.4FC7.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES LAM TIMES KUR

    uint32_t const cps[1] = { 0x124c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_016)
{
    // 124C2 ; [.4FC8.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES LUH

    uint32_t const cps[1] = { 0x124c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_017)
{
    // 124C3 ; [.4FC9.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES MUSH

    uint32_t const cps[1] = { 0x124c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_018)
{
    // 124C4 ; [.4FCA.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES NE

    uint32_t const cps[1] = { 0x124c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_019)
{
    // 124C5 ; [.4FCB.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES NE PLUS E2

    uint32_t const cps[1] = { 0x124c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fcb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_020)
{
    // 124C6 ; [.4FCC.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES NE PLUS GI

    uint32_t const cps[1] = { 0x124c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_021)
{
    // 124C7 ; [.4FCD.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES SHIM

    uint32_t const cps[1] = { 0x124c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fcd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_022)
{
    // 124C8 ; [.4FCE.0020.0002] 
    // CUNEIFORM SIGN GA2 TIMES ZIZ2

    uint32_t const cps[1] = { 0x124c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_023)
{
    // 124C9 ; [.4FCF.0020.0002] 
    // CUNEIFORM SIGN GABA ROTATED NINETY DEGREES

    uint32_t const cps[1] = { 0x124c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fcf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_024)
{
    // 124CA ; [.4FD0.0020.0002] 
    // CUNEIFORM SIGN GESHTIN TIMES U

    uint32_t const cps[1] = { 0x124ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_025)
{
    // 124CB ; [.4FD1.0020.0002] 
    // CUNEIFORM SIGN GISH TIMES GISH CROSSING GISH

    uint32_t const cps[1] = { 0x124cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_026)
{
    // 124CC ; [.4FD2.0020.0002] 
    // CUNEIFORM SIGN GU2 TIMES IGI GUNU

    uint32_t const cps[1] = { 0x124cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_027)
{
    // 124CD ; [.4FD3.0020.0002] 
    // CUNEIFORM SIGN GUD PLUS GISH TIMES TAK4

    uint32_t const cps[1] = { 0x124cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_028)
{
    // 124CE ; [.4FD4.0020.0002] 
    // CUNEIFORM SIGN HA TENU GUNU

    uint32_t const cps[1] = { 0x124ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_029)
{
    // 124CF ; [.4FD5.0020.0002] 
    // CUNEIFORM SIGN HI TIMES ASH OVER HI TIMES ASH

    uint32_t const cps[1] = { 0x124cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_030)
{
    // 124D0 ; [.4FD6.0020.0002] 
    // CUNEIFORM SIGN KA TIMES BU

    uint32_t const cps[1] = { 0x124d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_031)
{
    // 124D1 ; [.4FD7.0020.0002] 
    // CUNEIFORM SIGN KA TIMES KA

    uint32_t const cps[1] = { 0x124d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_032)
{
    // 124D2 ; [.4FD8.0020.0002] 
    // CUNEIFORM SIGN KA TIMES U U U

    uint32_t const cps[1] = { 0x124d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_033)
{
    // 124D3 ; [.4FD9.0020.0002] 
    // CUNEIFORM SIGN KA TIMES UR

    uint32_t const cps[1] = { 0x124d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_034)
{
    // 124D4 ; [.4FDA.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES ZU OVER ZU

    uint32_t const cps[1] = { 0x124d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_035)
{
    // 124D5 ; [.4FDB.0020.0002] 
    // CUNEIFORM SIGN LAK-003

    uint32_t const cps[1] = { 0x124d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_036)
{
    // 124D6 ; [.4FDC.0020.0002] 
    // CUNEIFORM SIGN LAK-021

    uint32_t const cps[1] = { 0x124d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fdc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_037)
{
    // 124D7 ; [.4FDD.0020.0002] 
    // CUNEIFORM SIGN LAK-025

    uint32_t const cps[1] = { 0x124d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fdd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_038)
{
    // 124D8 ; [.4FDE.0020.0002] 
    // CUNEIFORM SIGN LAK-030

    uint32_t const cps[1] = { 0x124d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_039)
{
    // 124D9 ; [.4FDF.0020.0002] 
    // CUNEIFORM SIGN LAK-050

    uint32_t const cps[1] = { 0x124d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fdf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_040)
{
    // 124DA ; [.4FE0.0020.0002] 
    // CUNEIFORM SIGN LAK-051

    uint32_t const cps[1] = { 0x124da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_041)
{
    // 124DB ; [.4FE1.0020.0002] 
    // CUNEIFORM SIGN LAK-062

    uint32_t const cps[1] = { 0x124db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_042)
{
    // 124DC ; [.4FE2.0020.0002] 
    // CUNEIFORM SIGN LAK-079 OVER LAK-079 GUNU

    uint32_t const cps[1] = { 0x124dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_043)
{
    // 124DD ; [.4FE3.0020.0002] 
    // CUNEIFORM SIGN LAK-080

    uint32_t const cps[1] = { 0x124dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_044)
{
    // 124DE ; [.4FE4.0020.0002] 
    // CUNEIFORM SIGN LAK-081 OVER LAK-081

    uint32_t const cps[1] = { 0x124de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_045)
{
    // 124DF ; [.4FE5.0020.0002] 
    // CUNEIFORM SIGN LAK-092

    uint32_t const cps[1] = { 0x124df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_046)
{
    // 124E0 ; [.4FE6.0020.0002] 
    // CUNEIFORM SIGN LAK-130

    uint32_t const cps[1] = { 0x124e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_047)
{
    // 124E1 ; [.4FE7.0020.0002] 
    // CUNEIFORM SIGN LAK-142

    uint32_t const cps[1] = { 0x124e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_048)
{
    // 124E2 ; [.4FE8.0020.0002] 
    // CUNEIFORM SIGN LAK-210

    uint32_t const cps[1] = { 0x124e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_049)
{
    // 124E3 ; [.4FE9.0020.0002] 
    // CUNEIFORM SIGN LAK-219

    uint32_t const cps[1] = { 0x124e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_050)
{
    // 124E4 ; [.4FEA.0020.0002] 
    // CUNEIFORM SIGN LAK-220

    uint32_t const cps[1] = { 0x124e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_051)
{
    // 124E5 ; [.4FEB.0020.0002] 
    // CUNEIFORM SIGN LAK-225

    uint32_t const cps[1] = { 0x124e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4feb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_052)
{
    // 124E6 ; [.4FEC.0020.0002] 
    // CUNEIFORM SIGN LAK-228

    uint32_t const cps[1] = { 0x124e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_053)
{
    // 124E7 ; [.4FED.0020.0002] 
    // CUNEIFORM SIGN LAK-238

    uint32_t const cps[1] = { 0x124e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_054)
{
    // 124E8 ; [.4FEE.0020.0002] 
    // CUNEIFORM SIGN LAK-265

    uint32_t const cps[1] = { 0x124e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_055)
{
    // 124E9 ; [.4FEF.0020.0002] 
    // CUNEIFORM SIGN LAK-266

    uint32_t const cps[1] = { 0x124e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_056)
{
    // 124EA ; [.4FF0.0020.0002] 
    // CUNEIFORM SIGN LAK-343

    uint32_t const cps[1] = { 0x124ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_057)
{
    // 124EB ; [.4FF1.0020.0002] 
    // CUNEIFORM SIGN LAK-347

    uint32_t const cps[1] = { 0x124eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_058)
{
    // 124EC ; [.4FF2.0020.0002] 
    // CUNEIFORM SIGN LAK-348

    uint32_t const cps[1] = { 0x124ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_059)
{
    // 124ED ; [.4FF3.0020.0002] 
    // CUNEIFORM SIGN LAK-383

    uint32_t const cps[1] = { 0x124ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_060)
{
    // 124EE ; [.4FF4.0020.0002] 
    // CUNEIFORM SIGN LAK-384

    uint32_t const cps[1] = { 0x124ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_061)
{
    // 124EF ; [.4FF5.0020.0002] 
    // CUNEIFORM SIGN LAK-390

    uint32_t const cps[1] = { 0x124ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_062)
{
    // 124F0 ; [.4FF6.0020.0002] 
    // CUNEIFORM SIGN LAK-441

    uint32_t const cps[1] = { 0x124f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_063)
{
    // 124F1 ; [.4FF7.0020.0002] 
    // CUNEIFORM SIGN LAK-449

    uint32_t const cps[1] = { 0x124f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_064)
{
    // 124F2 ; [.4FF8.0020.0002] 
    // CUNEIFORM SIGN LAK-449 TIMES GU

    uint32_t const cps[1] = { 0x124f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_065)
{
    // 124F3 ; [.4FF9.0020.0002] 
    // CUNEIFORM SIGN LAK-449 TIMES IGI

    uint32_t const cps[1] = { 0x124f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_066)
{
    // 124F4 ; [.4FFA.0020.0002] 
    // CUNEIFORM SIGN LAK-449 TIMES PAP PLUS LU3

    uint32_t const cps[1] = { 0x124f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ffa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_067)
{
    // 124F5 ; [.4FFB.0020.0002] 
    // CUNEIFORM SIGN LAK-449 TIMES PAP PLUS PAP PLUS LU3

    uint32_t const cps[1] = { 0x124f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ffb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_068)
{
    // 124F6 ; [.4FFC.0020.0002] 
    // CUNEIFORM SIGN LAK-449 TIMES U2 PLUS BA

    uint32_t const cps[1] = { 0x124f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ffc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_069)
{
    // 124F7 ; [.4FFD.0020.0002] 
    // CUNEIFORM SIGN LAK-450

    uint32_t const cps[1] = { 0x124f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ffd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_070)
{
    // 124F8 ; [.4FFE.0020.0002] 
    // CUNEIFORM SIGN LAK-457

    uint32_t const cps[1] = { 0x124f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ffe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_071)
{
    // 124F9 ; [.4FFF.0020.0002] 
    // CUNEIFORM SIGN LAK-470

    uint32_t const cps[1] = { 0x124f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_072)
{
    // 124FA ; [.5000.0020.0002] 
    // CUNEIFORM SIGN LAK-483

    uint32_t const cps[1] = { 0x124fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5000), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_073)
{
    // 124FB ; [.5001.0020.0002] 
    // CUNEIFORM SIGN LAK-490

    uint32_t const cps[1] = { 0x124fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5001), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_074)
{
    // 124FC ; [.5002.0020.0002] 
    // CUNEIFORM SIGN LAK-492

    uint32_t const cps[1] = { 0x124fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5002), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_075)
{
    // 124FD ; [.5003.0020.0002] 
    // CUNEIFORM SIGN LAK-493

    uint32_t const cps[1] = { 0x124fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5003), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_076)
{
    // 124FE ; [.5004.0020.0002] 
    // CUNEIFORM SIGN LAK-495

    uint32_t const cps[1] = { 0x124fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5004), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_077)
{
    // 124FF ; [.5005.0020.0002] 
    // CUNEIFORM SIGN LAK-550

    uint32_t const cps[1] = { 0x124ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5005), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_078)
{
    // 12500 ; [.5006.0020.0002] 
    // CUNEIFORM SIGN LAK-608

    uint32_t const cps[1] = { 0x12500 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5006), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_079)
{
    // 12501 ; [.5007.0020.0002] 
    // CUNEIFORM SIGN LAK-617

    uint32_t const cps[1] = { 0x12501 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5007), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_080)
{
    // 12502 ; [.5008.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES ASH

    uint32_t const cps[1] = { 0x12502 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5008), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_081)
{
    // 12503 ; [.5009.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES BAD

    uint32_t const cps[1] = { 0x12503 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5009), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_082)
{
    // 12504 ; [.500A.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES DUN3 GUNU GUNU

    uint32_t const cps[1] = { 0x12504 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x500a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_083)
{
    // 12505 ; [.500B.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES KU3

    uint32_t const cps[1] = { 0x12505 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x500b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_084)
{
    // 12506 ; [.500C.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES LA

    uint32_t const cps[1] = { 0x12506 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x500c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_085)
{
    // 12507 ; [.500D.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES TAR

    uint32_t const cps[1] = { 0x12507 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x500d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_086)
{
    // 12508 ; [.500E.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES TE

    uint32_t const cps[1] = { 0x12508 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x500e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_087)
{
    // 12509 ; [.500F.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES U2

    uint32_t const cps[1] = { 0x12509 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x500f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_088)
{
    // 1250A ; [.5010.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES UD

    uint32_t const cps[1] = { 0x1250a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5010), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_089)
{
    // 1250B ; [.5011.0020.0002] 
    // CUNEIFORM SIGN LAK-617 TIMES URUDA

    uint32_t const cps[1] = { 0x1250b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5011), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_090)
{
    // 1250C ; [.5012.0020.0002] 
    // CUNEIFORM SIGN LAK-636

    uint32_t const cps[1] = { 0x1250c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5012), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_091)
{
    // 1250D ; [.5013.0020.0002] 
    // CUNEIFORM SIGN LAK-648

    uint32_t const cps[1] = { 0x1250d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5013), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_092)
{
    // 1250E ; [.5014.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES DUB

    uint32_t const cps[1] = { 0x1250e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5014), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_093)
{
    // 1250F ; [.5015.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES GA

    uint32_t const cps[1] = { 0x1250f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5015), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_094)
{
    // 12510 ; [.5016.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES IGI

    uint32_t const cps[1] = { 0x12510 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5016), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_095)
{
    // 12511 ; [.5017.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES IGI GUNU

    uint32_t const cps[1] = { 0x12511 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5017), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_096)
{
    // 12512 ; [.5018.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES NI

    uint32_t const cps[1] = { 0x12512 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5018), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_097)
{
    // 12513 ; [.5019.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES PAP PLUS PAP PLUS LU3

    uint32_t const cps[1] = { 0x12513 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5019), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_098)
{
    // 12514 ; [.501A.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES SHESH PLUS KI

    uint32_t const cps[1] = { 0x12514 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x501a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_099)
{
    // 12515 ; [.501B.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES UD

    uint32_t const cps[1] = { 0x12515 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x501b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_100)
{
    // 12516 ; [.501C.0020.0002] 
    // CUNEIFORM SIGN LAK-648 TIMES URUDA

    uint32_t const cps[1] = { 0x12516 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x501c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_101)
{
    // 12517 ; [.501D.0020.0002] 
    // CUNEIFORM SIGN LAK-724

    uint32_t const cps[1] = { 0x12517 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x501d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_102)
{
    // 12518 ; [.501E.0020.0002] 
    // CUNEIFORM SIGN LAK-749

    uint32_t const cps[1] = { 0x12518 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x501e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_103)
{
    // 12519 ; [.501F.0020.0002] 
    // CUNEIFORM SIGN LU2 GUNU TIMES ASH

    uint32_t const cps[1] = { 0x12519 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x501f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_104)
{
    // 1251A ; [.5020.0020.0002] 
    // CUNEIFORM SIGN LU2 TIMES DISH

    uint32_t const cps[1] = { 0x1251a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5020), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_105)
{
    // 1251B ; [.5021.0020.0002] 
    // CUNEIFORM SIGN LU2 TIMES HAL

    uint32_t const cps[1] = { 0x1251b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5021), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_106)
{
    // 1251C ; [.5022.0020.0002] 
    // CUNEIFORM SIGN LU2 TIMES PAP

    uint32_t const cps[1] = { 0x1251c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5022), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_107)
{
    // 1251D ; [.5023.0020.0002] 
    // CUNEIFORM SIGN LU2 TIMES PAP PLUS PAP PLUS LU3

    uint32_t const cps[1] = { 0x1251d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5023), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_108)
{
    // 1251E ; [.5024.0020.0002] 
    // CUNEIFORM SIGN LU2 TIMES TAK4

    uint32_t const cps[1] = { 0x1251e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5024), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_109)
{
    // 1251F ; [.5025.0020.0002] 
    // CUNEIFORM SIGN MI PLUS ZA7

    uint32_t const cps[1] = { 0x1251f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5025), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_110)
{
    // 12520 ; [.5026.0020.0002] 
    // CUNEIFORM SIGN MUSH OVER MUSH TIMES GA

    uint32_t const cps[1] = { 0x12520 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5026), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_111)
{
    // 12521 ; [.5027.0020.0002] 
    // CUNEIFORM SIGN MUSH OVER MUSH TIMES KAK

    uint32_t const cps[1] = { 0x12521 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5027), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_112)
{
    // 12522 ; [.5028.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES DIM GUNU

    uint32_t const cps[1] = { 0x12522 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5028), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_113)
{
    // 12523 ; [.5029.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES GISH

    uint32_t const cps[1] = { 0x12523 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5029), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_114)
{
    // 12524 ; [.502A.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES GUL

    uint32_t const cps[1] = { 0x12524 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x502a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_115)
{
    // 12525 ; [.502B.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES HI

    uint32_t const cps[1] = { 0x12525 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x502b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_116)
{
    // 12526 ; [.502C.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES KESH2

    uint32_t const cps[1] = { 0x12526 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x502c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_117)
{
    // 12527 ; [.502D.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES LAK-050

    uint32_t const cps[1] = { 0x12527 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x502d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_118)
{
    // 12528 ; [.502E.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES MASH

    uint32_t const cps[1] = { 0x12528 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x502e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_119)
{
    // 12529 ; [.502F.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES PAP PLUS PAP

    uint32_t const cps[1] = { 0x12529 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x502f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_120)
{
    // 1252A ; [.5030.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES U

    uint32_t const cps[1] = { 0x1252a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5030), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_121)
{
    // 1252B ; [.5031.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES U PLUS U

    uint32_t const cps[1] = { 0x1252b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5031), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_122)
{
    // 1252C ; [.5032.0020.0002] 
    // CUNEIFORM SIGN NINDA2 TIMES URUDA

    uint32_t const cps[1] = { 0x1252c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5032), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_123)
{
    // 1252D ; [.5033.0020.0002] 
    // CUNEIFORM SIGN SAG GUNU TIMES HA

    uint32_t const cps[1] = { 0x1252d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5033), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_124)
{
    // 1252E ; [.5034.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES EN

    uint32_t const cps[1] = { 0x1252e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5034), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_125)
{
    // 1252F ; [.5035.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES SHE AT LEFT

    uint32_t const cps[1] = { 0x1252f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5035), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_126)
{
    // 12530 ; [.5036.0020.0002] 
    // CUNEIFORM SIGN SAG TIMES TAK4

    uint32_t const cps[1] = { 0x12530 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5036), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_127)
{
    // 12531 ; [.5037.0020.0002] 
    // CUNEIFORM SIGN SHA6 TENU

    uint32_t const cps[1] = { 0x12531 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5037), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_128)
{
    // 12532 ; [.5038.0020.0002] 
    // CUNEIFORM SIGN SHE OVER SHE

    uint32_t const cps[1] = { 0x12532 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5038), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_129)
{
    // 12533 ; [.5039.0020.0002] 
    // CUNEIFORM SIGN SHE PLUS HUB2

    uint32_t const cps[1] = { 0x12533 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5039), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_130)
{
    // 12534 ; [.503A.0020.0002] 
    // CUNEIFORM SIGN SHE PLUS NAM2

    uint32_t const cps[1] = { 0x12534 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x503a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_131)
{
    // 12535 ; [.503B.0020.0002] 
    // CUNEIFORM SIGN SHE PLUS SAR

    uint32_t const cps[1] = { 0x12535 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x503b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_132)
{
    // 12536 ; [.503C.0020.0002] 
    // CUNEIFORM SIGN SHU2 PLUS DUG TIMES NI

    uint32_t const cps[1] = { 0x12536 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x503c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_133)
{
    // 12537 ; [.503D.0020.0002] 
    // CUNEIFORM SIGN SHU2 PLUS E2 TIMES AN

    uint32_t const cps[1] = { 0x12537 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x503d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_134)
{
    // 12538 ; [.503E.0020.0002] 
    // CUNEIFORM SIGN SI TIMES TAK4

    uint32_t const cps[1] = { 0x12538 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x503e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_135)
{
    // 12539 ; [.503F.0020.0002] 
    // CUNEIFORM SIGN TAK4 PLUS SAG

    uint32_t const cps[1] = { 0x12539 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x503f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_136)
{
    // 1253A ; [.5040.0020.0002] 
    // CUNEIFORM SIGN TUM TIMES GAN2 TENU

    uint32_t const cps[1] = { 0x1253a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5040), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_137)
{
    // 1253B ; [.5041.0020.0002] 
    // CUNEIFORM SIGN TUM TIMES THREE DISH

    uint32_t const cps[1] = { 0x1253b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5041), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_138)
{
    // 1253C ; [.5042.0020.0002] 
    // CUNEIFORM SIGN UR2 INVERTED

    uint32_t const cps[1] = { 0x1253c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5042), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_139)
{
    // 1253D ; [.5043.0020.0002] 
    // CUNEIFORM SIGN UR2 TIMES UD

    uint32_t const cps[1] = { 0x1253d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5043), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_140)
{
    // 1253E ; [.5044.0020.0002] 
    // CUNEIFORM SIGN URU TIMES DARA3

    uint32_t const cps[1] = { 0x1253e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5044), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_141)
{
    // 1253F ; [.5045.0020.0002] 
    // CUNEIFORM SIGN URU TIMES LAK-668

    uint32_t const cps[1] = { 0x1253f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5045), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_142)
{
    // 12540 ; [.5046.0020.0002] 
    // CUNEIFORM SIGN URU TIMES LU3

    uint32_t const cps[1] = { 0x12540 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5046), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_143)
{
    // 12541 ; [.5047.0020.0002] 
    // CUNEIFORM SIGN ZA7

    uint32_t const cps[1] = { 0x12541 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5047), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_144)
{
    // 12542 ; [.5048.0020.0002] 
    // CUNEIFORM SIGN ZU OVER ZU PLUS SAR

    uint32_t const cps[1] = { 0x12542 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5048), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_145)
{
    // 12543 ; [.5049.0020.0002] 
    // CUNEIFORM SIGN ZU5 TIMES THREE DISH TENU

    uint32_t const cps[1] = { 0x12543 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x5049), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_146)
{
    // 13000 ; [.504A.0020.0002] 
    // EGYPTIAN HIEROGLYPH A001

    uint32_t const cps[1] = { 0x13000 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x504a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_147)
{
    // 13001 ; [.504B.0020.0002] 
    // EGYPTIAN HIEROGLYPH A002

    uint32_t const cps[1] = { 0x13001 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x504b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_148)
{
    // 13002 ; [.504C.0020.0002] 
    // EGYPTIAN HIEROGLYPH A003

    uint32_t const cps[1] = { 0x13002 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x504c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_150_149)
{
    // 13003 ; [.504D.0020.0002] 
    // EGYPTIAN HIEROGLYPH A004

    uint32_t const cps[1] = { 0x13003 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x504d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

