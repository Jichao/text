// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_161_000)
{
    // AB06 0041;	
    // (ꬆ) ETHIOPIC SYLLABLE TTHO	[254C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB06, 0x0041 };
    uint32_t const ces[9] = { 0x254C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_001)
{
    // AB06 0062;	
    // (ꬆ) ETHIOPIC SYLLABLE TTHO	[254C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB06, 0x0062 };
    uint32_t const ces[9] = { 0x254C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_002)
{
    // 1238 0021;	
    // (ሸ) ETHIOPIC SYLLABLE SHA	[254D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1238, 0x0021 };
    uint32_t const ces[9] = { 0x254D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_003)
{
    // 1238 003F;	
    // (ሸ) ETHIOPIC SYLLABLE SHA	[254D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1238, 0x003F };
    uint32_t const ces[9] = { 0x254D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_004)
{
    // 1238 0061;	
    // (ሸ) ETHIOPIC SYLLABLE SHA	[254D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1238, 0x0061 };
    uint32_t const ces[9] = { 0x254D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_005)
{
    // 1238 0041;	
    // (ሸ) ETHIOPIC SYLLABLE SHA	[254D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1238, 0x0041 };
    uint32_t const ces[9] = { 0x254D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_006)
{
    // 1238 0062;	
    // (ሸ) ETHIOPIC SYLLABLE SHA	[254D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1238, 0x0062 };
    uint32_t const ces[9] = { 0x254D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_007)
{
    // 1239 0021;	
    // (ሹ) ETHIOPIC SYLLABLE SHU	[254E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1239, 0x0021 };
    uint32_t const ces[9] = { 0x254E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_008)
{
    // 1239 003F;	
    // (ሹ) ETHIOPIC SYLLABLE SHU	[254E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1239, 0x003F };
    uint32_t const ces[9] = { 0x254E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_009)
{
    // 1239 0061;	
    // (ሹ) ETHIOPIC SYLLABLE SHU	[254E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1239, 0x0061 };
    uint32_t const ces[9] = { 0x254E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_010)
{
    // 1239 0041;	
    // (ሹ) ETHIOPIC SYLLABLE SHU	[254E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1239, 0x0041 };
    uint32_t const ces[9] = { 0x254E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_011)
{
    // 1239 0062;	
    // (ሹ) ETHIOPIC SYLLABLE SHU	[254E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1239, 0x0062 };
    uint32_t const ces[9] = { 0x254E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_012)
{
    // 123A 0021;	
    // (ሺ) ETHIOPIC SYLLABLE SHI	[254F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123A, 0x0021 };
    uint32_t const ces[9] = { 0x254F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_013)
{
    // 123A 003F;	
    // (ሺ) ETHIOPIC SYLLABLE SHI	[254F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123A, 0x003F };
    uint32_t const ces[9] = { 0x254F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_014)
{
    // 123A 0061;	
    // (ሺ) ETHIOPIC SYLLABLE SHI	[254F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123A, 0x0061 };
    uint32_t const ces[9] = { 0x254F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_015)
{
    // 123A 0041;	
    // (ሺ) ETHIOPIC SYLLABLE SHI	[254F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x123A, 0x0041 };
    uint32_t const ces[9] = { 0x254F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_016)
{
    // 123A 0062;	
    // (ሺ) ETHIOPIC SYLLABLE SHI	[254F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123A, 0x0062 };
    uint32_t const ces[9] = { 0x254F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_017)
{
    // 123B 0021;	
    // (ሻ) ETHIOPIC SYLLABLE SHAA	[2550 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123B, 0x0021 };
    uint32_t const ces[9] = { 0x2550, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_018)
{
    // 123B 003F;	
    // (ሻ) ETHIOPIC SYLLABLE SHAA	[2550 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123B, 0x003F };
    uint32_t const ces[9] = { 0x2550, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_019)
{
    // 123B 0061;	
    // (ሻ) ETHIOPIC SYLLABLE SHAA	[2550 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123B, 0x0061 };
    uint32_t const ces[9] = { 0x2550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_020)
{
    // 123B 0041;	
    // (ሻ) ETHIOPIC SYLLABLE SHAA	[2550 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x123B, 0x0041 };
    uint32_t const ces[9] = { 0x2550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_021)
{
    // 123B 0062;	
    // (ሻ) ETHIOPIC SYLLABLE SHAA	[2550 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123B, 0x0062 };
    uint32_t const ces[9] = { 0x2550, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_022)
{
    // 123C 0021;	
    // (ሼ) ETHIOPIC SYLLABLE SHEE	[2551 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123C, 0x0021 };
    uint32_t const ces[9] = { 0x2551, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_023)
{
    // 123C 003F;	
    // (ሼ) ETHIOPIC SYLLABLE SHEE	[2551 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123C, 0x003F };
    uint32_t const ces[9] = { 0x2551, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_024)
{
    // 123C 0061;	
    // (ሼ) ETHIOPIC SYLLABLE SHEE	[2551 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123C, 0x0061 };
    uint32_t const ces[9] = { 0x2551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_025)
{
    // 123C 0041;	
    // (ሼ) ETHIOPIC SYLLABLE SHEE	[2551 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x123C, 0x0041 };
    uint32_t const ces[9] = { 0x2551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_026)
{
    // 123C 0062;	
    // (ሼ) ETHIOPIC SYLLABLE SHEE	[2551 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123C, 0x0062 };
    uint32_t const ces[9] = { 0x2551, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_027)
{
    // 123D 0021;	
    // (ሽ) ETHIOPIC SYLLABLE SHE	[2552 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123D, 0x0021 };
    uint32_t const ces[9] = { 0x2552, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_028)
{
    // 123D 003F;	
    // (ሽ) ETHIOPIC SYLLABLE SHE	[2552 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123D, 0x003F };
    uint32_t const ces[9] = { 0x2552, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_029)
{
    // 123D 0061;	
    // (ሽ) ETHIOPIC SYLLABLE SHE	[2552 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123D, 0x0061 };
    uint32_t const ces[9] = { 0x2552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_030)
{
    // 123D 0041;	
    // (ሽ) ETHIOPIC SYLLABLE SHE	[2552 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x123D, 0x0041 };
    uint32_t const ces[9] = { 0x2552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_031)
{
    // 123D 0062;	
    // (ሽ) ETHIOPIC SYLLABLE SHE	[2552 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123D, 0x0062 };
    uint32_t const ces[9] = { 0x2552, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_032)
{
    // 123E 0021;	
    // (ሾ) ETHIOPIC SYLLABLE SHO	[2553 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123E, 0x0021 };
    uint32_t const ces[9] = { 0x2553, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_033)
{
    // 123E 003F;	
    // (ሾ) ETHIOPIC SYLLABLE SHO	[2553 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123E, 0x003F };
    uint32_t const ces[9] = { 0x2553, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_034)
{
    // 123E 0061;	
    // (ሾ) ETHIOPIC SYLLABLE SHO	[2553 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123E, 0x0061 };
    uint32_t const ces[9] = { 0x2553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_035)
{
    // 123E 0041;	
    // (ሾ) ETHIOPIC SYLLABLE SHO	[2553 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x123E, 0x0041 };
    uint32_t const ces[9] = { 0x2553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_036)
{
    // 123E 0062;	
    // (ሾ) ETHIOPIC SYLLABLE SHO	[2553 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123E, 0x0062 };
    uint32_t const ces[9] = { 0x2553, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_037)
{
    // 123F 0021;	
    // (ሿ) ETHIOPIC SYLLABLE SHWA	[2554 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123F, 0x0021 };
    uint32_t const ces[9] = { 0x2554, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_038)
{
    // 123F 003F;	
    // (ሿ) ETHIOPIC SYLLABLE SHWA	[2554 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123F, 0x003F };
    uint32_t const ces[9] = { 0x2554, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_039)
{
    // 123F 0061;	
    // (ሿ) ETHIOPIC SYLLABLE SHWA	[2554 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123F, 0x0061 };
    uint32_t const ces[9] = { 0x2554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_040)
{
    // 123F 0041;	
    // (ሿ) ETHIOPIC SYLLABLE SHWA	[2554 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x123F, 0x0041 };
    uint32_t const ces[9] = { 0x2554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_041)
{
    // 123F 0062;	
    // (ሿ) ETHIOPIC SYLLABLE SHWA	[2554 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x123F, 0x0062 };
    uint32_t const ces[9] = { 0x2554, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_042)
{
    // 2D84 0021;	
    // (ⶄ) ETHIOPIC SYLLABLE SHOA	[2555 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D84, 0x0021 };
    uint32_t const ces[9] = { 0x2555, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_043)
{
    // 2D84 003F;	
    // (ⶄ) ETHIOPIC SYLLABLE SHOA	[2555 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D84, 0x003F };
    uint32_t const ces[9] = { 0x2555, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_044)
{
    // 2D84 0061;	
    // (ⶄ) ETHIOPIC SYLLABLE SHOA	[2555 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D84, 0x0061 };
    uint32_t const ces[9] = { 0x2555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_045)
{
    // 2D84 0041;	
    // (ⶄ) ETHIOPIC SYLLABLE SHOA	[2555 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D84, 0x0041 };
    uint32_t const ces[9] = { 0x2555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_046)
{
    // 2D84 0062;	
    // (ⶄ) ETHIOPIC SYLLABLE SHOA	[2555 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D84, 0x0062 };
    uint32_t const ces[9] = { 0x2555, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_047)
{
    // 1240 0021;	
    // (ቀ) ETHIOPIC SYLLABLE QA	[2556 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240, 0x0021 };
    uint32_t const ces[9] = { 0x2556, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_048)
{
    // 1240 003F;	
    // (ቀ) ETHIOPIC SYLLABLE QA	[2556 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240, 0x003F };
    uint32_t const ces[9] = { 0x2556, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_049)
{
    // 1240 0061;	
    // (ቀ) ETHIOPIC SYLLABLE QA	[2556 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240, 0x0061 };
    uint32_t const ces[9] = { 0x2556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_050)
{
    // 1240 0041;	
    // (ቀ) ETHIOPIC SYLLABLE QA	[2556 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1240, 0x0041 };
    uint32_t const ces[9] = { 0x2556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_051)
{
    // 1240 0062;	
    // (ቀ) ETHIOPIC SYLLABLE QA	[2556 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1240, 0x0062 };
    uint32_t const ces[9] = { 0x2556, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_052)
{
    // 1241 0021;	
    // (ቁ) ETHIOPIC SYLLABLE QU	[2557 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241, 0x0021 };
    uint32_t const ces[9] = { 0x2557, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_053)
{
    // 1241 003F;	
    // (ቁ) ETHIOPIC SYLLABLE QU	[2557 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241, 0x003F };
    uint32_t const ces[9] = { 0x2557, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_054)
{
    // 1241 0061;	
    // (ቁ) ETHIOPIC SYLLABLE QU	[2557 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241, 0x0061 };
    uint32_t const ces[9] = { 0x2557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_055)
{
    // 1241 0041;	
    // (ቁ) ETHIOPIC SYLLABLE QU	[2557 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1241, 0x0041 };
    uint32_t const ces[9] = { 0x2557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_056)
{
    // 1241 0062;	
    // (ቁ) ETHIOPIC SYLLABLE QU	[2557 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1241, 0x0062 };
    uint32_t const ces[9] = { 0x2557, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_057)
{
    // 1242 0021;	
    // (ቂ) ETHIOPIC SYLLABLE QI	[2558 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242, 0x0021 };
    uint32_t const ces[9] = { 0x2558, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_058)
{
    // 1242 003F;	
    // (ቂ) ETHIOPIC SYLLABLE QI	[2558 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242, 0x003F };
    uint32_t const ces[9] = { 0x2558, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_059)
{
    // 1242 0061;	
    // (ቂ) ETHIOPIC SYLLABLE QI	[2558 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242, 0x0061 };
    uint32_t const ces[9] = { 0x2558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_060)
{
    // 1242 0041;	
    // (ቂ) ETHIOPIC SYLLABLE QI	[2558 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1242, 0x0041 };
    uint32_t const ces[9] = { 0x2558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_061)
{
    // 1242 0062;	
    // (ቂ) ETHIOPIC SYLLABLE QI	[2558 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1242, 0x0062 };
    uint32_t const ces[9] = { 0x2558, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_062)
{
    // 1243 0021;	
    // (ቃ) ETHIOPIC SYLLABLE QAA	[2559 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243, 0x0021 };
    uint32_t const ces[9] = { 0x2559, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_063)
{
    // 1243 003F;	
    // (ቃ) ETHIOPIC SYLLABLE QAA	[2559 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243, 0x003F };
    uint32_t const ces[9] = { 0x2559, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_064)
{
    // 1243 0061;	
    // (ቃ) ETHIOPIC SYLLABLE QAA	[2559 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243, 0x0061 };
    uint32_t const ces[9] = { 0x2559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_065)
{
    // 1243 0041;	
    // (ቃ) ETHIOPIC SYLLABLE QAA	[2559 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1243, 0x0041 };
    uint32_t const ces[9] = { 0x2559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_066)
{
    // 1243 0062;	
    // (ቃ) ETHIOPIC SYLLABLE QAA	[2559 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1243, 0x0062 };
    uint32_t const ces[9] = { 0x2559, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_067)
{
    // 1244 0021;	
    // (ቄ) ETHIOPIC SYLLABLE QEE	[255A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244, 0x0021 };
    uint32_t const ces[9] = { 0x255A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_068)
{
    // 1244 003F;	
    // (ቄ) ETHIOPIC SYLLABLE QEE	[255A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244, 0x003F };
    uint32_t const ces[9] = { 0x255A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_069)
{
    // 1244 0061;	
    // (ቄ) ETHIOPIC SYLLABLE QEE	[255A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244, 0x0061 };
    uint32_t const ces[9] = { 0x255A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_070)
{
    // 1244 0041;	
    // (ቄ) ETHIOPIC SYLLABLE QEE	[255A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1244, 0x0041 };
    uint32_t const ces[9] = { 0x255A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_071)
{
    // 1244 0062;	
    // (ቄ) ETHIOPIC SYLLABLE QEE	[255A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1244, 0x0062 };
    uint32_t const ces[9] = { 0x255A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_072)
{
    // 1245 0021;	
    // (ቅ) ETHIOPIC SYLLABLE QE	[255B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245, 0x0021 };
    uint32_t const ces[9] = { 0x255B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_073)
{
    // 1245 003F;	
    // (ቅ) ETHIOPIC SYLLABLE QE	[255B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245, 0x003F };
    uint32_t const ces[9] = { 0x255B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_074)
{
    // 1245 0061;	
    // (ቅ) ETHIOPIC SYLLABLE QE	[255B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245, 0x0061 };
    uint32_t const ces[9] = { 0x255B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_075)
{
    // 1245 0041;	
    // (ቅ) ETHIOPIC SYLLABLE QE	[255B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1245, 0x0041 };
    uint32_t const ces[9] = { 0x255B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_076)
{
    // 1245 0062;	
    // (ቅ) ETHIOPIC SYLLABLE QE	[255B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1245, 0x0062 };
    uint32_t const ces[9] = { 0x255B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_077)
{
    // 1246 0021;	
    // (ቆ) ETHIOPIC SYLLABLE QO	[255C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246, 0x0021 };
    uint32_t const ces[9] = { 0x255C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_078)
{
    // 1246 003F;	
    // (ቆ) ETHIOPIC SYLLABLE QO	[255C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246, 0x003F };
    uint32_t const ces[9] = { 0x255C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_079)
{
    // 1246 0061;	
    // (ቆ) ETHIOPIC SYLLABLE QO	[255C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246, 0x0061 };
    uint32_t const ces[9] = { 0x255C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_080)
{
    // 1246 0041;	
    // (ቆ) ETHIOPIC SYLLABLE QO	[255C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1246, 0x0041 };
    uint32_t const ces[9] = { 0x255C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_081)
{
    // 1246 0062;	
    // (ቆ) ETHIOPIC SYLLABLE QO	[255C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1246, 0x0062 };
    uint32_t const ces[9] = { 0x255C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_082)
{
    // 1247 0021;	
    // (ቇ) ETHIOPIC SYLLABLE QOA	[255D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1247, 0x0021 };
    uint32_t const ces[9] = { 0x255D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_083)
{
    // 1247 003F;	
    // (ቇ) ETHIOPIC SYLLABLE QOA	[255D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1247, 0x003F };
    uint32_t const ces[9] = { 0x255D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_084)
{
    // 1247 0061;	
    // (ቇ) ETHIOPIC SYLLABLE QOA	[255D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1247, 0x0061 };
    uint32_t const ces[9] = { 0x255D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_085)
{
    // 1247 0041;	
    // (ቇ) ETHIOPIC SYLLABLE QOA	[255D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1247, 0x0041 };
    uint32_t const ces[9] = { 0x255D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_086)
{
    // 1247 0062;	
    // (ቇ) ETHIOPIC SYLLABLE QOA	[255D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1247, 0x0062 };
    uint32_t const ces[9] = { 0x255D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_087)
{
    // 1248 0021;	
    // (ቈ) ETHIOPIC SYLLABLE QWA	[255E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1248, 0x0021 };
    uint32_t const ces[9] = { 0x255E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_088)
{
    // 1248 003F;	
    // (ቈ) ETHIOPIC SYLLABLE QWA	[255E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1248, 0x003F };
    uint32_t const ces[9] = { 0x255E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_089)
{
    // 1248 0061;	
    // (ቈ) ETHIOPIC SYLLABLE QWA	[255E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1248, 0x0061 };
    uint32_t const ces[9] = { 0x255E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_090)
{
    // 1248 0041;	
    // (ቈ) ETHIOPIC SYLLABLE QWA	[255E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1248, 0x0041 };
    uint32_t const ces[9] = { 0x255E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_091)
{
    // 1248 0062;	
    // (ቈ) ETHIOPIC SYLLABLE QWA	[255E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1248, 0x0062 };
    uint32_t const ces[9] = { 0x255E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_092)
{
    // 124A 0021;	
    // (ቊ) ETHIOPIC SYLLABLE QWI	[255F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124A, 0x0021 };
    uint32_t const ces[9] = { 0x255F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_093)
{
    // 124A 003F;	
    // (ቊ) ETHIOPIC SYLLABLE QWI	[255F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124A, 0x003F };
    uint32_t const ces[9] = { 0x255F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_094)
{
    // 124A 0061;	
    // (ቊ) ETHIOPIC SYLLABLE QWI	[255F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124A, 0x0061 };
    uint32_t const ces[9] = { 0x255F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_095)
{
    // 124A 0041;	
    // (ቊ) ETHIOPIC SYLLABLE QWI	[255F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124A, 0x0041 };
    uint32_t const ces[9] = { 0x255F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_096)
{
    // 124A 0062;	
    // (ቊ) ETHIOPIC SYLLABLE QWI	[255F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124A, 0x0062 };
    uint32_t const ces[9] = { 0x255F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_097)
{
    // 124B 0021;	
    // (ቋ) ETHIOPIC SYLLABLE QWAA	[2560 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B, 0x0021 };
    uint32_t const ces[9] = { 0x2560, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_098)
{
    // 124B 003F;	
    // (ቋ) ETHIOPIC SYLLABLE QWAA	[2560 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B, 0x003F };
    uint32_t const ces[9] = { 0x2560, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_099)
{
    // 124B 0061;	
    // (ቋ) ETHIOPIC SYLLABLE QWAA	[2560 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B, 0x0061 };
    uint32_t const ces[9] = { 0x2560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_100)
{
    // 124B 0041;	
    // (ቋ) ETHIOPIC SYLLABLE QWAA	[2560 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124B, 0x0041 };
    uint32_t const ces[9] = { 0x2560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_101)
{
    // 124B 0062;	
    // (ቋ) ETHIOPIC SYLLABLE QWAA	[2560 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124B, 0x0062 };
    uint32_t const ces[9] = { 0x2560, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_102)
{
    // 124C 0021;	
    // (ቌ) ETHIOPIC SYLLABLE QWEE	[2561 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C, 0x0021 };
    uint32_t const ces[9] = { 0x2561, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_103)
{
    // 124C 003F;	
    // (ቌ) ETHIOPIC SYLLABLE QWEE	[2561 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C, 0x003F };
    uint32_t const ces[9] = { 0x2561, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_104)
{
    // 124C 0061;	
    // (ቌ) ETHIOPIC SYLLABLE QWEE	[2561 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C, 0x0061 };
    uint32_t const ces[9] = { 0x2561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_105)
{
    // 124C 0041;	
    // (ቌ) ETHIOPIC SYLLABLE QWEE	[2561 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124C, 0x0041 };
    uint32_t const ces[9] = { 0x2561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_106)
{
    // 124C 0062;	
    // (ቌ) ETHIOPIC SYLLABLE QWEE	[2561 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124C, 0x0062 };
    uint32_t const ces[9] = { 0x2561, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_107)
{
    // 124D 0021;	
    // (ቍ) ETHIOPIC SYLLABLE QWE	[2562 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D, 0x0021 };
    uint32_t const ces[9] = { 0x2562, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_108)
{
    // 124D 003F;	
    // (ቍ) ETHIOPIC SYLLABLE QWE	[2562 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D, 0x003F };
    uint32_t const ces[9] = { 0x2562, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_109)
{
    // 124D 0061;	
    // (ቍ) ETHIOPIC SYLLABLE QWE	[2562 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D, 0x0061 };
    uint32_t const ces[9] = { 0x2562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_110)
{
    // 124D 0041;	
    // (ቍ) ETHIOPIC SYLLABLE QWE	[2562 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x124D, 0x0041 };
    uint32_t const ces[9] = { 0x2562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_111)
{
    // 124D 0062;	
    // (ቍ) ETHIOPIC SYLLABLE QWE	[2562 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x124D, 0x0062 };
    uint32_t const ces[9] = { 0x2562, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_112)
{
    // 1250 0021;	
    // (ቐ) ETHIOPIC SYLLABLE QHA	[2563 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250, 0x0021 };
    uint32_t const ces[9] = { 0x2563, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_113)
{
    // 1250 003F;	
    // (ቐ) ETHIOPIC SYLLABLE QHA	[2563 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250, 0x003F };
    uint32_t const ces[9] = { 0x2563, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_114)
{
    // 1250 0061;	
    // (ቐ) ETHIOPIC SYLLABLE QHA	[2563 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250, 0x0061 };
    uint32_t const ces[9] = { 0x2563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_115)
{
    // 1250 0041;	
    // (ቐ) ETHIOPIC SYLLABLE QHA	[2563 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1250, 0x0041 };
    uint32_t const ces[9] = { 0x2563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_116)
{
    // 1250 0062;	
    // (ቐ) ETHIOPIC SYLLABLE QHA	[2563 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1250, 0x0062 };
    uint32_t const ces[9] = { 0x2563, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_117)
{
    // 1251 0021;	
    // (ቑ) ETHIOPIC SYLLABLE QHU	[2564 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1251, 0x0021 };
    uint32_t const ces[9] = { 0x2564, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_118)
{
    // 1251 003F;	
    // (ቑ) ETHIOPIC SYLLABLE QHU	[2564 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1251, 0x003F };
    uint32_t const ces[9] = { 0x2564, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_119)
{
    // 1251 0061;	
    // (ቑ) ETHIOPIC SYLLABLE QHU	[2564 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1251, 0x0061 };
    uint32_t const ces[9] = { 0x2564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_120)
{
    // 1251 0041;	
    // (ቑ) ETHIOPIC SYLLABLE QHU	[2564 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1251, 0x0041 };
    uint32_t const ces[9] = { 0x2564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_121)
{
    // 1251 0062;	
    // (ቑ) ETHIOPIC SYLLABLE QHU	[2564 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1251, 0x0062 };
    uint32_t const ces[9] = { 0x2564, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_122)
{
    // 1252 0021;	
    // (ቒ) ETHIOPIC SYLLABLE QHI	[2565 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1252, 0x0021 };
    uint32_t const ces[9] = { 0x2565, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_123)
{
    // 1252 003F;	
    // (ቒ) ETHIOPIC SYLLABLE QHI	[2565 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1252, 0x003F };
    uint32_t const ces[9] = { 0x2565, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_124)
{
    // 1252 0061;	
    // (ቒ) ETHIOPIC SYLLABLE QHI	[2565 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1252, 0x0061 };
    uint32_t const ces[9] = { 0x2565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_125)
{
    // 1252 0041;	
    // (ቒ) ETHIOPIC SYLLABLE QHI	[2565 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1252, 0x0041 };
    uint32_t const ces[9] = { 0x2565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_126)
{
    // 1252 0062;	
    // (ቒ) ETHIOPIC SYLLABLE QHI	[2565 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1252, 0x0062 };
    uint32_t const ces[9] = { 0x2565, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_127)
{
    // 1253 0021;	
    // (ቓ) ETHIOPIC SYLLABLE QHAA	[2566 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1253, 0x0021 };
    uint32_t const ces[9] = { 0x2566, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_128)
{
    // 1253 003F;	
    // (ቓ) ETHIOPIC SYLLABLE QHAA	[2566 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1253, 0x003F };
    uint32_t const ces[9] = { 0x2566, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_129)
{
    // 1253 0061;	
    // (ቓ) ETHIOPIC SYLLABLE QHAA	[2566 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1253, 0x0061 };
    uint32_t const ces[9] = { 0x2566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_130)
{
    // 1253 0041;	
    // (ቓ) ETHIOPIC SYLLABLE QHAA	[2566 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1253, 0x0041 };
    uint32_t const ces[9] = { 0x2566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_131)
{
    // 1253 0062;	
    // (ቓ) ETHIOPIC SYLLABLE QHAA	[2566 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1253, 0x0062 };
    uint32_t const ces[9] = { 0x2566, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_132)
{
    // 1254 0021;	
    // (ቔ) ETHIOPIC SYLLABLE QHEE	[2567 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1254, 0x0021 };
    uint32_t const ces[9] = { 0x2567, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_133)
{
    // 1254 003F;	
    // (ቔ) ETHIOPIC SYLLABLE QHEE	[2567 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1254, 0x003F };
    uint32_t const ces[9] = { 0x2567, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_134)
{
    // 1254 0061;	
    // (ቔ) ETHIOPIC SYLLABLE QHEE	[2567 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1254, 0x0061 };
    uint32_t const ces[9] = { 0x2567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_135)
{
    // 1254 0041;	
    // (ቔ) ETHIOPIC SYLLABLE QHEE	[2567 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1254, 0x0041 };
    uint32_t const ces[9] = { 0x2567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_136)
{
    // 1254 0062;	
    // (ቔ) ETHIOPIC SYLLABLE QHEE	[2567 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1254, 0x0062 };
    uint32_t const ces[9] = { 0x2567, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_137)
{
    // 1255 0021;	
    // (ቕ) ETHIOPIC SYLLABLE QHE	[2568 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1255, 0x0021 };
    uint32_t const ces[9] = { 0x2568, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_138)
{
    // 1255 003F;	
    // (ቕ) ETHIOPIC SYLLABLE QHE	[2568 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1255, 0x003F };
    uint32_t const ces[9] = { 0x2568, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_139)
{
    // 1255 0061;	
    // (ቕ) ETHIOPIC SYLLABLE QHE	[2568 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1255, 0x0061 };
    uint32_t const ces[9] = { 0x2568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_140)
{
    // 1255 0041;	
    // (ቕ) ETHIOPIC SYLLABLE QHE	[2568 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1255, 0x0041 };
    uint32_t const ces[9] = { 0x2568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_141)
{
    // 1255 0062;	
    // (ቕ) ETHIOPIC SYLLABLE QHE	[2568 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1255, 0x0062 };
    uint32_t const ces[9] = { 0x2568, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_142)
{
    // 1256 0021;	
    // (ቖ) ETHIOPIC SYLLABLE QHO	[2569 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1256, 0x0021 };
    uint32_t const ces[9] = { 0x2569, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_143)
{
    // 1256 003F;	
    // (ቖ) ETHIOPIC SYLLABLE QHO	[2569 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1256, 0x003F };
    uint32_t const ces[9] = { 0x2569, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_144)
{
    // 1256 0061;	
    // (ቖ) ETHIOPIC SYLLABLE QHO	[2569 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1256, 0x0061 };
    uint32_t const ces[9] = { 0x2569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_145)
{
    // 1256 0041;	
    // (ቖ) ETHIOPIC SYLLABLE QHO	[2569 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1256, 0x0041 };
    uint32_t const ces[9] = { 0x2569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_146)
{
    // 1256 0062;	
    // (ቖ) ETHIOPIC SYLLABLE QHO	[2569 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1256, 0x0062 };
    uint32_t const ces[9] = { 0x2569, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_147)
{
    // 1258 0021;	
    // (ቘ) ETHIOPIC SYLLABLE QHWA	[256A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1258, 0x0021 };
    uint32_t const ces[9] = { 0x256A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_148)
{
    // 1258 003F;	
    // (ቘ) ETHIOPIC SYLLABLE QHWA	[256A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1258, 0x003F };
    uint32_t const ces[9] = { 0x256A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_149)
{
    // 1258 0061;	
    // (ቘ) ETHIOPIC SYLLABLE QHWA	[256A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1258, 0x0061 };
    uint32_t const ces[9] = { 0x256A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_150)
{
    // 1258 0041;	
    // (ቘ) ETHIOPIC SYLLABLE QHWA	[256A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1258, 0x0041 };
    uint32_t const ces[9] = { 0x256A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_151)
{
    // 1258 0062;	
    // (ቘ) ETHIOPIC SYLLABLE QHWA	[256A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1258, 0x0062 };
    uint32_t const ces[9] = { 0x256A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_152)
{
    // 125A 0021;	
    // (ቚ) ETHIOPIC SYLLABLE QHWI	[256B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125A, 0x0021 };
    uint32_t const ces[9] = { 0x256B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_153)
{
    // 125A 003F;	
    // (ቚ) ETHIOPIC SYLLABLE QHWI	[256B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125A, 0x003F };
    uint32_t const ces[9] = { 0x256B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_154)
{
    // 125A 0061;	
    // (ቚ) ETHIOPIC SYLLABLE QHWI	[256B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125A, 0x0061 };
    uint32_t const ces[9] = { 0x256B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_155)
{
    // 125A 0041;	
    // (ቚ) ETHIOPIC SYLLABLE QHWI	[256B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x125A, 0x0041 };
    uint32_t const ces[9] = { 0x256B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_156)
{
    // 125A 0062;	
    // (ቚ) ETHIOPIC SYLLABLE QHWI	[256B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125A, 0x0062 };
    uint32_t const ces[9] = { 0x256B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_157)
{
    // 125B 0021;	
    // (ቛ) ETHIOPIC SYLLABLE QHWAA	[256C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125B, 0x0021 };
    uint32_t const ces[9] = { 0x256C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_158)
{
    // 125B 003F;	
    // (ቛ) ETHIOPIC SYLLABLE QHWAA	[256C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125B, 0x003F };
    uint32_t const ces[9] = { 0x256C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_159)
{
    // 125B 0061;	
    // (ቛ) ETHIOPIC SYLLABLE QHWAA	[256C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125B, 0x0061 };
    uint32_t const ces[9] = { 0x256C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_160)
{
    // 125B 0041;	
    // (ቛ) ETHIOPIC SYLLABLE QHWAA	[256C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x125B, 0x0041 };
    uint32_t const ces[9] = { 0x256C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_161)
{
    // 125B 0062;	
    // (ቛ) ETHIOPIC SYLLABLE QHWAA	[256C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125B, 0x0062 };
    uint32_t const ces[9] = { 0x256C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_162)
{
    // 125C 0021;	
    // (ቜ) ETHIOPIC SYLLABLE QHWEE	[256D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125C, 0x0021 };
    uint32_t const ces[9] = { 0x256D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_163)
{
    // 125C 003F;	
    // (ቜ) ETHIOPIC SYLLABLE QHWEE	[256D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125C, 0x003F };
    uint32_t const ces[9] = { 0x256D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_164)
{
    // 125C 0061;	
    // (ቜ) ETHIOPIC SYLLABLE QHWEE	[256D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125C, 0x0061 };
    uint32_t const ces[9] = { 0x256D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_165)
{
    // 125C 0041;	
    // (ቜ) ETHIOPIC SYLLABLE QHWEE	[256D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x125C, 0x0041 };
    uint32_t const ces[9] = { 0x256D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_166)
{
    // 125C 0062;	
    // (ቜ) ETHIOPIC SYLLABLE QHWEE	[256D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125C, 0x0062 };
    uint32_t const ces[9] = { 0x256D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_167)
{
    // 125D 0021;	
    // (ቝ) ETHIOPIC SYLLABLE QHWE	[256E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125D, 0x0021 };
    uint32_t const ces[9] = { 0x256E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_168)
{
    // 125D 003F;	
    // (ቝ) ETHIOPIC SYLLABLE QHWE	[256E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125D, 0x003F };
    uint32_t const ces[9] = { 0x256E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_169)
{
    // 125D 0061;	
    // (ቝ) ETHIOPIC SYLLABLE QHWE	[256E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125D, 0x0061 };
    uint32_t const ces[9] = { 0x256E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_170)
{
    // 125D 0041;	
    // (ቝ) ETHIOPIC SYLLABLE QHWE	[256E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x125D, 0x0041 };
    uint32_t const ces[9] = { 0x256E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_171)
{
    // 125D 0062;	
    // (ቝ) ETHIOPIC SYLLABLE QHWE	[256E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x125D, 0x0062 };
    uint32_t const ces[9] = { 0x256E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_172)
{
    // 1260 0021;	
    // (በ) ETHIOPIC SYLLABLE BA	[256F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1260, 0x0021 };
    uint32_t const ces[9] = { 0x256F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_173)
{
    // 1260 003F;	
    // (በ) ETHIOPIC SYLLABLE BA	[256F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1260, 0x003F };
    uint32_t const ces[9] = { 0x256F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_174)
{
    // 1260 0061;	
    // (በ) ETHIOPIC SYLLABLE BA	[256F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1260, 0x0061 };
    uint32_t const ces[9] = { 0x256F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_175)
{
    // 1260 0041;	
    // (በ) ETHIOPIC SYLLABLE BA	[256F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1260, 0x0041 };
    uint32_t const ces[9] = { 0x256F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_176)
{
    // 1260 0062;	
    // (በ) ETHIOPIC SYLLABLE BA	[256F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1260, 0x0062 };
    uint32_t const ces[9] = { 0x256F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_177)
{
    // 1261 0021;	
    // (ቡ) ETHIOPIC SYLLABLE BU	[2570 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1261, 0x0021 };
    uint32_t const ces[9] = { 0x2570, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_178)
{
    // 1261 003F;	
    // (ቡ) ETHIOPIC SYLLABLE BU	[2570 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1261, 0x003F };
    uint32_t const ces[9] = { 0x2570, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_179)
{
    // 1261 0061;	
    // (ቡ) ETHIOPIC SYLLABLE BU	[2570 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1261, 0x0061 };
    uint32_t const ces[9] = { 0x2570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_180)
{
    // 1261 0041;	
    // (ቡ) ETHIOPIC SYLLABLE BU	[2570 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1261, 0x0041 };
    uint32_t const ces[9] = { 0x2570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_181)
{
    // 1261 0062;	
    // (ቡ) ETHIOPIC SYLLABLE BU	[2570 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1261, 0x0062 };
    uint32_t const ces[9] = { 0x2570, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_182)
{
    // 1262 0021;	
    // (ቢ) ETHIOPIC SYLLABLE BI	[2571 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1262, 0x0021 };
    uint32_t const ces[9] = { 0x2571, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_183)
{
    // 1262 003F;	
    // (ቢ) ETHIOPIC SYLLABLE BI	[2571 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1262, 0x003F };
    uint32_t const ces[9] = { 0x2571, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_184)
{
    // 1262 0061;	
    // (ቢ) ETHIOPIC SYLLABLE BI	[2571 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1262, 0x0061 };
    uint32_t const ces[9] = { 0x2571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_185)
{
    // 1262 0041;	
    // (ቢ) ETHIOPIC SYLLABLE BI	[2571 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1262, 0x0041 };
    uint32_t const ces[9] = { 0x2571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_186)
{
    // 1262 0062;	
    // (ቢ) ETHIOPIC SYLLABLE BI	[2571 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1262, 0x0062 };
    uint32_t const ces[9] = { 0x2571, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_187)
{
    // 1263 0021;	
    // (ባ) ETHIOPIC SYLLABLE BAA	[2572 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1263, 0x0021 };
    uint32_t const ces[9] = { 0x2572, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_188)
{
    // 1263 003F;	
    // (ባ) ETHIOPIC SYLLABLE BAA	[2572 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1263, 0x003F };
    uint32_t const ces[9] = { 0x2572, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_189)
{
    // 1263 0061;	
    // (ባ) ETHIOPIC SYLLABLE BAA	[2572 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1263, 0x0061 };
    uint32_t const ces[9] = { 0x2572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_190)
{
    // 1263 0041;	
    // (ባ) ETHIOPIC SYLLABLE BAA	[2572 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1263, 0x0041 };
    uint32_t const ces[9] = { 0x2572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_191)
{
    // 1263 0062;	
    // (ባ) ETHIOPIC SYLLABLE BAA	[2572 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1263, 0x0062 };
    uint32_t const ces[9] = { 0x2572, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_192)
{
    // 1264 0021;	
    // (ቤ) ETHIOPIC SYLLABLE BEE	[2573 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1264, 0x0021 };
    uint32_t const ces[9] = { 0x2573, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_193)
{
    // 1264 003F;	
    // (ቤ) ETHIOPIC SYLLABLE BEE	[2573 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1264, 0x003F };
    uint32_t const ces[9] = { 0x2573, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_194)
{
    // 1264 0061;	
    // (ቤ) ETHIOPIC SYLLABLE BEE	[2573 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1264, 0x0061 };
    uint32_t const ces[9] = { 0x2573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_195)
{
    // 1264 0041;	
    // (ቤ) ETHIOPIC SYLLABLE BEE	[2573 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1264, 0x0041 };
    uint32_t const ces[9] = { 0x2573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_196)
{
    // 1264 0062;	
    // (ቤ) ETHIOPIC SYLLABLE BEE	[2573 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1264, 0x0062 };
    uint32_t const ces[9] = { 0x2573, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_197)
{
    // 1265 0021;	
    // (ብ) ETHIOPIC SYLLABLE BE	[2574 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1265, 0x0021 };
    uint32_t const ces[9] = { 0x2574, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_198)
{
    // 1265 003F;	
    // (ብ) ETHIOPIC SYLLABLE BE	[2574 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1265, 0x003F };
    uint32_t const ces[9] = { 0x2574, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_199)
{
    // 1265 0061;	
    // (ብ) ETHIOPIC SYLLABLE BE	[2574 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1265, 0x0061 };
    uint32_t const ces[9] = { 0x2574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_200)
{
    // 1265 0041;	
    // (ብ) ETHIOPIC SYLLABLE BE	[2574 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1265, 0x0041 };
    uint32_t const ces[9] = { 0x2574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_201)
{
    // 1265 0062;	
    // (ብ) ETHIOPIC SYLLABLE BE	[2574 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1265, 0x0062 };
    uint32_t const ces[9] = { 0x2574, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_202)
{
    // 1266 0021;	
    // (ቦ) ETHIOPIC SYLLABLE BO	[2575 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1266, 0x0021 };
    uint32_t const ces[9] = { 0x2575, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_203)
{
    // 1266 003F;	
    // (ቦ) ETHIOPIC SYLLABLE BO	[2575 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1266, 0x003F };
    uint32_t const ces[9] = { 0x2575, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_204)
{
    // 1266 0061;	
    // (ቦ) ETHIOPIC SYLLABLE BO	[2575 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1266, 0x0061 };
    uint32_t const ces[9] = { 0x2575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_205)
{
    // 1266 0041;	
    // (ቦ) ETHIOPIC SYLLABLE BO	[2575 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1266, 0x0041 };
    uint32_t const ces[9] = { 0x2575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_206)
{
    // 1266 0062;	
    // (ቦ) ETHIOPIC SYLLABLE BO	[2575 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1266, 0x0062 };
    uint32_t const ces[9] = { 0x2575, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_207)
{
    // 1267 0021;	
    // (ቧ) ETHIOPIC SYLLABLE BWA	[2576 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1267, 0x0021 };
    uint32_t const ces[9] = { 0x2576, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_208)
{
    // 1267 003F;	
    // (ቧ) ETHIOPIC SYLLABLE BWA	[2576 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1267, 0x003F };
    uint32_t const ces[9] = { 0x2576, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_209)
{
    // 1267 0061;	
    // (ቧ) ETHIOPIC SYLLABLE BWA	[2576 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1267, 0x0061 };
    uint32_t const ces[9] = { 0x2576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_210)
{
    // 1267 0041;	
    // (ቧ) ETHIOPIC SYLLABLE BWA	[2576 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1267, 0x0041 };
    uint32_t const ces[9] = { 0x2576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_211)
{
    // 1267 0062;	
    // (ቧ) ETHIOPIC SYLLABLE BWA	[2576 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1267, 0x0062 };
    uint32_t const ces[9] = { 0x2576, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_212)
{
    // 1384 0021;	
    // (ᎄ) ETHIOPIC SYLLABLE SEBATBEIT BWA	[2577 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1384, 0x0021 };
    uint32_t const ces[9] = { 0x2577, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_213)
{
    // 1384 003F;	
    // (ᎄ) ETHIOPIC SYLLABLE SEBATBEIT BWA	[2577 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1384, 0x003F };
    uint32_t const ces[9] = { 0x2577, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_214)
{
    // 1384 0061;	
    // (ᎄ) ETHIOPIC SYLLABLE SEBATBEIT BWA	[2577 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1384, 0x0061 };
    uint32_t const ces[9] = { 0x2577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_215)
{
    // 1384 0041;	
    // (ᎄ) ETHIOPIC SYLLABLE SEBATBEIT BWA	[2577 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1384, 0x0041 };
    uint32_t const ces[9] = { 0x2577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_216)
{
    // 1384 0062;	
    // (ᎄ) ETHIOPIC SYLLABLE SEBATBEIT BWA	[2577 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1384, 0x0062 };
    uint32_t const ces[9] = { 0x2577, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_217)
{
    // 1385 0021;	
    // (ᎅ) ETHIOPIC SYLLABLE BWI	[2578 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1385, 0x0021 };
    uint32_t const ces[9] = { 0x2578, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_218)
{
    // 1385 003F;	
    // (ᎅ) ETHIOPIC SYLLABLE BWI	[2578 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1385, 0x003F };
    uint32_t const ces[9] = { 0x2578, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_219)
{
    // 1385 0061;	
    // (ᎅ) ETHIOPIC SYLLABLE BWI	[2578 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1385, 0x0061 };
    uint32_t const ces[9] = { 0x2578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_220)
{
    // 1385 0041;	
    // (ᎅ) ETHIOPIC SYLLABLE BWI	[2578 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1385, 0x0041 };
    uint32_t const ces[9] = { 0x2578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_221)
{
    // 1385 0062;	
    // (ᎅ) ETHIOPIC SYLLABLE BWI	[2578 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1385, 0x0062 };
    uint32_t const ces[9] = { 0x2578, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_222)
{
    // 1386 0021;	
    // (ᎆ) ETHIOPIC SYLLABLE BWEE	[2579 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1386, 0x0021 };
    uint32_t const ces[9] = { 0x2579, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_223)
{
    // 1386 003F;	
    // (ᎆ) ETHIOPIC SYLLABLE BWEE	[2579 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1386, 0x003F };
    uint32_t const ces[9] = { 0x2579, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_224)
{
    // 1386 0061;	
    // (ᎆ) ETHIOPIC SYLLABLE BWEE	[2579 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1386, 0x0061 };
    uint32_t const ces[9] = { 0x2579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_225)
{
    // 1386 0041;	
    // (ᎆ) ETHIOPIC SYLLABLE BWEE	[2579 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1386, 0x0041 };
    uint32_t const ces[9] = { 0x2579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_226)
{
    // 1386 0062;	
    // (ᎆ) ETHIOPIC SYLLABLE BWEE	[2579 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1386, 0x0062 };
    uint32_t const ces[9] = { 0x2579, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_227)
{
    // 1387 0021;	
    // (ᎇ) ETHIOPIC SYLLABLE BWE	[257A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1387, 0x0021 };
    uint32_t const ces[9] = { 0x257A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_228)
{
    // 1387 003F;	
    // (ᎇ) ETHIOPIC SYLLABLE BWE	[257A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1387, 0x003F };
    uint32_t const ces[9] = { 0x257A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_229)
{
    // 1387 0061;	
    // (ᎇ) ETHIOPIC SYLLABLE BWE	[257A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1387, 0x0061 };
    uint32_t const ces[9] = { 0x257A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_230)
{
    // 1387 0041;	
    // (ᎇ) ETHIOPIC SYLLABLE BWE	[257A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1387, 0x0041 };
    uint32_t const ces[9] = { 0x257A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_231)
{
    // 1387 0062;	
    // (ᎇ) ETHIOPIC SYLLABLE BWE	[257A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1387, 0x0062 };
    uint32_t const ces[9] = { 0x257A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_232)
{
    // 2D85 0021;	
    // (ⶅ) ETHIOPIC SYLLABLE BOA	[257B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D85, 0x0021 };
    uint32_t const ces[9] = { 0x257B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_233)
{
    // 2D85 003F;	
    // (ⶅ) ETHIOPIC SYLLABLE BOA	[257B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D85, 0x003F };
    uint32_t const ces[9] = { 0x257B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_234)
{
    // 2D85 0061;	
    // (ⶅ) ETHIOPIC SYLLABLE BOA	[257B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D85, 0x0061 };
    uint32_t const ces[9] = { 0x257B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_235)
{
    // 2D85 0041;	
    // (ⶅ) ETHIOPIC SYLLABLE BOA	[257B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D85, 0x0041 };
    uint32_t const ces[9] = { 0x257B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_236)
{
    // 2D85 0062;	
    // (ⶅ) ETHIOPIC SYLLABLE BOA	[257B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D85, 0x0062 };
    uint32_t const ces[9] = { 0x257B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_237)
{
    // 1268 0021;	
    // (ቨ) ETHIOPIC SYLLABLE VA	[257C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1268, 0x0021 };
    uint32_t const ces[9] = { 0x257C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_238)
{
    // 1268 003F;	
    // (ቨ) ETHIOPIC SYLLABLE VA	[257C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1268, 0x003F };
    uint32_t const ces[9] = { 0x257C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_239)
{
    // 1268 0061;	
    // (ቨ) ETHIOPIC SYLLABLE VA	[257C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1268, 0x0061 };
    uint32_t const ces[9] = { 0x257C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_240)
{
    // 1268 0041;	
    // (ቨ) ETHIOPIC SYLLABLE VA	[257C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1268, 0x0041 };
    uint32_t const ces[9] = { 0x257C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_241)
{
    // 1268 0062;	
    // (ቨ) ETHIOPIC SYLLABLE VA	[257C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1268, 0x0062 };
    uint32_t const ces[9] = { 0x257C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_242)
{
    // 1269 0021;	
    // (ቩ) ETHIOPIC SYLLABLE VU	[257D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1269, 0x0021 };
    uint32_t const ces[9] = { 0x257D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_243)
{
    // 1269 003F;	
    // (ቩ) ETHIOPIC SYLLABLE VU	[257D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1269, 0x003F };
    uint32_t const ces[9] = { 0x257D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_244)
{
    // 1269 0061;	
    // (ቩ) ETHIOPIC SYLLABLE VU	[257D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1269, 0x0061 };
    uint32_t const ces[9] = { 0x257D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_245)
{
    // 1269 0041;	
    // (ቩ) ETHIOPIC SYLLABLE VU	[257D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1269, 0x0041 };
    uint32_t const ces[9] = { 0x257D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_246)
{
    // 1269 0062;	
    // (ቩ) ETHIOPIC SYLLABLE VU	[257D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1269, 0x0062 };
    uint32_t const ces[9] = { 0x257D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_247)
{
    // 126A 0021;	
    // (ቪ) ETHIOPIC SYLLABLE VI	[257E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126A, 0x0021 };
    uint32_t const ces[9] = { 0x257E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_248)
{
    // 126A 003F;	
    // (ቪ) ETHIOPIC SYLLABLE VI	[257E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126A, 0x003F };
    uint32_t const ces[9] = { 0x257E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_249)
{
    // 126A 0061;	
    // (ቪ) ETHIOPIC SYLLABLE VI	[257E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126A, 0x0061 };
    uint32_t const ces[9] = { 0x257E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_250)
{
    // 126A 0041;	
    // (ቪ) ETHIOPIC SYLLABLE VI	[257E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x126A, 0x0041 };
    uint32_t const ces[9] = { 0x257E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_251)
{
    // 126A 0062;	
    // (ቪ) ETHIOPIC SYLLABLE VI	[257E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126A, 0x0062 };
    uint32_t const ces[9] = { 0x257E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_252)
{
    // 126B 0021;	
    // (ቫ) ETHIOPIC SYLLABLE VAA	[257F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126B, 0x0021 };
    uint32_t const ces[9] = { 0x257F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_253)
{
    // 126B 003F;	
    // (ቫ) ETHIOPIC SYLLABLE VAA	[257F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126B, 0x003F };
    uint32_t const ces[9] = { 0x257F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_254)
{
    // 126B 0061;	
    // (ቫ) ETHIOPIC SYLLABLE VAA	[257F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126B, 0x0061 };
    uint32_t const ces[9] = { 0x257F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_255)
{
    // 126B 0041;	
    // (ቫ) ETHIOPIC SYLLABLE VAA	[257F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x126B, 0x0041 };
    uint32_t const ces[9] = { 0x257F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_256)
{
    // 126B 0062;	
    // (ቫ) ETHIOPIC SYLLABLE VAA	[257F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126B, 0x0062 };
    uint32_t const ces[9] = { 0x257F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_257)
{
    // 126C 0021;	
    // (ቬ) ETHIOPIC SYLLABLE VEE	[2580 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126C, 0x0021 };
    uint32_t const ces[9] = { 0x2580, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_258)
{
    // 126C 003F;	
    // (ቬ) ETHIOPIC SYLLABLE VEE	[2580 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126C, 0x003F };
    uint32_t const ces[9] = { 0x2580, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_259)
{
    // 126C 0061;	
    // (ቬ) ETHIOPIC SYLLABLE VEE	[2580 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126C, 0x0061 };
    uint32_t const ces[9] = { 0x2580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_260)
{
    // 126C 0041;	
    // (ቬ) ETHIOPIC SYLLABLE VEE	[2580 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x126C, 0x0041 };
    uint32_t const ces[9] = { 0x2580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_261)
{
    // 126C 0062;	
    // (ቬ) ETHIOPIC SYLLABLE VEE	[2580 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126C, 0x0062 };
    uint32_t const ces[9] = { 0x2580, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_262)
{
    // 126D 0021;	
    // (ቭ) ETHIOPIC SYLLABLE VE	[2581 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126D, 0x0021 };
    uint32_t const ces[9] = { 0x2581, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_263)
{
    // 126D 003F;	
    // (ቭ) ETHIOPIC SYLLABLE VE	[2581 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126D, 0x003F };
    uint32_t const ces[9] = { 0x2581, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_264)
{
    // 126D 0061;	
    // (ቭ) ETHIOPIC SYLLABLE VE	[2581 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126D, 0x0061 };
    uint32_t const ces[9] = { 0x2581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_265)
{
    // 126D 0041;	
    // (ቭ) ETHIOPIC SYLLABLE VE	[2581 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x126D, 0x0041 };
    uint32_t const ces[9] = { 0x2581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_266)
{
    // 126D 0062;	
    // (ቭ) ETHIOPIC SYLLABLE VE	[2581 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126D, 0x0062 };
    uint32_t const ces[9] = { 0x2581, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_267)
{
    // 126E 0021;	
    // (ቮ) ETHIOPIC SYLLABLE VO	[2582 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126E, 0x0021 };
    uint32_t const ces[9] = { 0x2582, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_268)
{
    // 126E 003F;	
    // (ቮ) ETHIOPIC SYLLABLE VO	[2582 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126E, 0x003F };
    uint32_t const ces[9] = { 0x2582, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_269)
{
    // 126E 0061;	
    // (ቮ) ETHIOPIC SYLLABLE VO	[2582 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126E, 0x0061 };
    uint32_t const ces[9] = { 0x2582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_270)
{
    // 126E 0041;	
    // (ቮ) ETHIOPIC SYLLABLE VO	[2582 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x126E, 0x0041 };
    uint32_t const ces[9] = { 0x2582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_271)
{
    // 126E 0062;	
    // (ቮ) ETHIOPIC SYLLABLE VO	[2582 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126E, 0x0062 };
    uint32_t const ces[9] = { 0x2582, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_272)
{
    // 126F 0021;	
    // (ቯ) ETHIOPIC SYLLABLE VWA	[2583 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126F, 0x0021 };
    uint32_t const ces[9] = { 0x2583, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_273)
{
    // 126F 003F;	
    // (ቯ) ETHIOPIC SYLLABLE VWA	[2583 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126F, 0x003F };
    uint32_t const ces[9] = { 0x2583, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_274)
{
    // 126F 0061;	
    // (ቯ) ETHIOPIC SYLLABLE VWA	[2583 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126F, 0x0061 };
    uint32_t const ces[9] = { 0x2583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_275)
{
    // 126F 0041;	
    // (ቯ) ETHIOPIC SYLLABLE VWA	[2583 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x126F, 0x0041 };
    uint32_t const ces[9] = { 0x2583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_276)
{
    // 126F 0062;	
    // (ቯ) ETHIOPIC SYLLABLE VWA	[2583 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x126F, 0x0062 };
    uint32_t const ces[9] = { 0x2583, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_277)
{
    // 1270 0021;	
    // (ተ) ETHIOPIC SYLLABLE TA	[2584 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1270, 0x0021 };
    uint32_t const ces[9] = { 0x2584, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_278)
{
    // 1270 003F;	
    // (ተ) ETHIOPIC SYLLABLE TA	[2584 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1270, 0x003F };
    uint32_t const ces[9] = { 0x2584, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_279)
{
    // 1270 0061;	
    // (ተ) ETHIOPIC SYLLABLE TA	[2584 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1270, 0x0061 };
    uint32_t const ces[9] = { 0x2584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_280)
{
    // 1270 0041;	
    // (ተ) ETHIOPIC SYLLABLE TA	[2584 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1270, 0x0041 };
    uint32_t const ces[9] = { 0x2584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_281)
{
    // 1270 0062;	
    // (ተ) ETHIOPIC SYLLABLE TA	[2584 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1270, 0x0062 };
    uint32_t const ces[9] = { 0x2584, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_282)
{
    // 1271 0021;	
    // (ቱ) ETHIOPIC SYLLABLE TU	[2585 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1271, 0x0021 };
    uint32_t const ces[9] = { 0x2585, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_283)
{
    // 1271 003F;	
    // (ቱ) ETHIOPIC SYLLABLE TU	[2585 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1271, 0x003F };
    uint32_t const ces[9] = { 0x2585, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_284)
{
    // 1271 0061;	
    // (ቱ) ETHIOPIC SYLLABLE TU	[2585 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1271, 0x0061 };
    uint32_t const ces[9] = { 0x2585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_285)
{
    // 1271 0041;	
    // (ቱ) ETHIOPIC SYLLABLE TU	[2585 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1271, 0x0041 };
    uint32_t const ces[9] = { 0x2585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_286)
{
    // 1271 0062;	
    // (ቱ) ETHIOPIC SYLLABLE TU	[2585 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1271, 0x0062 };
    uint32_t const ces[9] = { 0x2585, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_287)
{
    // 1272 0021;	
    // (ቲ) ETHIOPIC SYLLABLE TI	[2586 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1272, 0x0021 };
    uint32_t const ces[9] = { 0x2586, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_288)
{
    // 1272 003F;	
    // (ቲ) ETHIOPIC SYLLABLE TI	[2586 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1272, 0x003F };
    uint32_t const ces[9] = { 0x2586, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_289)
{
    // 1272 0061;	
    // (ቲ) ETHIOPIC SYLLABLE TI	[2586 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1272, 0x0061 };
    uint32_t const ces[9] = { 0x2586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_290)
{
    // 1272 0041;	
    // (ቲ) ETHIOPIC SYLLABLE TI	[2586 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1272, 0x0041 };
    uint32_t const ces[9] = { 0x2586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_291)
{
    // 1272 0062;	
    // (ቲ) ETHIOPIC SYLLABLE TI	[2586 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1272, 0x0062 };
    uint32_t const ces[9] = { 0x2586, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_292)
{
    // 1273 0021;	
    // (ታ) ETHIOPIC SYLLABLE TAA	[2587 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1273, 0x0021 };
    uint32_t const ces[9] = { 0x2587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_293)
{
    // 1273 003F;	
    // (ታ) ETHIOPIC SYLLABLE TAA	[2587 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1273, 0x003F };
    uint32_t const ces[9] = { 0x2587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_294)
{
    // 1273 0061;	
    // (ታ) ETHIOPIC SYLLABLE TAA	[2587 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1273, 0x0061 };
    uint32_t const ces[9] = { 0x2587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_295)
{
    // 1273 0041;	
    // (ታ) ETHIOPIC SYLLABLE TAA	[2587 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1273, 0x0041 };
    uint32_t const ces[9] = { 0x2587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_296)
{
    // 1273 0062;	
    // (ታ) ETHIOPIC SYLLABLE TAA	[2587 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1273, 0x0062 };
    uint32_t const ces[9] = { 0x2587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_297)
{
    // 1274 0021;	
    // (ቴ) ETHIOPIC SYLLABLE TEE	[2588 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1274, 0x0021 };
    uint32_t const ces[9] = { 0x2588, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_298)
{
    // 1274 003F;	
    // (ቴ) ETHIOPIC SYLLABLE TEE	[2588 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1274, 0x003F };
    uint32_t const ces[9] = { 0x2588, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_299)
{
    // 1274 0061;	
    // (ቴ) ETHIOPIC SYLLABLE TEE	[2588 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1274, 0x0061 };
    uint32_t const ces[9] = { 0x2588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_300)
{
    // 1274 0041;	
    // (ቴ) ETHIOPIC SYLLABLE TEE	[2588 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1274, 0x0041 };
    uint32_t const ces[9] = { 0x2588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_301)
{
    // 1274 0062;	
    // (ቴ) ETHIOPIC SYLLABLE TEE	[2588 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1274, 0x0062 };
    uint32_t const ces[9] = { 0x2588, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_302)
{
    // 1275 0021;	
    // (ት) ETHIOPIC SYLLABLE TE	[2589 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1275, 0x0021 };
    uint32_t const ces[9] = { 0x2589, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_303)
{
    // 1275 003F;	
    // (ት) ETHIOPIC SYLLABLE TE	[2589 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1275, 0x003F };
    uint32_t const ces[9] = { 0x2589, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_304)
{
    // 1275 0061;	
    // (ት) ETHIOPIC SYLLABLE TE	[2589 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1275, 0x0061 };
    uint32_t const ces[9] = { 0x2589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_305)
{
    // 1275 0041;	
    // (ት) ETHIOPIC SYLLABLE TE	[2589 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1275, 0x0041 };
    uint32_t const ces[9] = { 0x2589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_306)
{
    // 1275 0062;	
    // (ት) ETHIOPIC SYLLABLE TE	[2589 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1275, 0x0062 };
    uint32_t const ces[9] = { 0x2589, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_307)
{
    // 1276 0021;	
    // (ቶ) ETHIOPIC SYLLABLE TO	[258A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1276, 0x0021 };
    uint32_t const ces[9] = { 0x258A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_308)
{
    // 1276 003F;	
    // (ቶ) ETHIOPIC SYLLABLE TO	[258A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1276, 0x003F };
    uint32_t const ces[9] = { 0x258A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_309)
{
    // 1276 0061;	
    // (ቶ) ETHIOPIC SYLLABLE TO	[258A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1276, 0x0061 };
    uint32_t const ces[9] = { 0x258A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_310)
{
    // 1276 0041;	
    // (ቶ) ETHIOPIC SYLLABLE TO	[258A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1276, 0x0041 };
    uint32_t const ces[9] = { 0x258A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_311)
{
    // 1276 0062;	
    // (ቶ) ETHIOPIC SYLLABLE TO	[258A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1276, 0x0062 };
    uint32_t const ces[9] = { 0x258A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_312)
{
    // 1277 0021;	
    // (ቷ) ETHIOPIC SYLLABLE TWA	[258B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1277, 0x0021 };
    uint32_t const ces[9] = { 0x258B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_313)
{
    // 1277 003F;	
    // (ቷ) ETHIOPIC SYLLABLE TWA	[258B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1277, 0x003F };
    uint32_t const ces[9] = { 0x258B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_314)
{
    // 1277 0061;	
    // (ቷ) ETHIOPIC SYLLABLE TWA	[258B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1277, 0x0061 };
    uint32_t const ces[9] = { 0x258B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_315)
{
    // 1277 0041;	
    // (ቷ) ETHIOPIC SYLLABLE TWA	[258B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1277, 0x0041 };
    uint32_t const ces[9] = { 0x258B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_316)
{
    // 1277 0062;	
    // (ቷ) ETHIOPIC SYLLABLE TWA	[258B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1277, 0x0062 };
    uint32_t const ces[9] = { 0x258B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_317)
{
    // 2D86 0021;	
    // (ⶆ) ETHIOPIC SYLLABLE TOA	[258C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D86, 0x0021 };
    uint32_t const ces[9] = { 0x258C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_318)
{
    // 2D86 003F;	
    // (ⶆ) ETHIOPIC SYLLABLE TOA	[258C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D86, 0x003F };
    uint32_t const ces[9] = { 0x258C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_319)
{
    // 2D86 0061;	
    // (ⶆ) ETHIOPIC SYLLABLE TOA	[258C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D86, 0x0061 };
    uint32_t const ces[9] = { 0x258C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_320)
{
    // 2D86 0041;	
    // (ⶆ) ETHIOPIC SYLLABLE TOA	[258C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D86, 0x0041 };
    uint32_t const ces[9] = { 0x258C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_321)
{
    // 2D86 0062;	
    // (ⶆ) ETHIOPIC SYLLABLE TOA	[258C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D86, 0x0062 };
    uint32_t const ces[9] = { 0x258C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_322)
{
    // 1278 0021;	
    // (ቸ) ETHIOPIC SYLLABLE CA	[258D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1278, 0x0021 };
    uint32_t const ces[9] = { 0x258D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_323)
{
    // 1278 003F;	
    // (ቸ) ETHIOPIC SYLLABLE CA	[258D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1278, 0x003F };
    uint32_t const ces[9] = { 0x258D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_324)
{
    // 1278 0061;	
    // (ቸ) ETHIOPIC SYLLABLE CA	[258D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1278, 0x0061 };
    uint32_t const ces[9] = { 0x258D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_325)
{
    // 1278 0041;	
    // (ቸ) ETHIOPIC SYLLABLE CA	[258D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1278, 0x0041 };
    uint32_t const ces[9] = { 0x258D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_326)
{
    // 1278 0062;	
    // (ቸ) ETHIOPIC SYLLABLE CA	[258D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1278, 0x0062 };
    uint32_t const ces[9] = { 0x258D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_327)
{
    // 1279 0021;	
    // (ቹ) ETHIOPIC SYLLABLE CU	[258E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1279, 0x0021 };
    uint32_t const ces[9] = { 0x258E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_328)
{
    // 1279 003F;	
    // (ቹ) ETHIOPIC SYLLABLE CU	[258E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1279, 0x003F };
    uint32_t const ces[9] = { 0x258E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_329)
{
    // 1279 0061;	
    // (ቹ) ETHIOPIC SYLLABLE CU	[258E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1279, 0x0061 };
    uint32_t const ces[9] = { 0x258E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_330)
{
    // 1279 0041;	
    // (ቹ) ETHIOPIC SYLLABLE CU	[258E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1279, 0x0041 };
    uint32_t const ces[9] = { 0x258E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_331)
{
    // 1279 0062;	
    // (ቹ) ETHIOPIC SYLLABLE CU	[258E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1279, 0x0062 };
    uint32_t const ces[9] = { 0x258E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_332)
{
    // 127A 0021;	
    // (ቺ) ETHIOPIC SYLLABLE CI	[258F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127A, 0x0021 };
    uint32_t const ces[9] = { 0x258F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_333)
{
    // 127A 003F;	
    // (ቺ) ETHIOPIC SYLLABLE CI	[258F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127A, 0x003F };
    uint32_t const ces[9] = { 0x258F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_334)
{
    // 127A 0061;	
    // (ቺ) ETHIOPIC SYLLABLE CI	[258F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127A, 0x0061 };
    uint32_t const ces[9] = { 0x258F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_335)
{
    // 127A 0041;	
    // (ቺ) ETHIOPIC SYLLABLE CI	[258F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x127A, 0x0041 };
    uint32_t const ces[9] = { 0x258F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_336)
{
    // 127A 0062;	
    // (ቺ) ETHIOPIC SYLLABLE CI	[258F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127A, 0x0062 };
    uint32_t const ces[9] = { 0x258F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_337)
{
    // 127B 0021;	
    // (ቻ) ETHIOPIC SYLLABLE CAA	[2590 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127B, 0x0021 };
    uint32_t const ces[9] = { 0x2590, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_338)
{
    // 127B 003F;	
    // (ቻ) ETHIOPIC SYLLABLE CAA	[2590 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127B, 0x003F };
    uint32_t const ces[9] = { 0x2590, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_339)
{
    // 127B 0061;	
    // (ቻ) ETHIOPIC SYLLABLE CAA	[2590 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127B, 0x0061 };
    uint32_t const ces[9] = { 0x2590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_340)
{
    // 127B 0041;	
    // (ቻ) ETHIOPIC SYLLABLE CAA	[2590 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x127B, 0x0041 };
    uint32_t const ces[9] = { 0x2590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_341)
{
    // 127B 0062;	
    // (ቻ) ETHIOPIC SYLLABLE CAA	[2590 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127B, 0x0062 };
    uint32_t const ces[9] = { 0x2590, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_342)
{
    // 127C 0021;	
    // (ቼ) ETHIOPIC SYLLABLE CEE	[2591 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127C, 0x0021 };
    uint32_t const ces[9] = { 0x2591, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_343)
{
    // 127C 003F;	
    // (ቼ) ETHIOPIC SYLLABLE CEE	[2591 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127C, 0x003F };
    uint32_t const ces[9] = { 0x2591, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_344)
{
    // 127C 0061;	
    // (ቼ) ETHIOPIC SYLLABLE CEE	[2591 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127C, 0x0061 };
    uint32_t const ces[9] = { 0x2591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_345)
{
    // 127C 0041;	
    // (ቼ) ETHIOPIC SYLLABLE CEE	[2591 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x127C, 0x0041 };
    uint32_t const ces[9] = { 0x2591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_346)
{
    // 127C 0062;	
    // (ቼ) ETHIOPIC SYLLABLE CEE	[2591 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127C, 0x0062 };
    uint32_t const ces[9] = { 0x2591, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_347)
{
    // 127D 0021;	
    // (ች) ETHIOPIC SYLLABLE CE	[2592 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127D, 0x0021 };
    uint32_t const ces[9] = { 0x2592, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_348)
{
    // 127D 003F;	
    // (ች) ETHIOPIC SYLLABLE CE	[2592 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127D, 0x003F };
    uint32_t const ces[9] = { 0x2592, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_349)
{
    // 127D 0061;	
    // (ች) ETHIOPIC SYLLABLE CE	[2592 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127D, 0x0061 };
    uint32_t const ces[9] = { 0x2592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_350)
{
    // 127D 0041;	
    // (ች) ETHIOPIC SYLLABLE CE	[2592 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x127D, 0x0041 };
    uint32_t const ces[9] = { 0x2592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_351)
{
    // 127D 0062;	
    // (ች) ETHIOPIC SYLLABLE CE	[2592 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127D, 0x0062 };
    uint32_t const ces[9] = { 0x2592, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_352)
{
    // 127E 0021;	
    // (ቾ) ETHIOPIC SYLLABLE CO	[2593 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127E, 0x0021 };
    uint32_t const ces[9] = { 0x2593, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_353)
{
    // 127E 003F;	
    // (ቾ) ETHIOPIC SYLLABLE CO	[2593 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127E, 0x003F };
    uint32_t const ces[9] = { 0x2593, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_354)
{
    // 127E 0061;	
    // (ቾ) ETHIOPIC SYLLABLE CO	[2593 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127E, 0x0061 };
    uint32_t const ces[9] = { 0x2593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_355)
{
    // 127E 0041;	
    // (ቾ) ETHIOPIC SYLLABLE CO	[2593 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x127E, 0x0041 };
    uint32_t const ces[9] = { 0x2593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_356)
{
    // 127E 0062;	
    // (ቾ) ETHIOPIC SYLLABLE CO	[2593 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127E, 0x0062 };
    uint32_t const ces[9] = { 0x2593, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_357)
{
    // 127F 0021;	
    // (ቿ) ETHIOPIC SYLLABLE CWA	[2594 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127F, 0x0021 };
    uint32_t const ces[9] = { 0x2594, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_358)
{
    // 127F 003F;	
    // (ቿ) ETHIOPIC SYLLABLE CWA	[2594 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127F, 0x003F };
    uint32_t const ces[9] = { 0x2594, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_359)
{
    // 127F 0061;	
    // (ቿ) ETHIOPIC SYLLABLE CWA	[2594 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127F, 0x0061 };
    uint32_t const ces[9] = { 0x2594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_360)
{
    // 127F 0041;	
    // (ቿ) ETHIOPIC SYLLABLE CWA	[2594 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x127F, 0x0041 };
    uint32_t const ces[9] = { 0x2594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_361)
{
    // 127F 0062;	
    // (ቿ) ETHIOPIC SYLLABLE CWA	[2594 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x127F, 0x0062 };
    uint32_t const ces[9] = { 0x2594, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_362)
{
    // 2D87 0021;	
    // (ⶇ) ETHIOPIC SYLLABLE COA	[2595 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D87, 0x0021 };
    uint32_t const ces[9] = { 0x2595, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_363)
{
    // 2D87 003F;	
    // (ⶇ) ETHIOPIC SYLLABLE COA	[2595 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D87, 0x003F };
    uint32_t const ces[9] = { 0x2595, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_364)
{
    // 2D87 0061;	
    // (ⶇ) ETHIOPIC SYLLABLE COA	[2595 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D87, 0x0061 };
    uint32_t const ces[9] = { 0x2595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_365)
{
    // 2D87 0041;	
    // (ⶇ) ETHIOPIC SYLLABLE COA	[2595 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D87, 0x0041 };
    uint32_t const ces[9] = { 0x2595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_366)
{
    // 2D87 0062;	
    // (ⶇ) ETHIOPIC SYLLABLE COA	[2595 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D87, 0x0062 };
    uint32_t const ces[9] = { 0x2595, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_367)
{
    // 1280 0021;	
    // (ኀ) ETHIOPIC SYLLABLE XA	[2596 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1280, 0x0021 };
    uint32_t const ces[9] = { 0x2596, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_368)
{
    // 1280 003F;	
    // (ኀ) ETHIOPIC SYLLABLE XA	[2596 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1280, 0x003F };
    uint32_t const ces[9] = { 0x2596, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_369)
{
    // 1280 0061;	
    // (ኀ) ETHIOPIC SYLLABLE XA	[2596 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1280, 0x0061 };
    uint32_t const ces[9] = { 0x2596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_370)
{
    // 1280 0041;	
    // (ኀ) ETHIOPIC SYLLABLE XA	[2596 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1280, 0x0041 };
    uint32_t const ces[9] = { 0x2596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_371)
{
    // 1280 0062;	
    // (ኀ) ETHIOPIC SYLLABLE XA	[2596 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1280, 0x0062 };
    uint32_t const ces[9] = { 0x2596, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_372)
{
    // 1281 0021;	
    // (ኁ) ETHIOPIC SYLLABLE XU	[2597 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1281, 0x0021 };
    uint32_t const ces[9] = { 0x2597, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_373)
{
    // 1281 003F;	
    // (ኁ) ETHIOPIC SYLLABLE XU	[2597 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1281, 0x003F };
    uint32_t const ces[9] = { 0x2597, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_374)
{
    // 1281 0061;	
    // (ኁ) ETHIOPIC SYLLABLE XU	[2597 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1281, 0x0061 };
    uint32_t const ces[9] = { 0x2597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_375)
{
    // 1281 0041;	
    // (ኁ) ETHIOPIC SYLLABLE XU	[2597 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1281, 0x0041 };
    uint32_t const ces[9] = { 0x2597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_376)
{
    // 1281 0062;	
    // (ኁ) ETHIOPIC SYLLABLE XU	[2597 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1281, 0x0062 };
    uint32_t const ces[9] = { 0x2597, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_377)
{
    // 1282 0021;	
    // (ኂ) ETHIOPIC SYLLABLE XI	[2598 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1282, 0x0021 };
    uint32_t const ces[9] = { 0x2598, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_378)
{
    // 1282 003F;	
    // (ኂ) ETHIOPIC SYLLABLE XI	[2598 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1282, 0x003F };
    uint32_t const ces[9] = { 0x2598, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_379)
{
    // 1282 0061;	
    // (ኂ) ETHIOPIC SYLLABLE XI	[2598 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1282, 0x0061 };
    uint32_t const ces[9] = { 0x2598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_380)
{
    // 1282 0041;	
    // (ኂ) ETHIOPIC SYLLABLE XI	[2598 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1282, 0x0041 };
    uint32_t const ces[9] = { 0x2598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_381)
{
    // 1282 0062;	
    // (ኂ) ETHIOPIC SYLLABLE XI	[2598 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1282, 0x0062 };
    uint32_t const ces[9] = { 0x2598, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_382)
{
    // 1283 0021;	
    // (ኃ) ETHIOPIC SYLLABLE XAA	[2599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1283, 0x0021 };
    uint32_t const ces[9] = { 0x2599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_383)
{
    // 1283 003F;	
    // (ኃ) ETHIOPIC SYLLABLE XAA	[2599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1283, 0x003F };
    uint32_t const ces[9] = { 0x2599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_384)
{
    // 1283 0061;	
    // (ኃ) ETHIOPIC SYLLABLE XAA	[2599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1283, 0x0061 };
    uint32_t const ces[9] = { 0x2599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_385)
{
    // 1283 0041;	
    // (ኃ) ETHIOPIC SYLLABLE XAA	[2599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1283, 0x0041 };
    uint32_t const ces[9] = { 0x2599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_386)
{
    // 1283 0062;	
    // (ኃ) ETHIOPIC SYLLABLE XAA	[2599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1283, 0x0062 };
    uint32_t const ces[9] = { 0x2599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_387)
{
    // 1284 0021;	
    // (ኄ) ETHIOPIC SYLLABLE XEE	[259A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1284, 0x0021 };
    uint32_t const ces[9] = { 0x259A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_388)
{
    // 1284 003F;	
    // (ኄ) ETHIOPIC SYLLABLE XEE	[259A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1284, 0x003F };
    uint32_t const ces[9] = { 0x259A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_389)
{
    // 1284 0061;	
    // (ኄ) ETHIOPIC SYLLABLE XEE	[259A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1284, 0x0061 };
    uint32_t const ces[9] = { 0x259A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_390)
{
    // 1284 0041;	
    // (ኄ) ETHIOPIC SYLLABLE XEE	[259A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1284, 0x0041 };
    uint32_t const ces[9] = { 0x259A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_391)
{
    // 1284 0062;	
    // (ኄ) ETHIOPIC SYLLABLE XEE	[259A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1284, 0x0062 };
    uint32_t const ces[9] = { 0x259A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_392)
{
    // 1285 0021;	
    // (ኅ) ETHIOPIC SYLLABLE XE	[259B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1285, 0x0021 };
    uint32_t const ces[9] = { 0x259B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_393)
{
    // 1285 003F;	
    // (ኅ) ETHIOPIC SYLLABLE XE	[259B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1285, 0x003F };
    uint32_t const ces[9] = { 0x259B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_394)
{
    // 1285 0061;	
    // (ኅ) ETHIOPIC SYLLABLE XE	[259B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1285, 0x0061 };
    uint32_t const ces[9] = { 0x259B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_395)
{
    // 1285 0041;	
    // (ኅ) ETHIOPIC SYLLABLE XE	[259B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1285, 0x0041 };
    uint32_t const ces[9] = { 0x259B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_396)
{
    // 1285 0062;	
    // (ኅ) ETHIOPIC SYLLABLE XE	[259B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1285, 0x0062 };
    uint32_t const ces[9] = { 0x259B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_397)
{
    // 1286 0021;	
    // (ኆ) ETHIOPIC SYLLABLE XO	[259C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1286, 0x0021 };
    uint32_t const ces[9] = { 0x259C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_398)
{
    // 1286 003F;	
    // (ኆ) ETHIOPIC SYLLABLE XO	[259C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1286, 0x003F };
    uint32_t const ces[9] = { 0x259C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_399)
{
    // 1286 0061;	
    // (ኆ) ETHIOPIC SYLLABLE XO	[259C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1286, 0x0061 };
    uint32_t const ces[9] = { 0x259C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_400)
{
    // 1286 0041;	
    // (ኆ) ETHIOPIC SYLLABLE XO	[259C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1286, 0x0041 };
    uint32_t const ces[9] = { 0x259C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_401)
{
    // 1286 0062;	
    // (ኆ) ETHIOPIC SYLLABLE XO	[259C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1286, 0x0062 };
    uint32_t const ces[9] = { 0x259C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_402)
{
    // 1287 0021;	
    // (ኇ) ETHIOPIC SYLLABLE XOA	[259D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1287, 0x0021 };
    uint32_t const ces[9] = { 0x259D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_403)
{
    // 1287 003F;	
    // (ኇ) ETHIOPIC SYLLABLE XOA	[259D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1287, 0x003F };
    uint32_t const ces[9] = { 0x259D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_404)
{
    // 1287 0061;	
    // (ኇ) ETHIOPIC SYLLABLE XOA	[259D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1287, 0x0061 };
    uint32_t const ces[9] = { 0x259D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_405)
{
    // 1287 0041;	
    // (ኇ) ETHIOPIC SYLLABLE XOA	[259D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1287, 0x0041 };
    uint32_t const ces[9] = { 0x259D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_406)
{
    // 1287 0062;	
    // (ኇ) ETHIOPIC SYLLABLE XOA	[259D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1287, 0x0062 };
    uint32_t const ces[9] = { 0x259D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_407)
{
    // 1288 0021;	
    // (ኈ) ETHIOPIC SYLLABLE XWA	[259E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1288, 0x0021 };
    uint32_t const ces[9] = { 0x259E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_408)
{
    // 1288 003F;	
    // (ኈ) ETHIOPIC SYLLABLE XWA	[259E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1288, 0x003F };
    uint32_t const ces[9] = { 0x259E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_409)
{
    // 1288 0061;	
    // (ኈ) ETHIOPIC SYLLABLE XWA	[259E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1288, 0x0061 };
    uint32_t const ces[9] = { 0x259E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_410)
{
    // 1288 0041;	
    // (ኈ) ETHIOPIC SYLLABLE XWA	[259E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1288, 0x0041 };
    uint32_t const ces[9] = { 0x259E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_411)
{
    // 1288 0062;	
    // (ኈ) ETHIOPIC SYLLABLE XWA	[259E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1288, 0x0062 };
    uint32_t const ces[9] = { 0x259E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_412)
{
    // 128A 0021;	
    // (ኊ) ETHIOPIC SYLLABLE XWI	[259F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128A, 0x0021 };
    uint32_t const ces[9] = { 0x259F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_413)
{
    // 128A 003F;	
    // (ኊ) ETHIOPIC SYLLABLE XWI	[259F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128A, 0x003F };
    uint32_t const ces[9] = { 0x259F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_414)
{
    // 128A 0061;	
    // (ኊ) ETHIOPIC SYLLABLE XWI	[259F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128A, 0x0061 };
    uint32_t const ces[9] = { 0x259F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_415)
{
    // 128A 0041;	
    // (ኊ) ETHIOPIC SYLLABLE XWI	[259F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x128A, 0x0041 };
    uint32_t const ces[9] = { 0x259F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_416)
{
    // 128A 0062;	
    // (ኊ) ETHIOPIC SYLLABLE XWI	[259F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128A, 0x0062 };
    uint32_t const ces[9] = { 0x259F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_417)
{
    // 128B 0021;	
    // (ኋ) ETHIOPIC SYLLABLE XWAA	[25A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128B, 0x0021 };
    uint32_t const ces[9] = { 0x25A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_418)
{
    // 128B 003F;	
    // (ኋ) ETHIOPIC SYLLABLE XWAA	[25A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128B, 0x003F };
    uint32_t const ces[9] = { 0x25A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_419)
{
    // 128B 0061;	
    // (ኋ) ETHIOPIC SYLLABLE XWAA	[25A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128B, 0x0061 };
    uint32_t const ces[9] = { 0x25A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_420)
{
    // 128B 0041;	
    // (ኋ) ETHIOPIC SYLLABLE XWAA	[25A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x128B, 0x0041 };
    uint32_t const ces[9] = { 0x25A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_421)
{
    // 128B 0062;	
    // (ኋ) ETHIOPIC SYLLABLE XWAA	[25A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128B, 0x0062 };
    uint32_t const ces[9] = { 0x25A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_422)
{
    // 128C 0021;	
    // (ኌ) ETHIOPIC SYLLABLE XWEE	[25A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128C, 0x0021 };
    uint32_t const ces[9] = { 0x25A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_423)
{
    // 128C 003F;	
    // (ኌ) ETHIOPIC SYLLABLE XWEE	[25A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128C, 0x003F };
    uint32_t const ces[9] = { 0x25A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_424)
{
    // 128C 0061;	
    // (ኌ) ETHIOPIC SYLLABLE XWEE	[25A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128C, 0x0061 };
    uint32_t const ces[9] = { 0x25A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_425)
{
    // 128C 0041;	
    // (ኌ) ETHIOPIC SYLLABLE XWEE	[25A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x128C, 0x0041 };
    uint32_t const ces[9] = { 0x25A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_426)
{
    // 128C 0062;	
    // (ኌ) ETHIOPIC SYLLABLE XWEE	[25A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128C, 0x0062 };
    uint32_t const ces[9] = { 0x25A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_427)
{
    // 128D 0021;	
    // (ኍ) ETHIOPIC SYLLABLE XWE	[25A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128D, 0x0021 };
    uint32_t const ces[9] = { 0x25A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_428)
{
    // 128D 003F;	
    // (ኍ) ETHIOPIC SYLLABLE XWE	[25A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128D, 0x003F };
    uint32_t const ces[9] = { 0x25A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_429)
{
    // 128D 0061;	
    // (ኍ) ETHIOPIC SYLLABLE XWE	[25A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128D, 0x0061 };
    uint32_t const ces[9] = { 0x25A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_430)
{
    // 128D 0041;	
    // (ኍ) ETHIOPIC SYLLABLE XWE	[25A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x128D, 0x0041 };
    uint32_t const ces[9] = { 0x25A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_431)
{
    // 128D 0062;	
    // (ኍ) ETHIOPIC SYLLABLE XWE	[25A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x128D, 0x0062 };
    uint32_t const ces[9] = { 0x25A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_432)
{
    // 1290 0021;	
    // (ነ) ETHIOPIC SYLLABLE NA	[25A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1290, 0x0021 };
    uint32_t const ces[9] = { 0x25A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_433)
{
    // 1290 003F;	
    // (ነ) ETHIOPIC SYLLABLE NA	[25A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1290, 0x003F };
    uint32_t const ces[9] = { 0x25A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_434)
{
    // 1290 0061;	
    // (ነ) ETHIOPIC SYLLABLE NA	[25A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1290, 0x0061 };
    uint32_t const ces[9] = { 0x25A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_435)
{
    // 1290 0041;	
    // (ነ) ETHIOPIC SYLLABLE NA	[25A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1290, 0x0041 };
    uint32_t const ces[9] = { 0x25A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_436)
{
    // 1290 0062;	
    // (ነ) ETHIOPIC SYLLABLE NA	[25A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1290, 0x0062 };
    uint32_t const ces[9] = { 0x25A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_437)
{
    // 1291 0021;	
    // (ኑ) ETHIOPIC SYLLABLE NU	[25A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1291, 0x0021 };
    uint32_t const ces[9] = { 0x25A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_438)
{
    // 1291 003F;	
    // (ኑ) ETHIOPIC SYLLABLE NU	[25A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1291, 0x003F };
    uint32_t const ces[9] = { 0x25A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_439)
{
    // 1291 0061;	
    // (ኑ) ETHIOPIC SYLLABLE NU	[25A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1291, 0x0061 };
    uint32_t const ces[9] = { 0x25A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_440)
{
    // 1291 0041;	
    // (ኑ) ETHIOPIC SYLLABLE NU	[25A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1291, 0x0041 };
    uint32_t const ces[9] = { 0x25A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_441)
{
    // 1291 0062;	
    // (ኑ) ETHIOPIC SYLLABLE NU	[25A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1291, 0x0062 };
    uint32_t const ces[9] = { 0x25A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_442)
{
    // 1292 0021;	
    // (ኒ) ETHIOPIC SYLLABLE NI	[25A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1292, 0x0021 };
    uint32_t const ces[9] = { 0x25A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_443)
{
    // 1292 003F;	
    // (ኒ) ETHIOPIC SYLLABLE NI	[25A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1292, 0x003F };
    uint32_t const ces[9] = { 0x25A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_444)
{
    // 1292 0061;	
    // (ኒ) ETHIOPIC SYLLABLE NI	[25A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1292, 0x0061 };
    uint32_t const ces[9] = { 0x25A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_445)
{
    // 1292 0041;	
    // (ኒ) ETHIOPIC SYLLABLE NI	[25A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1292, 0x0041 };
    uint32_t const ces[9] = { 0x25A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_446)
{
    // 1292 0062;	
    // (ኒ) ETHIOPIC SYLLABLE NI	[25A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1292, 0x0062 };
    uint32_t const ces[9] = { 0x25A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_447)
{
    // 1293 0021;	
    // (ና) ETHIOPIC SYLLABLE NAA	[25A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1293, 0x0021 };
    uint32_t const ces[9] = { 0x25A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_448)
{
    // 1293 003F;	
    // (ና) ETHIOPIC SYLLABLE NAA	[25A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1293, 0x003F };
    uint32_t const ces[9] = { 0x25A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_449)
{
    // 1293 0061;	
    // (ና) ETHIOPIC SYLLABLE NAA	[25A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1293, 0x0061 };
    uint32_t const ces[9] = { 0x25A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_450)
{
    // 1293 0041;	
    // (ና) ETHIOPIC SYLLABLE NAA	[25A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1293, 0x0041 };
    uint32_t const ces[9] = { 0x25A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_451)
{
    // 1293 0062;	
    // (ና) ETHIOPIC SYLLABLE NAA	[25A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1293, 0x0062 };
    uint32_t const ces[9] = { 0x25A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_452)
{
    // 1294 0021;	
    // (ኔ) ETHIOPIC SYLLABLE NEE	[25A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1294, 0x0021 };
    uint32_t const ces[9] = { 0x25A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_453)
{
    // 1294 003F;	
    // (ኔ) ETHIOPIC SYLLABLE NEE	[25A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1294, 0x003F };
    uint32_t const ces[9] = { 0x25A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_454)
{
    // 1294 0061;	
    // (ኔ) ETHIOPIC SYLLABLE NEE	[25A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1294, 0x0061 };
    uint32_t const ces[9] = { 0x25A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_455)
{
    // 1294 0041;	
    // (ኔ) ETHIOPIC SYLLABLE NEE	[25A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1294, 0x0041 };
    uint32_t const ces[9] = { 0x25A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_456)
{
    // 1294 0062;	
    // (ኔ) ETHIOPIC SYLLABLE NEE	[25A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1294, 0x0062 };
    uint32_t const ces[9] = { 0x25A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_457)
{
    // 1295 0021;	
    // (ን) ETHIOPIC SYLLABLE NE	[25A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1295, 0x0021 };
    uint32_t const ces[9] = { 0x25A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_458)
{
    // 1295 003F;	
    // (ን) ETHIOPIC SYLLABLE NE	[25A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1295, 0x003F };
    uint32_t const ces[9] = { 0x25A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_459)
{
    // 1295 0061;	
    // (ን) ETHIOPIC SYLLABLE NE	[25A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1295, 0x0061 };
    uint32_t const ces[9] = { 0x25A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_460)
{
    // 1295 0041;	
    // (ን) ETHIOPIC SYLLABLE NE	[25A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1295, 0x0041 };
    uint32_t const ces[9] = { 0x25A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_461)
{
    // 1295 0062;	
    // (ን) ETHIOPIC SYLLABLE NE	[25A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1295, 0x0062 };
    uint32_t const ces[9] = { 0x25A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_462)
{
    // 1296 0021;	
    // (ኖ) ETHIOPIC SYLLABLE NO	[25A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1296, 0x0021 };
    uint32_t const ces[9] = { 0x25A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_463)
{
    // 1296 003F;	
    // (ኖ) ETHIOPIC SYLLABLE NO	[25A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1296, 0x003F };
    uint32_t const ces[9] = { 0x25A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_464)
{
    // 1296 0061;	
    // (ኖ) ETHIOPIC SYLLABLE NO	[25A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1296, 0x0061 };
    uint32_t const ces[9] = { 0x25A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_465)
{
    // 1296 0041;	
    // (ኖ) ETHIOPIC SYLLABLE NO	[25A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1296, 0x0041 };
    uint32_t const ces[9] = { 0x25A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_466)
{
    // 1296 0062;	
    // (ኖ) ETHIOPIC SYLLABLE NO	[25A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1296, 0x0062 };
    uint32_t const ces[9] = { 0x25A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_467)
{
    // 1297 0021;	
    // (ኗ) ETHIOPIC SYLLABLE NWA	[25AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1297, 0x0021 };
    uint32_t const ces[9] = { 0x25AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_468)
{
    // 1297 003F;	
    // (ኗ) ETHIOPIC SYLLABLE NWA	[25AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1297, 0x003F };
    uint32_t const ces[9] = { 0x25AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_469)
{
    // 1297 0061;	
    // (ኗ) ETHIOPIC SYLLABLE NWA	[25AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1297, 0x0061 };
    uint32_t const ces[9] = { 0x25AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_470)
{
    // 1297 0041;	
    // (ኗ) ETHIOPIC SYLLABLE NWA	[25AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1297, 0x0041 };
    uint32_t const ces[9] = { 0x25AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_471)
{
    // 1297 0062;	
    // (ኗ) ETHIOPIC SYLLABLE NWA	[25AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1297, 0x0062 };
    uint32_t const ces[9] = { 0x25AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_472)
{
    // 2D88 0021;	
    // (ⶈ) ETHIOPIC SYLLABLE NOA	[25AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D88, 0x0021 };
    uint32_t const ces[9] = { 0x25AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_473)
{
    // 2D88 003F;	
    // (ⶈ) ETHIOPIC SYLLABLE NOA	[25AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D88, 0x003F };
    uint32_t const ces[9] = { 0x25AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_474)
{
    // 2D88 0061;	
    // (ⶈ) ETHIOPIC SYLLABLE NOA	[25AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D88, 0x0061 };
    uint32_t const ces[9] = { 0x25AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_475)
{
    // 2D88 0041;	
    // (ⶈ) ETHIOPIC SYLLABLE NOA	[25AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D88, 0x0041 };
    uint32_t const ces[9] = { 0x25AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_476)
{
    // 2D88 0062;	
    // (ⶈ) ETHIOPIC SYLLABLE NOA	[25AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D88, 0x0062 };
    uint32_t const ces[9] = { 0x25AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_477)
{
    // 1298 0021;	
    // (ኘ) ETHIOPIC SYLLABLE NYA	[25AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1298, 0x0021 };
    uint32_t const ces[9] = { 0x25AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_478)
{
    // 1298 003F;	
    // (ኘ) ETHIOPIC SYLLABLE NYA	[25AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1298, 0x003F };
    uint32_t const ces[9] = { 0x25AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_479)
{
    // 1298 0061;	
    // (ኘ) ETHIOPIC SYLLABLE NYA	[25AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1298, 0x0061 };
    uint32_t const ces[9] = { 0x25AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_480)
{
    // 1298 0041;	
    // (ኘ) ETHIOPIC SYLLABLE NYA	[25AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1298, 0x0041 };
    uint32_t const ces[9] = { 0x25AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_481)
{
    // 1298 0062;	
    // (ኘ) ETHIOPIC SYLLABLE NYA	[25AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1298, 0x0062 };
    uint32_t const ces[9] = { 0x25AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_482)
{
    // 1299 0021;	
    // (ኙ) ETHIOPIC SYLLABLE NYU	[25AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1299, 0x0021 };
    uint32_t const ces[9] = { 0x25AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_483)
{
    // 1299 003F;	
    // (ኙ) ETHIOPIC SYLLABLE NYU	[25AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1299, 0x003F };
    uint32_t const ces[9] = { 0x25AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_484)
{
    // 1299 0061;	
    // (ኙ) ETHIOPIC SYLLABLE NYU	[25AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1299, 0x0061 };
    uint32_t const ces[9] = { 0x25AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_485)
{
    // 1299 0041;	
    // (ኙ) ETHIOPIC SYLLABLE NYU	[25AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1299, 0x0041 };
    uint32_t const ces[9] = { 0x25AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_486)
{
    // 1299 0062;	
    // (ኙ) ETHIOPIC SYLLABLE NYU	[25AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1299, 0x0062 };
    uint32_t const ces[9] = { 0x25AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_487)
{
    // 129A 0021;	
    // (ኚ) ETHIOPIC SYLLABLE NYI	[25AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129A, 0x0021 };
    uint32_t const ces[9] = { 0x25AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_488)
{
    // 129A 003F;	
    // (ኚ) ETHIOPIC SYLLABLE NYI	[25AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129A, 0x003F };
    uint32_t const ces[9] = { 0x25AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_489)
{
    // 129A 0061;	
    // (ኚ) ETHIOPIC SYLLABLE NYI	[25AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129A, 0x0061 };
    uint32_t const ces[9] = { 0x25AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_490)
{
    // 129A 0041;	
    // (ኚ) ETHIOPIC SYLLABLE NYI	[25AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x129A, 0x0041 };
    uint32_t const ces[9] = { 0x25AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_491)
{
    // 129A 0062;	
    // (ኚ) ETHIOPIC SYLLABLE NYI	[25AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129A, 0x0062 };
    uint32_t const ces[9] = { 0x25AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_492)
{
    // 129B 0021;	
    // (ኛ) ETHIOPIC SYLLABLE NYAA	[25AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129B, 0x0021 };
    uint32_t const ces[9] = { 0x25AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_493)
{
    // 129B 003F;	
    // (ኛ) ETHIOPIC SYLLABLE NYAA	[25AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129B, 0x003F };
    uint32_t const ces[9] = { 0x25AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_494)
{
    // 129B 0061;	
    // (ኛ) ETHIOPIC SYLLABLE NYAA	[25AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129B, 0x0061 };
    uint32_t const ces[9] = { 0x25AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_495)
{
    // 129B 0041;	
    // (ኛ) ETHIOPIC SYLLABLE NYAA	[25AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x129B, 0x0041 };
    uint32_t const ces[9] = { 0x25AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_496)
{
    // 129B 0062;	
    // (ኛ) ETHIOPIC SYLLABLE NYAA	[25AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129B, 0x0062 };
    uint32_t const ces[9] = { 0x25AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_497)
{
    // 129C 0021;	
    // (ኜ) ETHIOPIC SYLLABLE NYEE	[25B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129C, 0x0021 };
    uint32_t const ces[9] = { 0x25B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_498)
{
    // 129C 003F;	
    // (ኜ) ETHIOPIC SYLLABLE NYEE	[25B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129C, 0x003F };
    uint32_t const ces[9] = { 0x25B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_161_499)
{
    // 129C 0061;	
    // (ኜ) ETHIOPIC SYLLABLE NYEE	[25B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x129C, 0x0061 };
    uint32_t const ces[9] = { 0x25B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

