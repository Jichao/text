// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkc_029_000)
{
    // B938;B938;1105 1170 11BF;B938;1105 1170 11BF; 
    // (뤸; 뤸; 뤸; 뤸; 뤸; ) HANGUL SYLLABLE RWEK
    {
        std::array<uint32_t, 1> const source = {{ 0xB938 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB938 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_001)
{
    // B939;B939;1105 1170 11C0;B939;1105 1170 11C0; 
    // (뤹; 뤹; 뤹; 뤹; 뤹; ) HANGUL SYLLABLE RWET
    {
        std::array<uint32_t, 1> const source = {{ 0xB939 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB939 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_002)
{
    // B93A;B93A;1105 1170 11C1;B93A;1105 1170 11C1; 
    // (뤺; 뤺; 뤺; 뤺; 뤺; ) HANGUL SYLLABLE RWEP
    {
        std::array<uint32_t, 1> const source = {{ 0xB93A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB93A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_003)
{
    // B93B;B93B;1105 1170 11C2;B93B;1105 1170 11C2; 
    // (뤻; 뤻; 뤻; 뤻; 뤻; ) HANGUL SYLLABLE RWEH
    {
        std::array<uint32_t, 1> const source = {{ 0xB93B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB93B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_004)
{
    // B93C;B93C;1105 1171;B93C;1105 1171; 
    // (뤼; 뤼; 뤼; 뤼; 뤼; ) HANGUL SYLLABLE RWI
    {
        std::array<uint32_t, 1> const source = {{ 0xB93C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB93C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_005)
{
    // B93D;B93D;1105 1171 11A8;B93D;1105 1171 11A8; 
    // (뤽; 뤽; 뤽; 뤽; 뤽; ) HANGUL SYLLABLE RWIG
    {
        std::array<uint32_t, 1> const source = {{ 0xB93D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB93D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_006)
{
    // B93E;B93E;1105 1171 11A9;B93E;1105 1171 11A9; 
    // (뤾; 뤾; 뤾; 뤾; 뤾; ) HANGUL SYLLABLE RWIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB93E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB93E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_007)
{
    // B93F;B93F;1105 1171 11AA;B93F;1105 1171 11AA; 
    // (뤿; 뤿; 뤿; 뤿; 뤿; ) HANGUL SYLLABLE RWIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB93F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB93F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_008)
{
    // B940;B940;1105 1171 11AB;B940;1105 1171 11AB; 
    // (륀; 륀; 륀; 륀; 륀; ) HANGUL SYLLABLE RWIN
    {
        std::array<uint32_t, 1> const source = {{ 0xB940 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB940 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_009)
{
    // B941;B941;1105 1171 11AC;B941;1105 1171 11AC; 
    // (륁; 륁; 륁; 륁; 륁; ) HANGUL SYLLABLE RWINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB941 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB941 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_010)
{
    // B942;B942;1105 1171 11AD;B942;1105 1171 11AD; 
    // (륂; 륂; 륂; 륂; 륂; ) HANGUL SYLLABLE RWINH
    {
        std::array<uint32_t, 1> const source = {{ 0xB942 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB942 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_011)
{
    // B943;B943;1105 1171 11AE;B943;1105 1171 11AE; 
    // (륃; 륃; 륃; 륃; 륃; ) HANGUL SYLLABLE RWID
    {
        std::array<uint32_t, 1> const source = {{ 0xB943 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB943 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_012)
{
    // B944;B944;1105 1171 11AF;B944;1105 1171 11AF; 
    // (륄; 륄; 륄; 륄; 륄; ) HANGUL SYLLABLE RWIL
    {
        std::array<uint32_t, 1> const source = {{ 0xB944 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB944 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_013)
{
    // B945;B945;1105 1171 11B0;B945;1105 1171 11B0; 
    // (륅; 륅; 륅; 륅; 륅; ) HANGUL SYLLABLE RWILG
    {
        std::array<uint32_t, 1> const source = {{ 0xB945 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB945 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_014)
{
    // B946;B946;1105 1171 11B1;B946;1105 1171 11B1; 
    // (륆; 륆; 륆; 륆; 륆; ) HANGUL SYLLABLE RWILM
    {
        std::array<uint32_t, 1> const source = {{ 0xB946 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB946 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_015)
{
    // B947;B947;1105 1171 11B2;B947;1105 1171 11B2; 
    // (륇; 륇; 륇; 륇; 륇; ) HANGUL SYLLABLE RWILB
    {
        std::array<uint32_t, 1> const source = {{ 0xB947 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB947 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_016)
{
    // B948;B948;1105 1171 11B3;B948;1105 1171 11B3; 
    // (륈; 륈; 륈; 륈; 륈; ) HANGUL SYLLABLE RWILS
    {
        std::array<uint32_t, 1> const source = {{ 0xB948 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB948 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_017)
{
    // B949;B949;1105 1171 11B4;B949;1105 1171 11B4; 
    // (륉; 륉; 륉; 륉; 륉; ) HANGUL SYLLABLE RWILT
    {
        std::array<uint32_t, 1> const source = {{ 0xB949 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB949 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_018)
{
    // B94A;B94A;1105 1171 11B5;B94A;1105 1171 11B5; 
    // (륊; 륊; 륊; 륊; 륊; ) HANGUL SYLLABLE RWILP
    {
        std::array<uint32_t, 1> const source = {{ 0xB94A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB94A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_019)
{
    // B94B;B94B;1105 1171 11B6;B94B;1105 1171 11B6; 
    // (륋; 륋; 륋; 륋; 륋; ) HANGUL SYLLABLE RWILH
    {
        std::array<uint32_t, 1> const source = {{ 0xB94B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB94B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_020)
{
    // B94C;B94C;1105 1171 11B7;B94C;1105 1171 11B7; 
    // (륌; 륌; 륌; 륌; 륌; ) HANGUL SYLLABLE RWIM
    {
        std::array<uint32_t, 1> const source = {{ 0xB94C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB94C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_021)
{
    // B94D;B94D;1105 1171 11B8;B94D;1105 1171 11B8; 
    // (륍; 륍; 륍; 륍; 륍; ) HANGUL SYLLABLE RWIB
    {
        std::array<uint32_t, 1> const source = {{ 0xB94D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB94D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_022)
{
    // B94E;B94E;1105 1171 11B9;B94E;1105 1171 11B9; 
    // (륎; 륎; 륎; 륎; 륎; ) HANGUL SYLLABLE RWIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB94E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB94E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_023)
{
    // B94F;B94F;1105 1171 11BA;B94F;1105 1171 11BA; 
    // (륏; 륏; 륏; 륏; 륏; ) HANGUL SYLLABLE RWIS
    {
        std::array<uint32_t, 1> const source = {{ 0xB94F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB94F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_024)
{
    // B950;B950;1105 1171 11BB;B950;1105 1171 11BB; 
    // (륐; 륐; 륐; 륐; 륐; ) HANGUL SYLLABLE RWISS
    {
        std::array<uint32_t, 1> const source = {{ 0xB950 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB950 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_025)
{
    // B951;B951;1105 1171 11BC;B951;1105 1171 11BC; 
    // (륑; 륑; 륑; 륑; 륑; ) HANGUL SYLLABLE RWING
    {
        std::array<uint32_t, 1> const source = {{ 0xB951 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB951 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_026)
{
    // B952;B952;1105 1171 11BD;B952;1105 1171 11BD; 
    // (륒; 륒; 륒; 륒; 륒; ) HANGUL SYLLABLE RWIJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB952 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB952 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_027)
{
    // B953;B953;1105 1171 11BE;B953;1105 1171 11BE; 
    // (륓; 륓; 륓; 륓; 륓; ) HANGUL SYLLABLE RWIC
    {
        std::array<uint32_t, 1> const source = {{ 0xB953 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB953 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_028)
{
    // B954;B954;1105 1171 11BF;B954;1105 1171 11BF; 
    // (륔; 륔; 륔; 륔; 륔; ) HANGUL SYLLABLE RWIK
    {
        std::array<uint32_t, 1> const source = {{ 0xB954 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB954 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_029)
{
    // B955;B955;1105 1171 11C0;B955;1105 1171 11C0; 
    // (륕; 륕; 륕; 륕; 륕; ) HANGUL SYLLABLE RWIT
    {
        std::array<uint32_t, 1> const source = {{ 0xB955 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB955 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_030)
{
    // B956;B956;1105 1171 11C1;B956;1105 1171 11C1; 
    // (륖; 륖; 륖; 륖; 륖; ) HANGUL SYLLABLE RWIP
    {
        std::array<uint32_t, 1> const source = {{ 0xB956 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB956 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_031)
{
    // B957;B957;1105 1171 11C2;B957;1105 1171 11C2; 
    // (륗; 륗; 륗; 륗; 륗; ) HANGUL SYLLABLE RWIH
    {
        std::array<uint32_t, 1> const source = {{ 0xB957 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB957 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_032)
{
    // B958;B958;1105 1172;B958;1105 1172; 
    // (류; 류; 류; 류; 류; ) HANGUL SYLLABLE RYU
    {
        std::array<uint32_t, 1> const source = {{ 0xB958 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB958 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_033)
{
    // B959;B959;1105 1172 11A8;B959;1105 1172 11A8; 
    // (륙; 륙; 륙; 륙; 륙; ) HANGUL SYLLABLE RYUG
    {
        std::array<uint32_t, 1> const source = {{ 0xB959 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB959 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_034)
{
    // B95A;B95A;1105 1172 11A9;B95A;1105 1172 11A9; 
    // (륚; 륚; 륚; 륚; 륚; ) HANGUL SYLLABLE RYUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB95A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB95A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_035)
{
    // B95B;B95B;1105 1172 11AA;B95B;1105 1172 11AA; 
    // (륛; 륛; 륛; 륛; 륛; ) HANGUL SYLLABLE RYUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB95B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB95B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_036)
{
    // B95C;B95C;1105 1172 11AB;B95C;1105 1172 11AB; 
    // (륜; 륜; 륜; 륜; 륜; ) HANGUL SYLLABLE RYUN
    {
        std::array<uint32_t, 1> const source = {{ 0xB95C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB95C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_037)
{
    // B95D;B95D;1105 1172 11AC;B95D;1105 1172 11AC; 
    // (륝; 륝; 륝; 륝; 륝; ) HANGUL SYLLABLE RYUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB95D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB95D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_038)
{
    // B95E;B95E;1105 1172 11AD;B95E;1105 1172 11AD; 
    // (륞; 륞; 륞; 륞; 륞; ) HANGUL SYLLABLE RYUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xB95E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB95E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_039)
{
    // B95F;B95F;1105 1172 11AE;B95F;1105 1172 11AE; 
    // (륟; 륟; 륟; 륟; 륟; ) HANGUL SYLLABLE RYUD
    {
        std::array<uint32_t, 1> const source = {{ 0xB95F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB95F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_040)
{
    // B960;B960;1105 1172 11AF;B960;1105 1172 11AF; 
    // (률; 률; 률; 률; 률; ) HANGUL SYLLABLE RYUL
    {
        std::array<uint32_t, 1> const source = {{ 0xB960 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB960 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_041)
{
    // B961;B961;1105 1172 11B0;B961;1105 1172 11B0; 
    // (륡; 륡; 륡; 륡; 륡; ) HANGUL SYLLABLE RYULG
    {
        std::array<uint32_t, 1> const source = {{ 0xB961 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB961 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_042)
{
    // B962;B962;1105 1172 11B1;B962;1105 1172 11B1; 
    // (륢; 륢; 륢; 륢; 륢; ) HANGUL SYLLABLE RYULM
    {
        std::array<uint32_t, 1> const source = {{ 0xB962 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB962 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_043)
{
    // B963;B963;1105 1172 11B2;B963;1105 1172 11B2; 
    // (륣; 륣; 륣; 륣; 륣; ) HANGUL SYLLABLE RYULB
    {
        std::array<uint32_t, 1> const source = {{ 0xB963 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB963 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_044)
{
    // B964;B964;1105 1172 11B3;B964;1105 1172 11B3; 
    // (륤; 륤; 륤; 륤; 륤; ) HANGUL SYLLABLE RYULS
    {
        std::array<uint32_t, 1> const source = {{ 0xB964 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB964 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_045)
{
    // B965;B965;1105 1172 11B4;B965;1105 1172 11B4; 
    // (륥; 륥; 륥; 륥; 륥; ) HANGUL SYLLABLE RYULT
    {
        std::array<uint32_t, 1> const source = {{ 0xB965 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB965 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_046)
{
    // B966;B966;1105 1172 11B5;B966;1105 1172 11B5; 
    // (륦; 륦; 륦; 륦; 륦; ) HANGUL SYLLABLE RYULP
    {
        std::array<uint32_t, 1> const source = {{ 0xB966 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB966 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_047)
{
    // B967;B967;1105 1172 11B6;B967;1105 1172 11B6; 
    // (륧; 륧; 륧; 륧; 륧; ) HANGUL SYLLABLE RYULH
    {
        std::array<uint32_t, 1> const source = {{ 0xB967 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB967 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_048)
{
    // B968;B968;1105 1172 11B7;B968;1105 1172 11B7; 
    // (륨; 륨; 륨; 륨; 륨; ) HANGUL SYLLABLE RYUM
    {
        std::array<uint32_t, 1> const source = {{ 0xB968 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB968 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_049)
{
    // B969;B969;1105 1172 11B8;B969;1105 1172 11B8; 
    // (륩; 륩; 륩; 륩; 륩; ) HANGUL SYLLABLE RYUB
    {
        std::array<uint32_t, 1> const source = {{ 0xB969 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB969 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_050)
{
    // B96A;B96A;1105 1172 11B9;B96A;1105 1172 11B9; 
    // (륪; 륪; 륪; 륪; 륪; ) HANGUL SYLLABLE RYUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB96A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB96A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_051)
{
    // B96B;B96B;1105 1172 11BA;B96B;1105 1172 11BA; 
    // (륫; 륫; 륫; 륫; 륫; ) HANGUL SYLLABLE RYUS
    {
        std::array<uint32_t, 1> const source = {{ 0xB96B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB96B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_052)
{
    // B96C;B96C;1105 1172 11BB;B96C;1105 1172 11BB; 
    // (륬; 륬; 륬; 륬; 륬; ) HANGUL SYLLABLE RYUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB96C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB96C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_053)
{
    // B96D;B96D;1105 1172 11BC;B96D;1105 1172 11BC; 
    // (륭; 륭; 륭; 륭; 륭; ) HANGUL SYLLABLE RYUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xB96D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB96D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_054)
{
    // B96E;B96E;1105 1172 11BD;B96E;1105 1172 11BD; 
    // (륮; 륮; 륮; 륮; 륮; ) HANGUL SYLLABLE RYUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB96E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB96E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_055)
{
    // B96F;B96F;1105 1172 11BE;B96F;1105 1172 11BE; 
    // (륯; 륯; 륯; 륯; 륯; ) HANGUL SYLLABLE RYUC
    {
        std::array<uint32_t, 1> const source = {{ 0xB96F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB96F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_056)
{
    // B970;B970;1105 1172 11BF;B970;1105 1172 11BF; 
    // (륰; 륰; 륰; 륰; 륰; ) HANGUL SYLLABLE RYUK
    {
        std::array<uint32_t, 1> const source = {{ 0xB970 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB970 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_057)
{
    // B971;B971;1105 1172 11C0;B971;1105 1172 11C0; 
    // (륱; 륱; 륱; 륱; 륱; ) HANGUL SYLLABLE RYUT
    {
        std::array<uint32_t, 1> const source = {{ 0xB971 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB971 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_058)
{
    // B972;B972;1105 1172 11C1;B972;1105 1172 11C1; 
    // (륲; 륲; 륲; 륲; 륲; ) HANGUL SYLLABLE RYUP
    {
        std::array<uint32_t, 1> const source = {{ 0xB972 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB972 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_059)
{
    // B973;B973;1105 1172 11C2;B973;1105 1172 11C2; 
    // (륳; 륳; 륳; 륳; 륳; ) HANGUL SYLLABLE RYUH
    {
        std::array<uint32_t, 1> const source = {{ 0xB973 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB973 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_060)
{
    // B974;B974;1105 1173;B974;1105 1173; 
    // (르; 르; 르; 르; 르; ) HANGUL SYLLABLE REU
    {
        std::array<uint32_t, 1> const source = {{ 0xB974 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB974 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_061)
{
    // B975;B975;1105 1173 11A8;B975;1105 1173 11A8; 
    // (륵; 륵; 륵; 륵; 륵; ) HANGUL SYLLABLE REUG
    {
        std::array<uint32_t, 1> const source = {{ 0xB975 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB975 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_062)
{
    // B976;B976;1105 1173 11A9;B976;1105 1173 11A9; 
    // (륶; 륶; 륶; 륶; 륶; ) HANGUL SYLLABLE REUGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB976 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB976 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_063)
{
    // B977;B977;1105 1173 11AA;B977;1105 1173 11AA; 
    // (륷; 륷; 륷; 륷; 륷; ) HANGUL SYLLABLE REUGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB977 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB977 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_064)
{
    // B978;B978;1105 1173 11AB;B978;1105 1173 11AB; 
    // (른; 른; 른; 른; 른; ) HANGUL SYLLABLE REUN
    {
        std::array<uint32_t, 1> const source = {{ 0xB978 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB978 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_065)
{
    // B979;B979;1105 1173 11AC;B979;1105 1173 11AC; 
    // (륹; 륹; 륹; 륹; 륹; ) HANGUL SYLLABLE REUNJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB979 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB979 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_066)
{
    // B97A;B97A;1105 1173 11AD;B97A;1105 1173 11AD; 
    // (륺; 륺; 륺; 륺; 륺; ) HANGUL SYLLABLE REUNH
    {
        std::array<uint32_t, 1> const source = {{ 0xB97A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB97A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_067)
{
    // B97B;B97B;1105 1173 11AE;B97B;1105 1173 11AE; 
    // (륻; 륻; 륻; 륻; 륻; ) HANGUL SYLLABLE REUD
    {
        std::array<uint32_t, 1> const source = {{ 0xB97B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB97B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_068)
{
    // B97C;B97C;1105 1173 11AF;B97C;1105 1173 11AF; 
    // (를; 를; 를; 를; 를; ) HANGUL SYLLABLE REUL
    {
        std::array<uint32_t, 1> const source = {{ 0xB97C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB97C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_069)
{
    // B97D;B97D;1105 1173 11B0;B97D;1105 1173 11B0; 
    // (륽; 륽; 륽; 륽; 륽; ) HANGUL SYLLABLE REULG
    {
        std::array<uint32_t, 1> const source = {{ 0xB97D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB97D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_070)
{
    // B97E;B97E;1105 1173 11B1;B97E;1105 1173 11B1; 
    // (륾; 륾; 륾; 륾; 륾; ) HANGUL SYLLABLE REULM
    {
        std::array<uint32_t, 1> const source = {{ 0xB97E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB97E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_071)
{
    // B97F;B97F;1105 1173 11B2;B97F;1105 1173 11B2; 
    // (륿; 륿; 륿; 륿; 륿; ) HANGUL SYLLABLE REULB
    {
        std::array<uint32_t, 1> const source = {{ 0xB97F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB97F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_072)
{
    // B980;B980;1105 1173 11B3;B980;1105 1173 11B3; 
    // (릀; 릀; 릀; 릀; 릀; ) HANGUL SYLLABLE REULS
    {
        std::array<uint32_t, 1> const source = {{ 0xB980 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB980 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_073)
{
    // B981;B981;1105 1173 11B4;B981;1105 1173 11B4; 
    // (릁; 릁; 릁; 릁; 릁; ) HANGUL SYLLABLE REULT
    {
        std::array<uint32_t, 1> const source = {{ 0xB981 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB981 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_074)
{
    // B982;B982;1105 1173 11B5;B982;1105 1173 11B5; 
    // (릂; 릂; 릂; 릂; 릂; ) HANGUL SYLLABLE REULP
    {
        std::array<uint32_t, 1> const source = {{ 0xB982 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB982 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_075)
{
    // B983;B983;1105 1173 11B6;B983;1105 1173 11B6; 
    // (릃; 릃; 릃; 릃; 릃; ) HANGUL SYLLABLE REULH
    {
        std::array<uint32_t, 1> const source = {{ 0xB983 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB983 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_076)
{
    // B984;B984;1105 1173 11B7;B984;1105 1173 11B7; 
    // (름; 름; 름; 름; 름; ) HANGUL SYLLABLE REUM
    {
        std::array<uint32_t, 1> const source = {{ 0xB984 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB984 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_077)
{
    // B985;B985;1105 1173 11B8;B985;1105 1173 11B8; 
    // (릅; 릅; 릅; 릅; 릅; ) HANGUL SYLLABLE REUB
    {
        std::array<uint32_t, 1> const source = {{ 0xB985 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB985 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_078)
{
    // B986;B986;1105 1173 11B9;B986;1105 1173 11B9; 
    // (릆; 릆; 릆; 릆; 릆; ) HANGUL SYLLABLE REUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB986 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB986 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_079)
{
    // B987;B987;1105 1173 11BA;B987;1105 1173 11BA; 
    // (릇; 릇; 릇; 릇; 릇; ) HANGUL SYLLABLE REUS
    {
        std::array<uint32_t, 1> const source = {{ 0xB987 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB987 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_080)
{
    // B988;B988;1105 1173 11BB;B988;1105 1173 11BB; 
    // (릈; 릈; 릈; 릈; 릈; ) HANGUL SYLLABLE REUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xB988 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB988 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_081)
{
    // B989;B989;1105 1173 11BC;B989;1105 1173 11BC; 
    // (릉; 릉; 릉; 릉; 릉; ) HANGUL SYLLABLE REUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xB989 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB989 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_082)
{
    // B98A;B98A;1105 1173 11BD;B98A;1105 1173 11BD; 
    // (릊; 릊; 릊; 릊; 릊; ) HANGUL SYLLABLE REUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB98A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB98A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_083)
{
    // B98B;B98B;1105 1173 11BE;B98B;1105 1173 11BE; 
    // (릋; 릋; 릋; 릋; 릋; ) HANGUL SYLLABLE REUC
    {
        std::array<uint32_t, 1> const source = {{ 0xB98B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB98B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_084)
{
    // B98C;B98C;1105 1173 11BF;B98C;1105 1173 11BF; 
    // (릌; 릌; 릌; 릌; 릌; ) HANGUL SYLLABLE REUK
    {
        std::array<uint32_t, 1> const source = {{ 0xB98C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB98C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_085)
{
    // B98D;B98D;1105 1173 11C0;B98D;1105 1173 11C0; 
    // (릍; 릍; 릍; 릍; 릍; ) HANGUL SYLLABLE REUT
    {
        std::array<uint32_t, 1> const source = {{ 0xB98D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB98D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_086)
{
    // B98E;B98E;1105 1173 11C1;B98E;1105 1173 11C1; 
    // (릎; 릎; 릎; 릎; 릎; ) HANGUL SYLLABLE REUP
    {
        std::array<uint32_t, 1> const source = {{ 0xB98E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB98E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_087)
{
    // B98F;B98F;1105 1173 11C2;B98F;1105 1173 11C2; 
    // (릏; 릏; 릏; 릏; 릏; ) HANGUL SYLLABLE REUH
    {
        std::array<uint32_t, 1> const source = {{ 0xB98F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB98F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_088)
{
    // B990;B990;1105 1174;B990;1105 1174; 
    // (릐; 릐; 릐; 릐; 릐; ) HANGUL SYLLABLE RYI
    {
        std::array<uint32_t, 1> const source = {{ 0xB990 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB990 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_089)
{
    // B991;B991;1105 1174 11A8;B991;1105 1174 11A8; 
    // (릑; 릑; 릑; 릑; 릑; ) HANGUL SYLLABLE RYIG
    {
        std::array<uint32_t, 1> const source = {{ 0xB991 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB991 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_090)
{
    // B992;B992;1105 1174 11A9;B992;1105 1174 11A9; 
    // (릒; 릒; 릒; 릒; 릒; ) HANGUL SYLLABLE RYIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB992 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB992 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_091)
{
    // B993;B993;1105 1174 11AA;B993;1105 1174 11AA; 
    // (릓; 릓; 릓; 릓; 릓; ) HANGUL SYLLABLE RYIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB993 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB993 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_092)
{
    // B994;B994;1105 1174 11AB;B994;1105 1174 11AB; 
    // (릔; 릔; 릔; 릔; 릔; ) HANGUL SYLLABLE RYIN
    {
        std::array<uint32_t, 1> const source = {{ 0xB994 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB994 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_093)
{
    // B995;B995;1105 1174 11AC;B995;1105 1174 11AC; 
    // (릕; 릕; 릕; 릕; 릕; ) HANGUL SYLLABLE RYINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB995 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB995 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_094)
{
    // B996;B996;1105 1174 11AD;B996;1105 1174 11AD; 
    // (릖; 릖; 릖; 릖; 릖; ) HANGUL SYLLABLE RYINH
    {
        std::array<uint32_t, 1> const source = {{ 0xB996 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB996 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_095)
{
    // B997;B997;1105 1174 11AE;B997;1105 1174 11AE; 
    // (릗; 릗; 릗; 릗; 릗; ) HANGUL SYLLABLE RYID
    {
        std::array<uint32_t, 1> const source = {{ 0xB997 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB997 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_096)
{
    // B998;B998;1105 1174 11AF;B998;1105 1174 11AF; 
    // (릘; 릘; 릘; 릘; 릘; ) HANGUL SYLLABLE RYIL
    {
        std::array<uint32_t, 1> const source = {{ 0xB998 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB998 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_097)
{
    // B999;B999;1105 1174 11B0;B999;1105 1174 11B0; 
    // (릙; 릙; 릙; 릙; 릙; ) HANGUL SYLLABLE RYILG
    {
        std::array<uint32_t, 1> const source = {{ 0xB999 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB999 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_098)
{
    // B99A;B99A;1105 1174 11B1;B99A;1105 1174 11B1; 
    // (릚; 릚; 릚; 릚; 릚; ) HANGUL SYLLABLE RYILM
    {
        std::array<uint32_t, 1> const source = {{ 0xB99A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB99A }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_099)
{
    // B99B;B99B;1105 1174 11B2;B99B;1105 1174 11B2; 
    // (릛; 릛; 릛; 릛; 릛; ) HANGUL SYLLABLE RYILB
    {
        std::array<uint32_t, 1> const source = {{ 0xB99B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB99B }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_100)
{
    // B99C;B99C;1105 1174 11B3;B99C;1105 1174 11B3; 
    // (릜; 릜; 릜; 릜; 릜; ) HANGUL SYLLABLE RYILS
    {
        std::array<uint32_t, 1> const source = {{ 0xB99C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB99C }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_101)
{
    // B99D;B99D;1105 1174 11B4;B99D;1105 1174 11B4; 
    // (릝; 릝; 릝; 릝; 릝; ) HANGUL SYLLABLE RYILT
    {
        std::array<uint32_t, 1> const source = {{ 0xB99D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB99D }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_102)
{
    // B99E;B99E;1105 1174 11B5;B99E;1105 1174 11B5; 
    // (릞; 릞; 릞; 릞; 릞; ) HANGUL SYLLABLE RYILP
    {
        std::array<uint32_t, 1> const source = {{ 0xB99E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB99E }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_103)
{
    // B99F;B99F;1105 1174 11B6;B99F;1105 1174 11B6; 
    // (릟; 릟; 릟; 릟; 릟; ) HANGUL SYLLABLE RYILH
    {
        std::array<uint32_t, 1> const source = {{ 0xB99F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB99F }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_104)
{
    // B9A0;B9A0;1105 1174 11B7;B9A0;1105 1174 11B7; 
    // (릠; 릠; 릠; 릠; 릠; ) HANGUL SYLLABLE RYIM
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_105)
{
    // B9A1;B9A1;1105 1174 11B8;B9A1;1105 1174 11B8; 
    // (릡; 릡; 릡; 릡; 릡; ) HANGUL SYLLABLE RYIB
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_106)
{
    // B9A2;B9A2;1105 1174 11B9;B9A2;1105 1174 11B9; 
    // (릢; 릢; 릢; 릢; 릢; ) HANGUL SYLLABLE RYIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_107)
{
    // B9A3;B9A3;1105 1174 11BA;B9A3;1105 1174 11BA; 
    // (릣; 릣; 릣; 릣; 릣; ) HANGUL SYLLABLE RYIS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_108)
{
    // B9A4;B9A4;1105 1174 11BB;B9A4;1105 1174 11BB; 
    // (릤; 릤; 릤; 릤; 릤; ) HANGUL SYLLABLE RYISS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_109)
{
    // B9A5;B9A5;1105 1174 11BC;B9A5;1105 1174 11BC; 
    // (릥; 릥; 릥; 릥; 릥; ) HANGUL SYLLABLE RYING
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_110)
{
    // B9A6;B9A6;1105 1174 11BD;B9A6;1105 1174 11BD; 
    // (릦; 릦; 릦; 릦; 릦; ) HANGUL SYLLABLE RYIJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_111)
{
    // B9A7;B9A7;1105 1174 11BE;B9A7;1105 1174 11BE; 
    // (릧; 릧; 릧; 릧; 릧; ) HANGUL SYLLABLE RYIC
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_112)
{
    // B9A8;B9A8;1105 1174 11BF;B9A8;1105 1174 11BF; 
    // (릨; 릨; 릨; 릨; 릨; ) HANGUL SYLLABLE RYIK
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_113)
{
    // B9A9;B9A9;1105 1174 11C0;B9A9;1105 1174 11C0; 
    // (릩; 릩; 릩; 릩; 릩; ) HANGUL SYLLABLE RYIT
    {
        std::array<uint32_t, 1> const source = {{ 0xB9A9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9A9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_114)
{
    // B9AA;B9AA;1105 1174 11C1;B9AA;1105 1174 11C1; 
    // (릪; 릪; 릪; 릪; 릪; ) HANGUL SYLLABLE RYIP
    {
        std::array<uint32_t, 1> const source = {{ 0xB9AA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9AA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_115)
{
    // B9AB;B9AB;1105 1174 11C2;B9AB;1105 1174 11C2; 
    // (릫; 릫; 릫; 릫; 릫; ) HANGUL SYLLABLE RYIH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9AB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9AB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_116)
{
    // B9AC;B9AC;1105 1175;B9AC;1105 1175; 
    // (리; 리; 리; 리; 리; ) HANGUL SYLLABLE RI
    {
        std::array<uint32_t, 1> const source = {{ 0xB9AC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9AC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_117)
{
    // B9AD;B9AD;1105 1175 11A8;B9AD;1105 1175 11A8; 
    // (릭; 릭; 릭; 릭; 릭; ) HANGUL SYLLABLE RIG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9AD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9AD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_118)
{
    // B9AE;B9AE;1105 1175 11A9;B9AE;1105 1175 11A9; 
    // (릮; 릮; 릮; 릮; 릮; ) HANGUL SYLLABLE RIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9AE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9AE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_119)
{
    // B9AF;B9AF;1105 1175 11AA;B9AF;1105 1175 11AA; 
    // (릯; 릯; 릯; 릯; 릯; ) HANGUL SYLLABLE RIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9AF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9AF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_120)
{
    // B9B0;B9B0;1105 1175 11AB;B9B0;1105 1175 11AB; 
    // (린; 린; 린; 린; 린; ) HANGUL SYLLABLE RIN
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_121)
{
    // B9B1;B9B1;1105 1175 11AC;B9B1;1105 1175 11AC; 
    // (릱; 릱; 릱; 릱; 릱; ) HANGUL SYLLABLE RINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_122)
{
    // B9B2;B9B2;1105 1175 11AD;B9B2;1105 1175 11AD; 
    // (릲; 릲; 릲; 릲; 릲; ) HANGUL SYLLABLE RINH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_123)
{
    // B9B3;B9B3;1105 1175 11AE;B9B3;1105 1175 11AE; 
    // (릳; 릳; 릳; 릳; 릳; ) HANGUL SYLLABLE RID
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_124)
{
    // B9B4;B9B4;1105 1175 11AF;B9B4;1105 1175 11AF; 
    // (릴; 릴; 릴; 릴; 릴; ) HANGUL SYLLABLE RIL
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_125)
{
    // B9B5;B9B5;1105 1175 11B0;B9B5;1105 1175 11B0; 
    // (릵; 릵; 릵; 릵; 릵; ) HANGUL SYLLABLE RILG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_126)
{
    // B9B6;B9B6;1105 1175 11B1;B9B6;1105 1175 11B1; 
    // (릶; 릶; 릶; 릶; 릶; ) HANGUL SYLLABLE RILM
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_127)
{
    // B9B7;B9B7;1105 1175 11B2;B9B7;1105 1175 11B2; 
    // (릷; 릷; 릷; 릷; 릷; ) HANGUL SYLLABLE RILB
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_128)
{
    // B9B8;B9B8;1105 1175 11B3;B9B8;1105 1175 11B3; 
    // (릸; 릸; 릸; 릸; 릸; ) HANGUL SYLLABLE RILS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_129)
{
    // B9B9;B9B9;1105 1175 11B4;B9B9;1105 1175 11B4; 
    // (릹; 릹; 릹; 릹; 릹; ) HANGUL SYLLABLE RILT
    {
        std::array<uint32_t, 1> const source = {{ 0xB9B9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9B9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_130)
{
    // B9BA;B9BA;1105 1175 11B5;B9BA;1105 1175 11B5; 
    // (릺; 릺; 릺; 릺; 릺; ) HANGUL SYLLABLE RILP
    {
        std::array<uint32_t, 1> const source = {{ 0xB9BA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9BA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_131)
{
    // B9BB;B9BB;1105 1175 11B6;B9BB;1105 1175 11B6; 
    // (릻; 릻; 릻; 릻; 릻; ) HANGUL SYLLABLE RILH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9BB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9BB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_132)
{
    // B9BC;B9BC;1105 1175 11B7;B9BC;1105 1175 11B7; 
    // (림; 림; 림; 림; 림; ) HANGUL SYLLABLE RIM
    {
        std::array<uint32_t, 1> const source = {{ 0xB9BC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9BC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_133)
{
    // B9BD;B9BD;1105 1175 11B8;B9BD;1105 1175 11B8; 
    // (립; 립; 립; 립; 립; ) HANGUL SYLLABLE RIB
    {
        std::array<uint32_t, 1> const source = {{ 0xB9BD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9BD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_134)
{
    // B9BE;B9BE;1105 1175 11B9;B9BE;1105 1175 11B9; 
    // (릾; 릾; 릾; 릾; 릾; ) HANGUL SYLLABLE RIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9BE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9BE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_135)
{
    // B9BF;B9BF;1105 1175 11BA;B9BF;1105 1175 11BA; 
    // (릿; 릿; 릿; 릿; 릿; ) HANGUL SYLLABLE RIS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9BF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9BF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_136)
{
    // B9C0;B9C0;1105 1175 11BB;B9C0;1105 1175 11BB; 
    // (맀; 맀; 맀; 맀; 맀; ) HANGUL SYLLABLE RISS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_137)
{
    // B9C1;B9C1;1105 1175 11BC;B9C1;1105 1175 11BC; 
    // (링; 링; 링; 링; 링; ) HANGUL SYLLABLE RING
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_138)
{
    // B9C2;B9C2;1105 1175 11BD;B9C2;1105 1175 11BD; 
    // (맂; 맂; 맂; 맂; 맂; ) HANGUL SYLLABLE RIJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_139)
{
    // B9C3;B9C3;1105 1175 11BE;B9C3;1105 1175 11BE; 
    // (맃; 맃; 맃; 맃; 맃; ) HANGUL SYLLABLE RIC
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_140)
{
    // B9C4;B9C4;1105 1175 11BF;B9C4;1105 1175 11BF; 
    // (맄; 맄; 맄; 맄; 맄; ) HANGUL SYLLABLE RIK
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_141)
{
    // B9C5;B9C5;1105 1175 11C0;B9C5;1105 1175 11C0; 
    // (맅; 맅; 맅; 맅; 맅; ) HANGUL SYLLABLE RIT
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_142)
{
    // B9C6;B9C6;1105 1175 11C1;B9C6;1105 1175 11C1; 
    // (맆; 맆; 맆; 맆; 맆; ) HANGUL SYLLABLE RIP
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_143)
{
    // B9C7;B9C7;1105 1175 11C2;B9C7;1105 1175 11C2; 
    // (맇; 맇; 맇; 맇; 맇; ) HANGUL SYLLABLE RIH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_144)
{
    // B9C8;B9C8;1106 1161;B9C8;1106 1161; 
    // (마; 마; 마; 마; 마; ) HANGUL SYLLABLE MA
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_145)
{
    // B9C9;B9C9;1106 1161 11A8;B9C9;1106 1161 11A8; 
    // (막; 막; 막; 막; 막; ) HANGUL SYLLABLE MAG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9C9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9C9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_146)
{
    // B9CA;B9CA;1106 1161 11A9;B9CA;1106 1161 11A9; 
    // (맊; 맊; 맊; 맊; 맊; ) HANGUL SYLLABLE MAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9CA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9CA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_147)
{
    // B9CB;B9CB;1106 1161 11AA;B9CB;1106 1161 11AA; 
    // (맋; 맋; 맋; 맋; 맋; ) HANGUL SYLLABLE MAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9CB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9CB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_148)
{
    // B9CC;B9CC;1106 1161 11AB;B9CC;1106 1161 11AB; 
    // (만; 만; 만; 만; 만; ) HANGUL SYLLABLE MAN
    {
        std::array<uint32_t, 1> const source = {{ 0xB9CC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9CC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_149)
{
    // B9CD;B9CD;1106 1161 11AC;B9CD;1106 1161 11AC; 
    // (맍; 맍; 맍; 맍; 맍; ) HANGUL SYLLABLE MANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB9CD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9CD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_150)
{
    // B9CE;B9CE;1106 1161 11AD;B9CE;1106 1161 11AD; 
    // (많; 많; 많; 많; 많; ) HANGUL SYLLABLE MANH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9CE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9CE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_151)
{
    // B9CF;B9CF;1106 1161 11AE;B9CF;1106 1161 11AE; 
    // (맏; 맏; 맏; 맏; 맏; ) HANGUL SYLLABLE MAD
    {
        std::array<uint32_t, 1> const source = {{ 0xB9CF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9CF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_152)
{
    // B9D0;B9D0;1106 1161 11AF;B9D0;1106 1161 11AF; 
    // (말; 말; 말; 말; 말; ) HANGUL SYLLABLE MAL
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_153)
{
    // B9D1;B9D1;1106 1161 11B0;B9D1;1106 1161 11B0; 
    // (맑; 맑; 맑; 맑; 맑; ) HANGUL SYLLABLE MALG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_154)
{
    // B9D2;B9D2;1106 1161 11B1;B9D2;1106 1161 11B1; 
    // (맒; 맒; 맒; 맒; 맒; ) HANGUL SYLLABLE MALM
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_155)
{
    // B9D3;B9D3;1106 1161 11B2;B9D3;1106 1161 11B2; 
    // (맓; 맓; 맓; 맓; 맓; ) HANGUL SYLLABLE MALB
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_156)
{
    // B9D4;B9D4;1106 1161 11B3;B9D4;1106 1161 11B3; 
    // (맔; 맔; 맔; 맔; 맔; ) HANGUL SYLLABLE MALS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_157)
{
    // B9D5;B9D5;1106 1161 11B4;B9D5;1106 1161 11B4; 
    // (맕; 맕; 맕; 맕; 맕; ) HANGUL SYLLABLE MALT
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_158)
{
    // B9D6;B9D6;1106 1161 11B5;B9D6;1106 1161 11B5; 
    // (맖; 맖; 맖; 맖; 맖; ) HANGUL SYLLABLE MALP
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_159)
{
    // B9D7;B9D7;1106 1161 11B6;B9D7;1106 1161 11B6; 
    // (맗; 맗; 맗; 맗; 맗; ) HANGUL SYLLABLE MALH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_160)
{
    // B9D8;B9D8;1106 1161 11B7;B9D8;1106 1161 11B7; 
    // (맘; 맘; 맘; 맘; 맘; ) HANGUL SYLLABLE MAM
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_161)
{
    // B9D9;B9D9;1106 1161 11B8;B9D9;1106 1161 11B8; 
    // (맙; 맙; 맙; 맙; 맙; ) HANGUL SYLLABLE MAB
    {
        std::array<uint32_t, 1> const source = {{ 0xB9D9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9D9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_162)
{
    // B9DA;B9DA;1106 1161 11B9;B9DA;1106 1161 11B9; 
    // (맚; 맚; 맚; 맚; 맚; ) HANGUL SYLLABLE MABS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9DA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9DA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_163)
{
    // B9DB;B9DB;1106 1161 11BA;B9DB;1106 1161 11BA; 
    // (맛; 맛; 맛; 맛; 맛; ) HANGUL SYLLABLE MAS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9DB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9DB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_164)
{
    // B9DC;B9DC;1106 1161 11BB;B9DC;1106 1161 11BB; 
    // (맜; 맜; 맜; 맜; 맜; ) HANGUL SYLLABLE MASS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9DC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9DC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_165)
{
    // B9DD;B9DD;1106 1161 11BC;B9DD;1106 1161 11BC; 
    // (망; 망; 망; 망; 망; ) HANGUL SYLLABLE MANG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9DD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9DD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_166)
{
    // B9DE;B9DE;1106 1161 11BD;B9DE;1106 1161 11BD; 
    // (맞; 맞; 맞; 맞; 맞; ) HANGUL SYLLABLE MAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB9DE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9DE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_167)
{
    // B9DF;B9DF;1106 1161 11BE;B9DF;1106 1161 11BE; 
    // (맟; 맟; 맟; 맟; 맟; ) HANGUL SYLLABLE MAC
    {
        std::array<uint32_t, 1> const source = {{ 0xB9DF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9DF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_168)
{
    // B9E0;B9E0;1106 1161 11BF;B9E0;1106 1161 11BF; 
    // (맠; 맠; 맠; 맠; 맠; ) HANGUL SYLLABLE MAK
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_169)
{
    // B9E1;B9E1;1106 1161 11C0;B9E1;1106 1161 11C0; 
    // (맡; 맡; 맡; 맡; 맡; ) HANGUL SYLLABLE MAT
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_170)
{
    // B9E2;B9E2;1106 1161 11C1;B9E2;1106 1161 11C1; 
    // (맢; 맢; 맢; 맢; 맢; ) HANGUL SYLLABLE MAP
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_171)
{
    // B9E3;B9E3;1106 1161 11C2;B9E3;1106 1161 11C2; 
    // (맣; 맣; 맣; 맣; 맣; ) HANGUL SYLLABLE MAH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_172)
{
    // B9E4;B9E4;1106 1162;B9E4;1106 1162; 
    // (매; 매; 매; 매; 매; ) HANGUL SYLLABLE MAE
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_173)
{
    // B9E5;B9E5;1106 1162 11A8;B9E5;1106 1162 11A8; 
    // (맥; 맥; 맥; 맥; 맥; ) HANGUL SYLLABLE MAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_174)
{
    // B9E6;B9E6;1106 1162 11A9;B9E6;1106 1162 11A9; 
    // (맦; 맦; 맦; 맦; 맦; ) HANGUL SYLLABLE MAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_175)
{
    // B9E7;B9E7;1106 1162 11AA;B9E7;1106 1162 11AA; 
    // (맧; 맧; 맧; 맧; 맧; ) HANGUL SYLLABLE MAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_176)
{
    // B9E8;B9E8;1106 1162 11AB;B9E8;1106 1162 11AB; 
    // (맨; 맨; 맨; 맨; 맨; ) HANGUL SYLLABLE MAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_177)
{
    // B9E9;B9E9;1106 1162 11AC;B9E9;1106 1162 11AC; 
    // (맩; 맩; 맩; 맩; 맩; ) HANGUL SYLLABLE MAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB9E9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9E9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_178)
{
    // B9EA;B9EA;1106 1162 11AD;B9EA;1106 1162 11AD; 
    // (맪; 맪; 맪; 맪; 맪; ) HANGUL SYLLABLE MAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9EA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9EA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_179)
{
    // B9EB;B9EB;1106 1162 11AE;B9EB;1106 1162 11AE; 
    // (맫; 맫; 맫; 맫; 맫; ) HANGUL SYLLABLE MAED
    {
        std::array<uint32_t, 1> const source = {{ 0xB9EB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9EB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_180)
{
    // B9EC;B9EC;1106 1162 11AF;B9EC;1106 1162 11AF; 
    // (맬; 맬; 맬; 맬; 맬; ) HANGUL SYLLABLE MAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xB9EC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9EC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_181)
{
    // B9ED;B9ED;1106 1162 11B0;B9ED;1106 1162 11B0; 
    // (맭; 맭; 맭; 맭; 맭; ) HANGUL SYLLABLE MAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9ED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9ED }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_182)
{
    // B9EE;B9EE;1106 1162 11B1;B9EE;1106 1162 11B1; 
    // (맮; 맮; 맮; 맮; 맮; ) HANGUL SYLLABLE MAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xB9EE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9EE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_183)
{
    // B9EF;B9EF;1106 1162 11B2;B9EF;1106 1162 11B2; 
    // (맯; 맯; 맯; 맯; 맯; ) HANGUL SYLLABLE MAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xB9EF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9EF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_184)
{
    // B9F0;B9F0;1106 1162 11B3;B9F0;1106 1162 11B3; 
    // (맰; 맰; 맰; 맰; 맰; ) HANGUL SYLLABLE MAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F0 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_185)
{
    // B9F1;B9F1;1106 1162 11B4;B9F1;1106 1162 11B4; 
    // (맱; 맱; 맱; 맱; 맱; ) HANGUL SYLLABLE MAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F1 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_186)
{
    // B9F2;B9F2;1106 1162 11B5;B9F2;1106 1162 11B5; 
    // (맲; 맲; 맲; 맲; 맲; ) HANGUL SYLLABLE MAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F2 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_187)
{
    // B9F3;B9F3;1106 1162 11B6;B9F3;1106 1162 11B6; 
    // (맳; 맳; 맳; 맳; 맳; ) HANGUL SYLLABLE MAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F3 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_188)
{
    // B9F4;B9F4;1106 1162 11B7;B9F4;1106 1162 11B7; 
    // (맴; 맴; 맴; 맴; 맴; ) HANGUL SYLLABLE MAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F4 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_189)
{
    // B9F5;B9F5;1106 1162 11B8;B9F5;1106 1162 11B8; 
    // (맵; 맵; 맵; 맵; 맵; ) HANGUL SYLLABLE MAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F5 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_190)
{
    // B9F6;B9F6;1106 1162 11B9;B9F6;1106 1162 11B9; 
    // (맶; 맶; 맶; 맶; 맶; ) HANGUL SYLLABLE MAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F6 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_191)
{
    // B9F7;B9F7;1106 1162 11BA;B9F7;1106 1162 11BA; 
    // (맷; 맷; 맷; 맷; 맷; ) HANGUL SYLLABLE MAES
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F7 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_192)
{
    // B9F8;B9F8;1106 1162 11BB;B9F8;1106 1162 11BB; 
    // (맸; 맸; 맸; 맸; 맸; ) HANGUL SYLLABLE MAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F8 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_193)
{
    // B9F9;B9F9;1106 1162 11BC;B9F9;1106 1162 11BC; 
    // (맹; 맹; 맹; 맹; 맹; ) HANGUL SYLLABLE MAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xB9F9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9F9 }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_194)
{
    // B9FA;B9FA;1106 1162 11BD;B9FA;1106 1162 11BD; 
    // (맺; 맺; 맺; 맺; 맺; ) HANGUL SYLLABLE MAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xB9FA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9FA }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_195)
{
    // B9FB;B9FB;1106 1162 11BE;B9FB;1106 1162 11BE; 
    // (맻; 맻; 맻; 맻; 맻; ) HANGUL SYLLABLE MAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xB9FB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9FB }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_196)
{
    // B9FC;B9FC;1106 1162 11BF;B9FC;1106 1162 11BF; 
    // (맼; 맼; 맼; 맼; 맼; ) HANGUL SYLLABLE MAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xB9FC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9FC }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_197)
{
    // B9FD;B9FD;1106 1162 11C0;B9FD;1106 1162 11C0; 
    // (맽; 맽; 맽; 맽; 맽; ) HANGUL SYLLABLE MAET
    {
        std::array<uint32_t, 1> const source = {{ 0xB9FD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9FD }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_198)
{
    // B9FE;B9FE;1106 1162 11C1;B9FE;1106 1162 11C1; 
    // (맾; 맾; 맾; 맾; 맾; ) HANGUL SYLLABLE MAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xB9FE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9FE }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkc_029_199)
{
    // B9FF;B9FF;1106 1162 11C2;B9FF;1106 1162 11C2; 
    // (맿; 맿; 맿; 맿; 맿; ) HANGUL SYLLABLE MAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xB9FF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xB9FF }};

        boost::text::normalize_to_nfkc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


