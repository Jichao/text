// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_042_000)
{
    // 2CE8 003F;	
    // (⳨) COPTIC SYMBOL TAU RO	[0DB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE8, 0x003F };
    uint32_t const ces[9] = { 0x0DB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_001)
{
    // 2CE8 0061;	
    // (⳨) COPTIC SYMBOL TAU RO	[0DB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE8, 0x0061 };
    uint32_t const ces[9] = { 0x0DB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_002)
{
    // 2CE8 0041;	
    // (⳨) COPTIC SYMBOL TAU RO	[0DB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CE8, 0x0041 };
    uint32_t const ces[9] = { 0x0DB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_003)
{
    // 2CE8 0062;	
    // (⳨) COPTIC SYMBOL TAU RO	[0DB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE8, 0x0062 };
    uint32_t const ces[9] = { 0x0DB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_004)
{
    // 2CE9 0021;	
    // (⳩) COPTIC SYMBOL KHI RO	[0DB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE9, 0x0021 };
    uint32_t const ces[9] = { 0x0DB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_005)
{
    // 2CE9 003F;	
    // (⳩) COPTIC SYMBOL KHI RO	[0DB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE9, 0x003F };
    uint32_t const ces[9] = { 0x0DB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_006)
{
    // 2CE9 0061;	
    // (⳩) COPTIC SYMBOL KHI RO	[0DB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE9, 0x0061 };
    uint32_t const ces[9] = { 0x0DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_007)
{
    // 2CE9 0041;	
    // (⳩) COPTIC SYMBOL KHI RO	[0DB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CE9, 0x0041 };
    uint32_t const ces[9] = { 0x0DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_008)
{
    // 2CE9 0062;	
    // (⳩) COPTIC SYMBOL KHI RO	[0DB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE9, 0x0062 };
    uint32_t const ces[9] = { 0x0DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_009)
{
    // 2CEA 0021;	
    // (⳪) COPTIC SYMBOL SHIMA SIMA	[0DB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEA, 0x0021 };
    uint32_t const ces[9] = { 0x0DB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_010)
{
    // 2CEA 003F;	
    // (⳪) COPTIC SYMBOL SHIMA SIMA	[0DB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEA, 0x003F };
    uint32_t const ces[9] = { 0x0DB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_011)
{
    // 2CEA 0061;	
    // (⳪) COPTIC SYMBOL SHIMA SIMA	[0DB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEA, 0x0061 };
    uint32_t const ces[9] = { 0x0DB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_012)
{
    // 2CEA 0041;	
    // (⳪) COPTIC SYMBOL SHIMA SIMA	[0DB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CEA, 0x0041 };
    uint32_t const ces[9] = { 0x0DB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_013)
{
    // 2CEA 0062;	
    // (⳪) COPTIC SYMBOL SHIMA SIMA	[0DB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEA, 0x0062 };
    uint32_t const ces[9] = { 0x0DB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_014)
{
    // 2800 0021;	
    // (⠀) BRAILLE PATTERN BLANK	[0DB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2800, 0x0021 };
    uint32_t const ces[9] = { 0x0DB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_015)
{
    // 2800 003F;	
    // (⠀) BRAILLE PATTERN BLANK	[0DB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2800, 0x003F };
    uint32_t const ces[9] = { 0x0DB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_016)
{
    // 2800 0061;	
    // (⠀) BRAILLE PATTERN BLANK	[0DB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2800, 0x0061 };
    uint32_t const ces[9] = { 0x0DB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_017)
{
    // 2800 0041;	
    // (⠀) BRAILLE PATTERN BLANK	[0DB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2800, 0x0041 };
    uint32_t const ces[9] = { 0x0DB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_018)
{
    // 2800 0062;	
    // (⠀) BRAILLE PATTERN BLANK	[0DB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2800, 0x0062 };
    uint32_t const ces[9] = { 0x0DB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_019)
{
    // 2801 0021;	
    // (⠁) BRAILLE PATTERN DOTS-1	[0DB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2801, 0x0021 };
    uint32_t const ces[9] = { 0x0DB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_020)
{
    // 2801 003F;	
    // (⠁) BRAILLE PATTERN DOTS-1	[0DB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2801, 0x003F };
    uint32_t const ces[9] = { 0x0DB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_021)
{
    // 2801 0061;	
    // (⠁) BRAILLE PATTERN DOTS-1	[0DB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2801, 0x0061 };
    uint32_t const ces[9] = { 0x0DB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_022)
{
    // 2801 0041;	
    // (⠁) BRAILLE PATTERN DOTS-1	[0DB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2801, 0x0041 };
    uint32_t const ces[9] = { 0x0DB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_023)
{
    // 2801 0062;	
    // (⠁) BRAILLE PATTERN DOTS-1	[0DB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2801, 0x0062 };
    uint32_t const ces[9] = { 0x0DB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_024)
{
    // 2802 0021;	
    // (⠂) BRAILLE PATTERN DOTS-2	[0DB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2802, 0x0021 };
    uint32_t const ces[9] = { 0x0DB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_025)
{
    // 2802 003F;	
    // (⠂) BRAILLE PATTERN DOTS-2	[0DB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2802, 0x003F };
    uint32_t const ces[9] = { 0x0DB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_026)
{
    // 2802 0061;	
    // (⠂) BRAILLE PATTERN DOTS-2	[0DB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2802, 0x0061 };
    uint32_t const ces[9] = { 0x0DB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_027)
{
    // 2802 0041;	
    // (⠂) BRAILLE PATTERN DOTS-2	[0DB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2802, 0x0041 };
    uint32_t const ces[9] = { 0x0DB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_028)
{
    // 2802 0062;	
    // (⠂) BRAILLE PATTERN DOTS-2	[0DB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2802, 0x0062 };
    uint32_t const ces[9] = { 0x0DB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_029)
{
    // 2803 0021;	
    // (⠃) BRAILLE PATTERN DOTS-12	[0DB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2803, 0x0021 };
    uint32_t const ces[9] = { 0x0DB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_030)
{
    // 2803 003F;	
    // (⠃) BRAILLE PATTERN DOTS-12	[0DB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2803, 0x003F };
    uint32_t const ces[9] = { 0x0DB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_031)
{
    // 2803 0061;	
    // (⠃) BRAILLE PATTERN DOTS-12	[0DB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2803, 0x0061 };
    uint32_t const ces[9] = { 0x0DB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_032)
{
    // 2803 0041;	
    // (⠃) BRAILLE PATTERN DOTS-12	[0DB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2803, 0x0041 };
    uint32_t const ces[9] = { 0x0DB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_033)
{
    // 2803 0062;	
    // (⠃) BRAILLE PATTERN DOTS-12	[0DB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2803, 0x0062 };
    uint32_t const ces[9] = { 0x0DB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_034)
{
    // 2804 0021;	
    // (⠄) BRAILLE PATTERN DOTS-3	[0DB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2804, 0x0021 };
    uint32_t const ces[9] = { 0x0DB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_035)
{
    // 2804 003F;	
    // (⠄) BRAILLE PATTERN DOTS-3	[0DB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2804, 0x003F };
    uint32_t const ces[9] = { 0x0DB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_036)
{
    // 2804 0061;	
    // (⠄) BRAILLE PATTERN DOTS-3	[0DB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2804, 0x0061 };
    uint32_t const ces[9] = { 0x0DB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_037)
{
    // 2804 0041;	
    // (⠄) BRAILLE PATTERN DOTS-3	[0DB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2804, 0x0041 };
    uint32_t const ces[9] = { 0x0DB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_038)
{
    // 2804 0062;	
    // (⠄) BRAILLE PATTERN DOTS-3	[0DB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2804, 0x0062 };
    uint32_t const ces[9] = { 0x0DB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_039)
{
    // 2805 0021;	
    // (⠅) BRAILLE PATTERN DOTS-13	[0DB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2805, 0x0021 };
    uint32_t const ces[9] = { 0x0DB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_040)
{
    // 2805 003F;	
    // (⠅) BRAILLE PATTERN DOTS-13	[0DB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2805, 0x003F };
    uint32_t const ces[9] = { 0x0DB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_041)
{
    // 2805 0061;	
    // (⠅) BRAILLE PATTERN DOTS-13	[0DB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2805, 0x0061 };
    uint32_t const ces[9] = { 0x0DB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_042)
{
    // 2805 0041;	
    // (⠅) BRAILLE PATTERN DOTS-13	[0DB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2805, 0x0041 };
    uint32_t const ces[9] = { 0x0DB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_043)
{
    // 2805 0062;	
    // (⠅) BRAILLE PATTERN DOTS-13	[0DB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2805, 0x0062 };
    uint32_t const ces[9] = { 0x0DB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_044)
{
    // 2806 0021;	
    // (⠆) BRAILLE PATTERN DOTS-23	[0DBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2806, 0x0021 };
    uint32_t const ces[9] = { 0x0DBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_045)
{
    // 2806 003F;	
    // (⠆) BRAILLE PATTERN DOTS-23	[0DBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2806, 0x003F };
    uint32_t const ces[9] = { 0x0DBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_046)
{
    // 2806 0061;	
    // (⠆) BRAILLE PATTERN DOTS-23	[0DBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2806, 0x0061 };
    uint32_t const ces[9] = { 0x0DBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_047)
{
    // 2806 0041;	
    // (⠆) BRAILLE PATTERN DOTS-23	[0DBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2806, 0x0041 };
    uint32_t const ces[9] = { 0x0DBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_048)
{
    // 2806 0062;	
    // (⠆) BRAILLE PATTERN DOTS-23	[0DBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2806, 0x0062 };
    uint32_t const ces[9] = { 0x0DBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_049)
{
    // 2807 0021;	
    // (⠇) BRAILLE PATTERN DOTS-123	[0DBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2807, 0x0021 };
    uint32_t const ces[9] = { 0x0DBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_050)
{
    // 2807 003F;	
    // (⠇) BRAILLE PATTERN DOTS-123	[0DBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2807, 0x003F };
    uint32_t const ces[9] = { 0x0DBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_051)
{
    // 2807 0061;	
    // (⠇) BRAILLE PATTERN DOTS-123	[0DBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2807, 0x0061 };
    uint32_t const ces[9] = { 0x0DBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_052)
{
    // 2807 0041;	
    // (⠇) BRAILLE PATTERN DOTS-123	[0DBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2807, 0x0041 };
    uint32_t const ces[9] = { 0x0DBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_053)
{
    // 2807 0062;	
    // (⠇) BRAILLE PATTERN DOTS-123	[0DBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2807, 0x0062 };
    uint32_t const ces[9] = { 0x0DBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_054)
{
    // 2808 0021;	
    // (⠈) BRAILLE PATTERN DOTS-4	[0DBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2808, 0x0021 };
    uint32_t const ces[9] = { 0x0DBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_055)
{
    // 2808 003F;	
    // (⠈) BRAILLE PATTERN DOTS-4	[0DBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2808, 0x003F };
    uint32_t const ces[9] = { 0x0DBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_056)
{
    // 2808 0061;	
    // (⠈) BRAILLE PATTERN DOTS-4	[0DBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2808, 0x0061 };
    uint32_t const ces[9] = { 0x0DBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_057)
{
    // 2808 0041;	
    // (⠈) BRAILLE PATTERN DOTS-4	[0DBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2808, 0x0041 };
    uint32_t const ces[9] = { 0x0DBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_058)
{
    // 2808 0062;	
    // (⠈) BRAILLE PATTERN DOTS-4	[0DBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2808, 0x0062 };
    uint32_t const ces[9] = { 0x0DBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_059)
{
    // 2809 0021;	
    // (⠉) BRAILLE PATTERN DOTS-14	[0DBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2809, 0x0021 };
    uint32_t const ces[9] = { 0x0DBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_060)
{
    // 2809 003F;	
    // (⠉) BRAILLE PATTERN DOTS-14	[0DBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2809, 0x003F };
    uint32_t const ces[9] = { 0x0DBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_061)
{
    // 2809 0061;	
    // (⠉) BRAILLE PATTERN DOTS-14	[0DBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2809, 0x0061 };
    uint32_t const ces[9] = { 0x0DBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_062)
{
    // 2809 0041;	
    // (⠉) BRAILLE PATTERN DOTS-14	[0DBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2809, 0x0041 };
    uint32_t const ces[9] = { 0x0DBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_063)
{
    // 2809 0062;	
    // (⠉) BRAILLE PATTERN DOTS-14	[0DBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2809, 0x0062 };
    uint32_t const ces[9] = { 0x0DBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_064)
{
    // 280A 0021;	
    // (⠊) BRAILLE PATTERN DOTS-24	[0DBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280A, 0x0021 };
    uint32_t const ces[9] = { 0x0DBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_065)
{
    // 280A 003F;	
    // (⠊) BRAILLE PATTERN DOTS-24	[0DBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280A, 0x003F };
    uint32_t const ces[9] = { 0x0DBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_066)
{
    // 280A 0061;	
    // (⠊) BRAILLE PATTERN DOTS-24	[0DBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280A, 0x0061 };
    uint32_t const ces[9] = { 0x0DBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_067)
{
    // 280A 0041;	
    // (⠊) BRAILLE PATTERN DOTS-24	[0DBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x280A, 0x0041 };
    uint32_t const ces[9] = { 0x0DBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_068)
{
    // 280A 0062;	
    // (⠊) BRAILLE PATTERN DOTS-24	[0DBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280A, 0x0062 };
    uint32_t const ces[9] = { 0x0DBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_069)
{
    // 280B 0021;	
    // (⠋) BRAILLE PATTERN DOTS-124	[0DBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280B, 0x0021 };
    uint32_t const ces[9] = { 0x0DBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_070)
{
    // 280B 003F;	
    // (⠋) BRAILLE PATTERN DOTS-124	[0DBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280B, 0x003F };
    uint32_t const ces[9] = { 0x0DBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_071)
{
    // 280B 0061;	
    // (⠋) BRAILLE PATTERN DOTS-124	[0DBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280B, 0x0061 };
    uint32_t const ces[9] = { 0x0DBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_072)
{
    // 280B 0041;	
    // (⠋) BRAILLE PATTERN DOTS-124	[0DBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x280B, 0x0041 };
    uint32_t const ces[9] = { 0x0DBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_073)
{
    // 280B 0062;	
    // (⠋) BRAILLE PATTERN DOTS-124	[0DBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280B, 0x0062 };
    uint32_t const ces[9] = { 0x0DBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_074)
{
    // 280C 0021;	
    // (⠌) BRAILLE PATTERN DOTS-34	[0DC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280C, 0x0021 };
    uint32_t const ces[9] = { 0x0DC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_075)
{
    // 280C 003F;	
    // (⠌) BRAILLE PATTERN DOTS-34	[0DC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280C, 0x003F };
    uint32_t const ces[9] = { 0x0DC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_076)
{
    // 280C 0061;	
    // (⠌) BRAILLE PATTERN DOTS-34	[0DC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280C, 0x0061 };
    uint32_t const ces[9] = { 0x0DC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_077)
{
    // 280C 0041;	
    // (⠌) BRAILLE PATTERN DOTS-34	[0DC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x280C, 0x0041 };
    uint32_t const ces[9] = { 0x0DC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_078)
{
    // 280C 0062;	
    // (⠌) BRAILLE PATTERN DOTS-34	[0DC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280C, 0x0062 };
    uint32_t const ces[9] = { 0x0DC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_079)
{
    // 280D 0021;	
    // (⠍) BRAILLE PATTERN DOTS-134	[0DC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280D, 0x0021 };
    uint32_t const ces[9] = { 0x0DC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_080)
{
    // 280D 003F;	
    // (⠍) BRAILLE PATTERN DOTS-134	[0DC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280D, 0x003F };
    uint32_t const ces[9] = { 0x0DC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_081)
{
    // 280D 0061;	
    // (⠍) BRAILLE PATTERN DOTS-134	[0DC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280D, 0x0061 };
    uint32_t const ces[9] = { 0x0DC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_082)
{
    // 280D 0041;	
    // (⠍) BRAILLE PATTERN DOTS-134	[0DC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x280D, 0x0041 };
    uint32_t const ces[9] = { 0x0DC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_083)
{
    // 280D 0062;	
    // (⠍) BRAILLE PATTERN DOTS-134	[0DC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280D, 0x0062 };
    uint32_t const ces[9] = { 0x0DC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_084)
{
    // 280E 0021;	
    // (⠎) BRAILLE PATTERN DOTS-234	[0DC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280E, 0x0021 };
    uint32_t const ces[9] = { 0x0DC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_085)
{
    // 280E 003F;	
    // (⠎) BRAILLE PATTERN DOTS-234	[0DC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280E, 0x003F };
    uint32_t const ces[9] = { 0x0DC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_086)
{
    // 280E 0061;	
    // (⠎) BRAILLE PATTERN DOTS-234	[0DC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280E, 0x0061 };
    uint32_t const ces[9] = { 0x0DC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_087)
{
    // 280E 0041;	
    // (⠎) BRAILLE PATTERN DOTS-234	[0DC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x280E, 0x0041 };
    uint32_t const ces[9] = { 0x0DC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_088)
{
    // 280E 0062;	
    // (⠎) BRAILLE PATTERN DOTS-234	[0DC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280E, 0x0062 };
    uint32_t const ces[9] = { 0x0DC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_089)
{
    // 280F 0021;	
    // (⠏) BRAILLE PATTERN DOTS-1234	[0DC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280F, 0x0021 };
    uint32_t const ces[9] = { 0x0DC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_090)
{
    // 280F 003F;	
    // (⠏) BRAILLE PATTERN DOTS-1234	[0DC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280F, 0x003F };
    uint32_t const ces[9] = { 0x0DC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_091)
{
    // 280F 0061;	
    // (⠏) BRAILLE PATTERN DOTS-1234	[0DC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280F, 0x0061 };
    uint32_t const ces[9] = { 0x0DC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_092)
{
    // 280F 0041;	
    // (⠏) BRAILLE PATTERN DOTS-1234	[0DC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x280F, 0x0041 };
    uint32_t const ces[9] = { 0x0DC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_093)
{
    // 280F 0062;	
    // (⠏) BRAILLE PATTERN DOTS-1234	[0DC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x280F, 0x0062 };
    uint32_t const ces[9] = { 0x0DC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_094)
{
    // 2810 0021;	
    // (⠐) BRAILLE PATTERN DOTS-5	[0DC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2810, 0x0021 };
    uint32_t const ces[9] = { 0x0DC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_095)
{
    // 2810 003F;	
    // (⠐) BRAILLE PATTERN DOTS-5	[0DC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2810, 0x003F };
    uint32_t const ces[9] = { 0x0DC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_096)
{
    // 2810 0061;	
    // (⠐) BRAILLE PATTERN DOTS-5	[0DC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2810, 0x0061 };
    uint32_t const ces[9] = { 0x0DC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_097)
{
    // 2810 0041;	
    // (⠐) BRAILLE PATTERN DOTS-5	[0DC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2810, 0x0041 };
    uint32_t const ces[9] = { 0x0DC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_098)
{
    // 2810 0062;	
    // (⠐) BRAILLE PATTERN DOTS-5	[0DC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2810, 0x0062 };
    uint32_t const ces[9] = { 0x0DC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_099)
{
    // 2811 0021;	
    // (⠑) BRAILLE PATTERN DOTS-15	[0DC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2811, 0x0021 };
    uint32_t const ces[9] = { 0x0DC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_100)
{
    // 2811 003F;	
    // (⠑) BRAILLE PATTERN DOTS-15	[0DC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2811, 0x003F };
    uint32_t const ces[9] = { 0x0DC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_101)
{
    // 2811 0061;	
    // (⠑) BRAILLE PATTERN DOTS-15	[0DC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2811, 0x0061 };
    uint32_t const ces[9] = { 0x0DC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_102)
{
    // 2811 0041;	
    // (⠑) BRAILLE PATTERN DOTS-15	[0DC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2811, 0x0041 };
    uint32_t const ces[9] = { 0x0DC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_103)
{
    // 2811 0062;	
    // (⠑) BRAILLE PATTERN DOTS-15	[0DC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2811, 0x0062 };
    uint32_t const ces[9] = { 0x0DC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_104)
{
    // 2812 0021;	
    // (⠒) BRAILLE PATTERN DOTS-25	[0DC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2812, 0x0021 };
    uint32_t const ces[9] = { 0x0DC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_105)
{
    // 2812 003F;	
    // (⠒) BRAILLE PATTERN DOTS-25	[0DC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2812, 0x003F };
    uint32_t const ces[9] = { 0x0DC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_106)
{
    // 2812 0061;	
    // (⠒) BRAILLE PATTERN DOTS-25	[0DC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2812, 0x0061 };
    uint32_t const ces[9] = { 0x0DC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_107)
{
    // 2812 0041;	
    // (⠒) BRAILLE PATTERN DOTS-25	[0DC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2812, 0x0041 };
    uint32_t const ces[9] = { 0x0DC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_108)
{
    // 2812 0062;	
    // (⠒) BRAILLE PATTERN DOTS-25	[0DC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2812, 0x0062 };
    uint32_t const ces[9] = { 0x0DC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_109)
{
    // 2813 0021;	
    // (⠓) BRAILLE PATTERN DOTS-125	[0DC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2813, 0x0021 };
    uint32_t const ces[9] = { 0x0DC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_110)
{
    // 2813 003F;	
    // (⠓) BRAILLE PATTERN DOTS-125	[0DC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2813, 0x003F };
    uint32_t const ces[9] = { 0x0DC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_111)
{
    // 2813 0061;	
    // (⠓) BRAILLE PATTERN DOTS-125	[0DC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2813, 0x0061 };
    uint32_t const ces[9] = { 0x0DC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_112)
{
    // 2813 0041;	
    // (⠓) BRAILLE PATTERN DOTS-125	[0DC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2813, 0x0041 };
    uint32_t const ces[9] = { 0x0DC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_113)
{
    // 2813 0062;	
    // (⠓) BRAILLE PATTERN DOTS-125	[0DC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2813, 0x0062 };
    uint32_t const ces[9] = { 0x0DC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_114)
{
    // 2814 0021;	
    // (⠔) BRAILLE PATTERN DOTS-35	[0DC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2814, 0x0021 };
    uint32_t const ces[9] = { 0x0DC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_115)
{
    // 2814 003F;	
    // (⠔) BRAILLE PATTERN DOTS-35	[0DC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2814, 0x003F };
    uint32_t const ces[9] = { 0x0DC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_116)
{
    // 2814 0061;	
    // (⠔) BRAILLE PATTERN DOTS-35	[0DC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2814, 0x0061 };
    uint32_t const ces[9] = { 0x0DC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_117)
{
    // 2814 0041;	
    // (⠔) BRAILLE PATTERN DOTS-35	[0DC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2814, 0x0041 };
    uint32_t const ces[9] = { 0x0DC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_118)
{
    // 2814 0062;	
    // (⠔) BRAILLE PATTERN DOTS-35	[0DC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2814, 0x0062 };
    uint32_t const ces[9] = { 0x0DC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_119)
{
    // 2815 0021;	
    // (⠕) BRAILLE PATTERN DOTS-135	[0DC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2815, 0x0021 };
    uint32_t const ces[9] = { 0x0DC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_120)
{
    // 2815 003F;	
    // (⠕) BRAILLE PATTERN DOTS-135	[0DC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2815, 0x003F };
    uint32_t const ces[9] = { 0x0DC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_121)
{
    // 2815 0061;	
    // (⠕) BRAILLE PATTERN DOTS-135	[0DC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2815, 0x0061 };
    uint32_t const ces[9] = { 0x0DC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_122)
{
    // 2815 0041;	
    // (⠕) BRAILLE PATTERN DOTS-135	[0DC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2815, 0x0041 };
    uint32_t const ces[9] = { 0x0DC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_123)
{
    // 2815 0062;	
    // (⠕) BRAILLE PATTERN DOTS-135	[0DC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2815, 0x0062 };
    uint32_t const ces[9] = { 0x0DC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_124)
{
    // 2816 0021;	
    // (⠖) BRAILLE PATTERN DOTS-235	[0DCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2816, 0x0021 };
    uint32_t const ces[9] = { 0x0DCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_125)
{
    // 2816 003F;	
    // (⠖) BRAILLE PATTERN DOTS-235	[0DCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2816, 0x003F };
    uint32_t const ces[9] = { 0x0DCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_126)
{
    // 2816 0061;	
    // (⠖) BRAILLE PATTERN DOTS-235	[0DCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2816, 0x0061 };
    uint32_t const ces[9] = { 0x0DCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_127)
{
    // 2816 0041;	
    // (⠖) BRAILLE PATTERN DOTS-235	[0DCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2816, 0x0041 };
    uint32_t const ces[9] = { 0x0DCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_128)
{
    // 2816 0062;	
    // (⠖) BRAILLE PATTERN DOTS-235	[0DCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2816, 0x0062 };
    uint32_t const ces[9] = { 0x0DCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_129)
{
    // 2817 0021;	
    // (⠗) BRAILLE PATTERN DOTS-1235	[0DCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2817, 0x0021 };
    uint32_t const ces[9] = { 0x0DCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_130)
{
    // 2817 003F;	
    // (⠗) BRAILLE PATTERN DOTS-1235	[0DCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2817, 0x003F };
    uint32_t const ces[9] = { 0x0DCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_131)
{
    // 2817 0061;	
    // (⠗) BRAILLE PATTERN DOTS-1235	[0DCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2817, 0x0061 };
    uint32_t const ces[9] = { 0x0DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_132)
{
    // 2817 0041;	
    // (⠗) BRAILLE PATTERN DOTS-1235	[0DCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2817, 0x0041 };
    uint32_t const ces[9] = { 0x0DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_133)
{
    // 2817 0062;	
    // (⠗) BRAILLE PATTERN DOTS-1235	[0DCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2817, 0x0062 };
    uint32_t const ces[9] = { 0x0DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_134)
{
    // 2818 0021;	
    // (⠘) BRAILLE PATTERN DOTS-45	[0DCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2818, 0x0021 };
    uint32_t const ces[9] = { 0x0DCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_135)
{
    // 2818 003F;	
    // (⠘) BRAILLE PATTERN DOTS-45	[0DCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2818, 0x003F };
    uint32_t const ces[9] = { 0x0DCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_136)
{
    // 2818 0061;	
    // (⠘) BRAILLE PATTERN DOTS-45	[0DCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2818, 0x0061 };
    uint32_t const ces[9] = { 0x0DCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_137)
{
    // 2818 0041;	
    // (⠘) BRAILLE PATTERN DOTS-45	[0DCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2818, 0x0041 };
    uint32_t const ces[9] = { 0x0DCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_138)
{
    // 2818 0062;	
    // (⠘) BRAILLE PATTERN DOTS-45	[0DCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2818, 0x0062 };
    uint32_t const ces[9] = { 0x0DCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_139)
{
    // 2819 0021;	
    // (⠙) BRAILLE PATTERN DOTS-145	[0DCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2819, 0x0021 };
    uint32_t const ces[9] = { 0x0DCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_140)
{
    // 2819 003F;	
    // (⠙) BRAILLE PATTERN DOTS-145	[0DCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2819, 0x003F };
    uint32_t const ces[9] = { 0x0DCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_141)
{
    // 2819 0061;	
    // (⠙) BRAILLE PATTERN DOTS-145	[0DCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2819, 0x0061 };
    uint32_t const ces[9] = { 0x0DCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_142)
{
    // 2819 0041;	
    // (⠙) BRAILLE PATTERN DOTS-145	[0DCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2819, 0x0041 };
    uint32_t const ces[9] = { 0x0DCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_143)
{
    // 2819 0062;	
    // (⠙) BRAILLE PATTERN DOTS-145	[0DCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2819, 0x0062 };
    uint32_t const ces[9] = { 0x0DCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_144)
{
    // 281A 0021;	
    // (⠚) BRAILLE PATTERN DOTS-245	[0DCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281A, 0x0021 };
    uint32_t const ces[9] = { 0x0DCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_145)
{
    // 281A 003F;	
    // (⠚) BRAILLE PATTERN DOTS-245	[0DCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281A, 0x003F };
    uint32_t const ces[9] = { 0x0DCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_146)
{
    // 281A 0061;	
    // (⠚) BRAILLE PATTERN DOTS-245	[0DCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281A, 0x0061 };
    uint32_t const ces[9] = { 0x0DCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_147)
{
    // 281A 0041;	
    // (⠚) BRAILLE PATTERN DOTS-245	[0DCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x281A, 0x0041 };
    uint32_t const ces[9] = { 0x0DCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_148)
{
    // 281A 0062;	
    // (⠚) BRAILLE PATTERN DOTS-245	[0DCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281A, 0x0062 };
    uint32_t const ces[9] = { 0x0DCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_149)
{
    // 281B 0021;	
    // (⠛) BRAILLE PATTERN DOTS-1245	[0DCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281B, 0x0021 };
    uint32_t const ces[9] = { 0x0DCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_150)
{
    // 281B 003F;	
    // (⠛) BRAILLE PATTERN DOTS-1245	[0DCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281B, 0x003F };
    uint32_t const ces[9] = { 0x0DCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_151)
{
    // 281B 0061;	
    // (⠛) BRAILLE PATTERN DOTS-1245	[0DCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281B, 0x0061 };
    uint32_t const ces[9] = { 0x0DCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_152)
{
    // 281B 0041;	
    // (⠛) BRAILLE PATTERN DOTS-1245	[0DCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x281B, 0x0041 };
    uint32_t const ces[9] = { 0x0DCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_153)
{
    // 281B 0062;	
    // (⠛) BRAILLE PATTERN DOTS-1245	[0DCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281B, 0x0062 };
    uint32_t const ces[9] = { 0x0DCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_154)
{
    // 281C 0021;	
    // (⠜) BRAILLE PATTERN DOTS-345	[0DD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281C, 0x0021 };
    uint32_t const ces[9] = { 0x0DD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_155)
{
    // 281C 003F;	
    // (⠜) BRAILLE PATTERN DOTS-345	[0DD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281C, 0x003F };
    uint32_t const ces[9] = { 0x0DD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_156)
{
    // 281C 0061;	
    // (⠜) BRAILLE PATTERN DOTS-345	[0DD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281C, 0x0061 };
    uint32_t const ces[9] = { 0x0DD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_157)
{
    // 281C 0041;	
    // (⠜) BRAILLE PATTERN DOTS-345	[0DD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x281C, 0x0041 };
    uint32_t const ces[9] = { 0x0DD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_158)
{
    // 281C 0062;	
    // (⠜) BRAILLE PATTERN DOTS-345	[0DD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281C, 0x0062 };
    uint32_t const ces[9] = { 0x0DD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_159)
{
    // 281D 0021;	
    // (⠝) BRAILLE PATTERN DOTS-1345	[0DD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281D, 0x0021 };
    uint32_t const ces[9] = { 0x0DD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_160)
{
    // 281D 003F;	
    // (⠝) BRAILLE PATTERN DOTS-1345	[0DD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281D, 0x003F };
    uint32_t const ces[9] = { 0x0DD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_161)
{
    // 281D 0061;	
    // (⠝) BRAILLE PATTERN DOTS-1345	[0DD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281D, 0x0061 };
    uint32_t const ces[9] = { 0x0DD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_162)
{
    // 281D 0041;	
    // (⠝) BRAILLE PATTERN DOTS-1345	[0DD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x281D, 0x0041 };
    uint32_t const ces[9] = { 0x0DD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_163)
{
    // 281D 0062;	
    // (⠝) BRAILLE PATTERN DOTS-1345	[0DD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281D, 0x0062 };
    uint32_t const ces[9] = { 0x0DD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_164)
{
    // 281E 0021;	
    // (⠞) BRAILLE PATTERN DOTS-2345	[0DD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281E, 0x0021 };
    uint32_t const ces[9] = { 0x0DD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_165)
{
    // 281E 003F;	
    // (⠞) BRAILLE PATTERN DOTS-2345	[0DD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281E, 0x003F };
    uint32_t const ces[9] = { 0x0DD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_166)
{
    // 281E 0061;	
    // (⠞) BRAILLE PATTERN DOTS-2345	[0DD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281E, 0x0061 };
    uint32_t const ces[9] = { 0x0DD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_167)
{
    // 281E 0041;	
    // (⠞) BRAILLE PATTERN DOTS-2345	[0DD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x281E, 0x0041 };
    uint32_t const ces[9] = { 0x0DD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_168)
{
    // 281E 0062;	
    // (⠞) BRAILLE PATTERN DOTS-2345	[0DD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281E, 0x0062 };
    uint32_t const ces[9] = { 0x0DD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_169)
{
    // 281F 0021;	
    // (⠟) BRAILLE PATTERN DOTS-12345	[0DD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281F, 0x0021 };
    uint32_t const ces[9] = { 0x0DD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_170)
{
    // 281F 003F;	
    // (⠟) BRAILLE PATTERN DOTS-12345	[0DD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281F, 0x003F };
    uint32_t const ces[9] = { 0x0DD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_171)
{
    // 281F 0061;	
    // (⠟) BRAILLE PATTERN DOTS-12345	[0DD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281F, 0x0061 };
    uint32_t const ces[9] = { 0x0DD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_172)
{
    // 281F 0041;	
    // (⠟) BRAILLE PATTERN DOTS-12345	[0DD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x281F, 0x0041 };
    uint32_t const ces[9] = { 0x0DD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_173)
{
    // 281F 0062;	
    // (⠟) BRAILLE PATTERN DOTS-12345	[0DD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x281F, 0x0062 };
    uint32_t const ces[9] = { 0x0DD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_174)
{
    // 2820 0021;	
    // (⠠) BRAILLE PATTERN DOTS-6	[0DD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2820, 0x0021 };
    uint32_t const ces[9] = { 0x0DD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_175)
{
    // 2820 003F;	
    // (⠠) BRAILLE PATTERN DOTS-6	[0DD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2820, 0x003F };
    uint32_t const ces[9] = { 0x0DD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_176)
{
    // 2820 0061;	
    // (⠠) BRAILLE PATTERN DOTS-6	[0DD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2820, 0x0061 };
    uint32_t const ces[9] = { 0x0DD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_177)
{
    // 2820 0041;	
    // (⠠) BRAILLE PATTERN DOTS-6	[0DD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2820, 0x0041 };
    uint32_t const ces[9] = { 0x0DD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_178)
{
    // 2820 0062;	
    // (⠠) BRAILLE PATTERN DOTS-6	[0DD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2820, 0x0062 };
    uint32_t const ces[9] = { 0x0DD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_179)
{
    // 2821 0021;	
    // (⠡) BRAILLE PATTERN DOTS-16	[0DD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2821, 0x0021 };
    uint32_t const ces[9] = { 0x0DD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_180)
{
    // 2821 003F;	
    // (⠡) BRAILLE PATTERN DOTS-16	[0DD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2821, 0x003F };
    uint32_t const ces[9] = { 0x0DD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_181)
{
    // 2821 0061;	
    // (⠡) BRAILLE PATTERN DOTS-16	[0DD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2821, 0x0061 };
    uint32_t const ces[9] = { 0x0DD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_182)
{
    // 2821 0041;	
    // (⠡) BRAILLE PATTERN DOTS-16	[0DD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2821, 0x0041 };
    uint32_t const ces[9] = { 0x0DD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_183)
{
    // 2821 0062;	
    // (⠡) BRAILLE PATTERN DOTS-16	[0DD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2821, 0x0062 };
    uint32_t const ces[9] = { 0x0DD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_184)
{
    // 2822 0021;	
    // (⠢) BRAILLE PATTERN DOTS-26	[0DD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2822, 0x0021 };
    uint32_t const ces[9] = { 0x0DD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_185)
{
    // 2822 003F;	
    // (⠢) BRAILLE PATTERN DOTS-26	[0DD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2822, 0x003F };
    uint32_t const ces[9] = { 0x0DD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_186)
{
    // 2822 0061;	
    // (⠢) BRAILLE PATTERN DOTS-26	[0DD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2822, 0x0061 };
    uint32_t const ces[9] = { 0x0DD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_187)
{
    // 2822 0041;	
    // (⠢) BRAILLE PATTERN DOTS-26	[0DD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2822, 0x0041 };
    uint32_t const ces[9] = { 0x0DD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_188)
{
    // 2822 0062;	
    // (⠢) BRAILLE PATTERN DOTS-26	[0DD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2822, 0x0062 };
    uint32_t const ces[9] = { 0x0DD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_189)
{
    // 2823 0021;	
    // (⠣) BRAILLE PATTERN DOTS-126	[0DD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2823, 0x0021 };
    uint32_t const ces[9] = { 0x0DD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_190)
{
    // 2823 003F;	
    // (⠣) BRAILLE PATTERN DOTS-126	[0DD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2823, 0x003F };
    uint32_t const ces[9] = { 0x0DD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_191)
{
    // 2823 0061;	
    // (⠣) BRAILLE PATTERN DOTS-126	[0DD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2823, 0x0061 };
    uint32_t const ces[9] = { 0x0DD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_192)
{
    // 2823 0041;	
    // (⠣) BRAILLE PATTERN DOTS-126	[0DD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2823, 0x0041 };
    uint32_t const ces[9] = { 0x0DD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_193)
{
    // 2823 0062;	
    // (⠣) BRAILLE PATTERN DOTS-126	[0DD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2823, 0x0062 };
    uint32_t const ces[9] = { 0x0DD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_194)
{
    // 2824 0021;	
    // (⠤) BRAILLE PATTERN DOTS-36	[0DD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2824, 0x0021 };
    uint32_t const ces[9] = { 0x0DD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_195)
{
    // 2824 003F;	
    // (⠤) BRAILLE PATTERN DOTS-36	[0DD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2824, 0x003F };
    uint32_t const ces[9] = { 0x0DD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_196)
{
    // 2824 0061;	
    // (⠤) BRAILLE PATTERN DOTS-36	[0DD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2824, 0x0061 };
    uint32_t const ces[9] = { 0x0DD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_197)
{
    // 2824 0041;	
    // (⠤) BRAILLE PATTERN DOTS-36	[0DD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2824, 0x0041 };
    uint32_t const ces[9] = { 0x0DD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_198)
{
    // 2824 0062;	
    // (⠤) BRAILLE PATTERN DOTS-36	[0DD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2824, 0x0062 };
    uint32_t const ces[9] = { 0x0DD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_199)
{
    // 2825 0021;	
    // (⠥) BRAILLE PATTERN DOTS-136	[0DD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2825, 0x0021 };
    uint32_t const ces[9] = { 0x0DD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_200)
{
    // 2825 003F;	
    // (⠥) BRAILLE PATTERN DOTS-136	[0DD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2825, 0x003F };
    uint32_t const ces[9] = { 0x0DD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_201)
{
    // 2825 0061;	
    // (⠥) BRAILLE PATTERN DOTS-136	[0DD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2825, 0x0061 };
    uint32_t const ces[9] = { 0x0DD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_202)
{
    // 2825 0041;	
    // (⠥) BRAILLE PATTERN DOTS-136	[0DD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2825, 0x0041 };
    uint32_t const ces[9] = { 0x0DD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_203)
{
    // 2825 0062;	
    // (⠥) BRAILLE PATTERN DOTS-136	[0DD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2825, 0x0062 };
    uint32_t const ces[9] = { 0x0DD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_204)
{
    // 2826 0021;	
    // (⠦) BRAILLE PATTERN DOTS-236	[0DDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2826, 0x0021 };
    uint32_t const ces[9] = { 0x0DDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_205)
{
    // 2826 003F;	
    // (⠦) BRAILLE PATTERN DOTS-236	[0DDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2826, 0x003F };
    uint32_t const ces[9] = { 0x0DDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_206)
{
    // 2826 0061;	
    // (⠦) BRAILLE PATTERN DOTS-236	[0DDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2826, 0x0061 };
    uint32_t const ces[9] = { 0x0DDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_207)
{
    // 2826 0041;	
    // (⠦) BRAILLE PATTERN DOTS-236	[0DDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2826, 0x0041 };
    uint32_t const ces[9] = { 0x0DDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_208)
{
    // 2826 0062;	
    // (⠦) BRAILLE PATTERN DOTS-236	[0DDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2826, 0x0062 };
    uint32_t const ces[9] = { 0x0DDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_209)
{
    // 2827 0021;	
    // (⠧) BRAILLE PATTERN DOTS-1236	[0DDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2827, 0x0021 };
    uint32_t const ces[9] = { 0x0DDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_210)
{
    // 2827 003F;	
    // (⠧) BRAILLE PATTERN DOTS-1236	[0DDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2827, 0x003F };
    uint32_t const ces[9] = { 0x0DDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_211)
{
    // 2827 0061;	
    // (⠧) BRAILLE PATTERN DOTS-1236	[0DDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2827, 0x0061 };
    uint32_t const ces[9] = { 0x0DDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_212)
{
    // 2827 0041;	
    // (⠧) BRAILLE PATTERN DOTS-1236	[0DDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2827, 0x0041 };
    uint32_t const ces[9] = { 0x0DDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_213)
{
    // 2827 0062;	
    // (⠧) BRAILLE PATTERN DOTS-1236	[0DDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2827, 0x0062 };
    uint32_t const ces[9] = { 0x0DDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_214)
{
    // 2828 0021;	
    // (⠨) BRAILLE PATTERN DOTS-46	[0DDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2828, 0x0021 };
    uint32_t const ces[9] = { 0x0DDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_215)
{
    // 2828 003F;	
    // (⠨) BRAILLE PATTERN DOTS-46	[0DDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2828, 0x003F };
    uint32_t const ces[9] = { 0x0DDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_216)
{
    // 2828 0061;	
    // (⠨) BRAILLE PATTERN DOTS-46	[0DDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2828, 0x0061 };
    uint32_t const ces[9] = { 0x0DDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_217)
{
    // 2828 0041;	
    // (⠨) BRAILLE PATTERN DOTS-46	[0DDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2828, 0x0041 };
    uint32_t const ces[9] = { 0x0DDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_218)
{
    // 2828 0062;	
    // (⠨) BRAILLE PATTERN DOTS-46	[0DDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2828, 0x0062 };
    uint32_t const ces[9] = { 0x0DDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_219)
{
    // 2829 0021;	
    // (⠩) BRAILLE PATTERN DOTS-146	[0DDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2829, 0x0021 };
    uint32_t const ces[9] = { 0x0DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_220)
{
    // 2829 003F;	
    // (⠩) BRAILLE PATTERN DOTS-146	[0DDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2829, 0x003F };
    uint32_t const ces[9] = { 0x0DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_221)
{
    // 2829 0061;	
    // (⠩) BRAILLE PATTERN DOTS-146	[0DDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2829, 0x0061 };
    uint32_t const ces[9] = { 0x0DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_222)
{
    // 2829 0041;	
    // (⠩) BRAILLE PATTERN DOTS-146	[0DDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2829, 0x0041 };
    uint32_t const ces[9] = { 0x0DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_223)
{
    // 2829 0062;	
    // (⠩) BRAILLE PATTERN DOTS-146	[0DDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2829, 0x0062 };
    uint32_t const ces[9] = { 0x0DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_224)
{
    // 282A 0021;	
    // (⠪) BRAILLE PATTERN DOTS-246	[0DDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282A, 0x0021 };
    uint32_t const ces[9] = { 0x0DDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_225)
{
    // 282A 003F;	
    // (⠪) BRAILLE PATTERN DOTS-246	[0DDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282A, 0x003F };
    uint32_t const ces[9] = { 0x0DDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_226)
{
    // 282A 0061;	
    // (⠪) BRAILLE PATTERN DOTS-246	[0DDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282A, 0x0061 };
    uint32_t const ces[9] = { 0x0DDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_227)
{
    // 282A 0041;	
    // (⠪) BRAILLE PATTERN DOTS-246	[0DDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x282A, 0x0041 };
    uint32_t const ces[9] = { 0x0DDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_228)
{
    // 282A 0062;	
    // (⠪) BRAILLE PATTERN DOTS-246	[0DDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282A, 0x0062 };
    uint32_t const ces[9] = { 0x0DDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_229)
{
    // 282B 0021;	
    // (⠫) BRAILLE PATTERN DOTS-1246	[0DDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282B, 0x0021 };
    uint32_t const ces[9] = { 0x0DDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_230)
{
    // 282B 003F;	
    // (⠫) BRAILLE PATTERN DOTS-1246	[0DDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282B, 0x003F };
    uint32_t const ces[9] = { 0x0DDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_231)
{
    // 282B 0061;	
    // (⠫) BRAILLE PATTERN DOTS-1246	[0DDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282B, 0x0061 };
    uint32_t const ces[9] = { 0x0DDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_232)
{
    // 282B 0041;	
    // (⠫) BRAILLE PATTERN DOTS-1246	[0DDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x282B, 0x0041 };
    uint32_t const ces[9] = { 0x0DDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_233)
{
    // 282B 0062;	
    // (⠫) BRAILLE PATTERN DOTS-1246	[0DDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282B, 0x0062 };
    uint32_t const ces[9] = { 0x0DDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_234)
{
    // 282C 0021;	
    // (⠬) BRAILLE PATTERN DOTS-346	[0DE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282C, 0x0021 };
    uint32_t const ces[9] = { 0x0DE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_235)
{
    // 282C 003F;	
    // (⠬) BRAILLE PATTERN DOTS-346	[0DE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282C, 0x003F };
    uint32_t const ces[9] = { 0x0DE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_236)
{
    // 282C 0061;	
    // (⠬) BRAILLE PATTERN DOTS-346	[0DE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282C, 0x0061 };
    uint32_t const ces[9] = { 0x0DE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_237)
{
    // 282C 0041;	
    // (⠬) BRAILLE PATTERN DOTS-346	[0DE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x282C, 0x0041 };
    uint32_t const ces[9] = { 0x0DE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_238)
{
    // 282C 0062;	
    // (⠬) BRAILLE PATTERN DOTS-346	[0DE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282C, 0x0062 };
    uint32_t const ces[9] = { 0x0DE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_239)
{
    // 282D 0021;	
    // (⠭) BRAILLE PATTERN DOTS-1346	[0DE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282D, 0x0021 };
    uint32_t const ces[9] = { 0x0DE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_240)
{
    // 282D 003F;	
    // (⠭) BRAILLE PATTERN DOTS-1346	[0DE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282D, 0x003F };
    uint32_t const ces[9] = { 0x0DE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_241)
{
    // 282D 0061;	
    // (⠭) BRAILLE PATTERN DOTS-1346	[0DE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282D, 0x0061 };
    uint32_t const ces[9] = { 0x0DE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_242)
{
    // 282D 0041;	
    // (⠭) BRAILLE PATTERN DOTS-1346	[0DE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x282D, 0x0041 };
    uint32_t const ces[9] = { 0x0DE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_243)
{
    // 282D 0062;	
    // (⠭) BRAILLE PATTERN DOTS-1346	[0DE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282D, 0x0062 };
    uint32_t const ces[9] = { 0x0DE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_244)
{
    // 282E 0021;	
    // (⠮) BRAILLE PATTERN DOTS-2346	[0DE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282E, 0x0021 };
    uint32_t const ces[9] = { 0x0DE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_245)
{
    // 282E 003F;	
    // (⠮) BRAILLE PATTERN DOTS-2346	[0DE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282E, 0x003F };
    uint32_t const ces[9] = { 0x0DE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_246)
{
    // 282E 0061;	
    // (⠮) BRAILLE PATTERN DOTS-2346	[0DE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282E, 0x0061 };
    uint32_t const ces[9] = { 0x0DE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_247)
{
    // 282E 0041;	
    // (⠮) BRAILLE PATTERN DOTS-2346	[0DE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x282E, 0x0041 };
    uint32_t const ces[9] = { 0x0DE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_248)
{
    // 282E 0062;	
    // (⠮) BRAILLE PATTERN DOTS-2346	[0DE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282E, 0x0062 };
    uint32_t const ces[9] = { 0x0DE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_249)
{
    // 282F 0021;	
    // (⠯) BRAILLE PATTERN DOTS-12346	[0DE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282F, 0x0021 };
    uint32_t const ces[9] = { 0x0DE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_250)
{
    // 282F 003F;	
    // (⠯) BRAILLE PATTERN DOTS-12346	[0DE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282F, 0x003F };
    uint32_t const ces[9] = { 0x0DE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_251)
{
    // 282F 0061;	
    // (⠯) BRAILLE PATTERN DOTS-12346	[0DE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282F, 0x0061 };
    uint32_t const ces[9] = { 0x0DE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_252)
{
    // 282F 0041;	
    // (⠯) BRAILLE PATTERN DOTS-12346	[0DE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x282F, 0x0041 };
    uint32_t const ces[9] = { 0x0DE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_253)
{
    // 282F 0062;	
    // (⠯) BRAILLE PATTERN DOTS-12346	[0DE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x282F, 0x0062 };
    uint32_t const ces[9] = { 0x0DE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_254)
{
    // 2830 0021;	
    // (⠰) BRAILLE PATTERN DOTS-56	[0DE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2830, 0x0021 };
    uint32_t const ces[9] = { 0x0DE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_255)
{
    // 2830 003F;	
    // (⠰) BRAILLE PATTERN DOTS-56	[0DE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2830, 0x003F };
    uint32_t const ces[9] = { 0x0DE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_256)
{
    // 2830 0061;	
    // (⠰) BRAILLE PATTERN DOTS-56	[0DE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2830, 0x0061 };
    uint32_t const ces[9] = { 0x0DE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_257)
{
    // 2830 0041;	
    // (⠰) BRAILLE PATTERN DOTS-56	[0DE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2830, 0x0041 };
    uint32_t const ces[9] = { 0x0DE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_258)
{
    // 2830 0062;	
    // (⠰) BRAILLE PATTERN DOTS-56	[0DE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2830, 0x0062 };
    uint32_t const ces[9] = { 0x0DE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_259)
{
    // 2831 0021;	
    // (⠱) BRAILLE PATTERN DOTS-156	[0DE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2831, 0x0021 };
    uint32_t const ces[9] = { 0x0DE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_260)
{
    // 2831 003F;	
    // (⠱) BRAILLE PATTERN DOTS-156	[0DE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2831, 0x003F };
    uint32_t const ces[9] = { 0x0DE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_261)
{
    // 2831 0061;	
    // (⠱) BRAILLE PATTERN DOTS-156	[0DE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2831, 0x0061 };
    uint32_t const ces[9] = { 0x0DE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_262)
{
    // 2831 0041;	
    // (⠱) BRAILLE PATTERN DOTS-156	[0DE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2831, 0x0041 };
    uint32_t const ces[9] = { 0x0DE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_263)
{
    // 2831 0062;	
    // (⠱) BRAILLE PATTERN DOTS-156	[0DE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2831, 0x0062 };
    uint32_t const ces[9] = { 0x0DE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_264)
{
    // 2832 0021;	
    // (⠲) BRAILLE PATTERN DOTS-256	[0DE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2832, 0x0021 };
    uint32_t const ces[9] = { 0x0DE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_265)
{
    // 2832 003F;	
    // (⠲) BRAILLE PATTERN DOTS-256	[0DE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2832, 0x003F };
    uint32_t const ces[9] = { 0x0DE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_266)
{
    // 2832 0061;	
    // (⠲) BRAILLE PATTERN DOTS-256	[0DE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2832, 0x0061 };
    uint32_t const ces[9] = { 0x0DE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_267)
{
    // 2832 0041;	
    // (⠲) BRAILLE PATTERN DOTS-256	[0DE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2832, 0x0041 };
    uint32_t const ces[9] = { 0x0DE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_268)
{
    // 2832 0062;	
    // (⠲) BRAILLE PATTERN DOTS-256	[0DE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2832, 0x0062 };
    uint32_t const ces[9] = { 0x0DE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_269)
{
    // 2833 0021;	
    // (⠳) BRAILLE PATTERN DOTS-1256	[0DE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2833, 0x0021 };
    uint32_t const ces[9] = { 0x0DE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_270)
{
    // 2833 003F;	
    // (⠳) BRAILLE PATTERN DOTS-1256	[0DE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2833, 0x003F };
    uint32_t const ces[9] = { 0x0DE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_271)
{
    // 2833 0061;	
    // (⠳) BRAILLE PATTERN DOTS-1256	[0DE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2833, 0x0061 };
    uint32_t const ces[9] = { 0x0DE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_272)
{
    // 2833 0041;	
    // (⠳) BRAILLE PATTERN DOTS-1256	[0DE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2833, 0x0041 };
    uint32_t const ces[9] = { 0x0DE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_273)
{
    // 2833 0062;	
    // (⠳) BRAILLE PATTERN DOTS-1256	[0DE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2833, 0x0062 };
    uint32_t const ces[9] = { 0x0DE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_274)
{
    // 2834 0021;	
    // (⠴) BRAILLE PATTERN DOTS-356	[0DE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2834, 0x0021 };
    uint32_t const ces[9] = { 0x0DE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_275)
{
    // 2834 003F;	
    // (⠴) BRAILLE PATTERN DOTS-356	[0DE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2834, 0x003F };
    uint32_t const ces[9] = { 0x0DE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_276)
{
    // 2834 0061;	
    // (⠴) BRAILLE PATTERN DOTS-356	[0DE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2834, 0x0061 };
    uint32_t const ces[9] = { 0x0DE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_277)
{
    // 2834 0041;	
    // (⠴) BRAILLE PATTERN DOTS-356	[0DE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2834, 0x0041 };
    uint32_t const ces[9] = { 0x0DE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_278)
{
    // 2834 0062;	
    // (⠴) BRAILLE PATTERN DOTS-356	[0DE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2834, 0x0062 };
    uint32_t const ces[9] = { 0x0DE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_279)
{
    // 2835 0021;	
    // (⠵) BRAILLE PATTERN DOTS-1356	[0DE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2835, 0x0021 };
    uint32_t const ces[9] = { 0x0DE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_280)
{
    // 2835 003F;	
    // (⠵) BRAILLE PATTERN DOTS-1356	[0DE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2835, 0x003F };
    uint32_t const ces[9] = { 0x0DE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_281)
{
    // 2835 0061;	
    // (⠵) BRAILLE PATTERN DOTS-1356	[0DE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2835, 0x0061 };
    uint32_t const ces[9] = { 0x0DE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_282)
{
    // 2835 0041;	
    // (⠵) BRAILLE PATTERN DOTS-1356	[0DE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2835, 0x0041 };
    uint32_t const ces[9] = { 0x0DE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_283)
{
    // 2835 0062;	
    // (⠵) BRAILLE PATTERN DOTS-1356	[0DE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2835, 0x0062 };
    uint32_t const ces[9] = { 0x0DE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_284)
{
    // 2836 0021;	
    // (⠶) BRAILLE PATTERN DOTS-2356	[0DEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2836, 0x0021 };
    uint32_t const ces[9] = { 0x0DEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_285)
{
    // 2836 003F;	
    // (⠶) BRAILLE PATTERN DOTS-2356	[0DEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2836, 0x003F };
    uint32_t const ces[9] = { 0x0DEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_286)
{
    // 2836 0061;	
    // (⠶) BRAILLE PATTERN DOTS-2356	[0DEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2836, 0x0061 };
    uint32_t const ces[9] = { 0x0DEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_287)
{
    // 2836 0041;	
    // (⠶) BRAILLE PATTERN DOTS-2356	[0DEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2836, 0x0041 };
    uint32_t const ces[9] = { 0x0DEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_288)
{
    // 2836 0062;	
    // (⠶) BRAILLE PATTERN DOTS-2356	[0DEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2836, 0x0062 };
    uint32_t const ces[9] = { 0x0DEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_289)
{
    // 2837 0021;	
    // (⠷) BRAILLE PATTERN DOTS-12356	[0DEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2837, 0x0021 };
    uint32_t const ces[9] = { 0x0DEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_290)
{
    // 2837 003F;	
    // (⠷) BRAILLE PATTERN DOTS-12356	[0DEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2837, 0x003F };
    uint32_t const ces[9] = { 0x0DEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_291)
{
    // 2837 0061;	
    // (⠷) BRAILLE PATTERN DOTS-12356	[0DEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2837, 0x0061 };
    uint32_t const ces[9] = { 0x0DEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_292)
{
    // 2837 0041;	
    // (⠷) BRAILLE PATTERN DOTS-12356	[0DEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2837, 0x0041 };
    uint32_t const ces[9] = { 0x0DEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_293)
{
    // 2837 0062;	
    // (⠷) BRAILLE PATTERN DOTS-12356	[0DEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2837, 0x0062 };
    uint32_t const ces[9] = { 0x0DEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_294)
{
    // 2838 0021;	
    // (⠸) BRAILLE PATTERN DOTS-456	[0DEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2838, 0x0021 };
    uint32_t const ces[9] = { 0x0DEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_295)
{
    // 2838 003F;	
    // (⠸) BRAILLE PATTERN DOTS-456	[0DEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2838, 0x003F };
    uint32_t const ces[9] = { 0x0DEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_296)
{
    // 2838 0061;	
    // (⠸) BRAILLE PATTERN DOTS-456	[0DEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2838, 0x0061 };
    uint32_t const ces[9] = { 0x0DEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_297)
{
    // 2838 0041;	
    // (⠸) BRAILLE PATTERN DOTS-456	[0DEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2838, 0x0041 };
    uint32_t const ces[9] = { 0x0DEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_298)
{
    // 2838 0062;	
    // (⠸) BRAILLE PATTERN DOTS-456	[0DEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2838, 0x0062 };
    uint32_t const ces[9] = { 0x0DEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_299)
{
    // 2839 0021;	
    // (⠹) BRAILLE PATTERN DOTS-1456	[0DED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2839, 0x0021 };
    uint32_t const ces[9] = { 0x0DED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_300)
{
    // 2839 003F;	
    // (⠹) BRAILLE PATTERN DOTS-1456	[0DED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2839, 0x003F };
    uint32_t const ces[9] = { 0x0DED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_301)
{
    // 2839 0061;	
    // (⠹) BRAILLE PATTERN DOTS-1456	[0DED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2839, 0x0061 };
    uint32_t const ces[9] = { 0x0DED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_302)
{
    // 2839 0041;	
    // (⠹) BRAILLE PATTERN DOTS-1456	[0DED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2839, 0x0041 };
    uint32_t const ces[9] = { 0x0DED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_303)
{
    // 2839 0062;	
    // (⠹) BRAILLE PATTERN DOTS-1456	[0DED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2839, 0x0062 };
    uint32_t const ces[9] = { 0x0DED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_304)
{
    // 283A 0021;	
    // (⠺) BRAILLE PATTERN DOTS-2456	[0DEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283A, 0x0021 };
    uint32_t const ces[9] = { 0x0DEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_305)
{
    // 283A 003F;	
    // (⠺) BRAILLE PATTERN DOTS-2456	[0DEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283A, 0x003F };
    uint32_t const ces[9] = { 0x0DEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_306)
{
    // 283A 0061;	
    // (⠺) BRAILLE PATTERN DOTS-2456	[0DEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283A, 0x0061 };
    uint32_t const ces[9] = { 0x0DEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_307)
{
    // 283A 0041;	
    // (⠺) BRAILLE PATTERN DOTS-2456	[0DEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x283A, 0x0041 };
    uint32_t const ces[9] = { 0x0DEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_308)
{
    // 283A 0062;	
    // (⠺) BRAILLE PATTERN DOTS-2456	[0DEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283A, 0x0062 };
    uint32_t const ces[9] = { 0x0DEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_309)
{
    // 283B 0021;	
    // (⠻) BRAILLE PATTERN DOTS-12456	[0DEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283B, 0x0021 };
    uint32_t const ces[9] = { 0x0DEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_310)
{
    // 283B 003F;	
    // (⠻) BRAILLE PATTERN DOTS-12456	[0DEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283B, 0x003F };
    uint32_t const ces[9] = { 0x0DEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_311)
{
    // 283B 0061;	
    // (⠻) BRAILLE PATTERN DOTS-12456	[0DEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283B, 0x0061 };
    uint32_t const ces[9] = { 0x0DEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_312)
{
    // 283B 0041;	
    // (⠻) BRAILLE PATTERN DOTS-12456	[0DEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x283B, 0x0041 };
    uint32_t const ces[9] = { 0x0DEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_313)
{
    // 283B 0062;	
    // (⠻) BRAILLE PATTERN DOTS-12456	[0DEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283B, 0x0062 };
    uint32_t const ces[9] = { 0x0DEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_314)
{
    // 283C 0021;	
    // (⠼) BRAILLE PATTERN DOTS-3456	[0DF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283C, 0x0021 };
    uint32_t const ces[9] = { 0x0DF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_315)
{
    // 283C 003F;	
    // (⠼) BRAILLE PATTERN DOTS-3456	[0DF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283C, 0x003F };
    uint32_t const ces[9] = { 0x0DF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_316)
{
    // 283C 0061;	
    // (⠼) BRAILLE PATTERN DOTS-3456	[0DF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283C, 0x0061 };
    uint32_t const ces[9] = { 0x0DF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_317)
{
    // 283C 0041;	
    // (⠼) BRAILLE PATTERN DOTS-3456	[0DF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x283C, 0x0041 };
    uint32_t const ces[9] = { 0x0DF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_318)
{
    // 283C 0062;	
    // (⠼) BRAILLE PATTERN DOTS-3456	[0DF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283C, 0x0062 };
    uint32_t const ces[9] = { 0x0DF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_319)
{
    // 283D 0021;	
    // (⠽) BRAILLE PATTERN DOTS-13456	[0DF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283D, 0x0021 };
    uint32_t const ces[9] = { 0x0DF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_320)
{
    // 283D 003F;	
    // (⠽) BRAILLE PATTERN DOTS-13456	[0DF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283D, 0x003F };
    uint32_t const ces[9] = { 0x0DF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_321)
{
    // 283D 0061;	
    // (⠽) BRAILLE PATTERN DOTS-13456	[0DF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283D, 0x0061 };
    uint32_t const ces[9] = { 0x0DF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_322)
{
    // 283D 0041;	
    // (⠽) BRAILLE PATTERN DOTS-13456	[0DF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x283D, 0x0041 };
    uint32_t const ces[9] = { 0x0DF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_323)
{
    // 283D 0062;	
    // (⠽) BRAILLE PATTERN DOTS-13456	[0DF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283D, 0x0062 };
    uint32_t const ces[9] = { 0x0DF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_324)
{
    // 283E 0021;	
    // (⠾) BRAILLE PATTERN DOTS-23456	[0DF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283E, 0x0021 };
    uint32_t const ces[9] = { 0x0DF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_325)
{
    // 283E 003F;	
    // (⠾) BRAILLE PATTERN DOTS-23456	[0DF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283E, 0x003F };
    uint32_t const ces[9] = { 0x0DF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_326)
{
    // 283E 0061;	
    // (⠾) BRAILLE PATTERN DOTS-23456	[0DF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283E, 0x0061 };
    uint32_t const ces[9] = { 0x0DF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_327)
{
    // 283E 0041;	
    // (⠾) BRAILLE PATTERN DOTS-23456	[0DF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x283E, 0x0041 };
    uint32_t const ces[9] = { 0x0DF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_328)
{
    // 283E 0062;	
    // (⠾) BRAILLE PATTERN DOTS-23456	[0DF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283E, 0x0062 };
    uint32_t const ces[9] = { 0x0DF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_329)
{
    // 283F 0021;	
    // (⠿) BRAILLE PATTERN DOTS-123456	[0DF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283F, 0x0021 };
    uint32_t const ces[9] = { 0x0DF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_330)
{
    // 283F 003F;	
    // (⠿) BRAILLE PATTERN DOTS-123456	[0DF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283F, 0x003F };
    uint32_t const ces[9] = { 0x0DF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_331)
{
    // 283F 0061;	
    // (⠿) BRAILLE PATTERN DOTS-123456	[0DF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283F, 0x0061 };
    uint32_t const ces[9] = { 0x0DF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_332)
{
    // 283F 0041;	
    // (⠿) BRAILLE PATTERN DOTS-123456	[0DF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x283F, 0x0041 };
    uint32_t const ces[9] = { 0x0DF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_333)
{
    // 283F 0062;	
    // (⠿) BRAILLE PATTERN DOTS-123456	[0DF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x283F, 0x0062 };
    uint32_t const ces[9] = { 0x0DF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_334)
{
    // 2840 0021;	
    // (⡀) BRAILLE PATTERN DOTS-7	[0DF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2840, 0x0021 };
    uint32_t const ces[9] = { 0x0DF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_335)
{
    // 2840 003F;	
    // (⡀) BRAILLE PATTERN DOTS-7	[0DF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2840, 0x003F };
    uint32_t const ces[9] = { 0x0DF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_336)
{
    // 2840 0061;	
    // (⡀) BRAILLE PATTERN DOTS-7	[0DF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2840, 0x0061 };
    uint32_t const ces[9] = { 0x0DF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_337)
{
    // 2840 0041;	
    // (⡀) BRAILLE PATTERN DOTS-7	[0DF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2840, 0x0041 };
    uint32_t const ces[9] = { 0x0DF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_338)
{
    // 2840 0062;	
    // (⡀) BRAILLE PATTERN DOTS-7	[0DF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2840, 0x0062 };
    uint32_t const ces[9] = { 0x0DF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_339)
{
    // 2841 0021;	
    // (⡁) BRAILLE PATTERN DOTS-17	[0DF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2841, 0x0021 };
    uint32_t const ces[9] = { 0x0DF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_340)
{
    // 2841 003F;	
    // (⡁) BRAILLE PATTERN DOTS-17	[0DF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2841, 0x003F };
    uint32_t const ces[9] = { 0x0DF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_341)
{
    // 2841 0061;	
    // (⡁) BRAILLE PATTERN DOTS-17	[0DF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2841, 0x0061 };
    uint32_t const ces[9] = { 0x0DF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_342)
{
    // 2841 0041;	
    // (⡁) BRAILLE PATTERN DOTS-17	[0DF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2841, 0x0041 };
    uint32_t const ces[9] = { 0x0DF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_343)
{
    // 2841 0062;	
    // (⡁) BRAILLE PATTERN DOTS-17	[0DF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2841, 0x0062 };
    uint32_t const ces[9] = { 0x0DF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_344)
{
    // 2842 0021;	
    // (⡂) BRAILLE PATTERN DOTS-27	[0DF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2842, 0x0021 };
    uint32_t const ces[9] = { 0x0DF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_345)
{
    // 2842 003F;	
    // (⡂) BRAILLE PATTERN DOTS-27	[0DF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2842, 0x003F };
    uint32_t const ces[9] = { 0x0DF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_346)
{
    // 2842 0061;	
    // (⡂) BRAILLE PATTERN DOTS-27	[0DF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2842, 0x0061 };
    uint32_t const ces[9] = { 0x0DF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_347)
{
    // 2842 0041;	
    // (⡂) BRAILLE PATTERN DOTS-27	[0DF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2842, 0x0041 };
    uint32_t const ces[9] = { 0x0DF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_348)
{
    // 2842 0062;	
    // (⡂) BRAILLE PATTERN DOTS-27	[0DF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2842, 0x0062 };
    uint32_t const ces[9] = { 0x0DF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_349)
{
    // 2843 0021;	
    // (⡃) BRAILLE PATTERN DOTS-127	[0DF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2843, 0x0021 };
    uint32_t const ces[9] = { 0x0DF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_350)
{
    // 2843 003F;	
    // (⡃) BRAILLE PATTERN DOTS-127	[0DF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2843, 0x003F };
    uint32_t const ces[9] = { 0x0DF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_351)
{
    // 2843 0061;	
    // (⡃) BRAILLE PATTERN DOTS-127	[0DF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2843, 0x0061 };
    uint32_t const ces[9] = { 0x0DF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_352)
{
    // 2843 0041;	
    // (⡃) BRAILLE PATTERN DOTS-127	[0DF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2843, 0x0041 };
    uint32_t const ces[9] = { 0x0DF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_353)
{
    // 2843 0062;	
    // (⡃) BRAILLE PATTERN DOTS-127	[0DF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2843, 0x0062 };
    uint32_t const ces[9] = { 0x0DF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_354)
{
    // 2844 0021;	
    // (⡄) BRAILLE PATTERN DOTS-37	[0DF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2844, 0x0021 };
    uint32_t const ces[9] = { 0x0DF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_355)
{
    // 2844 003F;	
    // (⡄) BRAILLE PATTERN DOTS-37	[0DF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2844, 0x003F };
    uint32_t const ces[9] = { 0x0DF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_356)
{
    // 2844 0061;	
    // (⡄) BRAILLE PATTERN DOTS-37	[0DF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2844, 0x0061 };
    uint32_t const ces[9] = { 0x0DF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_357)
{
    // 2844 0041;	
    // (⡄) BRAILLE PATTERN DOTS-37	[0DF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2844, 0x0041 };
    uint32_t const ces[9] = { 0x0DF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_358)
{
    // 2844 0062;	
    // (⡄) BRAILLE PATTERN DOTS-37	[0DF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2844, 0x0062 };
    uint32_t const ces[9] = { 0x0DF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_359)
{
    // 2845 0021;	
    // (⡅) BRAILLE PATTERN DOTS-137	[0DF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2845, 0x0021 };
    uint32_t const ces[9] = { 0x0DF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_360)
{
    // 2845 003F;	
    // (⡅) BRAILLE PATTERN DOTS-137	[0DF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2845, 0x003F };
    uint32_t const ces[9] = { 0x0DF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_361)
{
    // 2845 0061;	
    // (⡅) BRAILLE PATTERN DOTS-137	[0DF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2845, 0x0061 };
    uint32_t const ces[9] = { 0x0DF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_362)
{
    // 2845 0041;	
    // (⡅) BRAILLE PATTERN DOTS-137	[0DF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2845, 0x0041 };
    uint32_t const ces[9] = { 0x0DF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_363)
{
    // 2845 0062;	
    // (⡅) BRAILLE PATTERN DOTS-137	[0DF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2845, 0x0062 };
    uint32_t const ces[9] = { 0x0DF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_364)
{
    // 2846 0021;	
    // (⡆) BRAILLE PATTERN DOTS-237	[0DFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2846, 0x0021 };
    uint32_t const ces[9] = { 0x0DFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_365)
{
    // 2846 003F;	
    // (⡆) BRAILLE PATTERN DOTS-237	[0DFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2846, 0x003F };
    uint32_t const ces[9] = { 0x0DFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_366)
{
    // 2846 0061;	
    // (⡆) BRAILLE PATTERN DOTS-237	[0DFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2846, 0x0061 };
    uint32_t const ces[9] = { 0x0DFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_367)
{
    // 2846 0041;	
    // (⡆) BRAILLE PATTERN DOTS-237	[0DFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2846, 0x0041 };
    uint32_t const ces[9] = { 0x0DFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_368)
{
    // 2846 0062;	
    // (⡆) BRAILLE PATTERN DOTS-237	[0DFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2846, 0x0062 };
    uint32_t const ces[9] = { 0x0DFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_369)
{
    // 2847 0021;	
    // (⡇) BRAILLE PATTERN DOTS-1237	[0DFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2847, 0x0021 };
    uint32_t const ces[9] = { 0x0DFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_370)
{
    // 2847 003F;	
    // (⡇) BRAILLE PATTERN DOTS-1237	[0DFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2847, 0x003F };
    uint32_t const ces[9] = { 0x0DFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_371)
{
    // 2847 0061;	
    // (⡇) BRAILLE PATTERN DOTS-1237	[0DFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2847, 0x0061 };
    uint32_t const ces[9] = { 0x0DFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_372)
{
    // 2847 0041;	
    // (⡇) BRAILLE PATTERN DOTS-1237	[0DFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2847, 0x0041 };
    uint32_t const ces[9] = { 0x0DFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_373)
{
    // 2847 0062;	
    // (⡇) BRAILLE PATTERN DOTS-1237	[0DFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2847, 0x0062 };
    uint32_t const ces[9] = { 0x0DFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_374)
{
    // 2848 0021;	
    // (⡈) BRAILLE PATTERN DOTS-47	[0DFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2848, 0x0021 };
    uint32_t const ces[9] = { 0x0DFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_375)
{
    // 2848 003F;	
    // (⡈) BRAILLE PATTERN DOTS-47	[0DFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2848, 0x003F };
    uint32_t const ces[9] = { 0x0DFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_376)
{
    // 2848 0061;	
    // (⡈) BRAILLE PATTERN DOTS-47	[0DFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2848, 0x0061 };
    uint32_t const ces[9] = { 0x0DFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_377)
{
    // 2848 0041;	
    // (⡈) BRAILLE PATTERN DOTS-47	[0DFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2848, 0x0041 };
    uint32_t const ces[9] = { 0x0DFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_378)
{
    // 2848 0062;	
    // (⡈) BRAILLE PATTERN DOTS-47	[0DFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2848, 0x0062 };
    uint32_t const ces[9] = { 0x0DFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_379)
{
    // 2849 0021;	
    // (⡉) BRAILLE PATTERN DOTS-147	[0DFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2849, 0x0021 };
    uint32_t const ces[9] = { 0x0DFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_380)
{
    // 2849 003F;	
    // (⡉) BRAILLE PATTERN DOTS-147	[0DFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2849, 0x003F };
    uint32_t const ces[9] = { 0x0DFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_381)
{
    // 2849 0061;	
    // (⡉) BRAILLE PATTERN DOTS-147	[0DFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2849, 0x0061 };
    uint32_t const ces[9] = { 0x0DFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_382)
{
    // 2849 0041;	
    // (⡉) BRAILLE PATTERN DOTS-147	[0DFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2849, 0x0041 };
    uint32_t const ces[9] = { 0x0DFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_383)
{
    // 2849 0062;	
    // (⡉) BRAILLE PATTERN DOTS-147	[0DFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2849, 0x0062 };
    uint32_t const ces[9] = { 0x0DFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_384)
{
    // 284A 0021;	
    // (⡊) BRAILLE PATTERN DOTS-247	[0DFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284A, 0x0021 };
    uint32_t const ces[9] = { 0x0DFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_385)
{
    // 284A 003F;	
    // (⡊) BRAILLE PATTERN DOTS-247	[0DFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284A, 0x003F };
    uint32_t const ces[9] = { 0x0DFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_386)
{
    // 284A 0061;	
    // (⡊) BRAILLE PATTERN DOTS-247	[0DFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284A, 0x0061 };
    uint32_t const ces[9] = { 0x0DFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_387)
{
    // 284A 0041;	
    // (⡊) BRAILLE PATTERN DOTS-247	[0DFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x284A, 0x0041 };
    uint32_t const ces[9] = { 0x0DFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_388)
{
    // 284A 0062;	
    // (⡊) BRAILLE PATTERN DOTS-247	[0DFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284A, 0x0062 };
    uint32_t const ces[9] = { 0x0DFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_389)
{
    // 284B 0021;	
    // (⡋) BRAILLE PATTERN DOTS-1247	[0DFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284B, 0x0021 };
    uint32_t const ces[9] = { 0x0DFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_390)
{
    // 284B 003F;	
    // (⡋) BRAILLE PATTERN DOTS-1247	[0DFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284B, 0x003F };
    uint32_t const ces[9] = { 0x0DFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_391)
{
    // 284B 0061;	
    // (⡋) BRAILLE PATTERN DOTS-1247	[0DFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284B, 0x0061 };
    uint32_t const ces[9] = { 0x0DFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_392)
{
    // 284B 0041;	
    // (⡋) BRAILLE PATTERN DOTS-1247	[0DFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x284B, 0x0041 };
    uint32_t const ces[9] = { 0x0DFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_393)
{
    // 284B 0062;	
    // (⡋) BRAILLE PATTERN DOTS-1247	[0DFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284B, 0x0062 };
    uint32_t const ces[9] = { 0x0DFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_394)
{
    // 284C 0021;	
    // (⡌) BRAILLE PATTERN DOTS-347	[0E00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284C, 0x0021 };
    uint32_t const ces[9] = { 0x0E00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_395)
{
    // 284C 003F;	
    // (⡌) BRAILLE PATTERN DOTS-347	[0E00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284C, 0x003F };
    uint32_t const ces[9] = { 0x0E00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_396)
{
    // 284C 0061;	
    // (⡌) BRAILLE PATTERN DOTS-347	[0E00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284C, 0x0061 };
    uint32_t const ces[9] = { 0x0E00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_397)
{
    // 284C 0041;	
    // (⡌) BRAILLE PATTERN DOTS-347	[0E00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x284C, 0x0041 };
    uint32_t const ces[9] = { 0x0E00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_398)
{
    // 284C 0062;	
    // (⡌) BRAILLE PATTERN DOTS-347	[0E00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284C, 0x0062 };
    uint32_t const ces[9] = { 0x0E00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_399)
{
    // 284D 0021;	
    // (⡍) BRAILLE PATTERN DOTS-1347	[0E01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284D, 0x0021 };
    uint32_t const ces[9] = { 0x0E01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_400)
{
    // 284D 003F;	
    // (⡍) BRAILLE PATTERN DOTS-1347	[0E01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284D, 0x003F };
    uint32_t const ces[9] = { 0x0E01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_401)
{
    // 284D 0061;	
    // (⡍) BRAILLE PATTERN DOTS-1347	[0E01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284D, 0x0061 };
    uint32_t const ces[9] = { 0x0E01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_402)
{
    // 284D 0041;	
    // (⡍) BRAILLE PATTERN DOTS-1347	[0E01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x284D, 0x0041 };
    uint32_t const ces[9] = { 0x0E01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_403)
{
    // 284D 0062;	
    // (⡍) BRAILLE PATTERN DOTS-1347	[0E01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284D, 0x0062 };
    uint32_t const ces[9] = { 0x0E01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_404)
{
    // 284E 0021;	
    // (⡎) BRAILLE PATTERN DOTS-2347	[0E02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284E, 0x0021 };
    uint32_t const ces[9] = { 0x0E02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_405)
{
    // 284E 003F;	
    // (⡎) BRAILLE PATTERN DOTS-2347	[0E02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284E, 0x003F };
    uint32_t const ces[9] = { 0x0E02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_406)
{
    // 284E 0061;	
    // (⡎) BRAILLE PATTERN DOTS-2347	[0E02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284E, 0x0061 };
    uint32_t const ces[9] = { 0x0E02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_407)
{
    // 284E 0041;	
    // (⡎) BRAILLE PATTERN DOTS-2347	[0E02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x284E, 0x0041 };
    uint32_t const ces[9] = { 0x0E02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_408)
{
    // 284E 0062;	
    // (⡎) BRAILLE PATTERN DOTS-2347	[0E02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284E, 0x0062 };
    uint32_t const ces[9] = { 0x0E02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_409)
{
    // 284F 0021;	
    // (⡏) BRAILLE PATTERN DOTS-12347	[0E03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284F, 0x0021 };
    uint32_t const ces[9] = { 0x0E03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_410)
{
    // 284F 003F;	
    // (⡏) BRAILLE PATTERN DOTS-12347	[0E03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284F, 0x003F };
    uint32_t const ces[9] = { 0x0E03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_411)
{
    // 284F 0061;	
    // (⡏) BRAILLE PATTERN DOTS-12347	[0E03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284F, 0x0061 };
    uint32_t const ces[9] = { 0x0E03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_412)
{
    // 284F 0041;	
    // (⡏) BRAILLE PATTERN DOTS-12347	[0E03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x284F, 0x0041 };
    uint32_t const ces[9] = { 0x0E03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_413)
{
    // 284F 0062;	
    // (⡏) BRAILLE PATTERN DOTS-12347	[0E03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x284F, 0x0062 };
    uint32_t const ces[9] = { 0x0E03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_414)
{
    // 2850 0021;	
    // (⡐) BRAILLE PATTERN DOTS-57	[0E04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2850, 0x0021 };
    uint32_t const ces[9] = { 0x0E04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_415)
{
    // 2850 003F;	
    // (⡐) BRAILLE PATTERN DOTS-57	[0E04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2850, 0x003F };
    uint32_t const ces[9] = { 0x0E04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_416)
{
    // 2850 0061;	
    // (⡐) BRAILLE PATTERN DOTS-57	[0E04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2850, 0x0061 };
    uint32_t const ces[9] = { 0x0E04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_417)
{
    // 2850 0041;	
    // (⡐) BRAILLE PATTERN DOTS-57	[0E04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2850, 0x0041 };
    uint32_t const ces[9] = { 0x0E04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_418)
{
    // 2850 0062;	
    // (⡐) BRAILLE PATTERN DOTS-57	[0E04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2850, 0x0062 };
    uint32_t const ces[9] = { 0x0E04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_419)
{
    // 2851 0021;	
    // (⡑) BRAILLE PATTERN DOTS-157	[0E05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2851, 0x0021 };
    uint32_t const ces[9] = { 0x0E05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_420)
{
    // 2851 003F;	
    // (⡑) BRAILLE PATTERN DOTS-157	[0E05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2851, 0x003F };
    uint32_t const ces[9] = { 0x0E05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_421)
{
    // 2851 0061;	
    // (⡑) BRAILLE PATTERN DOTS-157	[0E05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2851, 0x0061 };
    uint32_t const ces[9] = { 0x0E05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_422)
{
    // 2851 0041;	
    // (⡑) BRAILLE PATTERN DOTS-157	[0E05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2851, 0x0041 };
    uint32_t const ces[9] = { 0x0E05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_423)
{
    // 2851 0062;	
    // (⡑) BRAILLE PATTERN DOTS-157	[0E05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2851, 0x0062 };
    uint32_t const ces[9] = { 0x0E05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_424)
{
    // 2852 0021;	
    // (⡒) BRAILLE PATTERN DOTS-257	[0E06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2852, 0x0021 };
    uint32_t const ces[9] = { 0x0E06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_425)
{
    // 2852 003F;	
    // (⡒) BRAILLE PATTERN DOTS-257	[0E06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2852, 0x003F };
    uint32_t const ces[9] = { 0x0E06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_426)
{
    // 2852 0061;	
    // (⡒) BRAILLE PATTERN DOTS-257	[0E06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2852, 0x0061 };
    uint32_t const ces[9] = { 0x0E06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_427)
{
    // 2852 0041;	
    // (⡒) BRAILLE PATTERN DOTS-257	[0E06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2852, 0x0041 };
    uint32_t const ces[9] = { 0x0E06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_428)
{
    // 2852 0062;	
    // (⡒) BRAILLE PATTERN DOTS-257	[0E06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2852, 0x0062 };
    uint32_t const ces[9] = { 0x0E06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_429)
{
    // 2853 0021;	
    // (⡓) BRAILLE PATTERN DOTS-1257	[0E07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2853, 0x0021 };
    uint32_t const ces[9] = { 0x0E07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_430)
{
    // 2853 003F;	
    // (⡓) BRAILLE PATTERN DOTS-1257	[0E07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2853, 0x003F };
    uint32_t const ces[9] = { 0x0E07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_431)
{
    // 2853 0061;	
    // (⡓) BRAILLE PATTERN DOTS-1257	[0E07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2853, 0x0061 };
    uint32_t const ces[9] = { 0x0E07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_432)
{
    // 2853 0041;	
    // (⡓) BRAILLE PATTERN DOTS-1257	[0E07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2853, 0x0041 };
    uint32_t const ces[9] = { 0x0E07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_433)
{
    // 2853 0062;	
    // (⡓) BRAILLE PATTERN DOTS-1257	[0E07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2853, 0x0062 };
    uint32_t const ces[9] = { 0x0E07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_434)
{
    // 2854 0021;	
    // (⡔) BRAILLE PATTERN DOTS-357	[0E08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2854, 0x0021 };
    uint32_t const ces[9] = { 0x0E08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_435)
{
    // 2854 003F;	
    // (⡔) BRAILLE PATTERN DOTS-357	[0E08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2854, 0x003F };
    uint32_t const ces[9] = { 0x0E08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_436)
{
    // 2854 0061;	
    // (⡔) BRAILLE PATTERN DOTS-357	[0E08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2854, 0x0061 };
    uint32_t const ces[9] = { 0x0E08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_437)
{
    // 2854 0041;	
    // (⡔) BRAILLE PATTERN DOTS-357	[0E08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2854, 0x0041 };
    uint32_t const ces[9] = { 0x0E08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_438)
{
    // 2854 0062;	
    // (⡔) BRAILLE PATTERN DOTS-357	[0E08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2854, 0x0062 };
    uint32_t const ces[9] = { 0x0E08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_439)
{
    // 2855 0021;	
    // (⡕) BRAILLE PATTERN DOTS-1357	[0E09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2855, 0x0021 };
    uint32_t const ces[9] = { 0x0E09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_440)
{
    // 2855 003F;	
    // (⡕) BRAILLE PATTERN DOTS-1357	[0E09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2855, 0x003F };
    uint32_t const ces[9] = { 0x0E09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_441)
{
    // 2855 0061;	
    // (⡕) BRAILLE PATTERN DOTS-1357	[0E09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2855, 0x0061 };
    uint32_t const ces[9] = { 0x0E09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_442)
{
    // 2855 0041;	
    // (⡕) BRAILLE PATTERN DOTS-1357	[0E09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2855, 0x0041 };
    uint32_t const ces[9] = { 0x0E09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_443)
{
    // 2855 0062;	
    // (⡕) BRAILLE PATTERN DOTS-1357	[0E09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2855, 0x0062 };
    uint32_t const ces[9] = { 0x0E09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_444)
{
    // 2856 0021;	
    // (⡖) BRAILLE PATTERN DOTS-2357	[0E0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2856, 0x0021 };
    uint32_t const ces[9] = { 0x0E0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_445)
{
    // 2856 003F;	
    // (⡖) BRAILLE PATTERN DOTS-2357	[0E0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2856, 0x003F };
    uint32_t const ces[9] = { 0x0E0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_446)
{
    // 2856 0061;	
    // (⡖) BRAILLE PATTERN DOTS-2357	[0E0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2856, 0x0061 };
    uint32_t const ces[9] = { 0x0E0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_447)
{
    // 2856 0041;	
    // (⡖) BRAILLE PATTERN DOTS-2357	[0E0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2856, 0x0041 };
    uint32_t const ces[9] = { 0x0E0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_448)
{
    // 2856 0062;	
    // (⡖) BRAILLE PATTERN DOTS-2357	[0E0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2856, 0x0062 };
    uint32_t const ces[9] = { 0x0E0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_449)
{
    // 2857 0021;	
    // (⡗) BRAILLE PATTERN DOTS-12357	[0E0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2857, 0x0021 };
    uint32_t const ces[9] = { 0x0E0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_450)
{
    // 2857 003F;	
    // (⡗) BRAILLE PATTERN DOTS-12357	[0E0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2857, 0x003F };
    uint32_t const ces[9] = { 0x0E0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_451)
{
    // 2857 0061;	
    // (⡗) BRAILLE PATTERN DOTS-12357	[0E0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2857, 0x0061 };
    uint32_t const ces[9] = { 0x0E0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_452)
{
    // 2857 0041;	
    // (⡗) BRAILLE PATTERN DOTS-12357	[0E0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2857, 0x0041 };
    uint32_t const ces[9] = { 0x0E0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_453)
{
    // 2857 0062;	
    // (⡗) BRAILLE PATTERN DOTS-12357	[0E0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2857, 0x0062 };
    uint32_t const ces[9] = { 0x0E0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_454)
{
    // 2858 0021;	
    // (⡘) BRAILLE PATTERN DOTS-457	[0E0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2858, 0x0021 };
    uint32_t const ces[9] = { 0x0E0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_455)
{
    // 2858 003F;	
    // (⡘) BRAILLE PATTERN DOTS-457	[0E0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2858, 0x003F };
    uint32_t const ces[9] = { 0x0E0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_456)
{
    // 2858 0061;	
    // (⡘) BRAILLE PATTERN DOTS-457	[0E0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2858, 0x0061 };
    uint32_t const ces[9] = { 0x0E0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_457)
{
    // 2858 0041;	
    // (⡘) BRAILLE PATTERN DOTS-457	[0E0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2858, 0x0041 };
    uint32_t const ces[9] = { 0x0E0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_458)
{
    // 2858 0062;	
    // (⡘) BRAILLE PATTERN DOTS-457	[0E0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2858, 0x0062 };
    uint32_t const ces[9] = { 0x0E0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_459)
{
    // 2859 0021;	
    // (⡙) BRAILLE PATTERN DOTS-1457	[0E0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2859, 0x0021 };
    uint32_t const ces[9] = { 0x0E0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_460)
{
    // 2859 003F;	
    // (⡙) BRAILLE PATTERN DOTS-1457	[0E0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2859, 0x003F };
    uint32_t const ces[9] = { 0x0E0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_461)
{
    // 2859 0061;	
    // (⡙) BRAILLE PATTERN DOTS-1457	[0E0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2859, 0x0061 };
    uint32_t const ces[9] = { 0x0E0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_462)
{
    // 2859 0041;	
    // (⡙) BRAILLE PATTERN DOTS-1457	[0E0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2859, 0x0041 };
    uint32_t const ces[9] = { 0x0E0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_463)
{
    // 2859 0062;	
    // (⡙) BRAILLE PATTERN DOTS-1457	[0E0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2859, 0x0062 };
    uint32_t const ces[9] = { 0x0E0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_464)
{
    // 285A 0021;	
    // (⡚) BRAILLE PATTERN DOTS-2457	[0E0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285A, 0x0021 };
    uint32_t const ces[9] = { 0x0E0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_465)
{
    // 285A 003F;	
    // (⡚) BRAILLE PATTERN DOTS-2457	[0E0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285A, 0x003F };
    uint32_t const ces[9] = { 0x0E0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_466)
{
    // 285A 0061;	
    // (⡚) BRAILLE PATTERN DOTS-2457	[0E0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285A, 0x0061 };
    uint32_t const ces[9] = { 0x0E0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_467)
{
    // 285A 0041;	
    // (⡚) BRAILLE PATTERN DOTS-2457	[0E0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x285A, 0x0041 };
    uint32_t const ces[9] = { 0x0E0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_468)
{
    // 285A 0062;	
    // (⡚) BRAILLE PATTERN DOTS-2457	[0E0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285A, 0x0062 };
    uint32_t const ces[9] = { 0x0E0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_469)
{
    // 285B 0021;	
    // (⡛) BRAILLE PATTERN DOTS-12457	[0E0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285B, 0x0021 };
    uint32_t const ces[9] = { 0x0E0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_470)
{
    // 285B 003F;	
    // (⡛) BRAILLE PATTERN DOTS-12457	[0E0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285B, 0x003F };
    uint32_t const ces[9] = { 0x0E0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_471)
{
    // 285B 0061;	
    // (⡛) BRAILLE PATTERN DOTS-12457	[0E0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285B, 0x0061 };
    uint32_t const ces[9] = { 0x0E0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_472)
{
    // 285B 0041;	
    // (⡛) BRAILLE PATTERN DOTS-12457	[0E0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x285B, 0x0041 };
    uint32_t const ces[9] = { 0x0E0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_473)
{
    // 285B 0062;	
    // (⡛) BRAILLE PATTERN DOTS-12457	[0E0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285B, 0x0062 };
    uint32_t const ces[9] = { 0x0E0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_474)
{
    // 285C 0021;	
    // (⡜) BRAILLE PATTERN DOTS-3457	[0E10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285C, 0x0021 };
    uint32_t const ces[9] = { 0x0E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_475)
{
    // 285C 003F;	
    // (⡜) BRAILLE PATTERN DOTS-3457	[0E10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285C, 0x003F };
    uint32_t const ces[9] = { 0x0E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_476)
{
    // 285C 0061;	
    // (⡜) BRAILLE PATTERN DOTS-3457	[0E10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285C, 0x0061 };
    uint32_t const ces[9] = { 0x0E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_477)
{
    // 285C 0041;	
    // (⡜) BRAILLE PATTERN DOTS-3457	[0E10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x285C, 0x0041 };
    uint32_t const ces[9] = { 0x0E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_478)
{
    // 285C 0062;	
    // (⡜) BRAILLE PATTERN DOTS-3457	[0E10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285C, 0x0062 };
    uint32_t const ces[9] = { 0x0E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_479)
{
    // 285D 0021;	
    // (⡝) BRAILLE PATTERN DOTS-13457	[0E11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285D, 0x0021 };
    uint32_t const ces[9] = { 0x0E11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_480)
{
    // 285D 003F;	
    // (⡝) BRAILLE PATTERN DOTS-13457	[0E11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285D, 0x003F };
    uint32_t const ces[9] = { 0x0E11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_481)
{
    // 285D 0061;	
    // (⡝) BRAILLE PATTERN DOTS-13457	[0E11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285D, 0x0061 };
    uint32_t const ces[9] = { 0x0E11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_482)
{
    // 285D 0041;	
    // (⡝) BRAILLE PATTERN DOTS-13457	[0E11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x285D, 0x0041 };
    uint32_t const ces[9] = { 0x0E11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_483)
{
    // 285D 0062;	
    // (⡝) BRAILLE PATTERN DOTS-13457	[0E11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285D, 0x0062 };
    uint32_t const ces[9] = { 0x0E11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_484)
{
    // 285E 0021;	
    // (⡞) BRAILLE PATTERN DOTS-23457	[0E12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285E, 0x0021 };
    uint32_t const ces[9] = { 0x0E12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_485)
{
    // 285E 003F;	
    // (⡞) BRAILLE PATTERN DOTS-23457	[0E12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285E, 0x003F };
    uint32_t const ces[9] = { 0x0E12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_486)
{
    // 285E 0061;	
    // (⡞) BRAILLE PATTERN DOTS-23457	[0E12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285E, 0x0061 };
    uint32_t const ces[9] = { 0x0E12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_487)
{
    // 285E 0041;	
    // (⡞) BRAILLE PATTERN DOTS-23457	[0E12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x285E, 0x0041 };
    uint32_t const ces[9] = { 0x0E12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_488)
{
    // 285E 0062;	
    // (⡞) BRAILLE PATTERN DOTS-23457	[0E12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285E, 0x0062 };
    uint32_t const ces[9] = { 0x0E12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_489)
{
    // 285F 0021;	
    // (⡟) BRAILLE PATTERN DOTS-123457	[0E13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285F, 0x0021 };
    uint32_t const ces[9] = { 0x0E13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_490)
{
    // 285F 003F;	
    // (⡟) BRAILLE PATTERN DOTS-123457	[0E13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285F, 0x003F };
    uint32_t const ces[9] = { 0x0E13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_491)
{
    // 285F 0061;	
    // (⡟) BRAILLE PATTERN DOTS-123457	[0E13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285F, 0x0061 };
    uint32_t const ces[9] = { 0x0E13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_492)
{
    // 285F 0041;	
    // (⡟) BRAILLE PATTERN DOTS-123457	[0E13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x285F, 0x0041 };
    uint32_t const ces[9] = { 0x0E13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_493)
{
    // 285F 0062;	
    // (⡟) BRAILLE PATTERN DOTS-123457	[0E13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x285F, 0x0062 };
    uint32_t const ces[9] = { 0x0E13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_494)
{
    // 2860 0021;	
    // (⡠) BRAILLE PATTERN DOTS-67	[0E14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2860, 0x0021 };
    uint32_t const ces[9] = { 0x0E14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_495)
{
    // 2860 003F;	
    // (⡠) BRAILLE PATTERN DOTS-67	[0E14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2860, 0x003F };
    uint32_t const ces[9] = { 0x0E14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_496)
{
    // 2860 0061;	
    // (⡠) BRAILLE PATTERN DOTS-67	[0E14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2860, 0x0061 };
    uint32_t const ces[9] = { 0x0E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_497)
{
    // 2860 0041;	
    // (⡠) BRAILLE PATTERN DOTS-67	[0E14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2860, 0x0041 };
    uint32_t const ces[9] = { 0x0E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_498)
{
    // 2860 0062;	
    // (⡠) BRAILLE PATTERN DOTS-67	[0E14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2860, 0x0062 };
    uint32_t const ces[9] = { 0x0E14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_042_499)
{
    // 2861 0021;	
    // (⡡) BRAILLE PATTERN DOTS-167	[0E15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2861, 0x0021 };
    uint32_t const ces[9] = { 0x0E15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

